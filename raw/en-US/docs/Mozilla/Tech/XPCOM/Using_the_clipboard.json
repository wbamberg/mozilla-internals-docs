{
    "content": "<p>This section provides information about cutting, copying, and pasting to and from the clipboard.</p>\n\n<h2 id=\"The_Clipboard\" name=\"The_Clipboard\">The clipboard</h2>\n\n<p>Mozilla provides a number of interfaces for accessing the clipboard. The component <code>@mozilla.org/widget/clipboardhelper;1</code> can be used to copy text to the clipboard. This component implements the interface <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIClipboardHelper\" title=\"\">nsIClipboardHelper</a></code>, which has a function <code>copyString</code> that can be used to copy a string.</p>\n\n<pre class=\"brush: js\">const gClipboardHelper = Components.classes[\"@mozilla.org/widget/clipboardhelper;1\"]\n                                   .getService(Components.interfaces.nsIClipboardHelper);\ngClipboardHelper.copyString(\"Put me on the clipboard, please.\");\n</pre>\n\n<p>This example will first create a clipboard helper and then copy a short string to the clipboard. This method only works to put strings on the clipboard. For other types of data, such as URLs or images, you will need to use a more complex method.</p>\n\n<p>A component <code>@mozilla.org/widget/clipboard;1</code> and an interface <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIClipboard\" title=\"\">nsIClipboard</a></code> provide general access to the system clipboard. You can use them to copy and paste any type of data from your application to the clipboard. Three <a href=\"/en-US/docs/XPCOM\" title=\"en/XPCOM\">XPCOM</a> objects are needed to handle clipboard operations. The first is an object that holds the data to put on the clipboard. The second is the clipboard object. The third is an object which is used to transfer the data from the first object to the clipboard. The clipboard model in Mozilla requires you to perform the following steps to copy data:</p>\n\n<ol>\n <li>Create an XPCOM wrapper for the data which you want to put on the clipboard. This is needed because you can put anything on the clipboard from text to images.</li>\n <li>Create a transferring object. This object can be the component <code>@mozilla.org/widget/transferable;1</code> which implements the interface <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITransferable\" title=\"\">nsITransferable</a></code>.</li>\n <li>Initialize the transferring object with the nsILoadContext obtained from the window that is the source of the clipboard data. This ensures that if the copied data comes from a window in private browsing mode, the clipboard will be cleared when private browsing mode ends. For reading from the clipboard you can call the init method of the transferable with null as nsILoadContext, but you have to call it.</li>\n <li>Tell the transferring object about the type of data being copied.</li>\n <li>Tell the transferring object about the data to copy.</li>\n <li>Create a clipboard object which refers to the system clipboard.</li>\n <li>Tell the clipboard object to copy the data using the transferring object.</li>\n</ol>\n\n<p>You might wonder why a transferring object is needed instead of just putting the object directly on the clipboard. One reason is that some systems do not copy the data right away. Instead, they wait until the data is pasted. Another reason is that the transferable can hold multiple representations of the same data. For example, a piece of HTML can be represented in both its original HTML form and in plain text. If an application wants to get the data from the clipboard and doesn't understand HTML, it can use the plain text version. If it does understand HTML, it can grab that version. The transferring object will hold the clipboard contents until the application has decided what it needs. This allows the clipboard to be used by another application right away.</p>\n\n<p>Let's break down the steps needed to copy data to the clipboard. First, we need to create an XPCOM object to wrap what we want to copy. We'll assume that we want to copy some text. We will use the interface <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupportsString\" title=\"\">nsISupportsString</a></code> which can be used to represent strings (specifically, Unicode strings).</p>\n\n<p>The following boilerplate utility functions will be used in all later code examples.</p>\n\n<pre class=\"brush: js\">// Import the Services module for future use, if we're not in\n// a browser window where it's already loaded.\nComponents.utils.import('resource://gre/modules/Services.jsm');\n\n// Create a constructor for the built-in supports-string class.\nconst nsSupportsString = Components.Constructor(\"@mozilla.org/supports-string;1\", \"nsISupportsString\");\nfunction SupportsString(str) {\n    // Create an instance of the supports-string class\n    var res = nsSupportsString();\n\n    // Store the JavaScript string that we want to wrap in the new nsISupportsString object\n    res.data = str;\n    return res;\n}\n\n// Create a constructor for the built-in transferable class\nconst nsTransferable = Components.Constructor(\"@mozilla.org/widget/transferable;1\", \"nsITransferable\");\n\n// Create a wrapper to construct an nsITransferable instance and set its source to the given window, when necessary\nfunction Transferable(source) {\n    var res = nsTransferable();\n    if ('init' in res) {\n        // When passed a Window object, find a suitable privacy context for it.\n        if (source instanceof Ci.nsIDOMWindow)\n            // Note: in Gecko versions &gt;16, you can import the PrivateBrowsingUtils.jsm module\n            // and use PrivateBrowsingUtils.privacyContextFromWindow(sourceWindow) instead\n            source = source.QueryInterface(Ci.nsIInterfaceRequestor)\n                           .getInterface(Ci.nsIWebNavigation);\n\n        res.init(source);\n    }\n    return res;\n}\n</pre>\n\n<p>Here, the string \"Text to copy\" will be copied but you can replace this with the text string that you want to copy. Now that we have the object to copy, a transferring object needs to be created:</p>\n\n<pre class=\"brush: js\">var str = \"Text to copy\";\n\nvar trans = Transferable(sourceWindow);\ntrans.addDataFlavor(\"text/unicode\");\n// We multiply the length of the string by 2, since it's stored in 2-byte UTF-16\n// format internally.\ntrans.setTransferData(\"text/unicode\", SupportsString(str), str.length * 2);\n</pre>\n\n<p>The first line gets the transferring component which implements <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITransferable\" title=\"\">nsITransferable</a></code>. Next we need to initialize it with a \"privacy context\", which will ensure that source data from inside private browsing mode will be cleared when the mode is exited. Please note: the <code>sourceWindow</code> variable is a placeholder for whatever window owns the data being copied -- from any DOM element you can obtain it via <code>element.ownerDocument.defaultView</code>. If, <em>and only if</em>, you are placing data on the clipboard that is unrelated to web content the user is viewing, you can pass a <code>null</code> privacy context to the <code>init</code> method.</p>\n\n<p>The next step is to tell the transferable what type of data we want to use. The type of data is referred to as a data flavor. The function <code>addDataFlavor</code> is used to tell the transferable that it needs to transfer data of a certain flavor. In this case, we are transferring the flavor \"text/unicode\" which is a Unicode string. Then, the function <code>setTransferData</code> is called which copies the data from the string into the transferable. This function takes three parameters. The first is the flavor we are setting, the second is the object holding the string, and the third is the length of the data, in bytes. Here, the length is multiplied by two because we are using a Unicode string which requires two bytes per character.</p>\n\n<p>You can repeat the last two lines and call <code>addDataFlavor</code> and <code>setTransferData</code> for multiple flavors. That way, you could have a text version and an HTML version of the content. The <code>Transferable</code> object will hold its own copy of the data. When you've added all the flavors you want, you can put it all on the clipboard at once. The transferable object will hold all of the data that you want until you're ready to put it on the clipboard.</p>\n\n<pre class=\"brush: js\">Services.clipboard.setData(trans, null, Services.clipboard.kGlobalClipboard);</pre>\n\n<p>We get the system clipboard object and store it in the clip variable. We can copy the data to the clipboard by calling the function <code>setData</code>. The first parameter of this function is the transferable. The second parameter can usually be set to <code>null</code> but you could set it to an <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIClipboardOwner\" title=\"\">nsIClipboardOwner</a></code> so that you can tell when the data you've copied is overwritten by another copy operation. Call <code>setData</code> only when you're ready to copy to the system clipboard.</p>\n\n<p>The third parameter to <code>setData</code> (and the parameter to <code>emptyClipboard</code>) indicates which clipboard buffer to use. The above code uses the constant <code>kGlobalClipboard</code> for this, which refers to the global clipboard. This would be the same one that cut and paste operations from the Edit menu typically use. If you use <code>kSelectionClipboard</code> instead, you will copy into the selection buffer, which is generally only available on Unix systems.</p>\n\n<p>This multi-step process has resulted in text being copied on the clipboard. We can cut to the clipboard instead of copying by doing a copy and then deleting the original data. Normally, the text would be in a document or textbox. The code is put together below, with additional error checking:</p>\n\n<pre class=\"brush: js\">var copytext = \"Text to copy\";\n\nvar trans = Transferable(sourceWindow);\n\ntrans.addDataFlavor(\"text/unicode\");\ntrans.setTransferData(\"text/unicode\", SupportsString(copytext), copytext.length * 2);\n\nServices.clipboard.setData(trans, null, Services.clipboard.kGlobalClipboard);\n</pre>\n\n<p>The complete function shown below copies some text to the clipboard as HTML, as well as making it a clickable Hyperlink. So we've added a text flavor and an HTML flavor of the content. The <code>Transferable</code> object will hold both flavors.</p>\n\n<pre class=\"brush: js\">function copyLinkToClipboard(copyURL, copyLabel, sourceWindow) {\n    // generate the Unicode and HTML versions of the Link\n    var textUnicode = copyURL;\n    var textHtml = copyLabel.link(copyURL);\n\n    // add Unicode &amp; HTML flavors to the transferable widget\n    var trans = Transferable(sourceWindow);\n\n    trans.addDataFlavor(\"text/unicode\");\n    trans.setTransferData(\"text/unicode\", SupportsString(textUnicode), textUnicode.length * 2); // *2 because it's unicode\n\n    trans.addDataFlavor(\"text/html\");\n    trans.setTransferData(\"text/html\", SupportsString(textHtml), textHtml.length * 2); // *2 because it's unicode\t\n\n    // copy the transferable widget!\n    Services.clipboard.setData(trans, null, Services.clipboard.kGlobalClipboard);\n    return true;\n}\n</pre>\n\n<h2 id=\"Pasting_Clipboard_Contents\" name=\"Pasting_Clipboard_Contents\">Pasting Clipboard Contents</h2>\n\n<p>To paste data from the clipboard we can use a similar process, except we use <code>getData</code> instead of <code>setData</code> and <code>getTransferData</code> instead of <code>setTransferData</code>. Here are the steps to pasting:</p>\n\n<ol>\n <li>Create a clipboard object which refers to the system clipboard.</li>\n <li>Create a transferring object which implements the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITransferable\" title=\"\">nsITransferable</a></code> interface.</li>\n <li>Initialize the transferring object with a null privacy context, as long as this object will not be placed on the clipboard. Otherwise, use a one from a logical source window instead (see the description above).</li>\n <li>Tell the transferring object about the flavor of data you want to get.</li>\n <li>Retrieve the data from the clipboard and put it in the transferable.</li>\n <li>Get the data from the transferring object.</li>\n</ol>\n\n<p>The first steps are similar to that used for copying:</p>\n\n<pre class=\"brush: js\">var trans = Transferable();\ntrans.addDataFlavor(\"text/unicode\");\n</pre>\n\n<div class=\"note\">\n<p>Recall that <code>Transferable()</code> is a function from the boilerplate in the previous section. Instead, you can create a Ci.nsITransferable instance. The boilerplate may be a better method, but this method works as well.</p>\n\n<pre class=\"brush: js\">var trans = Cc[\"@mozilla.org/widget/transferable;1\"].createInstance(Ci.nsITransferable);\ntrans.init(null)\ntrans.addDataFlavor(\"text/unicode\");</pre>\n</div>\n\n<p>This code gets the system clipboard object and a transferable object. The flavor is added to the transferable. Next, we need to get the data from the clipboard:</p>\n\n<pre class=\"brush: js\">Services.clipboard.getData(trans, Services.clipboard.kGlobalClipboard);\n\nvar str       = {};\nvar strLength = {};\n\ntrans.getTransferData(\"text/unicode\", str, strLength);\n</pre>\n\n<p>The first line performs the opposite of <code>setData</code>. The data currently on the system clipboard is placed into the transferable. Next we create two JavaScript objects which will hold the return values from <code>getTransferData</code>.</p>\n\n<p>Then we use <code>getTransferData</code> to retrieve the data from the transferable. We specify the flavor we would like to get. The data will be converted if it is not available in the desired flavor, and a conversion from an available flavor is possible. If you originally copied data of multiple flavors onto the clipboard, you can retrieve the data in the best format necessary. For example, a textbox would accept \"text/unicode\" (or \"text/plain\") while a Composer window might accept HTML and image data.</p>\n\n<p>The variable <code>str</code> now holds the data from the clipboard. We need to convert the data back into a JavaScript string from an XPCOM object. The code below can be used for this purpose:</p>\n\n<pre class=\"brush: js\">if (str) {\n  var pastetext = str.value.QueryInterface(Ci.nsISupportsString).data;\n}</pre>\n\n<p>Because the data from the transferable is an <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupportsString\" title=\"\">nsISupportsString</a></code>, we need to convert it into a JavaScript string. The property <code>value</code> of the object filled in by <code>getTransferData</code>, which is <code>str</code> in this case, provides the actual value of the object.</p>\n\n<p>We assign the string to the variable <code>pastetext</code>. We can then put that into a textbox or other location as necessary.</p>\n\n<div class=\"originaldocinfo\">\n<h2 id=\"Original_Document_Information\" name=\"Original_Document_Information\">Original Document Information</h2>\n\n<ul>\n <li>Author(s): <a class=\"link-mailto\" href=\"mailto:enndeakin@sympatico.ca\">Neil Deakin</a></li>\n <li>Original Document: <a class=\"external\" href=\"http://xulplanet.com/tutorials/mozsdk/clipboard.php\" rel=\"freelink\">http://xulplanet.com/tutorials/mozsdk/clipboard.php</a></li>\n <li>Copyright Information: Copyright (C) <a class=\"link-mailto\" href=\"mailto:enndeakin@sympatico.ca\">Neil Deakin</a></li>\n</ul>\n</div>\n\n<p> </p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kscarfone\">kscarfone</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/najamelan\">najamelan</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Noitidart\">Noitidart</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/jdm\">jdm</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/willshanks\">willshanks</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kmaglione\">kmaglione</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/ethertank\">ethertank</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/wellington7\">wellington7</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sebastianzartner@gmx.de\">Sebastianzartner@gmx.de</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Brettz9\">Brettz9</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Enn\">Enn</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Riboribo\">Riboribo</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/RobinJet\">RobinJet</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ispiked\">Ispiked</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Andreas%20Wuest\">Andreas Wuest</a>",
    "title": "Using the clipboard"
}