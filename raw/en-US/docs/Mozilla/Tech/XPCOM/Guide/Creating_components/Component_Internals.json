{
    "content": "<p></p><div class=\"prevnext\" style=\"text-align: right;\">\n    <p><a href=\"/en-US/docs/Creating_XPCOM_Components/Using_XPCOM_Components\" style=\"float: left;\">« Previous</a><a href=\"/en-US/docs/Creating_XPCOM_Components/Creating_the_Component_Code\">Next  »</a></p>\n</div> Where the previous chapter described components from the perspective of a client of XPCOM components, this chapter discusses components from the perspective of the software developer. Read on to see how components are generally implemented in XPCOM, or you can skip to the next chapter, where the WebLock component tutorial takes you step by step through the component creation process. <span class=\"comment\">XXX mediawiki...</span><span class=\"comment\">XXX sucks</span><p></p>\n\n<h3 id=\"Creating_Components_in_C.2B.2B\" name=\"Creating_Components_in_C.2B.2B\">Creating Components in C++</h3>\n\n<p>Let's start by examining how XPCOM components are written in C++. The most common type of component is one that is written in C++ and compiled into a shared library (a <abbr title=\"Dynamic Link Library\">DLL</abbr> on a Windows system or a <abbr title=\"Dynamic Shared Object\">DSO</abbr> on Unix).</p>\n\n<p>The illustration below shows the basic relationship between the shared library containing the component implementation code you write and the XPCOM framework itself. In this diagram, the outer boundary is that of the module, the shared library in which a component is defined.</p>\n\n<p><span id=\"A_Component_in_the_XPCOM_Framework\"><a id=\"A_Component_in_the_XPCOM_Framework\"></a><strong>A Component in the XPCOM Framework</strong></span></p>\n\n<p><img alt=\"Image:component-internals-framework.png\" class=\"internal\" src=\"/@api/deki/files/615/=Component-internals-framework.png\"></p>\n\n<p>When you build a component or module and compile it into a library, it must export a single method named <code>NSGetModule</code>. This <code>NSGetModule</code> function is the entry point for accessing the library. It gets called during registration and unregistration of the component, and when XPCOM wants to discover what interfaces or classes the module/library implements. In this chapter we will outline this entire process.</p>\n\n<p>As <a href=\"#A_Component_in_the_XPCOM_Framework\">A Component in the XPCOM Framework</a> illustrates, in addition to the <code>NSGetModule</code> entry point, there are <code>nsIModule</code> and <code>nsIFactory</code> interfaces that control the actual creation of the component, and also the string and XPCOM glue parts, which we'll discuss in some detail in the next section (see <a href=\"/en/Creating_XPCOM_Components/Component_Internals#XPCOM_Glue\" title=\"en/Creating_XPCOM_Components/Component_Internals#XPCOM_Glue\">XPCOM Glue</a>). These latter supply ease-of-development utilities like smart pointers, generic modules support, and simple string implementations. The largest and possibly most complex part of a component is the code specific to the component itself.</p>\n\n<div class=\"side-note\">\n<p><span id=\"But_Where_Are_the_Components?\"><a id=\"But_Where_Are_the_Components?\"></a><strong>But Where Are the Components?</strong></span></p>\n\n<p>Components reside in modules, and those modules are defined in shared library files that typically sit in the <em>components</em> directory of an XPCOM application.</p>\n\n<p>A set of default libraries stored in this components directory makes up a typical Gecko installation, providing functionality that consists of networking, layout, composition, a cross-platform user interface, and others.</p>\n\n<p>Another, even more basic view of this relationship of components to the files and interfaces that define them is shown in <a href=\"/en/Creating_XPCOM_Components/Creating_the_Component_Code\" title=\"en/Creating_XPCOM_Components/Creating_the_Component_Code\">Onion Peel View of XPCOM Component Creation</a> in the next chapter. The component is an abstraction sitting between the actual module in which it is implemented and the objects that its factory code creates for use by clients.</p>\n</div>\n\n<h3 id=\"XPCOM_Initialization\" name=\"XPCOM_Initialization\">XPCOM Initialization</h3>\n\n<p>To understand why and when your component library gets called, it is important to understand the XPCOM initalization process. When an application starts up, that application may <em>initialize</em> XPCOM. The sequence of events that kicks off this XPCOM initialization may be triggered by user action or by the application startup itself. A web browser that embeds Gecko, for example, may initialize XPCOM at startup through the embedding APIs. Another application may delay this startup until XPCOM is needed for the first time. In either case, the initialization sequence within XPCOM is the same.</p>\n\n<p>XPCOM starts when the application makes a call to initialize it. Parameters passed to this startup call allow you to configure some aspects of XPCOM, including the customization of location of specific directories. The main purpose of the API at this point is to change which <em>components</em> directory XPCOM searches when it looks for XPCOM components. This is how the API is used, for example, in the <em>Gecko Runtime Environment</em> (GRE).</p>\n\n<div class=\"side-note\">\n<p><span id=\"XPCOM_Startup\"><a id=\"XPCOM_Startup\"></a><strong>XPCOM Startup</strong></span></p>\n\n<p>The six basic steps to XPCOM startup are as follows:</p>\n\n<ol>\n <li>Application starts XPCOM.</li>\n <li>XPCOM sends a notification that it's beginning startup.</li>\n <li>XPCOM finds and processes the <em>component manifest</em> (see <a href=\"#Component_Manifests\">Component Manifests</a> below).</li>\n <li>XPCOM finds and processes the <em>type library manifest</em> (see <a href=\"#Type_Library_Manifests\">Type Library Manifests</a> below).</li>\n <li>If there are new components, XPCOM registers them:\n  <ol>\n   <li>XPCOM calls autoregistration start.</li>\n   <li>XPCOM registers new components.</li>\n   <li>XPCOM calls autoregistration end.</li>\n  </ol>\n </li>\n <li>Complete XPCOM startup: XPCOM notifies that it's begun.</li>\n</ol>\n\n<p>Component manifests and type library manifests are described in the following section, <a href=\"#XPCOM_Registry_Manifests\">XPCOM Registry Manifests</a>.</p>\n</div>\n\n<h4 id=\"XPCOM_Registry_Manifests\" name=\"XPCOM_Registry_Manifests\">XPCOM Registry Manifests</h4>\n\n<p>XPCOM uses special files called manifests to track and persist information about the components to the local system. There are two types of manifests that XPCOM uses to track components:</p>\n\n<h5 id=\"Component_Manifests\" name=\"Component_Manifests\">Component Manifests</h5>\n\n<p>When XPCOM first starts up, it looks for the <em>component manifest</em>, which is a file that lists all registered components, and stores details on exactly what each component can do. XPCOM uses the component manifest to determine which components have been overridden. Starting with Mozilla 1.2, this file is named <code>compreg.dat</code> and exists in the <em>components</em> directory, but there are efforts to move it out of this location to a less application-centric (and thus more user-centric) location. Any Gecko-based application may choose to locate it elsewhere. XPCOM reads this file into an in-memory database.</p>\n\n<div class=\"side-note\">\n<p><span id=\"Component_Manifests\"><a id=\"Component_Manifests\"></a><strong>Component Manifests</strong></span></p>\n\n<p>The component manifest is a mapping of files to components and components to classes. It specifies the following information:</p>\n\n<ul>\n <li>Location on disk of registered components with file size</li>\n <li>Class ID to Location Mapping</li>\n <li>Contract ID to Class ID Mapping</li>\n</ul>\n\n<p>The component manifest maps component files to unique identifiers for the specific implementations (class IDs), which in turn are mapped to more general component identifiers (contract IDs).</p>\n</div>\n\n<h5 id=\"Type_Library_Manifests\" name=\"Type_Library_Manifests\">Type Library Manifests</h5>\n\n<p>Another important file that XPCOM reads in is the <em>type library manifest</em> file. This file is also located in the <em>components</em> directory and is named <code>xpti.dat</code>. It includes the location and search paths of all type library files on the system. This file also lists all known interfaces and links to the type library files that define these interface structures. These type library files are at the core of XPCOM scriptablity and the binary component architecture of XPCOM.</p>\n\n<div class=\"side-note\">\n<p><span id=\"Type_Library_Manifests\"><a id=\"Type_Library_Manifests\"></a><strong>Type Library Manifests</strong></span></p>\n\n<p>Type library manifests contain the following information:</p>\n\n<ul>\n <li>location of all type library files</li>\n <li>mapping of all known interfaces to type libraries where these structures are defined</li>\n</ul>\n</div>\n\n<p>Using the data in these two manifests, XPCOM knows exactly which component libraries have been installed and what implementations go with which interfaces. Additionally, it relates the components to the type libraries in which the binary representations of the interfaces they support are defined.</p>\n\n<p>The next section describes how to hook into the XPCOM startup and registration process and make the data about your component available in these manifests, so that your component will be found and registered at startup.</p>\n\n<h4 id=\"Registration_Methods_in_XPCOM\" name=\"Registration_Methods_in_XPCOM\">Registration Methods in XPCOM</h4>\n\n<div class=\"side-note\">\n<p><span id=\"What_Is_XPCOM_Registration?\"><a id=\"What_Is_XPCOM_Registration?\"></a><strong>What Is XPCOM Registration?</strong></span></p>\n\n<p>In a nutshell, registration is the process that makes XPCOM aware of your component(s). As this section and the next describe, you can register your component explicitly during installation, or with the <code>regxpcom</code> program, or you can use the autoregistration methods in the Service Manager to find and register components in a specified components directory:</p>\n\n<ul>\n <li>XPInstall APIs</li>\n <li><code>regxpcom</code> command-line tool</li>\n <li><code>nsIComponentRegistrar</code> APIs from Service Manager</li>\n</ul>\n\n<p>The registration process is fairly involved. This section introduces it in terms of XPCOM initialization, and the next chapter describes what you have to do in your component code to register your component with XPCOM.</p>\n</div>\n\n<p>Once the manifest files are read in, XPCOM checks to see if there are any components that need to be registered. There are two supported ways to go about registering your XPCOM component. The first is to use <em>XPInstall</em>, which is an installation technology that may or may not come with a Gecko application and provides interfaces for registering your component during installation. Another, more explicit way to register your component is to run the application <code>regxpcom</code>, which is built as part of Mozilla and is also available in the Gecko SDK. <code>regxpcom</code> registers your component in the default component registry.</p>\n\n<p>A Gecko embedding application may also provide its own way of registering XPCOM components using the interface that is in fact used by both XPInstall and <code>regxpcom</code>, <code>nsIComponentRegistrar</code>. An application, for example, could provide a \"registration-less\" component directory whose components are automatically registered at startup and unregistered at shutdown. Component discovery does not currently happen automatically in non-debug builds of Gecko, however.</p>\n\n<p>When the registration process begins, XPCOM broadcasts to all registered observers a notification that says XPCOM has begun the registration of new components. After all components are registered, another notification is fired saying that XPCOM is done with the registration step. The <code>nsIObserver</code> interface that handles this notification is discussed in <a href=\"/en/Creating_XPCOM_Components/Starting_WebLock\" title=\"en/Creating_XPCOM_Components/Starting_WebLock\">Starting WebLock</a>.</p>\n\n<p>Once registration is complete and the notifications have fired, XPCOM is ready to be used by the application. If XPCOM registered your component, then it will be available to other parts of the XPCOM system. The <a href=\"#XPCOM_Initialization\">XPCOM Initialization</a> section in this chapter describes registration in more detail.</p>\n\n<h4 id=\"Autoregistration\" name=\"Autoregistration\">Autoregistration</h4>\n\n<p>The term <em>autoregistration</em> is sometimes used synonymously with registration in XPCOM. In the <a href=\"#What_Is_XPCOM_Registration?\">What Is XPCOM Registration?</a> note, we describe the three ways you can register components with XPCOM. Sometimes, applications use the <code>nsIComponentRegistrar</code> interface and create their own code for watching a particular directory and registering new components that are added there, which is what's often referred to as <em>autoregistration</em>. You should always know what the installation and registration requirements are for the applications that will be using your component.</p>\n\n<h4 id=\"The_Shutdown_Process\" name=\"The_Shutdown_Process\">The Shutdown Process</h4>\n\n<p>When the application is ready to shutdown XPCOM, it calls <code>NS_ShutdownXPCOM</code>. When that method is called, the following sequence of events occurs:</p>\n\n<ol>\n <li>XPCOM fires a shutdown notification to all registered observers.</li>\n <li>XPCOM closes down the Component Manager, the Service Manager and associated services.</li>\n <li>XPCOM frees all global services.</li>\n <li>NS_ShutdownXPCOM returns and the application may exit normally.</li>\n</ol>\n\n<div class=\"side-note\">\n<p><span id=\"The_Unstoppable_Shutdown\"><a id=\"The_Unstoppable_Shutdown\"></a><strong>The Unstoppable Shutdown</strong></span></p>\n\n<p>Note that shutdown observation is unstoppable. In other words, the event you observe cannot be used to implement something like a \"Are you sure you want to Quit?\" dialog. Rather, the shutdown event gives the component or embedding application a last chance to clean up any leftovers before they are released. In order to support something like an \"Are you sure you want to quit\" dialog, the application needs to provide a higher-level event (e.g., <code>startShutdown()</code>) which allows for cancellation.</p>\n\n<p>Note also that XPCOM services may deny you access once you have received the shutdown notification. It is possible that XPCOM will return an error if you access the <code>nsIServiceManager</code> at that point, for example, so you may have to keep a reference-counted pointer to the service you are interested in using during this notification.</p>\n</div>\n\n<h4 id=\"Component_Loaders\" name=\"Component_Loaders\">Component Loaders</h4>\n\n<p>Components can be written in many languages. So far this book has been focusing on \"native components,\" shared libraries exporting a <code>NSGetModule</code> symbol. But if there is a <em>component loader</em> for Javascript installed, then you can also write a JavaScript component.</p>\n\n<p>To register, unregister, load and manage various component types, XPCOM abstracts the interface between the XPCOM component and XPCOM with the Component Loader. This loader is responsible for initialization, loading, unloading, and supporting the <code>nsIModule</code> interface on behalf of each component. It is the Component Loader's responsibility to provide scriptable component support.</p>\n\n<p>When building a \"native\" component, the component loader looks for an exported symbol from the components shared library. \"Native\" here includes any language that can generate a platform native dynamically loaded library. Scripting languages and other \"non-native\" languages usually have no way to build native libraries. In order to have \"non-native\" XPCOM components work, XPCOM must have a special component loader which knows how to deal with these type of components.</p>\n\n<p>XPConnect, for example, provides a component loader that makes the various types, including the interfaces and their parameters, available to JavaScript. Each language supported by XPCOM must have a component loader.</p>\n\n<h4 id=\"Three_parts_of_a_XPCOM_Component_Library\" name=\"Three_parts_of_a_XPCOM_Component_Library\">Three parts of a XPCOM Component Library</h4>\n\n<p>XPCOM is like an onion<span class=\"comment\">or a parfait! Everybody likes parfaits</span>. XPCOM components have at least three layers. From the innermost and moving outward these layers include:</p>\n\n<ul>\n <li>The core XPCOM object</li>\n <li>The factory code</li>\n <li>The module code</li>\n</ul>\n\n<p>The core XPCOM object is the object that will implement the functionality you need. For example, this is the object that may start a network download and implement interfaces that will listen to the progress. Or the object may provide a new content type handler. Whatever it does, this object is at the core of the XPCOM component, and the other layers are supporting it, plugging it into the XPCOM system. A single library may have many of these core objects.</p>\n\n<p>One layer above the core object is the factory code. The factory object provides a basic abstraction of the core XPCOM object. <a href=\"/en/Creating_XPCOM_Components/An_Overview_of_XPCOM\" title=\"en/Creating_XPCOM_Components/An_Overview_of_XPCOM\">An Overview of XPCOM</a> discussed the factory design pattern that's used in a factory object. At this layer of the XPCOM Component Library, the factory objects are factories for the core XPCOM objects of the layer below.</p>\n\n<p>One more layer outward is the module code. The module interface provides yet another abstraction - this time of the factories - and allows for multiple factory objects. From the outside of the component library, there is only the single entry point, <code>NSGetModule()</code>. This point of entry may fan out to any number of factories, and from there, to any number of XPCOM objects.</p>\n\n<p>The factory design pattern in XPCOM is represented by the <code>nsIFactory</code> interface. The module layer is represented by the <code>nsIModule</code> interface. Most component libraries only need these two interfaces, along with the <code>nsISupports</code> interface, to have XPCOM load, recognize, and use their core object code.</p>\n\n<p>In the next section, we'll be writing the code that actually compiles into a component library, and you will see how each layer is implemented and how each interface is used. Following this initial, verbose demonstration of the APIs, we will introduce a faster more generic way of implementing the module and factory code using macros, which can make components much easier to create.</p>\n\n<h3 id=\"XPCOM_Glue\" name=\"XPCOM_Glue\">XPCOM Glue</h3>\n\n<p>XPCOM contains a lot of stuff. Most XPCOM interfaces are not frozen and are only meant to be used by the Gecko internals and not by clients. XPCOM provides many data structures from linked lists to <a class=\"external\" href=\"http://en.wikipedia.org/wiki/AVL_tree\">AVL trees</a>. It's tempting to reuse <code>nsVoidArray</code> or another publicly available class instead of writing your own linked list, but this may prove to be a fatal mistake. The class can change at any time and give you unexpected behavior.</p>\n\n<p>XPCOM makes for a very open environment. At runtime you can acquire any service or component by merely knowing a CID or Contract ID along with an IID. At last count there were over 1300 interfaces defined in XPIDL. Of those 1300 interfaces, less than 100 were frozen, which means that a developer is likely to stumble upon useful interfaces that aren't frozen. Unless an interface is explicitly marked \"FROZEN\" in the IDL comments, your component may possibly break or crash along with a version change.</p>\n\n<h4 id=\"The_Glue_Library\" name=\"The_Glue_Library\">The Glue Library</h4>\n\n<p>In general, you should avoid any interfaces, symbols in XPCOM, or other part of Gecko libraries that aren't frozen. However, there are some unfrozen tools in XPCOM that are used so often they are practically required parts of component programming.</p>\n\n<p>The smart pointer class, <code>nsCOMPtr</code>, for example, which makes reference counting less tedious and error-prone, is not actually frozen, and neither is <code>nsDebug</code>, a class for aiding in tracking down bugs, nor is <code>nsMemory</code>, a class to ensure that everyone uses the same heap, generic factory, and module. Instead of asking every developer to find and copy these various files into their own application, XPCOM provides a single library of \"not-ready-to-freeze-but-really-helpful\" classes that you can link into your application, as the following figure demonstrates.</p>\n\n<p><span id=\"XPCOM_Glue_and_Tools\"><a id=\"XPCOM_Glue_and_Tools\"></a><strong>XPCOM Glue and Tools</strong></span></p>\n\n<p><img alt=\"Image:xpcom-glue-tools.png\" class=\"internal\" src=\"/@api/deki/files/978/=Xpcom-glue-tools.png\"></p>\n\n<p>This is the glue library. It provides a bridge, or \"glue\" layer, between your component and XPCOM.</p>\n\n<p>A version of the glue library is built into XPCOM, and when your component uses it, it links a snapshot of this library: it includes a copy of these unfrozen classes directly, which allows the XPCOM library version to change without affecting the software. There is a slight footprint penalty to linking directly, but this gives your component freedom to work in any recent environment. If footprint is a big issue in your component or application, you can trim out the pieces you don't need.</p>\n\n<h4 id=\"XPCOM_String_Classes\" name=\"XPCOM_String_Classes\">XPCOM String Classes</h4>\n\n<p>The base string types that XPCOM uses are <code>nsAString</code> and <code>nsACString</code>. These classes are described in the Mozilla String Guide (see <a href=\"/en/Creating_XPCOM_Components/Resources#Gecko_Resources\" title=\"en/Creating_XPCOM_Components/Resources#Gecko_Resources\">Gecko Resources</a>).</p>\n\n<p>The string classes that implement these abstract classes are another set of helpful, unfrozen classes in XPCOM. Most components and embedding applications need to link to some string class or other in order to utilize certain Gecko APIs, but the string code that Mozilla uses is highly complex and even more expensive than the glue code in terms of footprint (~100k). <code>nsEmbedString</code> and <code>nsEmbedCString</code> are available as very lightweight string implementations for component development, especially in small embedded applications. This string implementation does the bare minimum to support the <code>nsAString</code>/<code>nsACString</code> functionality.</p>\n\n<p>In your own component, you can go \"slim\" and restrict yourself to the <code>nsEmbedString</code> or go \"hog wild\" and use any of the the other strings. WebLock restricts itself to using the simple <code>nsEmbedString</code> family of classes.</p>\n\n<p><span id=\"String_Classes_and_XPCOM\"><a id=\"String_Classes_and_XPCOM\"></a><strong>String Classes and XPCOM</strong></span></p>\n\n<p><img alt=\"Image:strings-in-xpcom.png\" class=\"internal\" src=\"/@api/deki/files/867/=Strings-in-xpcom.png\"></p>\n\n<p>The glue library provides stub functions for the public functions that XPCOM provides (see <code><a href=\"https://dxr.mozilla.org/mozilla-central/source/xpcom/build/nsXPCOM.h\" rel=\"custom\">xpcom/build/nsXPCOM.h</a></code>). When the glue library is initialized, it dynamically loads these symbols from the XPCOM library, which allows the component to avoid linking directly with the XPCOM library. You shouldn't have to link to the XPCOM library to create a XPCOM component - in fact, if your component has to, then something is wrong. </p><div class=\"prevnext\" style=\"text-align: right;\">\n    <p><a href=\"/en-US/docs/Creating_XPCOM_Components/Using_XPCOM_Components\" style=\"float: left;\">« Previous</a><a href=\"/en-US/docs/Creating_XPCOM_Components/Creating_the_Component_Code\">Next  »</a></p>\n</div><p></p><div class=\"licenseblock\">\n<p>Copyright (c) 2003 by Doug Turner and Ian Oeschger. This material may be distributed only subject to the terms and conditions set forth in the <a class=\"external\" href=\"http://www.opencontent.org/openpub/\" rel=\"noopener\">Open Publication License</a>, v1.02 or later. Distribution of substantively modified versions of this document is prohibited without the explicit permission of the copyright holder. Distribution of the work or derivative of the work in any standard (paper) book form is prohibited unless prior permission is obtained from the copyright holder.</p>\n</div><p></p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/flx\">flx</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ptak82\">Ptak82</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/RmoHzm\">RmoHzm</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Waldo\">Waldo</a>",
    "title": "Component Internals"
}