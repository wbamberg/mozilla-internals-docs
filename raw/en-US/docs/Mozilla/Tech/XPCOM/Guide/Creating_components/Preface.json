{
    "content": "<p></p><div class=\"prevnext\" style=\"text-align: right;\">\n    <p><a href=\"/en-US/docs/Creating_XPCOM_Components/An_Overview_of_XPCOM\">Next  »</a></p>\n</div><p></p>\n\n<p>This is a book about Gecko, and about creating <a href=\"en/XPCOM\">XPCOM</a> components for Gecko-based applications. Though the emphasis is on the practical steps you take to make your C++ code into a component that can be used in Gecko, we hope that these steps will also give us an occasion to discuss all of the tools, techniques, and technologies that make up XPCOM. Accordingly, the book is arranged so that you can follow along and create your own components or learn about different XPCOM topics individually, as in a reference work. For example, the introduction includes a discussion of components and what they are, and the first chapter - in which you compile the basic code and register it with Mozilla - prompts a discussion of the relationship between components and modules, of XPCOM interfaces, and of the registration process in general.</p>\n\n<p>The top of each chapter provides a list of the major topics covered. Sidebar sections are included to highlight technical details. By the end of the book, if we've done our job, you will have learned how to build a component and you will know something about the framework for these components in Gecko, which is XPCOM.</p>\n\n<h3 id=\"Who_Should_Read_This_Book\" name=\"Who_Should_Read_This_Book\">Who Should Read This Book</h3>\n\n<p>No one. It is badly out of date, and much of what it says is either no longer remotely accurate, or is severely deprecated.</p>\n\n<p>If you are a historian, though...</p>\n\n<p> </p>\n\n<p><a href=\"en/Creating_XPCOM_Components\">Creating XPCOM Components</a> is meant for C++ developers. Though you can create XPCOM components in <a href=\"en/JavaScript\">JavaScript</a> and other languages, and though you might be able to follow along as a <a href=\"en/C\">C</a> programmer, the component implementation code is written in C++, and much of the discussion of how to make your code<em>into</em> an XPCOM component starts from C++. You don't need to be a C++ expert, however. Although basic ideas such as inheritance and encapsulation should be familar to you, wherever possible they are explained in the book as they are used. Also many of the examples are in JavaScript, which is used in Mozilla to access XPCOM components as scriptable objects, and so familiarity with that language is useful as well.</p>\n\n<p>XPCOM stands for the Cross Platform Component Object Model. As this name implies, XPCOM is similar to Microsoft COM. If you have any experience with this technology, much of it can be applied to XPCOM. However, this book does not assume any prior knowledge of COM - all of the basic COM ideas will be introduced.</p>\n\n<p>This book provides a tutorial about building an XPCOM component that controls browsing behavior. Although, XPCOM can be used in many environments which are unrelated to web browsing, XPCOM's main client is Gecko, an open source, standards compliant, embeddable web browser, where it's easiest and most practical to illustrate XPCOM's functionality. A full description of the component in this tutorial can be found in the <a href=\"en/Creating_XPCOM_Components/Creating_the_Component_Code#What_We.27ll_Be_Working_On\">What We'll Be Working On</a> section of the tutorial.</p>\n\n<div class=\"note\">\n<p>Despite what old documentation says, XPCOM should not be used to make <a href=\"en/Plugins\">NPAPI plugins</a> scriptable. Starting with Gecko 1.7.5 (Firefox 1.0) a special NPAPI extension for scriptability is supported, see <a href=\"en/Gecko_Plugin_API_Reference/Scripting_plugins\">Scripting plugins</a>.</p>\n</div>\n\n<h3 id=\"Organization_of_the_Tutorial\" name=\"Organization_of_the_Tutorial\">Organization of the Tutorial</h3>\n\n<p>The following list provides an overview of the steps that we will take to build an XPCOM component called <strong>WebLock</strong>, which provides site blocking functionality to Gecko-based browsers. Each one of these steps has its own chapter, in which a number of topics associated with the step are discussed.</p>\n\n<ul>\n <li>Create the generic module code for the component.</li>\n <li>Use C++ macros, special string classes and smart pointers to optimize your code.</li>\n <li>Define the functionality for the component; create an <a href=\"en/XPIDL\">XPIDL</a> interface for that functionality; create the implementation code specific to the custom <strong>WebLock</strong> component interface.</li>\n <li>Finish implementing the <strong>WebLock</strong> component: <code>nsIContentPolicy</code>, file I/O, locking, etc.</li>\n <li>Creating the user interface for the WebLock component.</li>\n <li>Packaging <strong>WebLock</strong> for distribution and installation.</li>\n</ul>\n\n<h3 id=\"Following_Along_with_the_Examples\" name=\"Following_Along_with_the_Examples\">Following Along with the Examples</h3>\n\n<p>There are a couple of different ways to get XPCOM onto your machine so you can begin to create components. If you already have a Mozilla build or the source from Mozilla 1.2 or later, then you can use the XPCOM framework available there. If you don't already have the Mozilla source, then an even easier way to get and use XPCOM is to download the Gecko SDK, which is a collection of libraries and tools that features the XPCOM component framework.</p>\n\n<p>Whether you compile your code in the Mozilla source tree or use the Gecko SDK, you can build your own components which leverage components that already exist in Gecko. The <strong>WebLock</strong> component we describe in this tutorial is a practical (and, we hope, genuinely useful) addition to the browser. In order to build it, your Gecko SDK or Mozilla source tree needs to be version 1.2 or later (XPCOM interfaces were not fully frozen in prior releases).</p>\n\n<p>This book assumes you are using the SDK rather than compiling in a Mozilla source tree, though the difference between these two approaches is minimal. Details about downloading the SDK, building, and getting programmatic access to Gecko components are provided in the appendix to this book, <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Guide/Creating_components/Setting_up_the_Gecko_SDK\">Setting up the Gecko SDK</a>.</p>\n\n<h3 id=\"Conventions\" name=\"Conventions\">Conventions</h3>\n\n<p>The formatting conventions listed below are used to designate specific types of information in the book and make things easier to scan. The goal is to use as few formats as possible, but to distinguish the various different types of information clearly.</p>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Format</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><strong>bold</strong></td>\n   <td><strong>component names</strong> appear in bold in the text</td>\n  </tr>\n  <tr>\n   <td><code>monospace</code></td>\n   <td><code>code listings</code>, <code>interface names</code> and <code>members</code> of interfaces (e.g., <code>createInstance()</code>) appear in monospaced font. Lines of code are placed in separate boxes. Additionally, <code>filenames</code> and <code>directories</code> appear in monospaced font.</td>\n  </tr>\n  <tr>\n   <td><em>italic</em></td>\n   <td><em>variables </em>appear in italic. Important terms and new concepts are also italicized the first time they appear in the text. Those terms are either explained immediately after they are cited, or else the reader is referred to a section in the book where they are described in detail.</td>\n  </tr>\n  <tr>\n   <td>link</td>\n   <td>References to other sections and to figures and tables are links to those sections.</td>\n  </tr>\n </tbody>\n</table>\n\n<h3 id=\"Acknowledgements\" name=\"Acknowledgements\">Acknowledgements</h3>\n\n<p>Thanks to Peter Lubczynski, John Gaunt, Ellen Evans, and Alec Flett for technical reviews. A special thanks goes to Darin Fisher for his very acute observations, close reading, and attention to detail. </p><div class=\"prevnext\" style=\"text-align: right;\">\n    <p><a href=\"/en-US/docs/Creating_XPCOM_Components/An_Overview_of_XPCOM\">Next  »</a></p>\n</div><p></p>\n\n<div class=\"licenseblock\">\n<p>Copyright (c) 2003 by Doug Turner and Ian Oeschger. This material may be distributed only subject to the terms and conditions set forth in the <a class=\"external\" href=\"http://www.opencontent.org/openpub/\" rel=\"noopener\">Open Publication License</a>, v1.02 or later. Distribution of substantively modified versions of this document is prohibited without the explicit permission of the copyright holder. Distribution of the work or derivative of the work in any standard (paper) book form is prohibited unless prior permission is obtained from the copyright holder.</p>\n</div>\n\n<p> </p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kmaglione\">kmaglione</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/annygakh\">annygakh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mail2vcnu\">mail2vcnu</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kscarfone\">kscarfone</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/fscholz\">fscholz</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nickolay\">Nickolay</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Tonci\">Tonci</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ptak82\">Ptak82</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ja7R6b\">Ja7R6b</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mgjbot\">Mgjbot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Waldo\">Waldo</a>",
    "title": "Preface"
}