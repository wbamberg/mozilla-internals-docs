{
    "content": "<p>If you are looking for Add-on SDK solution for XPCOM JavaScript components then check out <a href=\"https://addons.mozilla.org/en-US/developers/docs/sdk/latest/modules/sdk/platform/xpcom.html\" title=\"https://addons.mozilla.org/en-US/developers/docs/sdk/latest/modules/sdk/platform/xpcom.html\">platform/xpcom</a> module first.</p>\n\n<p>This is a \"Hello World\" tutorial for creating an XPCOM component in JavaScript. This tutorial does not describe how and why XPCOM works the way it does, or what every bit of the example code does. That's been detailed <a href=\"/en/XPCOM\" title=\"en/XPCOM\">elsewhere</a>. This tutorial will show you what you need to do to get a component <em>working</em> in as few and as simple steps as possible.</p>\n\n<h2 id=\"Implementation\" name=\"Implementation\">Implementation</h2>\n\n<p>This example component will expose a single method, which returns the string \"Hello World!\".</p>\n\n<h3 id=\"Defining_the_Interface\" name=\"Defining_the_Interface\">Defining the Interface</h3>\n\n<p>If you want to use your component in other XPCOM components, you must define the interfaces that you want exposed. If you want to use your component <em>only</em> from JavaScript, you can skip to the <a href=\"#Using_XPCOMUtils\">next section</a>.</p>\n\n<p>There are many interfaces already defined in Mozilla applications, so you may not need to define a new one. You can browse existing XPCOM interfaces at various locations in the Mozilla source code, or using <a class=\"external\" href=\"http://www.ondrejd.info/projects/xpcomviewer/\" title=\"http://www.ondrejd.info/projects/xpcomviewer/\">XPCOMViewer</a>, a GUI for browsing registered interfaces and components. You can download an old version of XPCOMViewer that works with Firefox 1.5 from <a class=\"external\" href=\"http://downloads.mozdev.org/xpcomviewer/\">mozdev mirrors</a>.</p>\n\n<p>If an interface exists that meets your needs, then you do not need to write an IDL, or compile a typelib, and may skip to the <a href=\"#Using_XPCOMUtils\">next section</a>.</p>\n\n<p>If you don't find a suitable pre-existing interface, then you must define your own. XPCOM uses a dialect of IDL to define interfaces, called <a href=\"/en/XPIDL\" title=\"en/XPIDL\">XPIDL</a>. Here's the XPIDL definition for our HelloWorld component:</p>\n\n<p>HelloWorld.idl</p>\n\n<pre>#include \"nsISupports.idl\"\n\n[scriptable, uuid(xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)]\ninterface nsIHelloWorld : nsISupports\n{\n  string hello();\n};  \n</pre>\n\n<p>Note that you must generate a new UUID for each XPCOM component that you create. See <a href=\"/en/Generating_GUIDs\" title=\"en/Generating_GUIDs\">Generating GUIDs</a> for more information.</p>\n\n<h3 id=\"Compiling_the_Typelib\" name=\"Compiling_the_Typelib\">Compiling the Typelib</h3>\n\n<p>Your interface definition must be compiled into a binary format (XPT) in order to be registered and used within Mozilla applications. The compilation can be done using the Gecko SDK. You can learn how to get Mac, Linux, and Windows versions of the Gecko SDK by reading the article <a href=\"/en/Gecko_SDK\" title=\"en/Gecko_SDK\">Gecko SDK</a>.</p>\n\n<h4 id=\"For_code_outside_the_tree\">For code outside the tree</h4>\n\n<div class=\"note\"><strong>Note:</strong> On Windows if you download the Gecko SDK without the whole build tree, you will be missing some required DLLs for xpidl.exe and it will run with no errors but not do anything. To fix this download the <a class=\"external\" href=\"http://ftp.mozilla.org/pub/mozilla.org/mozilla/source/wintools.zip\">Mozilla build tools for Windows</a> and copy the DLLs from <code>windows\\bin\\x86</code> within the zip into the <code>bin</code> directory of the Gecko SDK.</div>\n\n<div class=\"note\"><strong>Note:</strong> The Mac version of the SDK provided for download is PowerPC-only. If you need an Intel version, you'll need to compile it yourself as described on that page.</div>\n\n<p>Execute this command to compile the <code>typelib</code>. Here, <code>{sdk_dir}</code> is the directory in which you unpacked the Gecko SDK.</p>\n\n<pre class=\"eval\">{sdk_dir}/bin/xpidl -m typelib -w -v -I {sdk_dir}/idl -e HelloWorld.xpt HelloWorld.idl\n</pre>\n\n<div class=\"note\"><strong>Note:</strong> On Windows you must use forward slashes for the include path.</div>\n\n<div class=\"note\"><strong>Note:</strong> (The -I flag is an uppercase i, not a lowercase L.)</div>\n\n<p>This will create the <code>typelib</code> file <code>HelloWorld.xpt</code> in the current working directory.</p>\n\n<h4 id=\"For_a_new_component_in_FirefoxThunderbirdB2G\">For a new component in Firefox/Thunderbird/B2G</h4>\n\n<p>If you are adding a new feature to applications in the mozilla-central repository, you can create a Makefile listing the IDL files and the build system will automatically generate the typelib. A sample <code>Makefile.in</code></p>\n\n<pre># This Source Code Form is subject to the terms of the Mozilla Public\n# License, v. 2.0. If a copy of the MPL was not distributed with this\n# file, You can obtain one at http://mozilla.org/MPL/2.0/.\nDEPTH = @DEPTH@\ntopsrcdir = @top_srcdir@\nsrcdir = @srcdir@\nVPATH = @srcdir@\n\ninclude $(DEPTH)/config/autoconf.mk\n\n\n<span id=\"the-code\"># MODULE specifies where header files from this Makefile are installed</span>\n# Use dom if your component implements a DOM API\nMODULE = dom\n\n# Name of the typelib\nXPIDL_MODULE = dom_apps\n\n# Set to 1 if the module should be part of the Gecko Runtime common to all applications\nGRE_MODULE = 1\n\n# The IDL sources\nXPIDLSRCS = \\\n HelloWorld.idl \\\n $(NULL)\n\ninclude $(topsrcdir)/config/rules.mk\n\nXPIDL_FLAGS += \\\n -I$(topsrcdir)/dom/interfaces/base \\\n -I$(topsrcdir)/dom/interfaces/events \\\n $(NULL)</pre>\n\n<h3 id=\"Using_XPCOMUtils\" name=\"Using_XPCOMUtils\">Creating the Component Using XPCOMUtils</h3>\n\n<p> In <a href=\"/en/Firefox_3_for_developers\" title=\"en/Firefox_3_for_developers\">Firefox 3</a> and later you can use import <a href=\"/en/JavaScript_code_modules/XPCOMUtils.jsm\" title=\"en/XPCOMUtils.jsm\">XPCOMUtils.jsm</a> using <a href=\"/en/Components.utils.import\" title=\"en/Components.utils.import\">Components.utils.import</a> to simplify the process of writing your component slightly. The imported library contains functions for generating the module, factory, and the NSGetModule and QueryInterface functions for you. <strong>Note:</strong> it doesn't do the work of creating your interface definition file or the type library for you, so you still have to go through those steps above if they haven't been done. The library provides a simple example of its use in the source code (<code><a href=\"https://dxr.mozilla.org/mozilla-central/source/js/xpconnect/loader/XPCOMUtils.jsm\" rel=\"custom\">js/xpconnect/loader/XPCOMUtils.jsm</a></code>), but here's another using this example. To begin, include a line at the top of your interface to import the <code>XPCOMUtils</code> library:</p>\n\n<pre class=\"brush: js\">Components.utils.import(\"resource://gre/modules/XPCOMUtils.jsm\");\n</pre>\n\n<p>then implement your interface the same way you did above, except with a few modifications so that <code>XPCOMUtils</code> can set it up properly:</p>\n\n<pre class=\"brush: js\">/***********************************************************\nclass definition\n***********************************************************/\n\n//class constructor\nfunction HelloWorld() {\n// If you only need to access your component from JavaScript, uncomment the following line:\n//this.wrappedJSObject = this;\n}\n\n// class definition\nHelloWorld.prototype = {\n\n  // properties required for XPCOM registration:\n  classDescription: \"My Hello World JavaScript XPCOM Component\",\n  classID:          Components.ID(\"{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\"),\n  contractID:       \"@dietrich.ganx4.com/helloworld;1\",\n\n  // [optional] custom factory (an object implementing nsIFactory). If not\n  // provided, the default factory is used, which returns\n  // |(new MyComponent()).QueryInterface(iid)| in its createInstance().\n  _xpcom_factory: { ... },\n\n  // [optional] an array of categories to register this component in.\n  _xpcom_categories: [{\n\n    // Each object in the array specifies the parameters to pass to\n    // nsICategoryManager.addCategoryEntry(). 'true' is passed for both\n    // aPersist and aReplace params.\n    category: \"some-category\",\n\n    // optional, defaults to the object's classDescription\n    entry: \"entry name\",\n\n    // optional, defaults to the object's contractID (unless 'service' is specified)\n    value: \"...\",\n\n    // optional, defaults to false. When set to true, and only if 'value' is not\n    // specified, the concatenation of the string \"service,\" and the object's contractID\n    // is passed as aValue parameter of addCategoryEntry.\n     service: true\n  }],\n\n  // QueryInterface implementation, e.g. using the generateQI helper (remove argument if skipped steps above)\n  QueryInterface: XPCOMUtils.generateQI([Components.interfaces.nsIHelloWorld]),\n\n  // Optional, but required if you want your component to be exposed to DOM\n  classInfo: XPCOMUtils.generateCI({classID: Components.ID(\"{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\"),\n                                    contractID: \"@dietrich.ganx4.com/helloworld;1\",\n                                    interfaces: [Ci.nsIHelloWorld],\n                                    flags: Ci.nsIClassInfo.DOM_OBJECT}),\n\n  // ...component implementation...\n  // define the function we want to expose in our interface\n  hello: function() {\n      return \"Hello World!\";\n  },\n};\n</pre>\n\n<p><code>XPCOMUtils</code> does the work of creating the module and factory for you after this. Finally, you create an array of your components to be created:</p>\n\n<pre class=\"brush: js\"> var components = [HelloWorld];\n</pre>\n\n<p>and replace <code>NSGetFactory</code>/<code>NSGetModule</code> to use this array and <code>XPCOMUtils</code>:</p>\n\n<pre class=\"brush: js\"> if (\"generateNSGetFactory\" in XPCOMUtils)\n   var NSGetFactory = XPCOMUtils.generateNSGetFactory(components);  // Firefox 4.0 and higher\n else\n   var NSGetModule = XPCOMUtils.generateNSGetModule(components);    // Firefox 3.x\n</pre>\n\n<p>So the total simplified version of your component now looks like (of course documentation and comments aren't a bad thing, but as a template something smaller is nice to have):</p>\n\n<pre class=\"brush: js\">Components.utils.import(\"resource://gre/modules/XPCOMUtils.jsm\");\n\nfunction HelloWorld() { }\n\nHelloWorld.prototype = {\n  classDescription: \"My Hello World JavaScript XPCOM Component\",\n  classID:          Components.ID(\"{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}\"),\n  contractID:       \"@dietrich.ganx4.com/helloworld;1\",\n  QueryInterface: XPCOMUtils.generateQI([Components.interfaces.nsIHelloWorld]),\n  hello: function() { return \"Hello World!\"; }\n};\nvar components = [HelloWorld];\nif (\"generateNSGetFactory\" in XPCOMUtils)\n  var NSGetFactory = XPCOMUtils.generateNSGetFactory(components);  // Firefox 4.0 and higher\nelse\n  var NSGetModule = XPCOMUtils.generateNSGetModule(components);    // Firefox 3.x\n</pre>\n\n<div class=\"note\"><strong>Note:</strong> Starting with Firefox 4.0 you will need to declare your component in <code>chrome.manifest</code>; <code>classDescription</code> and <code>contractID</code> properties on the other hand are no longer required. See <a href=\"/en/XPCOM/XPCOM_changes_in_Gecko_2.0\" title=\"XPCOM changes in Gecko 2.0\">XPCOM changes in Gecko 2.0</a> for more details.</div>\n\n<h2 id=\"Installation\" name=\"Installation\">Installation</h2>\n\n<h3 id=\"For_extensions:\" name=\"For_extensions:\">For extensions:</h3>\n\n<ol>\n <li>Copy <code>HelloWorld.js</code>, and <code>HelloWorld.xpt</code> (only if you defined and compiled the IDL) to <code>{extensiondir}/components/</code>.</li>\n <li>Delete <code>compreg.dat</code> and <code>xpti.dat</code> from your profile directory.</li>\n <li>Restart application.</li>\n</ol>\n\n<h3 id=\"For_Firefox\" name=\"For_Firefox\">For Firefox:</h3>\n\n<ol>\n <li>Copy <code>HelloWorld.js</code>, and <code>HelloWorld.xpt</code> (only if you defined and compiled the IDL) to the <code>{objdir}/dist/bin/components</code> directory, if running from the source.</li>\n <li>Delete <code>compreg.dat</code> and <code>xpti.dat</code> from the components directory.</li>\n <li>Delete <code>compreg.dat</code> and <code>xpti.dat</code> from your profile directory.</li>\n <li>Restart application.</li>\n</ol>\n\n<h2 id=\"Using_Your_Component\" name=\"Using_Your_Component\">Using Your Component</h2>\n\n<h3 id=\"Using_wrappedJSObject\" name=\"Using_wrappedJSObject\">Using wrappedJSObject</h3>\n\n<p>If you only intend to access your component from JavaScript, i.e. you skipped the sections \"Defining the Interface\" and \"Compiling the Typelib\" above, you uncommented the \"wrappedJSObject\" line in the class constructor, and you removed the \"[Components.interfaces.nsIHelloWorld]\" argument for the call to XPCOMUtils.generateQI() in QueryInterface, then you can access your component like this:</p>\n\n<pre class=\"brush: js\">try {\n        var myComponent = Components.classes['@dietrich.ganx4.com/helloworld;1']\n                                    .getService().wrappedJSObject;\n\n        alert(myComponent.hello());\n} catch (anError) {\n        dump(\"ERROR: \" + anError);\n}\n</pre>\n\n<p>For more information about wrappedJSObject, see <a href=\"/en/wrappedJSObject\" title=\"en/wrappedJSObject\">here</a>.</p>\n\n<h3 id=\"Using_XPCOM_instantiation\" name=\"Using_XPCOM_instantiation\">Using XPCOM instantiation</h3>\n\n<pre class=\"brush: js\">try {\n        var myComponent = Components.classes['@dietrich.ganx4.com/helloworld;1']\n                                    .createInstance(Components.interfaces.nsIHelloWorld);\n\n        alert(myComponent.hello());\n} catch (anError) {\n        dump(\"ERROR: \" + anError);\n}\n</pre>\n\n<h2 id=\"Other_resources\" name=\"Other_resources\">Other resources</h2>\n\n<ul>\n <li>rm lanTwo mozillazine forums threads about implementing XPCOM components in JS with some explanations, example code, and troubleshooting tips:\n  <ul>\n   <li><a class=\"external\" href=\"http://forums.mozillazine.org/viewtopic.php?t=308369\" rel=\"freelink\">http://forums.mozillazine.org/viewtopic.php?t=308369</a></li>\n   <li><a class=\"external\" href=\"http://forums.mozillazine.org/viewtopic.php?t=367298\" rel=\"freelink\">http://forums.mozillazine.org/viewtopic.php?t=367298</a></li>\n  </ul>\n </li>\n <li><a class=\"external\" href=\"http://kb.mozillazine.org/Implementing_XPCOM_components_in_JavaScript\">Implementing XPCOM components in JavaScript</a> at kb.mozillazine.org</li>\n <li><a class=\"external\" href=\"http://www.mozilla.org/scriptable/avoiding-leaks.html\">Using XPCOM in JavaScript without leaking</a> - A must-read.</li>\n <li><a class=\"external\" href=\"http://lxr.mozilla.org/seamonkey/source/xpcom/sample/nsSample.js\">An example component</a></li>\n <li><a class=\"external\" href=\"http://www.mozilla.org/scriptable/js-components-status.html\">Older JS+XPCOM notes</a> - includes some wrappedJSObject information.</li>\n <li><a class=\"external\" href=\"https://web.archive.org/web/20110829175619/http://weblogs.mozillazine.org/weirdal/archives/019620.html\" title=\"http://weblogs.mozillazine.org/weirdal/archives/019620.html (archive)\">Writing an XPCOM <em><u>Service</u></em> in JavaScript</a></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/SphinxKnight\">SphinxKnight</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/hideousparadigm\">hideousparadigm</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Dholbert\">Dholbert</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Rob%20W\">Rob W</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kscarfone\">kscarfone</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/dkaigorodov\">dkaigorodov</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/nikhilm\">nikhilm</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/JorisW\">JorisW</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mnoorenberghe\">mnoorenberghe</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kmaglione\">kmaglione</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Wladimir_Palant\">Wladimir_Palant</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kalintiris\">kalintiris</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/berkerpeksag\">berkerpeksag</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Demos\">Demos</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/crf\">crf</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/ioncube\">ioncube</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Philip%20Chee\">Philip Chee</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Brettz9\">Brettz9</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Hywan\">Hywan</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Wjjohnst\">Wjjohnst</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/PeteSoup\">PeteSoup</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Pdubroy\">Pdubroy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Duwei\">Duwei</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nickolay\">Nickolay</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/spiralx\">spiralx</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Np\">Np</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mgjbot\">Mgjbot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ted_Mielczarek\">Ted_Mielczarek</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Jroeloffs\">Jroeloffs</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mozboy\">Mozboy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Dietrich\">Dietrich</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/SylvainPasche\">SylvainPasche</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Tomsky\">Tomsky</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/NickolayBot\">NickolayBot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Dria\">Dria</a>",
    "title": "How to build an XPCOM component in JavaScript"
}