{
    "content": "<p>Given that IDL interfaces map to abstract classes in C++, a common problem when dealing with IDL is when you have an IDL inheritance hierarchy, and a corresponding C++ implementation hierarchy, you run into <strong>multiple inheritance</strong>. That's not inherently multiple inheritance, though, because you only mix in interfaces (i.e. the problem would not exist with Java's <code>interface</code>s).</p>\n<h2 id=\"Example_problem\" name=\"Example_problem\">Example problem</h2>\n<p>You have interfaces A and B, B inherits from A, and you have implementation classes for\n <i>\n  both</i>\n A and B, and you want the implementation class for B to inherit from the implementation class for A. The latter is the problem. The lacking <code>virtual</code> in the generated IB C++ abstract class doesn't make things easier. So, in code:</p>\n<p>IDL:</p>\n<pre class=\"eval\">interface IA {\n  void funcA();\n}\ninterface IB : IA {\n  void funcB();\n}\ninterface IC : IB {\n  void funcC();\n}\n</pre>\n<p>C++ implementation:</p>\n<pre class=\"eval\">class A : public IA {\n  ???\n}\nclass B : public A, public IB {\n  ???\n}\nclass C : public B, public IC {\n  ???\n}\n</pre>\n<h2 id=\"Example_solution\" name=\"Example_solution\">Example solution</h2>\n<pre class=\"eval\">A.h, as usual:\n  class A : public IA\n  {\n    ...\n    NS_DECL_ISUPPORTS\n    NS_DECL_IA\n  }\nA.cpp, as usual:\n  NS_IMPL_ISUPPORTS1(A, IA)\n  NS_IMETHODIMP A::funcA() { ... }\nB.h:\n  class B : public A, public IB\n  {\n    ...\n    NS_DECL_ISUPPORTS_INHERITED\n    NS_FORWARD_IA(A::) // need to disambiguate\n    NS_DECL_IB\n  }\nB.cpp:\n  NS_IMPL_ISUPPORTS_INHERITED1(B, A, IB) // this, superclass,<i>added</i> ifaces\n  NS_IMETHODIMP B::funcB() { ... } \nC.h:\n  class C : public B, public IC\n  {\n    ...\n    NS_DECL_ISUPPORTS_INHERITED\n    NS_FORWARD_IA(B::)\n    NS_FORWARD_IB(B::)\n    NS_DECL_IC\n  }\nC.cpp:\n  NS_IMPL_ISUPPORTS_INHERITED1(C, B, IC)\n  NS_IMETHODIMP C::funcC() { ... }\n</pre>\n<h3 id=\"Threadsafe\" name=\"Threadsafe\">Threadsafe</h3>\n<p>If you want to make this threadsafe, you can replace <code>NS_IMPL_ISUPPORTS1(A, IA)</code> with <code>NS_IMPL_THREADSAFE_ISUPPORTS1(A, IA)</code>\n <i>\n  in the base implementation class</i>\n only (e.g. A here). The rest stays as-is. The inheriting classes (B, C here) don't need to change their macros.</p>\n<h2 id=\"See_also\" name=\"See_also\">See also</h2>\n<ul>\n <li><a class=\"external\" href=\"http://dbaron.org/mozilla/coding-practices\">dbaron's coding practices</a></li>\n <li><a class=\"external\" href=\"http://mxr.mozilla.org/seamonkey/source/xpcom/glue/nsISupportsImpl.h\">nsISupportsImpl.h</a> comments</li>\n</ul>\n<p><br>\n Author <a>Ben Bucksch</a>.</p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/fscholz\">fscholz</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Andreas%20Wuest\">Andreas Wuest</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/BenB\">BenB</a>",
    "title": "Inheriting from implementation classes"
}