{
    "content": "<div class=\"note\">\n<p>This is the simplified version of the <a href=\"/en/Detailed_XPCOM_hashtable_guide\" title=\"en/Detailed_XPCOM_hashtable_guide\">Detailed XPCOM hashtable guide</a>.  Everything you need to know is probably on this page.</p>\n\n<p>Also note that <code>mfbt/HashTable.h</code> now exists. It is a lot faster than the XPCOM hashtables due to more inlining and templating, and the API is arguably better.</p>\n</div>\n\n<h2 id=\"What_Is_a_Hashtable.3F\" name=\"What_Is_a_Hashtable.3F\">What Is a Hashtable?</h2>\n\n<p>A hashtable is a data construct that stores a set of <strong>items</strong>. Each item has a <strong>key</strong> that identifies the item. Items are found, added, and removed from the hashtable by using the key. Hashtables may seem like <a href=\"/en/XPCOM_array_guide\" title=\"en/XPCOM_array_guide\">arrays</a>, but there are important differences:</p>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <th> </th>\n   <th class=\"header\">Array</th>\n   <th class=\"header\">Hashtable</th>\n  </tr>\n  <tr>\n   <td class=\"header\">Keys:</td>\n   <td><em>integer:</em> arrays are always keyed on integers, and must be contiguous.</td>\n   <td><em>any type:</em> almost any datatype can be used as key, including strings, integers, XPCOM interface pointers, IIDs, and almost anything else. Keys can be disjunct (i.e. you can store entries with keys 1, 5, and 3000).</td>\n  </tr>\n  <tr>\n   <td class=\"header\">Lookup Time:</td>\n   <td><em>O(1):</em> lookup time is a simple constant</td>\n   <td><em>O(1):</em> lookup time is mostly-constant, but the constant time can be larger than an array lookup</td>\n  </tr>\n  <tr>\n   <td class=\"header\">Sorting:</td>\n   <td><em>sorted:</em> stored sorted; iterated over in a sorted fashion.</td>\n   <td><em>unsorted:</em> stored unsorted; cannot be iterated over in a sorted manner.</td>\n  </tr>\n  <tr>\n   <td class=\"header\">Inserting/Removing:</td>\n   <td><em>O(n):</em> adding and removing items from a large array can be time-consuming</td>\n   <td><em>O(1):</em> adding and removing items from hashtables is a quick operation</td>\n  </tr>\n  <tr>\n   <td class=\"header\">Wasted space:</td>\n   <td><em>none:</em> Arrays are packed structures, so there is no wasted space.</td>\n   <td><em>some:</em> hashtables are not packed structures; depending on the implementation, there may be significant wasted memory.</td>\n  </tr>\n </tbody>\n</table>\n\n<p>In their implementation, hashtables take the key and apply a mathematical <strong>hash function</strong> to <strong>randomize</strong> the key and then use the hash to find the location in the hashtable. Good hashtable implementations will automatically resize the hashtable in memory if extra space is needed, or if too much space has been allocated.</p>\n\n<h2 id=\"When_Should_I_Use_a_Hashtable.3F\" name=\"When_Should_I_Use_a_Hashtable.3F\">When Should I Use a Hashtable?</h2>\n\n<p>Hashtables are useful for</p>\n\n<ul>\n <li>sets of data that need swift <strong>random access</strong>;</li>\n <li>with <strong>non-integral keys</strong> or <strong>non-contiguous integral keys</strong>;</li>\n <li>or where <strong>items will be frequently added or removed</strong>.</li>\n</ul>\n\n<p>Hashtables should <em>not</em> be used for</p>\n\n<ul>\n <li>Sets that need to be <strong>sorted</strong>;</li>\n <li>Very small datasets (less than 12-16 items);</li>\n <li>Data that does not need random access.</li>\n</ul>\n\n<p>In these situations, an array, a linked-list, or various tree data structures are more efficient.</p>\n\n<h2 id=\"Which_Hashtable_Should_I_Use.3F\" name=\"Which_Hashtable_Should_I_Use.3F\">Which Hashtable Should I Use?</h2>\n\n<p>The appropriate hashtable class to use depends solely on the data type.  The template specialization to use depends on the data type and the key type.</p>\n\n<table style=\"width: 100%;\">\n <tbody>\n  <tr>\n   <td style=\"background-color: rgb(204,204,204); text-align: center;\"><strong>Data Type</strong></td>\n   <td style=\"background-color: rgb(204,204,204); text-align: center;\"><strong>Hashtable class</strong></td>\n  </tr>\n  <tr>\n   <td style=\"text-align: center;\">None (for a hash set)</td>\n   <td style=\"text-align: center;\">nsTHashtable</td>\n  </tr>\n  <tr>\n   <td style=\"text-align: center;\">\n    <p>Simple Types</p>\n\n    <p>(numbers, booleans, etc)</p>\n   </td>\n   <td style=\"text-align: center;\">nsDataHashtable</td>\n  </tr>\n  <tr>\n   <td style=\"text-align: center;\">\n    <p>Structs or Classes</p>\n\n    <p>(nsString, custom defined structs or classes that are not reference-counted)</p>\n   </td>\n   <td style=\"text-align: center;\">\n    <p>nsClassHashtable</p>\n   </td>\n  </tr>\n  <tr>\n   <td style=\"text-align: center;\">Reference-counted Concrete Classes</td>\n   <td style=\"text-align: center;\">nsRefPtrHashtable</td>\n  </tr>\n  <tr>\n   <td style=\"text-align: center;\">Interface Pointers</td>\n   <td style=\"text-align: center;\">nsInterfaceHashtable</td>\n  </tr>\n </tbody>\n</table>\n\n<p>Each of these classes is a template with two parameters.  The first is the hash key and the second is the data to be stored.  There are a number of builtin hash keys available in nsHashKeys.h, the more useful of which are listed below.</p>\n\n<table style=\"width: 100%;\">\n <tbody>\n  <tr>\n   <td style=\"text-align: center; background-color: rgb(204,204,204);\"><strong>Key Type</strong></td>\n   <td style=\"text-align: center; background-color: rgb(204,204,204);\"><strong>Hashkey class</strong></td>\n  </tr>\n  <tr>\n   <td style=\"text-align: center;\">Strings</td>\n   <td style=\"text-align: center;\">nsStringHashKey/nsCStringHashKey</td>\n  </tr>\n  <tr>\n   <td style=\"text-align: center;\">Integers</td>\n   <td style=\"text-align: center;\">nsUint32HashKey/nsUint64HashKey</td>\n  </tr>\n  <tr>\n   <td style=\"text-align: center;\">Pointers</td>\n   <td style=\"text-align: center;\">nsPtrHashKey&lt;T&gt;</td>\n  </tr>\n  <tr>\n   <td style=\"text-align: center;\">Owned Interface Pointers</td>\n   <td style=\"text-align: center;\">nsISupportsHashKey</td>\n  </tr>\n  <tr>\n   <td style=\"text-align: center;\">Reference-Counted Concrete Classes</td>\n   <td style=\"text-align: center;\">nsRefPtrHashKey</td>\n  </tr>\n </tbody>\n</table>\n\n<p>There are a number of more esoteric hashkey classes in nsHashKeys.h, and you can always roll your own if none of these fit your needs (make sure you're not duplicating an existing hashkey class though!)</p>\n\n<p>Once you've determined what hashtable and hashkey classes you need, you can put it all together.  A few examples:</p>\n\n<ul>\n <li>A hashtable that maps UTF-8 origin names to a DOM Window - <code>nsInterfaceHashtable&lt;nsCStringHashKey, nsIDOMWindow&gt;</code></li>\n <li>A hashtable that maps 32 bit integers to floats - <code>nsDataHashtable&lt;nsUint32HashKey, float&gt;</code></li>\n <li>A hashtable that maps <code>nsISupports</code> pointers to reference counted <code>CacheEntry</code>s - <code>nsRefPtrHashtable&lt;nsISupportsHashKey, CacheEntry&gt;</code></li>\n <li>A hashtable that maps <code>JSContext</code> pointers to a <code>ContextInfo</code> struct - <code>nsClassHashtable&lt;nsPtrHashKey&lt;JSContext&gt;, ContextInfo&gt;</code></li>\n <li>A hashset of strings - <code>nsTHashtable&lt;nsStringHashKey&gt;</code></li>\n</ul>\n\n<h2 id=\"nsBaseHashtable_and_friends:_nsDataHashtable.2C_nsInterfaceHashtable.2C_and_nsClassHashtable\" name=\"nsBaseHashtable_and_friends:_nsDataHashtable.2C_nsInterfaceHashtable.2C_and_nsClassHashtable\">Hashtable API</h2>\n\n<p>The hashtable classes all expose the same basic API.  There are three key methods, Get, Put, and Remove, which retrieve entries from the hashtable, write entries into the hashtable, and remove entries from the hashtable respectively.</p>\n\n<p>The hashtables that hold references to pointers (nsRefPtrHashtable and nsInterfaceHashtable) also have GetWeak methods that return non-AddRefed pointers.</p>\n\n<p>All of these hashtable classes can be iterated over via the Iterator class and cleared via the Clear method.</p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>",
    "title": "XPCOM hashtable guide"
}