{
    "content": "<div class=\"note\">\n  <p>A more useful example is available in the source code: <code><a href=\"https://dxr.mozilla.org/mozilla-central/source/toolkit/components/help/content/contextHelp.js#61\" rel=\"custom\">toolkit/components/help/content/contextHelp.js#61</a></code></p>\n</div>\n<p>If you want to be able to call functions within an XPCOM object from a XUL window's code, you can do so if you pass the XPCOM object as one of the arguments to the window creation method.</p>\n<p>For example:</p>\n<pre>var ww = \n      Components.classes[\"@mozilla.org/embedcomp/window-watcher;1\"].\n            getService(Components.interfaces.nsIWindowWatcher);\n\nvar win = ww.openWindow(null,\n      \"chrome://myextension/content/debug.xul\",\n      \"debug history\", \"chrome,centerscreen,resizable\", myObject);\n</pre>\n<p>Note in this example that <code> myObject </code> is passed to the <code>openWindow()</code> method; you can pass any XPCOM object (or any other value, for that matter) in this way. To access the XPCOM object from the window's code, you can access the <code>window.arguments[]</code> array, as shown in the example below:</p>\n<pre>Components.utils.reportError(String(window.arguments[0]));\n</pre>\n<p>This will produce output similar to \"<code>[xpconnect wrapped nsIMyXPCOMObject]</code>\".</p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/teoli\">teoli</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/jswisher\">jswisher</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nickolay\">Nickolay</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Shaver\">Shaver</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>",
    "title": "How To Pass an XPCOM Object to a New Window"
}