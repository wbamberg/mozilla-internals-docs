{
    "content": "<p> </p>\n\n<h3 id=\"Introduction\" name=\"Introduction\">Introduction</h3>\n\n<p>You can use XPCOM aggregation<sup>1</sup> with the in-memory datasource. Why would you want to do this? Say you were writing a datasource<sup>2</sup>, and the way you chose to implement it was to \"wrap\" the in-memory datasource; i.e.,</p>\n\n<pre>MyClass : public nsIMyInterface, public nsIRDFDataSource {\nprivate:\n    nsCOMPtr&lt;nsIRDFDataSource&gt; mInner;\n\npublic:\n    // nsIRDFDataSource methods\n    NS_IMETHOD Init(const char* aURI) {\n        return mInner-&gt;Init(aURI);\n    }\n\n    NS_IMETHOD GetURI(char* *aURI) {\n        return mInner-&gt;GetURI(aURI);\n    }\n\n    // etc., for each method in nsIRDFDataSource!\n};\n</pre>\n\n<p>Very painful, prone to errors, and fragile as the interfaces are still in flux (a wee bit). Aggregation to the rescue! Here are the gory details on how.</p>\n\n<h3 id=\"When_It_Won.27t_Work\" name=\"When_It_Won.27t_Work\">When It Won't Work</h3>\n\n<p>Although this magic is terribly convenient to use, it won't work in the case that you want to \"override\" some of the in-memory datasource's methods. For example, while writing the <a class=\"external\" href=\"http://lxr.mozilla.org/mozilla/source/browser/components/bookmarks/src/nsBookmarksService.cpp\">bookmarks datasource</a>, I wanted to be able to trap <code>Assert()</code> to enforce the bookmarks datasource would only accept \"bookmarks related\" assertions. If I'd just delegated to the in-memory datasource, <code>Assert()</code> would've taken any old random garbage. Similarly, I wanted to trap <code>Flush()</code> so that I could write the <code>bookmarks.html</code> file back to disk.</p>\n\n<p>In short, the only case where this technique is useful is when you're implementing a datasource to get \"read-only reflection\". That is, you want to reflect the contents of something as an RDF graph (presumably so that it can be aggregated with other information or displayed as styled content).</p>\n\n<h3 id=\"Technical_Details\" name=\"Technical_Details\">Technical Details</h3>\n\n<p>As before, have an <code>nsCOMPtr</code> as your delegate, but this time around,<em>don't</em> derive from <code>nsIRDFDataSource</code>. Also, instead of keeping an <code>nsCOMPtr&lt;nsIRDFDataSource&gt;</code>, you'll just want an <code>nsCOMPtr&lt;nsISupports&gt;</code>:</p>\n\n<pre>class MyClass : public nsIMyInterface {\n    ...\nprivate:\n    nsCOMPtr&lt;nsISupports&gt; mInner;\n};\n</pre>\n\n<p>Construct the datasource delegate when your object is constructed (or, at worst, when somebody QI's for it):</p>\n\n<pre>rv = nsComponentManager::CreateInstance(\n        kRDFInMemoryDataSourceCID,\n        this, /* the \"outer\" */\n        nsCOMTypeInfo&lt;nsISupports&gt;::GetIID(),\n        getter_AddRefs(mInner));\n</pre>\n\n<p>Note passing <code>this</code> as the \"outer\" parameter.</p>\n\n<p>Now, if the in-memory datasource's implementation of <code>QueryInterface()</code> fails because it doesn't support the requested interface, it will<em>forward</em> the query interface to its \"outer\" (which is \"us\"). This preserves the symmetrical property of <code>QueryInterface()</code>.</p>\n\n<p>For us to preserve symmetry, our <code>QueryInterface()</code> implementation needs to forward <code>nsIRDFDataSource</code> to the delegate<sup>3</sup>:</p>\n\n<pre>NS_IMETHODIMP\nMyClass::QueryInterface(REFNSIID aIID, void** aResult)\n{\n  NS_PRECONDITION(aResult != nsnull, \"null ptr\");\n  if (! aResult)\n    return NS_ERROR_NULL_POINTER;\n\n  if (aIID.Equals(nsCOMTypeInfo&lt;nsIMyInterface&gt;::GetIID()) ||\n      aIID.Equals(nsCOMTypeInfo&lt;nsISupports&gt;::GetIID())) {\n    *aResult = NS_STATIC_CAST(nsIGlobalHistory*, this);\n  }\n  else if (aIID.Equals(nsCOMTypeInfo&lt;nsIRDFDataSource&gt;::GetIID())) {\n    return mInner-&gt;QueryInterface(aIID, aResult);\n  }\n  else {\n    *aResult = nsnull;\n    return NS_NOINTERFACE;\n  }\n\n  NS_ADDREF(NS_STATIC_CAST(nsISupports*, aResult));\n  return NS_OK;\n}\n</pre>\n\n<p>The only other thing that you'll need to be aware of is that you'll need to <code>QueryInterface()</code> from <code>nsISupports</code> to <code>nsIRDFDataSource</code> before you can actually do anything useful with the datasource from within your object. For example:</p>\n\n<pre>NS_IMETHODIMP\nMyClass::DoSomething()\n{\n  nsCOMPtr&lt;nsIRDFDataSopurce&gt; ds = do_QueryInterface(mInner);\n\n  rv = ds-&gt;Assert(/* something useful here */);\n\n  // etc...\n\n  return NS_OK;\n}\n</pre>\n\n<p>It may be tempting to keep a pointer to the aggregate's <code>nsIRDFDataSource</code> in a member variable, but<em>you can't do that</em>. Why? Because if you did, you'd hold a circular reference that would never unwind.</p>\n\n<h3 id=\"Notes\" name=\"Notes\">Notes</h3>\n\n<ol>\n <li>Describing all of the vagaries of <a href=\"en/XPCOM\">XPCOM</a> aggregation is beyond the scope of this document. The basic idea is to overload <code>QueryInterface()</code>, allowing it to return a<em>delegate</em> object that supports the interface. There is some trickery involved on the delegate's part to ensure that reference counting is done sanely, and that the reflexive, symmetric, and transitive properties of <code>QueryInterface()</code> are preserved. If you're really interested, I'd recommend reading about it in a COM book.</li>\n <li>For more information on writing a datasource, see the <a href=\"en/RDF_Datasource_How-To\">RDF Datasource How-To</a> document.</li>\n <li>You could also forward other interfaces to the <code>mInner</code> that you<em>know</em> it can support; however, this is <strong>extremely risky</strong>. It's risky because another implementation of the same object might<em>not</em> support those interfaces. Then the <code>QueryInterface()</code> will be forwarded back to you, and we'll recurse off to infinity (and beyond!...</li>\n</ol>\n\n<p><span class=\"comment\">Interwiki Language Links</span></p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/SphinxKnight\">SphinxKnight</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/teoli\">teoli</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nam-Hyung%20Kim\">Nam-Hyung Kim</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/20after4\">20after4</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/NickolayBot\">NickolayBot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Simplex\">Simplex</a>",
    "title": "Aggregating the In-Memory Datasource"
}