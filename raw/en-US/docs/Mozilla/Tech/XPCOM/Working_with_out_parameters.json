{
    "content": "<p> </p>\n<p>When working with <a href=\"/en/XPCOM\" title=\"en/XPCOM\">XPCOM</a> components, you might come across method declarations like the following one:</p>\n<pre class=\"eval\">[scriptable, uuid(8B5314BC-DB01-11d2-96CE-0060B0FB9956)]\ninterface nsITransferable : nsISupports {\n  ...\n  void getTransferData ( in string aFlavor, out nsISupports aData, out unsigned long aDataLen ) ;\n  ...\n}\n</pre>\n<p>The <code>getTransferData</code> method takes three parameters, <code>aFlavor</code>, <code>aData</code>, and <code>aDataLen</code>, and returns nothing. <code>aData</code> and <code>aDataLen</code> are marked as <code>out</code>, meaning that they act as \"return values\" for this method, and are changed during the method call. These are so-called <em>out parameters</em>.</p>\n<h4 id=\"Usage\">Usage</h4>\n<p>In order to use such a method from <a href=\"/en/JavaScript\" title=\"en/JavaScript\">JavaScript</a> via <a href=\"/en/XPConnect\" title=\"en/XPConnect\">XPConnect</a>, you have to follow a specific rule. To get at the out parameters, you have to pass in an object. After the call, this object will have a new property called <code>value</code>, which contains the out values.</p>\n<p>Assuming you have an object called <code>transferable</code>, you would invoke <code>getTransferData()</code> as follows:</p>\n<pre class=\"eval\">var aData    = {};\nvar aDataLen = {};\n\ntransferable.getTransferData(\"text/unicode\", aData, aDataLen);\n\nvar data    = aData.value;\nvar dataLen = aDataLen.value;\n</pre>\n<p>As you can see, after the call to <code>getTransferData()</code>, the out values are then contained in the <code>value</code> properties of <code>aData</code> and <code>aDataLen</code>.</p>\n<h4 id=\"Implementation\">Implementation</h4>\n<p>When implementing a method which has <em>out parameters</em> in <a href=\"/en/JavaScript\" title=\"en/JavaScript\">JavaScript</a>, you have to set a new property called <code>value</code> to the out parameter which will hold the required value.</p>\n<p>You would implement <code>getTransferData()</code> as follows: <code> </code></p>\n<pre class=\"eval\"> getTransferData: function(aFlavor, aData, aDataLen) {\n   ..\n   ..\n   aData.value = resultData;\n   aDataLen.value = resultData.length;\n }\n</pre>\n<h2 id=\"See_also\">See also</h2>\n<ul> <li><a href=\"/en/IDL_interface_rules\" title=\"en/IDL interface rules\">IDL interface rules</a></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/teoli\">teoli</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Smi\">Smi</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sivakrishna\">Sivakrishna</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Andreas%20Wuest\">Andreas Wuest</a>",
    "title": "Working with out parameters"
}