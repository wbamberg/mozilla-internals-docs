{
    "content": "<p>XPCOM thread synchronization primitives have the same semantics as those in NSPR, and each method of these synchronization objects (e.g. <code>Mutex::Lock()</code>) has a matching function in NSPR (<code>PR_Lock()</code>). This is no accident, as mozilla:: primitives are merely bare-minimum wrappers around NSPR's.</p>\n<p>This article covers the API of Mozilla synchronization only. For a higher-level introduction to thread synchronization, see <a href=\"/en/NSPR_API_Reference/Introduction_to_NSPR#NSPR_Thread_Synchronization\" title=\"en/NSPR_API_Reference/Introduction_to_NSPR#NSPR_Thread_Synchronization\">Introduction_to_NSPR</a>.</p>\n<h2 id=\"Quick_reference_Difference_between_nsAutoLock_API_and_new_API\">Quick reference: Difference between nsAutoLock API and new API</h2>\n<table> <tbody> <tr> <td> <h3 id=\"Old_construction\">Old construction</h3> <p> </p> <div class=\"note\"><strong>Note</strong>: This is deprecated code that is shown only to compare with approved code.</div> <pre class=\"brush: cpp\">  PRLock* mLock;\n  PRMonitor* mMonitor;\n  PRCondVar* mCvar;\n\n  FooConstructor() {\n  }\n  nsresult Init() {\n      mLock = nsAutoLock::NewLock(\"Foo lock\");\n      // check for null\n\n      mMonitor = nsAutoMonitor::NewMonitor(\"Foo monitor\");\n      // check for null\n\n      mCvar = PR_NewCondVar(mRawLock);\n      // check for null\n\n      // ...\n  }\n</pre> <p> </p> </td> <td> <h3 id=\"New_Construction\">New Construction</h3> <p> </p> <pre class=\"brush: cpp\">  using namespace mozilla;\n\n  Mutex mLock;\n  Monitor mMonitor;\n  CondVar mCvar;\n\n  FooConstructor() \n      : mLock(\"Foo lock\"),\n        mMonitor(\"Foo monitor\"),\n        mCvar(mLock, \"Foo condvar\") {\n  }\n  nsresult Init() {\n      // ...\n  }\n</pre> <p> </p> </td> </tr> <tr> <td> <h3 id=\"Old_Usage\">Old Usage</h3> <p> </p> <div class=\"note\"><strong>Note</strong>: This is deprecated code that is shown only to compare with approved code.</div> <pre class=\"brush: cpp\">  ConcurrentMethod() {\n      nsAutoLock al(mLock);\n      nsAutoMonitor am(mMonitor);\n      if (needExpensiveComputation()) {\n          nsAutoUnlock au(mLock);\n      }\n      am.Wait();\n      PR_NotifyCondVar(mCvar);\n  }\n</pre> <p> </p> </td> <td> <h3 id=\"New_Usage\">New Usage</h3> <p> </p> <pre class=\"brush: cpp\">  using namespace mozilla;\n\n  ConcurrentMethod() {\n      MutexAutoLock al(mLock);\n      MonitorAutoEnter am(mMonitor);\n      if (needExpensiveComputation()) {\n          MutexAutoUnlock au(mLock);\n      }\n      am.Wait();\n      mCvar-&gt;Notify();\n  }\n</pre> <p> </p> </td> </tr> </tbody>\n</table><h2 id=\"Mozilla_Synchronization_API_reference\">Mozilla Synchronization API reference</h2>\n<p>The <code>mozilla::</code> namespace exports the following synchronization primitives.</p>\n<ul> <li><a href=\"/en/Namespace/Mozilla/CondVar\" title=\"en/Namespace/Mozilla/CondVar\">mozilla::CondVar</a></li> <li><a href=\"/en/Namespace/Mozilla/Monitor\" title=\"en/Namespace/Mozilla/Monitor\">mozilla::Monitor</a></li> <li><a href=\"/en/Namespace/Mozilla/MonitorAutoEnter\" title=\"en/Namespace/Mozilla/MonitorAutoEnter\">mozilla::MonitorAutoEnter</a></li> <li><a href=\"/en/Namespace/Mozilla/Mutex\" title=\"en/Namespace/Mozilla/Mutex\">mozilla::Mutex</a></li> <li><a href=\"/en/Namespace/Mozilla/MutexAutoLock\" title=\"en/Namespace/Mozilla/MutexAutoLock\">mozilla::MutexAutoLock</a></li> <li><a href=\"/en/Namespace/Mozilla/MutexAutoUnlock\" title=\"en/Namespace/Mozilla/MutexAutoUnlock\">mozilla::MutexAutoUnlock</a></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/teoli\">teoli</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/cgj\">cgj</a>",
    "title": "XPCOM Thread Synchronization"
}