{
    "content": "<p><a href=\"/en-US/docs/Storage\" title=\"/en-US/docs/Storage\">mozStorage</a> uses <a href=\"https://en.wikipedia.org/wiki/SQLite\" title=\"SQLite\">SQLite</a> as the database backend. It has generally good performance for a small embedded database. However, many things cause various database operations to be slow.</p>\n<h3 id=\"Transactions\" name=\"Transactions\">Transactions</h3>\n<p>There is overhead associated with each transaction. When you execute a SQL statement in isolation, an implicit transaction is created around that statement. When transactions are committed, sqlite does journaling which requires syncing data to disk. This operation is extremely slow. Therefore, if you are doing many transactions in a row, you will get significant performance improvements by surrounding them in a transaction.</p>\n<p>The Asynchronous writes discussed below removes most of the immediate penalty of a commit, so you will not notice the problem as much. However, there is still overhead, and using a transaction will still be faster. One major problem is that the queue of file operations will get very long if there are many transactions. Some operations require walking this queue to see what operations have been pending, and they will be slower. If the user shuts down the browser soon after you do this type of operation, you can delay shutdown (possibly for many tens of seconds for large numbers of transactions and slow disks), making it look like the browser is hung.</p>\n<h3 id=\"Queries\" name=\"Queries\">Queries</h3>\n<p>Careful reordering of the SQL statement, or creating the proper indices, can often improve performance. See the <a class=\"external\" href=\"http://www.sqlite.org/optoverview.html\">sqlite optimizer overview</a> on the sqlite web site for information on how sqlite uses indices and executes statements.</p>\n<p>You might also want to try to the \"explain\" feature on your statements to see if they are using the indices you expect. Type \"explain\" followed by your statement to see the plan. For example, <code>explain select * from moz_history;</code> The results are hard to understand, but you should be able to see whether it is using indices. A command that will give you a higher level overview is \"explain query plan\". For example</p>\n<pre>sqlite&gt; explain query plan select * from moz_historyvisit v join moz_history h\n        on v.page_id = h.id where v.visit_date &gt; 1000000000;\n\n0|0|TABLE moz_historyvisit AS v WITH INDEX moz_historyvisit_dateindex\n1|1|TABLE moz_history AS h USING PRIMARY KEY</pre>\n<p>This tells us that it will first look up in moz_historyvisit using an index, and will then look up in moz_history using the primary key. Both of these are \"good\" because they use indices and primary keys, which are fast.</p>\n<pre>sqlite&gt; explain query plan select * from moz_historyvisit where session = 12;\n\n0|0|TABLE moz_historyvisit</pre>\n<p>In this example, you can see that it is <em>not</em> using an index, so this query would be slow.</p>\n<p>You can download the command line tool from the <a class=\"external\" href=\"http://www.sqlite.org/download.html\">sqlite download page</a>. Be sure you have a version of the command line tool that is at least as recent as what Mozilla uses. As of April 10, 2006, Mozilla uses sqlite 3.3.4, but the latest precompiled version of the command line tools is not available for all platforms. This will lead to errors that say \"database is encrypted\" because the tool is not able to recognize the file format. You may want to check the SQLITE_VERSION definition in <code><a href=\"https://dxr.mozilla.org/mozilla-central/source/db/sqlite3/src/sqlite3.h\" rel=\"custom\">db/sqlite3/src/sqlite3.h</a></code> for the current version if you are having problems.</p>\n<h3 id=\"Caching\" name=\"Caching\">Caching</h3>\n<p>Sqlite has a cache of database pages in memory. It keeps pages associated with the current transaction so it can roll them back, and it also keeps recently used ones so it can run faster.</p>\n<p>In the past, it flushed the cache at the end of a transaction (by default). In order to keep the cache active between transactions, you needed to have a second connection with a 'dummy' (and schema changing) transaction. That is not needed now.</p>\n<p>You can control the size of the memory cache using the <code>cache_size</code> <a class=\"external\" href=\"http://www.sqlite.org/pragma.html\">pragma</a>. This value controls the number of pages of the file that can be kept in memory at once. The page size can be set using the <code>page_size</code> pragma before any operations have been done on the file. You can see an example of setting the maximum cache size to be a percentage of memory in nsNavHistory::InitDB in <code><a href=\"https://dxr.mozilla.org/mozilla-central/source/toolkit/components/places/src/nsNavHistory.cpp\" rel=\"custom\">toolkit/components/places/src/nsNavHistory.cpp</a></code>.</p>\n<h4 id=\"Sharing_the_cache_between_connections\" name=\"Sharing_the_cache_between_connections\">Sharding the cache between connections</h4>\n<p>By default, Storage enables the <a class=\"external\" href=\"http://www.sqlite.org/sharedcache.html\">sqlite shared-cache mode</a> which makes multiple connections to the same database share the same cache. The cache is threadsafe. All you need to do is use Services.storage.openDatabase(file). Some features (virtual tables, full text indexes) are not compatible with shared cache - then you need to use Services.storage.openUnsharedDatabase(file), which doesn't share the cache. See <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIStorageService#openDatabase()\">mozIStorageService.openDatabase()</a></code>.</p>\n<h3 id=\"Disk_writes\">Disk writes</h3>\n<p>Sqlite provides the basic ACID rules of database theory:</p>\n<ul>\n  <li>Atomicity: each transaction is atomic and cannot be \"partially\" committed.</li>\n  <li>Consistency: the database won't get corrupted.</li>\n  <li>Isolation: multiple transactions do not affect each other.</li>\n  <li>Durability: once a commit has gone through, the data is guaranteed to be committed.</li>\n</ul>\n<p>The problem is that these requirements make some operations, especially commits, very slow. For each commit, sqlite does two disk syncs among many other file operations (see the \"Atomic Commit\" section of <a class=\"external\" href=\"http://www.sqlite.org/php2004/slides-all.html\" rel=\"freelink\">http://www.sqlite.org/php2004/slides-all.html</a> for more information on how this works). These disk syncs are very slow and limit the speed of a commit to the rotational speed of the mechanical disk.</p>\n<h3 id=\"Vacuuming_and_zero-fill\">Vacuuming and zero-fill</h3>\n<p>Sqlite has a VACUUM command to compress unused space from the database. Sqlite works like a memory manager or a file system. When data is deleted, the associated bytes are marked as free but are not removed from the file. This means that the file will not shrink, and some data may still be visible in the file. The way to work around this is to run the VACUUM command to remove this space.</p>\n<p>Vacuuming is very slow. The vacuum command is essentially the same as the command line <code>sqlite3 olddb .dump | sqlite3 newdb; mv newdb olddb</code>. On some networked drives, vacuuming a 10MB database has been timed at over one minute. Therefore, you should avoid vacuuming whenever possible.</p>\n<p>Some items in databases are privacy sensitive, such as deleted history items. Users have the expectation that deleting items in their history will remove the traces of that from the database. As a result, Mozilla enables the <code>SQLITE_SECURE_DELETE</code> preprocessor flag in <code><a href=\"https://dxr.mozilla.org/mozilla-central/source/db/sqlite3/src/Makefile.in\" rel=\"custom\">db/sqlite3/src/Makefile.in</a></code>. This flag causes deleted items to be filled with 0s on disk. This eliminates the need to vacuum except to reclaim disk space, and makes many operations much faster.</p>\n<p>Zero-filling can have significant performance overhead in some situations. For example, the history service used to delete many database items at shutdown when expiring old history items. This operation is not necessarily slow, but writing 0s to disk in an \"ACI\" database is still slow. This made shutdown very slow because the AsyncIO thread would block shutdown (<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=328598\" title=\"FIXED: Places slow to shut down\">bugÂ 328598</a>). Shutdown times of more than 30 seconds were seen. As a result, this bug introduced incremental history expiration eliminating the need to write many 0s to disk on shutdown.</p>\n<p>Unfortunately, this operation cannot be controlled on a per-transaction or per-connection basis. Some operations will benefit, while others will be hurt.</p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/teoli\">teoli</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/peter.kehl\">peter.kehl</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/another_sam\">another_sam</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/sdwilsh\">sdwilsh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sipaq\">Sipaq</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/MarcDiethelm\">MarcDiethelm</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ptak82\">Ptak82</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Pmsyyz\">Pmsyyz</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/BrettWilson\">BrettWilson</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Andreas%20Wuest\">Andreas Wuest</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Tuukka\">Tuukka</a>",
    "title": "Performance"
}