{
    "content": "<p>\n</p><p>This guide explains how to build <a href=\"en/XPCOM\">XPCOM</a> components in C++ using the <a href=\"en/Gecko_SDK\">Gecko SDK</a>.\n</p>\n<h2 id=\"Introduction\">Introduction</h2>\n<p>It is assumed that you already know something about XPCOM component development.\n(More information on XPCOM is available at the\n<a class=\"external\" href=\"http://www.mozilla.org/projects/xpcom/\">XPCOM project page</a>.)\nThe intent of this guide is to help you build your components \"the right way\"\nsuch that they will remain compatible with future versions of Mozilla. For information on how to retrieve and install the Gecko SDK, see <a href=\"en/Gecko_SDK\">here</a>.\n</p><p>An XPCOM component will be compatible with future versions of Mozilla if it\nonly makes use of <u>frozen</u> Gecko APIs. A frozen Gecko API is\none that is included in the Gecko and marked frozen with the text\n&lt;tt&gt;@status FROZEN&lt;/tt&gt; (with NSPR as the exception\nto the rule).\n</p><p>The frozen Gecko API consists of a set of component\ninterfaces (C++ vtables) and &lt;tt&gt;extern \"C\"&lt;/tt&gt; symbols exported from the XPCOM library and the NSPR libraries. The ABI of the component interfaces depends on\nthe C++ ABI of the host compiler (i.e., the vtable format and calling\nconventions of the virtual methods may vary from compiler to compiler). The\nGecko ABI is therefore compiler sensitive. (&lt;tt&gt;about:buildconfig&lt;/tt&gt;\ncan be loaded in Mozilla to reveal details about the compiler that was used.)\n</p><p>For the remainder of this guide, we'll assume you are developing components under\nLinux. (Ports of this guide are welcome.)\n</p><p>A \"frozen\" interface or function is guaranteed to be supported by future versions\nof same major version of the platform. The SDK contains headers for all of the frozen interfaces and\nfunctions, and it also contains headers for classes and functions defined in the\nglue libraries. When those classes or functions are used, the component must link\nwith the corresponding static library. Every frozen interface or function will\nbe labeled as such in the <a href=\"en/XPIDL\">IDL</a> or header file with \"<code>@status FROZEN</code>\". (<b>NOTE:</b> NSPR is the one exception to this rule. All NSPR functions are frozen by default and are not marked as such in the respective\nheader files.)\n</p><p>The glue library exists to make common tasks easier. For example, the\n<code>nsCOMPtr</code> class is defined in the XPCOM glue library. If your\ncomponent does not use any of the glue classes or functions, then you do\nnot need to link against the glue library.\n</p><p><i>Work in progress...</i>\n</p>\n<h2 id=\"Linking\">Linking</h2>\n<p>(Link line, version script to only expose NSGetModule, etc.)\n</p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/teoli\">teoli</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/BenB\">BenB</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Andreas%20Wuest\">Andreas Wuest</a>",
    "title": "Using the Gecko SDK"
}