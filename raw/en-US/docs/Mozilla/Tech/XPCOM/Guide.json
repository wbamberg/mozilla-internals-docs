{
    "content": "<p><span class=\"seoSummary\">These articles provide tutorials and usage documentation for XPCOM, including how to use it in your own projects and how to build XPCOM components for your Firefox add-ons and the like.</span></p>\n\n<div class=\"warning\">\n<p><strong>WebExtensions are becoming the new standard for creating add-ons. </strong>Eventually support for XPCOM add-ons will be deprecated, so you should begin to investigate porting your add-ons to use the <a href=\"/en-US/docs/Mozilla/Add-ons/WebExtensions\">WebExtensions</a> API, and <a href=\"https://mzl.la/webext-feature-needed\">report any missing functionality</a> so we can be sure to address your concerns. Work is ongoing on WebExtension capabilities, so your input will help prioritize and plan the work. To learn more about the kinds of changes that will be needed, see <a href=\"/en-US/docs/Mozilla/Add-ons/WebExtensions/Comparison_with_XUL_XPCOM_extensions\">Comparison with XUL/XPCOM extensions</a>. In addition, any binaries you use will then need to be converted for use with the WebExtensions <a href=\"/en-US/docs/Mozilla/Add-ons/WebExtensions/Native_messaging\">native messaging</a> API, or compiled using <a href=\"https://webassembly.github.io/\">WebAssembly</a> or <a href=\"/en-US/docs/Mozilla/Projects/Emscripten\">Emscripten</a>.</p>\n</div>\n\n<p></p><div class=\"row topicpage-table\">\n    <div class=\"section\"><dl><dl><dt class=\"landingPageList\"><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Guide/Avoiding_leaks_in_JavaScript_components\">Avoiding leaks in JavaScript XPCOM components</a></dt><dd class=\"landingPageList\">Programmers writing and reviewing JavaScript code in Mozilla should understand how code using XPCOM in JavaScript can leak so that they can avoid leaks. This document attempts to help them do so, first by explaining the underlying concepts, and second by describing a number of common JavaScript patterns that cause leaks.</dd><dt class=\"landingPageList\"><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Guide/Creating_components\">Creating XPCOM components</a></dt><dd class=\"landingPageList\">This guide is about Gecko, and about creating <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Guide/Creating_components/en/XPCOM\">XPCOM</a> components for Gecko-based applications.</dd><dt class=\"landingPageList\"><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Guide/Building_components_in_JavaScript\">How to build an XPCOM component in JavaScript</a></dt><dd class=\"landingPageList\">If you are looking for Add-on SDK solution for XPCOM JavaScript components then check out <a href=\"https://addons.mozilla.org/en-US/developers/docs/sdk/latest/modules/sdk/platform/xpcom.html\" title=\"https://addons.mozilla.org/en-US/developers/docs/sdk/latest/modules/sdk/platform/xpcom.html\">platform/xpcom</a> module first.</dd><dt class=\"landingPageList\"><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Guide/Inheriting_from_implementation_classes\">Inheriting from implementation classes</a></dt><dd class=\"landingPageList\">Given that IDL interfaces map to abstract classes in C++, a common problem when dealing with IDL is when you have an IDL inheritance hierarchy, and a corresponding C++ implementation hierarchy, you run into <strong>multiple inheritance</strong>. That's not inherently multiple inheritance, though, because you only mix in interfaces (i.e. the problem would not exist with Java's <code>interface</code>s).</dd><dt class=\"landingPageList\"><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Guide/Cross-thread_calls_using_runnables\">Making cross-thread calls using runnables</a></dt><dd class=\"landingPageList\">In the Mozilla platform, most activities such as layout, <a href=\"/en/DOM\" title=\"DOM\">DOM</a> operations, content <a href=\"/en/JavaScript\" title=\"JavaScript\">JavaScript</a>, and chrome JavaScript run on the main thread. However, it may be useful for C++ code in the Mozilla platform to run tasks on another thread.</dd><dt class=\"landingPageList\"><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Guide/Internal_strings\">Mozilla internal string guide</a></dt><dd class=\"landingPageList\">Most of the Mozilla code uses a C++ class hierarchy to pass string data, rather than using raw pointers. This guide documents the string classes which are visible to code within the Mozilla codebase (code which is linked into libxul).</dd></dl></dl></div>\n    <div class=\"section\"><dl><dt class=\"landingPageList\"><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Guide/mozilla::services\">mozilla::services namespace</a></dt><dd class=\"landingPageList\">The <code>services</code> C++ namespace offers an easy and efficient alternative for obtaining a service as compared to the indirect <a href=\"/en/XPCOM\" title=\"XPCOM\">XPCOM</a> approach: <code>GetService()</code>, <code>CallGetService()</code>, etc methods are expensive and should be avoided when possible.</dd><dt class=\"landingPageList\"><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Guide/Receiving_startup_notifications\">Receiving startup notifications</a></dt><dd class=\"landingPageList\">Sometimes it's necessary for XPCOM components to receive notifications as to the progress of the application's startup process, so they can start new services at appropriate times, for example.</dd><dt class=\"landingPageList\"><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Guide/Arrays\">XPCOM array guide</a></dt><dd class=\"landingPageList\">Mozilla has many array classes because each array is optimized for a particular usage pattern. This guide describes the available arrays as well as the enumerator classes that can be used to get to them. In this document the term Array refers to a container for multiple objects with a numeric, zero-based index.</dd><dt class=\"landingPageList\"><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Guide/Changes_in_Gecko_2.0\">XPCOM changes in Gecko 2.0</a></dt><dd class=\"landingPageList\">Several changes that affect XPCOM component compatibility are taking place in Gecko 2. This article details those changes, and provides suggestions for how to update your code.</dd><dt class=\"landingPageList\"><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Guide/Hashtables\">XPCOM hashtable guide</a></dt><dd class=\"landingPageList\">A hashtable is a data construct that stores a set of <strong>items</strong>. Each item has a <strong>key</strong> that identifies the item. Items are found, added, and removed from the hashtable by using the key. Hashtables may seem like <a href=\"/en/XPCOM_array_guide\" title=\"en/XPCOM_array_guide\">arrays</a>, but there are important differences:</dd><dt class=\"landingPageList\"><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Guide/Streams\">XPCOM Stream Guide</a></dt><dd class=\"landingPageList\">In Mozilla code, a stream is an object which represents access to a sequence of characters.  It is not that sequence of characters, though: the characters may not all be available when you read from the stream.</dd></dl></div>\n    </div><p></p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>",
    "title": "XPCOM guide"
}