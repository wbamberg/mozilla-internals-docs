{
    "content": "<p><code>Components.classes</code> is a read-only object whose properties are classes indexed by <a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIClassInfo/contractID\" title=\"en/ContractID\">ContractID</a>.</p>\n\n<h2 id=\"Introduction\" name=\"Introduction\">Introduction</h2>\n\n<p><code>Components.classes</code> is a read-only object whose properties implement the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIJSCID\" title=\"\">nsIJSCID</a></code> interface. Each object represents one of the classes of <a href=\"/en-US/docs/Mozilla/Tech/XPCOM\" title=\"en/XPCOM\">XPCOM</a> components that can be constructed or accessed as an XPCOM service.</p>\n\n<p>The properties of this object are indexed by the ContractID (or human-readable name) of the component class.</p>\n\n<p>All of the properties and methods of the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIJSCID\" title=\"\">nsIJSCID</a></code> and its ancestor interface <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIJSID\" title=\"\">nsIJSID</a></code> are available for use on the objects contained in this object.</p>\n\n<p><strong>Note</strong> that <code>Components.classes</code> reflects only those component classes that have been previously installed and registered with the component manager using ContractIDs. If you want to use a class which was only registered with their <a href=\"/en/CID\" title=\"en/CID\">CID</a>, use <code><a href=\"/en/Components.classesByID\" title=\"en/Components.classesByID\">Components.classesByID</a></code> instead of <code>Components.classes</code> to retrieve it.</p>\n\n<p>Note also that it is possible that a given add-on component with a given ContractID will be present on one machine but not have been installed on another machine. If the given element in the <code>Components.classes</code> object is not registered on the machine then trying to access it will generate a JavaScript warning in strict mode and the value returned will be the JavaScript value <code><a href=\"/en/JavaScript/Reference/Global_Objects/undefined\" title=\"en/JavaScript/Reference/Global_Objects/undefined\">undefined</a></code>. You should use the <code><a href=\"/en/JavaScript/Reference/Operators/Special/in\" title=\"en/JavaScript/Reference/Operators/Special/in\">in</a></code> operator to test for the element before trying to access it:</p>\n\n<pre class=\"eval\">if (!(\"@some/bogus/class;1\" in Components.classes))\n  // do something...\n</pre>\n\n<p>The properties of the <code>Components.classes</code> object can be enumerated using a <code><a href=\"/en/JavaScript/Reference/Statements/for...in\" title=\"en/JavaScript/Reference/Statements/for...in\">for...in</a></code> loop.</p>\n\n<h2 id=\"Usage\" name=\"Usage\">Usage</h2>\n\n<p>In order to retrieve the object for a given ContractID, you can query the <code>Components.classes</code> array as follows:</p>\n\n<pre class=\"eval\">var clazz0 = Components.classes[\"@mozilla.org/messenger;1\"];\n</pre>\n\n<p><code>clazz0</code> is the class object for the ContractID <code>@mozilla.org/messenger;1</code>, which is not usually used by itself, but whose <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFactory#createInstance%28%29\">createInstance</a> and <a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIServiceManager#getService()\">getService</a> methods can be used to create a new instance of the component or to access the singleton instance, if the contract ID represents a service.</p>\n\n<p>A <strong>new XPCOM component instance</strong> can be created from the returned class object as follows:</p>\n\n<pre class=\"eval\">var obj = Components.classes[\"@mozilla.org/supports-array;1\"]\n                    .createInstance(Components.interfaces.nsISupportsArray);\n</pre>\n\n<p>which is a shortcut to</p>\n\n<pre class=\"eval\">var obj = Components.classes[\"@mozilla.org/supports-array;1\"]\n                    .createInstance();\nobj.QueryInterface(Components.interfaces.nsISupportsArray);\n</pre>\n\n<p>If you don't provide a specific interface to <code>createInstance()</code>, it will return an <a href=\"/en/XPConnect\" title=\"en/XPConnect\">XPConnect</a> wrapper for the component, which only exposes the methods of the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code> interface (and under certain circumstances the special <a href=\"/en/wrappedJSObject\" title=\"en/wrappedJSObject\">wrappedJSObject</a> property).</p>\n\n<p><strong>To access a <em>service</em> </strong> (a <a href=\"https://en.wikipedia.org/wiki/Singleton_pattern\" title=\"singleton\">singleton</a> component, only single instance of which exists at any time), you should use <code>getService</code> instead of <code>createInstance</code>:</p>\n\n<pre class=\"eval\"> var os = Components.classes[\"@mozilla.org/observer-service;1\"]\n                    .getService(Components.interfaces.nsIObserverService);\n</pre>\n\n<p>The first time anyone accesses a service, the corresponding component is created under the hood.</p>\n\n<h3 id=\"Shortcuts\" name=\"Shortcuts\">Shortcuts</h3>\n\n<p>It's a common practice to abbreviate <code>Components.classes</code> and <code>Components.interfaces</code> by storing a reference to the object as a constant:</p>\n\n<pre class=\"eval\">const Cc = Components.classes, Ci = Components.interfaces;\nvar os = Cc[\"@mozilla.org/observer-service;1\"]\n         .getService(Ci.nsIObserverService);\n</pre>\n\n<p>A less known trick, useful when creating multiple instances of the same component, is to use the <code><a href=\"/en/JavaScript/Reference/Operators/Special/new\" title=\"en/JavaScript/Reference/Operators/Special/new\">new</a></code> operator on the class object:</p>\n\n<pre class=\"eval\">var clazz = Components.classes[\"@mozilla.org/supports-array;1\"];\nvar inst  = new clazz(Components.interfaces.nsISupportsArray);\n</pre>\n\n<p>This implicitly calls the <code>createInstance()</code> method for you. You still have to provide the interface name each time you create an instance, which is not necessary when using <code><a href=\"/en/Components.Constructor\" title=\"en/Components.Constructor\">Components.Constructor</a></code>.</p>\n\n<h2 id=\"Determining_if_a_component_has_to_be_instantiated_or_used_as_a_service\" name=\"Determining_if_a_component_has_to_be_instantiated_or_used_as_a_service\">Determining if a component has to be instantiated or used as a service</h2>\n\n<p>In the general case it is not possible to programmatically determine if a given component has to be instantiated or used as a service.</p>\n\n<p>Often, this is stated in the documentation of the component you want to use. If this is not the case, you might want to try and find example usages of that component within <a class=\"external\" href=\"http://mxr.mozilla.org/mozilla/search\">MXR</a>.</p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/SphinxKnight\">SphinxKnight</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Jonathan_Watt\">Jonathan_Watt</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/teoli\">teoli</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nickolay\">Nickolay</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mgjbot\">Mgjbot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Waldo\">Waldo</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Andreas%20Wuest\">Andreas Wuest</a>",
    "title": "Components.classes"
}