{
    "content": "<h3 id=\"Summary\" name=\"Summary\">Summary</h3>\n\n<p>Determines whether a given XPCOM return code (that is, an <code>nsresult</code> value) indicates the success or failure of an operation, returning <code>true</code> or <code>false</code> respectively.</p>\n\n<h3 id=\"Syntax\" name=\"Syntax\">Syntax</h3>\n\n<pre class=\"eval\">var succeeded = Components.isSuccessCode(<em>returnCode</em>);\n</pre>\n\n<h3 id=\"Parameters\" name=\"Parameters\">Parameters</h3>\n\n<dl>\n <dt><code>returnCode</code></dt>\n <dd>The return code (of type <code>nsresult</code>) to be checked.</dd>\n</dl>\n\n<h3 id=\"Description\" name=\"Description\">Description</h3>\n\n<p><code>Components.isSuccessCode()</code> may be used to determine whether an XPCOM return code (an <code>nsresult</code>) indicates success or failure. An XPCOM return code indicates success if its high-order bit is 0, and it indicates failure if its high-order bit is 1.</p>\n\n<div class=\"note\"><strong>Note:</strong> A non-zero XPCOM return code (that is, not <code><a href=\"/en/NS_OK\" title=\"en/NS_OK\">NS_OK</a></code>) does <strong>not</strong> necessarily indicate failure.</div>\n\n<p><code>Components.isSuccessCode()</code> is functionally equivalent to the following JavaScript:</p>\n\n<pre class=\"brush: js\">function isSuccessCode(returnCode) {\n  return (returnCode &amp; 0x80000000) === 0;\n}\n</pre>\n\n<p>Since failure error codes are turned into exceptions when encountered in JavaScript, this function usually is not necessary. However, if you are using asynchronous APIs, it may be essential. For example, if you ask a component or service to asynchronously perform some task, you must usually pass in an object which will be notified when the task is completed. If the task is sufficiently complex that it can fail, the notification will include a status code indicating the success or failure of the operation (see, for example, <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIRequestObserver#onStopRequest()\">nsIRequestObserver.onStopRequest()</a></code>). To determine the success or failure of the complex task, you would call <code>Components.isSuccessCode()</code> upon the status code included in the notification.</p>\n\n<h3 id=\"Examples\" name=\"Examples\">Examples</h3>\n\n<h4 id=\"Checking_whether_copying_a_stream.27s_data_succeeded\" name=\"Checking_whether_copying_a_stream.27s_data_succeeded\">Checking whether copying a stream's data succeeded</h4>\n\n<p>The following example demonstrates copying data from a buffered <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInputStream\" title=\"\">nsIInputStream</a></code> to an <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIOutputStream\" title=\"\">nsIOutputStream</a></code>, checking for whether the copy succeeded using <code>Components.isSuccessCode()</code>.</p>\n\n<div class=\"note\"><strong>Note:</strong> <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIAsyncStreamCopier#init()\">nsIAsyncStreamCopier.init()</a></code> has changed in <span title=\"(Firefox 3.6 / Thunderbird 3.1 / Fennec 1.0)\">Gecko 1.9.2</span>, omit last 2 boolean parameters if you're using <span title=\"(Firefox 3.5 / Thunderbird 3.0 / SeaMonkey 2.0)\">Gecko 1.9.1</span> and earlier.</div>\n\n<pre class=\"eval\">const Cc = Components.classes;\nconst Ci = Components.interfaces;\nconst Cr = Components.results;\n\n// global flags polled externally\nvar copyFailed = false;\nvar copyInProgress = false;\n\nfunction copyBufferedStream(inStream, outStream)\n{\n  var copyObserver =\n    {\n      onStartRequest: function(request, context)\n      {\n        copyInProgress = true;\n      },\n      onStopRequest: function(request, context, statusCode)\n      {\n        copyInProgress = false;\n\n        // did the copy fail?\n        if (!Components.isSuccessCode(statusCode))\n          copyFailed = true;\n      },\n      QueryInterface: function(aIID)\n      {\n        if (aIID.equals(Ci.nsIRequestObserver) ||\n            aIID.equals(Ci.nsISupports))\n          return this;\n\n        throw Cr.NS_ERROR_NO_INTERFACE;\n      }\n    };\n\n  var copier = Cc[\"@mozilla.org/network/async-stream-copier;1\"]\n                 .createInstance(Ci.nsIAsyncStreamCopier);\n  copier.init(inStream, outStream, null, true, false, 8192, true, true);\n  copier.asyncCopy(copyObserver, null);\n}\n</pre>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/jsantell\">jsantell</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/teoli\">teoli</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/michal.novotny\">michal.novotny</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Waldo\">Waldo</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Andreas%20Wuest\">Andreas Wuest</a>",
    "title": "Components.isSuccessCode"
}