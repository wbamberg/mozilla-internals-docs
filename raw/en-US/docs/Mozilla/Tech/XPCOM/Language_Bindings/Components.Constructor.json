{
    "content": "<h3 id=\"Summary\" name=\"Summary\">Summary</h3>\n\n<p>Creates a JavaScript function which can be used to create or construct new instances of XPCOM components.</p>\n\n<h3 id=\"Syntax\" name=\"Syntax\">Syntax</h3>\n\n<pre class=\"eval\">var func = [ new ] Components.Constructor(<em>contractID</em> [, <em>interfaceName</em> [, <em>initializer</em> ] ]);\n</pre>\n\n<h3 id=\"Parameters\" name=\"Parameters\">Parameters</h3>\n\n<dl>\n <dt><code>contractID</code></dt>\n <dd>A string containing the contract ID of the component</dd>\n <dt><code>interfaceName</code></dt>\n <dd>If given, <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsISupports#QueryInterface()\">nsISupports.QueryInterface()</a></code> will be called on each newly-created instance with the interface named by this string</dd>\n <dt><code>initializer</code></dt>\n <dd>If given, a string containing the name of a function which will be called on the newly-created instance, using the arguments provided to the created function when called</dd>\n</dl>\n\n<h3 id=\"Description\" name=\"Description\">Description</h3>\n\n<p><code>Components.Constructor()</code> is a handy shortcut for creating instances of XPCOM components. It eliminates the clutter of typing <code>Components.classes</code>, <code>Components.interfaces</code>, <code>createInstance</code>, and so on every time you wish to create an instance. It also gives creation of XPCOM objects more <a href=\"/en/JavaScript\" title=\"en/JavaScript\">JavaScript</a>-like syntax. Another important benefit is that it precomputes some of the computation it does, so using a function returned from <code>Components.Constructor()</code> to create XPCOM objects is faster than creating the object from base principles, as demonstrated below. (This benefit is also partly a result of having to travel through the layer between the JavaScript engine and XPCOM fewer times.)</p>\n\n<p>The behavior of functions returned by <code>Components.Constructor()</code> varies depending upon the arguments given to <code>Components.Constructor()</code> when called. If only one argument is given, that argument is the <a href=\"/en/Contract_ID\" title=\"en/Contract_ID\">contract ID</a> of the XPCOM component to create. The component is then returned immediately, with only the base interface <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code> available on it; you must call <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsISupports#QueryInterface()\">nsISupports.QueryInterface()</a></code> on it to call methods on the object. For example:</p>\n\n<pre class=\"brush: js\">var BinaryInputStream = Components.Constructor(\"@mozilla.org/binaryinputstream;1\");\nvar bis = new BinaryInputStream();\nprint(bis.toString()); // \"[xpconnect wrapped nsISupports]\"\n\ntry\n{\n  // someInputStream is an existing nsIInputStream\n  // throws because bis hasn't been QI'd to nsIBinaryInputStream\n  bis.setInputStream(someInputStream);\n}\ncatch (e)\n{\n  bis.QueryInterface(Components.interfaces.nsIBinaryInputStream);\n  bis.setInputStream(someInputStream); // succeeds now\n}\n</pre>\n\n<p>If two arguments are given, the created instance will be <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsISupports#QueryInterface()\">nsISupports.QueryInterface()</a></code>'d to the XPCOM interface whose name is the second argument:</p>\n\n<pre class=\"brush: js\">var BinaryInputStream = Components.Constructor(\"@mozilla.org/binaryinputstream;1\",\n                                               \"nsIBinaryInputStream\");\nvar bis = new BinaryInputStream();\nprint(bis.toString()); // \"[xpconnect wrapped nsIBinaryInputStream]\"\n\n// someInputStream is an existing nsIInputStream\nbis.setInputStream(someInputStream); // succeeds\n</pre>\n\n<p>If three arguments are given, then in addition to being <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsISupports#QueryInterface()\">nsISupports.QueryInterface()</a></code>'d, the instance will also have had an initialization method called on it. The arguments used with the initialization method are the arguments passed to the <code>Components.Constructor()</code>-created function when called:</p>\n\n<pre class=\"brush: js\">var BinaryInputStream = Components.Constructor(\"@mozilla.org/binaryinputstream;1\",\n                                               \"nsIBinaryInputStream\",\n                                               \"setInputStream\");\ntry\n{\n  // throws, because number of arguments isn't equal to the number of\n  // arguments nsIBinaryInputStream.setInputStream takes\n  var bis = new BinaryInputStream();\n}\ncatch (e)\n{\n  // someInputStream is an existing nsIInputStream\n  bis = new BinaryInputStream(someInputStream); // succeeds\n  var bytes = bis.readByteArray(<em>someNumberOfBytes</em>); // succeeds\n}\n</pre>\n\n<p>Compare instance creation from base principles with instance creation using <code>Components.Constructor()</code>; the latter is much easier to read than the former (particularly if you're creating instances of a component in many different places):</p>\n\n<pre class=\"brush: js\">var bis = Components.classes[\"@mozilla.org/binaryinputstream;1\"]\n                    .createInstance(Components.interfaces.nsIBinaryInputStream);\nbis.setInputStream(someInputStream);\n</pre>\n\n<pre class=\"brush: js\">// assumes BinaryInputStream was initialized previously\nvar bis = new BinaryInputStream(someInputStream);\n</pre>\n\n<p><code>Components.Constructor()</code> is purely syntactic sugar (albeit speedy and pretty syntactic sugar) for actions that can be accomplished using other common methods. It is equivalent to the following JavaScript function:</p>\n\n<pre class=\"brush: js\">function Components_Constructor(contractID, interfaceName, initializer)\n{\n  var ccArgs = arguments;\n\n  function ctor()\n  {\n    var instance = Components.classes[contractID]\n                             .createInstance(Components.interfaces.nsISupports);\n\n    if (ccArgs.length &gt; 1)\n    {\n      instance.QueryInterface(Components.interfaces[interfaceName]);\n\n      if (ccArgs.length &gt; 2)\n        instance[initializer].apply(instance, arguments);\n    }\n\n    return instance;\n  }\n\n  return ctor;\n}\n</pre>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/SphinxKnight\">SphinxKnight</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/teoli\">teoli</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Brettz9\">Brettz9</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mgjbot\">Mgjbot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Waldo\">Waldo</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Andreas%20Wuest\">Andreas Wuest</a>",
    "title": "Components.Constructor"
}