{
    "content": "<p>This document is a high-level overview of <a href=\"/en/XPConnect\" title=\"en/XPConnect\">XPConnect</a> wrapper objects (for the more technical description see <a href=\"/en-US/docs/XPConnect_security_membranes\" title=\"/en-US/docs/XPConnect_security_membranes\">XPConnect security membranes</a>). For practical advice on dealing with wrappers, see <a class=\"internal\" href=\"/en/Safely_accessing_content_DOM_from_chrome\" title=\"Ja/Safely accessing content DOM from chrome\">Safely accessing content DOM from chrome</a>.</p>\n\n<p>Developers in the know understand that wrappers play a large role in XPConnect, and that we have a lot of them. Less informed developers understand that wrappers exist and are somehow important, but they don't know when they should use what wrappers, or if they should be seeing a wrapper.</p>\n\n<div class=\"note\"><strong>Note:</strong> Wrappers can appear in the console log; for example \"[object XrayWrapper [object blah]]\". Because these are wrapped, you won't be able to peek down inside them from the console.</div>\n\n<h2 id=\"Basic_XPConnect_objects\">Basic XPConnect objects</h2>\n\n<h3 id=\"XPCWrappedNative\">XPCWrappedNative</h3>\n\n<p>These objects are created when any natively implemented XPCOM object (that is, any object implemented in C++) needs to be reflected into JavaScript. This includes all DOM objects (including <code>Window</code>) and chrome elements that are reflected into JavaScript.</p>\n\n<p>This wrapper is responsible for mapping calls <em>from</em> JavaScript <em>into</em> C++. This means that when you say <code>window.focus()</code>, you're calling into XPCWrappedNative code.</p>\n\n<p>If you call '<code>toString()</code>' and get \"<code>[xpconnect wrapped nsIFoo]</code>\" then the reference is to a <code>XPCWrappedNative</code> object with interface <code>nsIFoo</code>.</p>\n\n<p>They are implicitly created by XPConnect and you should not have to worry about how that happens. There are several types of wrapped natives, but I won't cover those here.</p>\n\n<h3 id=\"XPCWrappedJS\">XPCWrappedJS</h3>\n\n<p>These objects are the exact opposite of XPCWrappedNative. They exist to reflect an object <em>from</em> JavaScript <em>into</em> C++. This means that whenever you pass your JavaScript object into a C++ function, we create one of these wrappers. For example, if you've implemented some component with an interface <code>nsIFoo</code> and you pass your JavaScript object into a C++ function taking an <code>nsIFoo</code>, an XPCWrappedJS is created around your object. C++ calls are routed through XPCWrappedJS code into your JavaScript implementation.</p>\n\n<p>These wrappers are created by XPConnect, so you should not have to worry about how to construct them or whether to construct them.</p>\n\n<p><strong>Double wrapping.</strong> There is one case where an XPCWrappedNative wraps another wrapper object. This case is where a JS object was passed in via some IDL-declared interface, creating an XPCWrappedJS, and is now being returned to JavaScript via some other interface. In order to preserve API compatibility, an XPCWrappedNative is created around the XPCWrappedJS.</p>\n\n<h2 id=\"Security_wrappers_exposed_to_chrome\">Security wrappers exposed to chrome</h2>\n\n<p>To learn about security wrappers, see the article on <a href=\"/en-US/docs/Mozilla/Gecko/Script_security\">script security in Gecko</a>.</p>\n\n<p>Note that a previous version of the current page recommended using <code>__exposedProps__</code> to expose objects from chrome to content. This is now deprecated and we are in the process of removing support for it. If you need to make objects or functions defined in chrome code accessible to content, use <a href=\"/en-US/docs/Components.utils.cloneInto\">Components.utils.cloneInto</a> or <a href=\"/en-US/docs/Components.utils.exportFunction\">Components.utils.exportFunction</a>.</p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/fscholz\">fscholz</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kscarfone\">kscarfone</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ms2ger\">Ms2ger</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nickolay\">Nickolay</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Jorge.villalobos\">Jorge.villalobos</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mnoorenberghe\">mnoorenberghe</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/DRice\">DRice</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Jorend\">Jorend</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Johnjbarton\">Johnjbarton</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mrbkap\">Mrbkap</a>",
    "title": "XPConnect wrappers"
}