{
    "content": "<h3 id=\"Introduction\" name=\"Introduction\">Introduction</h3>\n<p>Sometimes, you might want to get a performance profile of a certain piece of JavaScript (like an XPCOM module), to see which part takes the most time. You could use <a href=\"en/Venkman\">Venkman</a> for that. But sometimes, Venkman gives too much noise (because it also profiles chrome code). Or you might want to have a more reproducible testcase. In those cases, an <a href=\"en/Xpcshell\">xpcshell</a> script can help. You can just call the code you want to test. But then, you can't use the Venkman UI.</p>\n<h3 id=\"XPCTools\" name=\"XPCTools\">XPCTools</h3>\n<p>There is profiler in the tree that can profile xpcshell scripts. To use it, you need to enable it in your <a href=\"en/Configuring_Build_Options\">mozconfig</a>:</p>\n<pre class=\"eval\"> ac_add_options --enable-xpctools\n</pre>\n<p>Now you can profile an entire script by setting the environment variable &lt;tt&gt;MOZILLA_JS_PROFILER_OUTPUT&lt;/tt&gt; to a filename where you want the output file. For example, on Linux or MacOSX you do:</p>\n<pre class=\"eval\">export MOZILLA_JS_PROFILER_OUTPUT=/tmp/profile.txt\n</pre>\n<p>Now, run the script using <a href=\"en/Xpcshell\">xpcshell</a>. After running has finished, the output file will contain a profile. A profile will look like this:</p>\n<pre class=\"eval\"> <a class=\"external\" rel=\"freelink\">file:///Users/michiel/Mozilla/tree1/...js/calUtils.js</a>\n     [2,25420] createDateTime() {60-62} 579 {min 0, max 3, avg 0, sum 427, self 427}\n     [2,56810] cp_QI() {860-866} 835 {min 0, max 1, avg 0, sum 950, self 950}\n</pre>\n<p>The first line tells which file was profiled. Then, the next lines shows the amount of time spend in the functions in that file. The line consists of:</p>\n<ul>\n <li>The compile count of the function;</li>\n <li>The call count of the function;</li>\n <li>The functions name;</li>\n <li>The starting line number;</li>\n <li>The ending line number;</li>\n <li>The function's size;</li>\n <li>The amount of time (in milliseconds) the fastest call took;</li>\n <li>The time of the slowest call;</li>\n <li>The average time spend;</li>\n <li>The total time;</li>\n <li>The time spend in the function itself is given (that is the total time excluding the time spend in functions called from this function).</li>\n</ul>\n<h3 id=\"Notes\" name=\"Notes\">Notes</h3>\n<ul>\n <li>You need a trunk build from after 2007-05-28. Using an earlier build will cause the profiler to hang</li>\n <li>The more adventurous can use the nsIXPCToolsProfiler.idl interface directly, but be aware that you must start the profiler before loading the files you want to profile (creating an instance of a component loads the file!)</li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Jonathan_Watt\">Jonathan_Watt</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/groovecoder\">groovecoder</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nickolay\">Nickolay</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mvl\">Mvl</a>",
    "title": "Profiling XPCShell"
}