{
    "content": "<h2 id=\"Async_network_requests\">Async network requests</h2>\n<p>Problem</p>\n<p>You want to make network requests or do other asynchronous work in xpcshell. However, when you start your script, it exits immediately, before the network request returns.</p>\n<p>Solution</p>\n<p>1. Put the following at the end of your script:</p>\n<pre>// Do async processing\n// From &lt;https://developer.mozilla.org/en/XPConnect/xpcshell/HOWTO&gt;\nprint(\"Doing async work\");\ngScriptDone = false;\nvar gThreadManager = Cc[\"@mozilla.org/thread-manager;1\"]\n    .getService(Ci.nsIThreadManager);\nvar mainThread = gThreadManager.currentThread;\n\nwhile (!gScriptDone)\n  mainThread.processNextEvent(true);\nwhile (mainThread.hasPendingEvents())\n  mainThread.processNextEvent(true);\n</pre>\n<p>2. In <strong>all</strong> callbacks where your script is finished, i.e. both success and error callbacks, put:</p>\n<pre>gScriptDone = true;</pre>\n<p>If you forget some condition where your script should exit but you don't add this statement, your script will hang (busy wait).</p>\n<p>This is of course a massive, ugly hack prone to error, but this is what the xpcshell test harness does. There should really be a better solution in xpcshell.</p>\n<h2 id=\"Using_JS_modules_and_non-UI_JavaScript_chrome_files\">Using JS modules and non-UI JavaScript chrome files</h2>\n<p>Problem</p>\n<p>You want to write a JavaScript file, and run it in xpcshell. The file uses JS modules. Maybe it even uses JavaScript files from chrome:// URLs.</p>\n<p>E.g., you use:</p>\n<pre class=\"bz_comment_text\" id=\"comment_text_0\">Components.utils.import(\"resource://app/modules/gloda/log4moz.js\");\n</pre>\n<p>However, you get (for that particular line, which is the first import):</p>\n<pre class=\"bz_comment_text\" id=\"comment_text_0\">uncaught exception: [Exception... \"Component returned failure code: 0x80040111 (NS_ERROR_NOT_AVAILABLE) \n[nsIXPCComponents_Utils.import]\"  nsresult: \"0x80040111 (NS_ERROR_NOT_AVAILABLE)\"  location: \"JS frame ::\nfile.js :: &lt;TOP_LEVEL&gt; :: line 12\"  data: no]\n</pre>\n<p> </p>\n<p>Solution 1</p>\n<pre><code>var loader = Components.classes[\"@mozilla.org/moz/jssubscript-loader;1\"]<br>   .getService(Components.interfaces.mozIJSSubScriptLoader);</code>\n<code>loader.loadSubScript(\"chrome://myall/content/file.jsm\");</code>\n</pre>\n<p>See:  <a class=\" external\" href=\"http://mxr.mozilla.org/comm-central/source/mailnews/base/test/unit/test_autoconfigUtils.js#54\" rel=\"freelink\">http://mxr.mozilla.org/comm-central/...figUtils.js#54</a></p>\n<p>Solution 2</p>\n<p>Append the following at the top of your JS file which you want to run in xpcshell</p>\n<pre class=\"bz_comment_text\" id=\"comment_text_0\">{\n  // &lt;https://developer.mozilla.org/en/XPConnect/xpcshell/HOWTO&gt;\n  // &lt;https://bugzilla.mozilla.org/show_bug.cgi?id=546628&gt;\n  let Cc = Components.classes;\n  let Ci = Components.interfaces;\n\n  // Register resource://app/ URI\n  let ios = Cc[\"@mozilla.org/network/io-service;1\"]\n    .getService(Ci.nsIIOService);\n  let resHandler = ios.getProtocolHandler(\"resource\")\n      .QueryInterface(Ci.nsIResProtocolHandler);\n  let mozDir = Cc[\"@mozilla.org/file/directory_service;1\"]\n      .getService(Ci.nsIProperties)\n      .get(\"CurProcD\", Ci.nsILocalFile);\n  let mozDirURI = ios.newFileURI(mozDir);\n  resHandler.setSubstitution(\"app\", mozDirURI);\n\n  // register chrome://* URIs\n  let cr = Cc[\"@mozilla.org/chrome/chrome-registry;1\"]\n        .getService(Ci.nsIChromeRegistry);\n  cr.checkForNewChrome();\n}</pre>\n<p><a class=\" link-https\" href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=546628\" title=\"https://bugzilla.mozilla.org/show_bug.cgi?id=546628\">Bug 546628</a> would make this unnecessary.</p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>",
    "title": "HOWTO"
}