{
    "content": "<p>Waives <a href=\"/en-US/docs/Xray_vision\">Xray vision</a> for an object, giving the caller a transparent wrapper to the underlying object.</p>\n<p>When privileged JavaScript in Gecko accesses objects belonging to less-privileged code (such as untrusted web content), it does so, by default, with \"Xray vision\": a mechanism that filters out certain changes to the objects that could cause them to behave in unexpected ways. For example, privileged code using an Xray to a DOM object sees only  the original, native version of the DOM object. Any <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Expando\">expando</a> properties are not visible, and if any native properties have been redefined, this has no effect.</p>\n<p>Xray vision is designed to make most simple operations safe. However, in some cases it can be too restrictive: for example, if you need to see an expando property on a DOM object. In these cases you can use <code>waiveXrays</code> to remove Xray vision for the object.</p>\n<p>Waiving Xrays is transitive, so waiving it for an object automatically waives it for any properties of that object (and their properties, and so on).</p>\n<p>If you waive Xray vision, you can no longer trust that any of the object's properties are what you expect: any of them, including prototypes and accessors, could have been redefined by the less-privileged code.</p>\n<p>To undo <code>waiveXrays</code> and get Xray vision back, call <a href=\"/en-US/docs/Components.utils.unwaiveXrays\"><code>Components.utils.unwaiveXrays</code></a> on the object.</p>\n<p>The result of <code>waiveXrays</code> is just like the <code>wrappedJSObject</code> property for Xrayed objects, but it's more useful because you can call it on primitives or objects that aren't Xrays, in which case it just returns the argument you passed in. This means you don't have to care whether the initial object is an Xray or not.</p>\n<h2 id=\"Syntax\" name=\"Syntax\">Syntax</h2>\n<pre class=\"eval\">waived = Components.utils.waiveXrays(<em>obj</em>);\n</pre>\n<h3 id=\"Parameters\" name=\"Parameters\">Parameters</h3>\n<dl>\n <dt>\n  <code>obj</code></dt>\n <dd>\n  The object for which we wish to waive Xrays.</dd>\n</dl>\n<h3 id=\"Returns\">Returns</h3>\n<p>If the argument <code>obj</code> is an Xray, this function returns a wrapper that transitively waives Xray behavior on the underlying object and anything that comes off the object. If <code>obj</code> is not an Xray, this function just returns <code>obj</code>.</p>\n<h2 id=\"Example\" name=\"Example\">Example</h2>\n<p>Suppose a page script adds an expando to its global window:</p>\n<pre class=\"brush: js\">// page script\n\nfoo = \"I'm an expando\";\n</pre>\n<p>By default, chrome code won't see <code>foo</code>, because it sees the content window with Xray vision, but the chrome code can waive Xray protection:</p>\n<pre class=\"brush: js\">// chrome code\n\n// contentWindow is an Xray\nvar isXray = Components.utils.isXrayWrapper(gBrowser.contentWindow);  // true\n\n// expandos are not visible in Xrays\nvar foo = gBrowser.contentWindow.foo;                                 // undefined\n\n// you can waive Xray vision for an object\nvar waived = Components.utils.waiveXrays(gBrowser.contentWindow);\nisXray = Components.utils.isXrayWrapper(waived);                      // false\nfoo = waived.foo;                                                     // \"I'm an expando\"\n\n// waiving is transitive\nisXray = Components.utils.isXrayWrapper(waived.document);             // false</pre>\n<p> </p>\n<h2 id=\"See_also\">See also</h2>\n<ul>\n <li><a href=\"/en-US/docs/Xray_vision\">Xray vision</a></li>\n <li><a href=\"/en-US/docs/Components.utils.unwaiveXrays\"><code>Components.utils.unwaiveXrays</code></a></li>\n <li><a href=\"/en-US/docs/Components.utils.isXrayWrapper\"><code>Components.utils.isXrayWrapper</code></a></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>",
    "title": "Components.utils.waiveXrays"
}