{
    "content": "<p>This function provides a safe way to take an object defined in a privileged scope and create a <a href=\"/en-US/docs/Web/Guide/API/DOM/The_structured_clone_algorithm\">structured clone</a> of it in a less-privileged scope. It returns a reference to the clone:</p>\n<pre class=\"brush: js\">var clonedObject = cloneInto(myObject, targetWindow);</pre>\n<p>You can then assign the clone to an object in the target scope as an expando property, and scripts running in that scope can access it:</p>\n<pre class=\"brush: js\">targetWindow.foo = clonedObject;</pre>\n<p>In this way privileged code, such as an add-on, can share an object with less-privileged code like a normal web page script.</p>\n<h2 id=\"Syntax\">Syntax</h2>\n<pre class=\"brush: js\">Components.utils.cloneInto(obj, targetScope[, options]);</pre>\n<h3 id=\"Parameters\">Parameters</h3>\n<dl>\n <dt>\n  <code>obj : object</code></dt>\n <dd>\n  The object to clone.</dd>\n <dt>\n  <code>targetScope : object</code></dt>\n <dd>\n  The object to attach the object to.</dd>\n <dt>\n  <code>options : object</code></dt>\n <dd>\n  This optional parameter is an object with the following optional properties:</dd>\n</dl>\n<ul>\n <li><code>cloneFunctions</code>: a Boolean value that determines if functions should be cloned. If omitted the default value is <code>false</code>. Cloned functions have the same semantics as functions exported using <a href=\"/en-US/docs/Components.utils.exportFunction\"><code>Components.utils.exportFunction</code></a>. See <a href=\"/en-US/docs/Components.utils.cloneInto#Cloning_objects_that_have_functions\">Cloning objects that have functions</a> below.</li>\n <li><code>wrapReflectors</code>: a Boolean value that determines if objects reflected from C++, such as DOM objects, should be cloned. If omitted the default value is <code>false</code>. See <a href=\"/en-US/docs/Components.utils.cloneInto#Cloning_objects_that_contain_DOM_elements\">Cloning objects that contain DOM elements</a> below.</li>\n</ul>\n<h3 id=\"Returns\">Returns</h3>\n<p>A reference to the cloned object.</p>\n<h2 id=\"Example\">Example</h2>\n<p>This add-on script creates an object, clones it into the content window and makes it a property of the content window global:</p>\n<pre class=\"brush: js\">// add-on script\n\nvar addonScriptObject = {\"greeting\" : \"hello from add-on\"};\ncontentWindow.addonScriptObject = cloneInto(addonScriptObject, contentWindow);</pre>\n<p>Scripts running in the page can now access the object:</p>\n<pre class=\"brush: js\">// page script\n\nbutton.addEventListener(\"click\", function() {\n  console.log(window.addonScriptObject.greeting);     // \"hello from add-on\"\n}, false);</pre>\n<p>Of course, you don't have to assign the clone to the window itself: you can assign it to some other object in the target scope:</p>\n<pre class=\"brush: js\">contentWindow.foo.addonScriptObject = cloneInto(addonScriptObject, contentWindow);</pre>\n<p>You can also pass it into a function defined in the page script. Suppose the page script defines a function like this:</p>\n<pre class=\"brush: js\">// page script\n\nfunction foo(greeting) {\n  console.log(\"they said: \" + greeting.message);\n}\n</pre>\n<p>The add-on script can define an object, clone it, and pass it into this function:</p>\n<pre class=\"brush: js\">// add-on script\n\nvar addonScriptObject = {\"message\" : \"hello from add-on\"};\ncontentWindow.foo(cloneInto(addonScriptObject, contentWindow));  // \"they said: hello from add-on\"</pre>\n<h3 id=\"Cloning_objects_that_have_functions\">Cloning objects that have functions</h3>\n<p>If the object to be cloned contains functions, you must pass the <code>{cloneFunctions:true}</code> flag or you'll get an error. If you do pass this flag, then functions in the object are cloned using the same mechanism as that used in <a href=\"/en-US/docs/Components.utils.exportFunction\"><code>Components.utils.exportFunction</code></a>:</p>\n<pre class=\"brush: js\">// add-on script\n\nvar addonScriptObject = {\n  greetme: function() {\n    alert(\"hello from add-on\");\n  }\n};\n\ncontentWindow.addonScriptObject = cloneInto(addonScriptObject,\n                                           contentWindow,\n                                           {cloneFunctions: true});\n</pre>\n<pre class=\"brush: js\">// page script\n\nvar test = document.getElementById(\"test\");\n\ntest.addEventListener(\"click\", function() {\n  window.addonScriptObject.greetme();\n}, false);</pre>\n<h3 id=\"Cloning_objects_that_contain_DOM_elements\">Cloning objects that contain DOM elements</h3>\n<p>By default, if the object you clone contains objects that are reflected from C++, such as DOM elements, the cloning operation will fail with an error. If you pass the <code>{wrapReflectors:true}</code> flag, then the object you clone is allowed to contain these objects:</p>\n<pre class=\"brush: js\">// add-on script\n\nvar addonScriptObject = {\n  body: contentWindow.document.body\n};\n\ncontentWindow.addonScriptObject = cloneInto(addonScriptObject,\n                                           contentWindow,\n                                           {wrapReflectors: true});</pre>\n<pre class=\"brush: js\">// page script\n\nvar test = document.getElementById(\"test\");\n\ntest.addEventListener(\"click\", function() {\n  console.log(window.addonScriptObject.body.innerHTML);\n}, false);</pre>\n<p>Access to these objects in the target scope is subject to the normal <a href=\"/en-US/docs/Security_check_basics\">security checks</a>.</p>\n<p>Â </p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>",
    "title": "Components.utils.cloneInto"
}