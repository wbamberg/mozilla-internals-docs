{
    "content": "<p></p>\n<p><code>NS_OVERRIDE</code> is a macro which allows C++ code in Mozilla to specify that a method is intended to override a base class method. If there is no base class method with the same signature, a compiler with <a class=\"internal\" href=\"/en/Building_with_static_checking\" title=\"en/Building with static checking\">static-checking</a> enabled will fail to compile.</p>\n<p><code>NS_OVERRIDE</code> is declared in <a href=\"https://dxr.mozilla.org/mozilla-central/source/xpcom/base/nscore.h\" rel=\"custom\">nscore.h</a>, beginning with <span title=\"(Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)\">Gecko 2.0</span>. It was introduced in <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=500870\" title=\"FIXED: Add &quot;override&quot; method annotation and enforce that it matches a base class's virtual method\">bug 500870</a>.</p>\n<h3 id=\"Example\">Example</h3>\n<p>Class A has a method <code>GetFoo()</code> which is overridden by class B:</p>\n<pre>class A\n{\n  virtual nsresult GetFoo(nsIFoo** aResult);\n};\n\nclass B : public A\n{\n  NS_OVERRIDE virtual nsresult GetFoo(nsIFoo** aResult);\n};\n</pre>\n<p>Later, the signature of <code>A::GetFoo()</code> is changed to remove the output parameter:</p>\n<pre> class A\n {\n<span style=\"\">-  virtual nsresult GetFoo(nsIFoo** aResult);</span>\n<span style=\"\">+  virtual already_AddRefed&lt;nsIFoo&gt; GetFoo();</span>\n };\n</pre>\n<p><code>B::GetFoo()</code> no longer overrides <code>A::GetFoo()</code> as was originally intended. A compiler with static-checking enabled will issue the following error:</p>\n<pre>test.cpp:8: error: NS_OVERRIDE function B::GetFoo(nsIFoo**) does not override a base class method with the same name and signature.\n</pre>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>",
    "title": "NS_OVERRIDE"
}