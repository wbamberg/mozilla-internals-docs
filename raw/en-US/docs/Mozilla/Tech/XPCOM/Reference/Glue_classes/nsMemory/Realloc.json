{
    "content": "<p>\nÂ« <a href=\"/en-US/docs/XPCOM_API_Reference\">XPCOM API Reference</a>\n</p>\n<h3 id=\"Summary\" name=\"Summary\">Summary</h3>\n<p>The <code>Realloc</code> function reallocates a block of memory to a new size.\n</p>\n<pre class=\"eval\"> static void* Realloc(\n   void* aPtr,\n   size_t aSize\n );\n</pre>\n<h3 id=\"Parameters\" name=\"Parameters\">Parameters</h3>\n<dl><dt>aPtr\n</dt><dd> [in] The address of the memory block to reallocate. This may be nsnull, in which case Realloc behaves like nsMemory::Alloc. </dd><dt>aSize\n</dt><dd> [in] Specifies the new size in bytes of the block of memory to allocate. This may be 0, in which case <code>Realloc</code> behaves like <code><a href=\"en/NsMemory/Free\">nsMemory::Free</a></code>. </dd></dl>\n<h3 id=\"Return_Values\" name=\"Return_Values\">Return Values</h3>\n<p>This function returns nsnull if the memory allocation fails. Otherwise, it returns a pointer to the newly allocated buffer. The result must be freed with a call to <code><a href=\"en/NsMemory/Free\">nsMemory::Free</a></code> when it is no longer needed.\n</p>\n<h3 id=\"Remarks\" name=\"Remarks\">Remarks</h3>\n<p>If aPtr is non-null, then its contents will be unchanged to the minimum of the old and new sizes. Newly allocated memory is uninitialized.\n</p>\n<h3 id=\"See_Also\" name=\"See_Also\">See Also</h3>\n<p><code><a href=\"en/NsMemory/Free\">nsMemory::Free</a></code>\n</p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Pmash\">Pmash</a>",
    "title": "Realloc"
}