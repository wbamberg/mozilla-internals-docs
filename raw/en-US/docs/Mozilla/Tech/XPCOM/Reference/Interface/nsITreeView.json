{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/layout/xul/base/src/tree/public/nsITreeView.idl\" rel=\"custom\">layout/xul/base/src/tree/public/nsITreeView.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThis interface is used by the tree widget to get information about what and how to display a tree widget.\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 22 (Firefox 22 / Thunderbird 22 / SeaMonkey 2.19)</span></div>\n</div><p></p>\n\n<p>Implementing a <code>nsITreeView</code> in lieu of <a href=\"/en/DOM\" title=\"en/DOM\">DOM</a> methods for tree creation can improve performance dramatically, and removes the need to make changes to the tree manually when changes to the database occur.</p>\n\n<p>Further information about creating treeviews is given in the <a href=\"/en/XUL_Tutorial/Custom_Tree_Views\" title=\"en/XUL_Tutorial/Custom_Tree_Views\">XUL Tutorial</a>.</p>\n\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code>boolean <a href=\"#canDrop()\">canDrop</a>(in long index, in long orientation, in nsIDOMDataTransfer dataTransfer);</code> </td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#canDropBeforeAfter()\">canDropBeforeAfter</a>(in long index, in boolean before);</code> <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 1.5 / Thunderbird 1.5 / SeaMonkey 1.0)\">Obsolete since Gecko 1.8</span></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#canDropOn()\">canDropOn</a>(in long index);</code> <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 1.5 / Thunderbird 1.5 / SeaMonkey 1.0)\">Obsolete since Gecko 1.8</span></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#cycleCell()\">cycleCell</a>(in long row, in nsITreeColumn col);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#cycleHeader()\">cycleHeader</a>(in nsITreeColumn col);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#drop()\">drop</a>(in long row, in long orientation, in nsIDOMDataTransfer dataTransfer);</code></td>\n  </tr>\n  <tr>\n   <td><code>AString <a href=\"#getCellProperties()\">getCellProperties</a>(in long row, in nsITreeColumn col, in nsISupportsArray properties </code><code><span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 22 / Thunderbird 22 / SeaMonkey 2.19)\">Obsolete since Gecko 22</span></code><code>);</code></td>\n  </tr>\n  <tr>\n   <td><code>AString <a href=\"#getCellText()\">getCellText</a>(in long row, in nsITreeColumn col);</code></td>\n  </tr>\n  <tr>\n   <td><code>AString <a href=\"#getCellValue()\">getCellValue</a>(in long row, in nsITreeColumn col);</code></td>\n  </tr>\n  <tr>\n   <td><code>AString <a href=\"#getColumnProperties()\">getColumnProperties</a>(in nsITreeColumn col, in nsISupportsArray properties </code><code><span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 22 / Thunderbird 22 / SeaMonkey 2.19)\">Obsolete since Gecko 22</span></code><code>);</code></td>\n  </tr>\n  <tr>\n   <td><code>AString <a href=\"#getImageSrc()\">getImageSrc</a>(in long row, in nsITreeColumn col);</code></td>\n  </tr>\n  <tr>\n   <td><code>long <a href=\"#getLevel()\">getLevel</a>(in long index);</code></td>\n  </tr>\n  <tr>\n   <td><code>long <a href=\"#getParentIndex()\">getParentIndex</a>(in long rowIndex);</code></td>\n  </tr>\n  <tr>\n   <td><code>long <a href=\"#getProgressMode()\">getProgressMode</a>(in long row, in nsITreeColumn col);</code></td>\n  </tr>\n  <tr>\n   <td><code>AString <a href=\"#getRowProperties()\">getRowProperties</a>(in long index, in nsISupportsArray properties <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 22 / Thunderbird 22 / SeaMonkey 2.19)\">Obsolete since Gecko 22</span>);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#hasNextSibling()\">hasNextSibling</a>(in long rowIndex, in long afterIndex);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#isContainer()\">isContainer</a>(in long index);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#isContainerEmpty()\">isContainerEmpty</a>(in long index);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#isContainerOpen()\">isContainerOpen</a>(in long index);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#isEditable()\">isEditable</a>(in long row, in nsITreeColumn col);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#isSelectable()\">isSelectable</a>(in long row, in nsITreeColumn col);</code> </td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#isSeparator()\">isSeparator</a>(in long index);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#isSorted()\">isSorted</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#performAction()\">performAction</a>(in wstring action);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#performActionOnCell()\">performActionOnCell</a>(in wstring action, in long row, in nsITreeColumn col);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#performActionOnRow()\">performActionOnRow</a>(in wstring action, in long row);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#selectionChanged()\">selectionChanged</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setCellText()\">setCellText</a>(in long row, in nsITreeColumn col, in AString value);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setCellValue()\">setCellValue</a>(in long row, in nsITreeColumn col, in AString value);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setTree()\">setTree</a>(in nsITreeBoxObject tree);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#toggleOpenState()\">toggleOpenState</a>(in long index);</code></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Attributes\" name=\"Attributes\">Attributes</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Attribute</td>\n   <td class=\"header\">Type</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>rowCount</code></td>\n   <td><code><a href=\"/en/long\" title=\"en/long\">long</a></code></td>\n   <td>The total number of rows in the tree (including the offscreen rows). <strong>Read only.</strong></td>\n  </tr>\n  <tr>\n   <td><code>selection</code></td>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITreeSelection\" title=\"\">nsITreeSelection</a></code></code></td>\n   <td>The selection for this view.</td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Constants\" name=\"Constants\">Constants</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Constant</td>\n   <td class=\"header\">Value</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>PROGRESS_NORMAL</code></td>\n   <td><code>1</code></td>\n   <td>\n    <div class=\"note\"><strong>Note:</strong> Renamed from <code>progressNormal</code> in Gecko 1.8</div>\n   </td>\n  </tr>\n  <tr>\n   <td><code>PROGRESS_UNDETERMINED</code></td>\n   <td><code>2</code></td>\n   <td>\n    <div class=\"note\"><strong>Note:</strong> Renamed from <code>progressUndetermined</code> in Gecko 1.8</div>\n   </td>\n  </tr>\n  <tr>\n   <td><code>PROGRESS_NONE</code></td>\n   <td><code>3</code></td>\n   <td>\n    <div class=\"note\"><strong>Note:</strong> Renamed from <code>progressNone</code> in Gecko 1.8</div>\n   </td>\n  </tr>\n  <tr>\n   <td><code>DROP_BEFORE</code></td>\n   <td><code>-1</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>DROP_ON</code></td>\n   <td><code>0</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>DROP_AFTER</code></td>\n   <td><code>1</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>inDropBefore</code></td>\n   <td><code>0</code></td>\n   <td><span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 1.5 / Thunderbird 1.5 / SeaMonkey 1.0)\">Obsolete since Gecko 1.8</span></td>\n  </tr>\n  <tr>\n   <td><code>inDropOn</code></td>\n   <td><code>1</code></td>\n   <td><span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 1.5 / Thunderbird 1.5 / SeaMonkey 1.0)\">Obsolete since Gecko 1.8</span></td>\n  </tr>\n  <tr>\n   <td><code>inDropAfter</code></td>\n   <td><code>2</code></td>\n   <td><span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 1.5 / Thunderbird 1.5 / SeaMonkey 1.0)\">Obsolete since Gecko 1.8</span></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n\n<p></p><h3 id=\"canDrop()\">canDrop()</h3><p></p>\n\n<p>Methods used by the drag feedback code to determine if a drag is allowable at the current location. To get the behavior where drops are only allowed on items, such as the mailNews folder pane, always return <code>false</code> when the orientation is not <code>DROP_ON</code>.</p>\n\n<div class=\"note\"><strong>Note:</strong> <code>DROP_ON</code> will only be passed to <code>canDrop()</code> if the item is a container; see <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITreeView#isContainer()\">isContainer()</a></code>.</div>\n\n<pre class=\"eval\">boolean canDrop(\n  in long index,\n  in long orientation,\n  in nsIDOMDataTransfer dataTransfer\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>index</code></dt>\n <dd>The index of the row.</dd>\n <dt><code>orientation</code></dt>\n <dd>The position around the given row. Defined in <a href=\"#Constants\">constants</a>.</dd>\n <dt><code>dataTransfer</code> </dt>\n <dd>This parameter, added in <span title=\"(Firefox 3.6 / Thunderbird 3.1 / Fennec 1.0)\">Gecko 1.9.2</span>, provides the data being dragged, so that it can be examined to determine if a drop is possible.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p><code>true</code> if a drop is allowed at the current location; otherwise <code>false</code>.</p>\n\n<p></p><div class=\"headingWithIndicator\">\n        <h3 id=\"canDropBeforeAfter()\">canDropBeforeAfter()</h3>\n        <span class=\"indicatorInHeadline obsolete obsoleteMethod\">Obsolete since Gecko 1.8 (Firefox 1.5 / Thunderbird 1.5 / SeaMonkey 1.0)</span>\n        </div><p></p>\n\n<p>Method used by the drag feedback code to determine if a drag is allowable at the current location. To get the behavior where drops are only allowed on items, such as the mailNews folder pane, always return <code>false</code> from <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITreeView#canDropBeforeAfter()\">canDropBeforeAfter()</a></code>.</p>\n\n<pre class=\"eval\">boolean canDropBeforeAfter(\n  in long index,\n  in boolean before\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>index</code></dt>\n <dd>The index of the item.</dd>\n <dt><code>before</code></dt>\n <dd><code>true</code> to test drop before. <code>false</code> to test drop after.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p><code>true</code> if a drop event can occur. Otherwise <code>false</code>.</p>\n\n<p></p><div class=\"headingWithIndicator\">\n        <h3 id=\"canDropOn()\">canDropOn()</h3>\n        <span class=\"indicatorInHeadline obsolete obsoleteMethod\">Obsolete since Gecko 1.8 (Firefox 1.5 / Thunderbird 1.5 / SeaMonkey 1.0)</span>\n        </div><p></p>\n\n<p>Method used by the drag feedback code to determine if a drag is allowable at the current location. To get the behavior where drops are only allowed on items, such as the mailNews folder pane, always return <code>false</code> from <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITreeView#canDropBeforeAfter()\">canDropBeforeAfter()</a></code>.</p>\n\n<pre class=\"eval\">boolean canDropOn(\n  in long index\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>index</code></dt>\n <dd>The index of the item.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p><code>true</code> if a drop event can occur. Otherwise <code>false</code>.</p>\n\n<h3 id=\"cycleCell()\" name=\"cycleCell()\">cycleCell()</h3>\n\n<p>Called on the view when a cell in a non-selectable cycling column (for example, unread/flag/and so on.) is clicked.</p>\n\n<pre class=\"eval\">void cycleCell(\n  in long row,\n  in nsITreeColumn col\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>row</code></dt>\n <dd>The row of the cell.</dd>\n <dt><code>col</code></dt>\n <dd>The column of the cell.</dd>\n</dl>\n\n<h3 id=\"cycleHeader()\" name=\"cycleHeader()\">cycleHeader()</h3>\n\n<p>Called on the view when a header is clicked.</p>\n\n<pre class=\"eval\">void cycleHeader(\n  in nsITreeColumn col\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>col</code></dt>\n <dd>The column to cycle.</dd>\n</dl>\n\n<h3 id=\"drop()\" name=\"drop()\">drop()</h3>\n\n<p>Called when the user drops something on this view. The <code>orientation</code> paramater specifies before/on/after the given <code>row</code>.</p>\n\n<pre class=\"eval\">void drop(\n  in long row,\n  in long orientation,\n  in nsIDOMDataTransfer dataTransfer\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>row</code></dt>\n <dd>The index of the row.</dd>\n <dt><code>orientation</code></dt>\n <dd>The position around the given row. Defined in <a href=\"#Constants\">constants</a>.</dd>\n <dt><code>dataTransfer</code> </dt>\n <dd>This parameter, added in <span title=\"(Firefox 3.6 / Thunderbird 3.1 / Fennec 1.0)\">Gecko 1.9.2</span>, provides the data that has been dropped.</dd>\n</dl>\n\n<h3 id=\"getCellProperties()\" name=\"getCellProperties()\">getCellProperties()</h3>\n\n<p>An atomized list of properties for a given cell. Each property, <code>x</code>, that the view gives back will cause the CSS <code>::moz-tree-cell-*(x)</code> pseudoelement to be matched on the <code>treechildren</code> element.</p>\n\n<p>See <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITreeView#getRowProperties()\">getRowProperties()</a></code> for an example.</p>\n\n<pre class=\"eval\">AString getCellProperties(\n  in long row,\n  in nsITreeColumn col,\n  in nsISupportsArray properties\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>row</code></dt>\n <dd>The index of the row.</dd>\n <dt><code>col</code></dt>\n <dd>The current column.</dd>\n <dt><code>properties</code></dt>\n <dd>An array of the cell's current properties. <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 22 / Thunderbird 22 / SeaMonkey 2.19)\">Obsolete since Gecko 22</span></dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>A string of space-separated property names. </p>\n\n<h3 id=\"getCellText()\" name=\"getCellText()\">getCellText()</h3>\n\n<p>The text for a given cell. If a column consists only of an image, then the empty string is returned.</p>\n\n<pre class=\"eval\">AString getCellText(\n  in long row,\n  in nsITreeColumn col\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>row</code></dt>\n <dd>The index of the row.</dd>\n <dt><code>col</code></dt>\n <dd>The column of the cell. (Note that this is not the column index.)</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>The text of the cell.</p>\n\n<h3 id=\"getCellValue()\" name=\"getCellValue()\">getCellValue()</h3>\n\n<p>The value for a given cell. This method is only called for columns of type other than <code>text</code>.</p>\n\n<pre class=\"eval\">AString getCellValue(\n  in long row,\n  in nsITreeColumn col\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>row</code></dt>\n <dd>The index of the row.</dd>\n <dt><code>col</code></dt>\n <dd>The column of the cell. (Note that this is not the column index.)</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>The value of the cell.</p>\n\n<h3 id=\"getColumnProperties()\" name=\"getColumnProperties()\">getColumnProperties()</h3>\n\n<p>Called to get properties to paint a column background. For shading the sort column, and so on. Each property, <code>x</code>, that the view gives back will cause the CSS  <code>::moz-tree-column(x)</code> to be matched on the <code>treechildren</code> element.</p>\n\n<p>See <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITreeView#getRowProperties()\">getRowProperties()</a></code> for an example.</p>\n\n<pre class=\"eval\">void getColumnProperties(\n  in nsITreeColumn col,\n  in nsISupportsArray properties\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>col</code></dt>\n <dd>The current column.</dd>\n <dt><code>properties</code></dt>\n <dd>An array of the column's current properties. <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 22 / Thunderbird 22 / SeaMonkey 2.19)\">Obsolete since Gecko 22</span></dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>A string of space-separated property names. </p>\n\n<h3 id=\"getImageSrc()\" name=\"getImageSrc()\">getImageSrc()</h3>\n\n<p>The image path for a given cell. For defining an icon for a cell. If the empty string is returned, the <code>::moz-tree-image</code> pseudoelement will be used.</p>\n\n<pre class=\"eval\">AString getImageSrc(\n  in long row,\n  in nsITreeColumn col\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>row</code></dt>\n <dd>The index of the row.</dd>\n <dt><code>col</code></dt>\n <dd>The index of the column.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>The image path of the cell.</p>\n\n<h3 id=\"getLevel()\" name=\"getLevel()\">getLevel()</h3>\n\n<p>The level is an integer value that represents the level of indentation. It is multiplied by the width specified in the <code>::moz-tree-indentation</code> pseudoelement to compute the exact indentation.</p>\n\n<pre class=\"eval\">long getLevel(\n  in long index\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>index</code></dt>\n <dd>The index of the item.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>The level of indentation.</p>\n\n<h3 id=\"getParentIndex()\" name=\"getParentIndex()\">getParentIndex()</h3>\n\n<p>Methods used by the tree to draw thread lines in the tree. <code>getParentIndex</code> is used to obtain the index of a parent row. If there is no parent row, <code>getParentIndex</code> returns -1.</p>\n\n<pre class=\"eval\">long getParentIndex(\n  in long rowIndex\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>rowIndex</code></dt>\n <dd>The index of the row whose parent should be found.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>The row index of the parent row.</p>\n\n<h3 id=\"getProgressMode()\" name=\"getProgressMode()\">getProgressMode()</h3>\n\n<p>The progress mode for a given cell. This method is only called for columns of type <code>progressmeter</code>. See the <a href=\"#Constants\">constants</a> section for possible modes.</p>\n\n<pre class=\"eval\">long getProgressMode(\n  in long row,\n  in nsITreeColumn col\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>row</code></dt>\n <dd>The index of the row.</dd>\n <dt><code>col</code></dt>\n <dd>The index of the column.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>The progress mode for the cell.</p>\n\n<h3 id=\"getRowProperties()\" name=\"getRowProperties()\">getRowProperties()</h3>\n\n<p>An atomized list of properties for a given row. Each property, <code>x</code>, that the view gives back will cause the CSS <code>::moz-tree-row(x)</code> pseudoelement to be matched on the <code>treechildren</code> element.</p>\n\n<pre class=\"eval\">void getRowProperties(\n  in long index,\n  in nsISupportsArray properties\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>index</code></dt>\n <dd>The index of the row.</dd>\n <dt><code>properties</code></dt>\n <dd>An array of the row's current properties. <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 22 / Thunderbird 22 / SeaMonkey 2.19)\">Obsolete since Gecko 22</span></dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>A string of space-separated property names. </p>\n\n<h6 id=\"Example\" name=\"Example\">Example</h6>\n\n<p> Your function will not be provided with a <code>properties</code> array. (This is one way of detecting the version at run-time). Simply return a string of space-separated property names. For example:</p>\n\n<pre class=\"brush: js\">getRowProperties: function(index) {\n  return \"dummy\";\n}\n</pre>\n\n<p></p><div class=\"blockIndicator obsolete obsoleteHeader\"><p><strong><span class=\"icon-only-inline\" title=\"This is an obsolete API and is no longer guaranteed to work.\"><i class=\"icon-trash\"> </i></span> Obsolete since Gecko 22 (Firefox 22 / Thunderbird 22 / SeaMonkey 2.19)</strong><br>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p></div> To add properties for a particular row, you must use the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAtomService\" title=\"\">nsIAtomService</a></code> to create an <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAtom\" title=\"\">nsIAtom</a></code> string, which can then be appended to the array to alter the style (see also <a href=\"/en/XUL_Tutorial/Styling_a_Tree\" title=\"en/XUL_Tutorial/Styling_a_Tree\">Styling a Tree</a>)<p></p>\n\n<pre class=\"brush: js\">getRowProperties: function(index, properties) {\n  var atomService = Components.classes[\"@mozilla.org/atom-service;1\"].getService(Components.interfaces.nsIAtomService);\n  var atom = atomService.getAtom(\"dummy\");\n  properties.AppendElement(atom);\n}\n</pre>\n\n<h3 id=\"hasNextSibling()\" name=\"hasNextSibling()\">hasNextSibling()</h3>\n\n<p>Used to determine if the row at <code>rowIndex</code> has a nextSibling that occurs <strong>after</strong> the index specified by <code>afterIndex</code>. Code that is forced to march down the view looking at levels can optimize the march by starting at <code>afterIndex+1</code>.</p>\n\n<pre class=\"eval\">boolean hasNextSibling(\n  in long rowIndex,\n  in long afterIndex\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>rowIndex</code></dt>\n <dd>The index of the item.</dd>\n <dt><code>afterIndex</code></dt>\n <dd>The index of the item to find siblings after.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p><code>true</code> if the row has a next sibling. Otherwise <code>false</code></p>\n\n<h3 id=\"isContainer()\" name=\"isContainer()\">isContainer()</h3>\n\n<p>Whether the row has the potential to hold other rows within it. This does not determine whether a twisty is actually drawn; that's left up to <code>isContainerEmpty</code>. For very simple tree views, such as those without multi-level data, you might want to consider using something simpler than a tree view, such as a <a href=\"/en/XUL/listbox\" title=\"en/XUL/listbox\">listbox</a>.</p>\n\n<p>For tree views with multi-level data, it's advisable to distinguish between a row which is an <em>empty container</em> (i.e., a row with the potential to hold children but that currently has none), and a <em>non-empty container</em> (i.e., a row that positively does currently have children). The tree frame code that handles drag and drop, for example, uses this method to determine how to interpret the drop position.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> <code>nsITreeView</code> implementations must be prepared to handle a call to <code>toggleOpenState</code> for any row index which returns <code>true</code> for a call to <code>isContainer</code>, even if <code>isContainerEmpty</code> returns <code>true</code>.</div><p></p>\n\n<pre class=\"eval\">boolean isContainer(\n  in long index\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>index</code></dt>\n <dd>The index of the row being asked about.</dd>\n</dl>\n\n<h6 id=\"Return_value_2\">Return value</h6>\n\n<p><code>true</code> if the row is a container. Otherwise <code>false</code>.</p>\n\n<h3 id=\"isContainerEmpty()\" name=\"isContainerEmpty()\">isContainerEmpty()</h3>\n\n<p>One of the methods that can be used to test whether or not a twisty should be drawn, and if so, whether an open or closed twisty should be used.</p>\n\n<pre class=\"eval\">boolean isContainerEmpty(\n  in long index\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>index</code></dt>\n <dd>The index of the item being asked about.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p><code>true</code> if the item is an empty container. Otherwise <code>false</code>.</p>\n\n<h3 id=\"isContainerOpen()\" name=\"isContainerOpen()\">isContainerOpen()</h3>\n\n<p>One of the methods that can be used to test whether or not a twisty should be drawn, and if so, whether an open or closed twisty should be used.</p>\n\n<pre class=\"eval\">boolean isContainerOpen(\n  in long index\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>index</code></dt>\n <dd>The index of the item being asked about.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p><code>true</code> if the item is an open container. Otherwise <code>false</code>.</p>\n\n<h3 id=\"isEditable()\" name=\"isEditable()\">isEditable()</h3>\n\n<p>Called to ask the view if the cell contents are editable. A value of <code>true</code> will result in the tree popping up a text field when the user tries to inline edit the cell.</p>\n\n<pre class=\"eval\">boolean isEditable(\n  in long row,\n  in nsITreeColumn col\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>row</code></dt>\n <dd>The row of the cell.</dd>\n <dt><code>col</code></dt>\n <dd>The column of the cell.</dd>\n</dl>\n\n<p></p><h3 id=\"isSelectable()\">isSelectable()</h3><p></p>\n\n<p>Called to ask the view if the cell is selectable. This method is only called if the selection type is <code>cell</code> or <code>text</code>.</p>\n\n<pre class=\"eval\">boolean isSelectable(\n  in long row,\n  in nsITreeColumn col\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>row</code></dt>\n <dd>The row of the cell.</dd>\n <dt><code>col</code></dt>\n <dd>The column of the cell.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p><code>true</code> if the cell is selectable. Otherwise <code>false</code>.</p>\n\n<h3 id=\"isSeparator()\" name=\"isSeparator()\">isSeparator()</h3>\n\n<p>Used to determine if the row at index is a separator. A value of <code>true</code> will result in the tree drawing a horizontal separator. The tree uses the <code>::moz-tree-separator</code> pseudoelement to draw the separator.</p>\n\n<pre class=\"eval\">boolean isSeparator(\n  in long index\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>index</code></dt>\n <dd>The index of the item being asked about.</dd>\n</dl>\n\n<p><code>true</code> if the row is a separator. Otherwise <code>false</code>.</p>\n\n<h3 id=\"isSorted()\" name=\"isSorted()\">isSorted()</h3>\n\n<p>Specifies if there is currently a sort on any column. Used mostly by dragdrop to affect drop feedback.</p>\n\n<pre class=\"eval\">boolean isSorted();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<p><code>true</code> if the column is sorted. Otherwise <code>false</code>.</p>\n\n<h3 id=\"performAction()\" name=\"performAction()\">performAction()</h3>\n\n<p>A command API that can be used to invoke commands on the selection. The tree will automatically invoke this method when certain keys are pressed. For example, when the <code>DEL</code> key is pressed, <code>performAction</code> will be called with the <code>delete</code> string.</p>\n\n<pre class=\"eval\">void performAction(\n  in wstring action\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>action</code></dt>\n <dd>The action to perform.</dd>\n</dl>\n\n<h3 id=\"performActionOnCell()\" name=\"performActionOnCell()\">performActionOnCell()</h3>\n\n<p>A command API that can be used to invoke commands on a specific cell.</p>\n\n<pre class=\"eval\">void performActionOnCell(\n  in wstring action,\n  in long row,\n  in nsITreeColumn col\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>action</code></dt>\n <dd>The action to perform.</dd>\n <dt><code>row</code></dt>\n <dd>The row of the cell.</dd>\n <dt><code>col</code></dt>\n <dd>The column of the cell.</dd>\n</dl>\n\n<h3 id=\"performActionOnRow()\" name=\"performActionOnRow()\">performActionOnRow()</h3>\n\n<p>A command API that can be used to invoke commands on a specific row.</p>\n\n<pre class=\"eval\">void performActionOnRow(\n  in wstring action,\n  in long row\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>action</code></dt>\n <dd>The action to perform.</dd>\n <dt><code>row</code></dt>\n <dd>The row of the cell.</dd>\n</dl>\n\n<h3 id=\"selectionChanged()\" name=\"selectionChanged()\">selectionChanged()</h3>\n\n<p>Should be called from a XUL onselect handler whenever the selection changes.</p>\n\n<pre class=\"eval\">void selectionChanged();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h3 id=\"setCellText()\" name=\"setCellText()\">setCellText()</h3>\n\n<p><code>setCellText</code> is called when the contents of the cell have been edited by the user.</p>\n\n<pre class=\"eval\">void setCellText(\n  in long row,\n  in nsITreeColumn col,\n  in AString value\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>row</code></dt>\n <dd>The row of the cell.</dd>\n <dt><code>col</code></dt>\n <dd>The column of the cell.</dd>\n <dt><code>value</code></dt>\n <dd>The text to change the cell to.</dd>\n</dl>\n\n<p></p><h3 id=\"setCellValue()\">setCellValue()</h3><p></p>\n\n<p><code>setCellValue</code> is called when the value of the cell has been set by the user. This method is only called for columns of type other than <code>text</code>.</p>\n\n<pre class=\"eval\">void setCellValue(\n  in long row,\n  in nsITreeColumn col,\n  in AString value\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>row</code></dt>\n <dd>The row of the cell.</dd>\n <dt><code>col</code></dt>\n <dd>The column of the cell.</dd>\n <dt><code>value</code></dt>\n <dd>The value to change the cell to.</dd>\n</dl>\n\n<h3 id=\"setTree()\" name=\"setTree()\">setTree()</h3>\n\n<p>Called when setting or clearing the view on the tree to link the view to or disconnect the front end box object.</p>\n\n<pre class=\"eval\">void setTree(\n  in nsITreeBoxObject tree\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>tree</code></dt>\n <dd>The <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITreeBoxObject\" title=\"\">nsITreeBoxObject</a></code> to attach this view to, or null if the view is being removed from the tree.</dd>\n</dl>\n\n<h3 id=\"toggleOpenState()\" name=\"toggleOpenState()\">toggleOpenState()</h3>\n\n<p>Called on the view when an item is opened or closed, e.g., by clicking the twisty, keyboard access, et cetera.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> As of this writing (Gecko 2.0), custom <code>nsITreeView</code> implementations must be prepared to handle a call to <code>toggleOpenState</code> for any row index which returns true for a call to <code>isContainer</code>, regardless of whether the container is empty.</div><p></p>\n\n<pre class=\"eval\">void toggleOpenState(\n  in long index\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>index</code></dt>\n <dd>The index of the row to toggle.</dd>\n</dl>\n\n<h2 id=\"See_also\" name=\"See_also\">See also</h2>\n\n<ul>\n <li><a href=\"/en/Tree_Widget_Changes\" title=\"en/Tree_Widget_Changes\">Tree Widget Changes</a> (applies to <span title=\"(Firefox 1.5 / Thunderbird 1.5 / SeaMonkey 1.0)\">Gecko 1.8</span> and later)</li>\n <li><a href=\"/en/XUL_Tutorial/Tree_View_Details\" title=\"en/XUL_Tutorial/Tree_View_Details\">XUL Tutorial:Tree View Details</a></li>\n <li><a href=\"/en/Sorting_and_filtering_a_custom_tree_view\" title=\"en/Sorting_and_filtering_a_custom_tree_view\">Sorting and filtering a custom tree view</a></li>\n</ul>\n\n<p>When working with tree views, the tree box object may also be useful</p>\n\n<ul>\n <li><a href=\"/en/XUL_Tutorial/Tree_Box_Objects\" title=\"en/XUL_Tutorial/Tree_Box_Objects\">XUL Tutorial:Tree Box Objects</a></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/SphinxKnight\">SphinxKnight</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Neil\">Neil</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sevenspade\">Sevenspade</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ale2010\">Ale2010</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kewisch\">kewisch</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Wjjohnst\">Wjjohnst</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/roel\">roel</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/novotnyr\">novotnyr</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/bsmozilla\">bsmozilla</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Smi\">Smi</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Brettz9\">Brettz9</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Np\">Np</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mook\">Mook</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Dikrib\">Dikrib</a>",
    "title": "nsITreeView"
}