{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/netwerk/dns/nsIEffectiveTLDService.idl\" rel=\"custom\">netwerk/dns/nsIEffectiveTLDService.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThis is an interface that examines a hostname and determines the longest portion that should be treated as though it were a top-level domain (TLD). It can also determine the base domain of a URI.\n</span>\n\n  <div style=\"height: 42px; position: relative; padding: 2px; width: auto;\">\n\n  <div style=\"top: 22px; font-size: 11px; position: absolute;\">1.0</div>\n  \n  <div style=\"top: 22px; font-size: 11px; position: absolute; left: 0px; text-align: right; float: right; width: 100%;\">66</div>\n  \n  <div style=\"height: 8px; top: 16px; background: #dd0000; left: 0px; position: absolute; width: 8.571428571428571%;\"></div>\n  \n<div style=\"height: 8px; top: 16px; left: 8.571428571428571%; background: #00dd00; position: absolute; width: 91.42857142857143%;\" title=\"Introduced in Gecko 1.9 (Firefox 3)\"></div>\n\n<div style=\"top: 0px; font-size: 11px; position: absolute; left: 8.571428571428571%;\">Introduced</div>\n<div style=\"top: 22px; font-size: 11px; position: absolute; left: 8.571428571428571%;\">Gecko 1.9</div>\n\n</div>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 1.9 (Firefox 3)</span></div>\n</div><p></p>\n\n<p>Implemented by: <code>@mozilla.org/network/effective-tld-service;1</code>. To use this service, use:</p>\n\n<pre class=\"eval\">var eTLDService = Components.classes[\"@mozilla.org/network/effective-tld-service;1\"]\n                  .getService(Components.interfaces.nsIEffectiveTLDService);\n</pre>\n\n<p>The name \"Effective TLD Service\" is a historical one; today, the items this interface manipulates are called Public Suffixes, and the list of them is the Public Suffix List, or PSL. See <a href=\"http://www.publicsuffix.org/\">publicsuffix.org</a> for more information.</p>\n\n<p>The methods below implement the Public Suffix algorithm in full, including the implicit \"*\" rule. Therefore, if you call getPublicSuffix(\"a.b.c.nonexistent\"), you will get back \"nonexistent\" - this \"TLD\" is not in the public suffix list, but the implicit \"*\" rule means that it is returned. This is the right answer for e.g. cookie setting and domain highlighting, but you should check whether it's the right answer for your application.</p>\n\n<p>It is not recommended to use this interface for determining whether a given string \"is a domain name\". That question is unanswerable with 100% accuracy using the PSL, because what is a domain name is a property of the DNS, which is different for different people. Is \"mail.intranet\" actually a domain name? Depends who you ask - for some people it is, others not. Is \"pretty.flowers\" a domain name, according to getPublicSuffix()? Depends on the age of the copy of the PSL you are working with. The TLD space is currently expanding at a fairly great rate, and the copy of the PSL Firefox has may not be totally up to date (because it's not dynamically updated data).</p>\n\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code>ACString <a href=\"#getBaseDomain()\">getBaseDomain</a>(in nsIURI aURI, [optional] in PRUint32 aAdditionalParts);</code></td>\n  </tr>\n  <tr>\n   <td><code>ACString <a href=\"#getBaseDomainFromHost()\">getBaseDomainFromHost</a>(in AUTF8String aHost, [optional] in PRUint32 aAdditionalParts);</code></td>\n  </tr>\n  <tr>\n   <td><code>ACString <a href=\"#getPublicSuffix()\">getPublicSuffix</a>(in nsIURI aURI);</code></td>\n  </tr>\n  <tr>\n   <td><code>ACString <a href=\"#getPublicSuffixFromHost()\">getPublicSuffixFromHost</a>(in AUTF8String aHost);</code></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n\n<h3 id=\"getBaseDomain()\" name=\"getBaseDomain()\">getBaseDomain()</h3>\n\n<p>Returns the base domain of a URI; that is, the public suffix with a given number of additional domain name parts.</p>\n\n<pre class=\"eval\">ACString getBaseDomain(\n  in nsIURI aURI,\n  [optional] in PRUint32 aAdditionalParts\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The URI to be analyzed.</dd>\n <dt><code>aAdditionalParts</code></dt>\n <dd>The number of domain name parts to be returned in addition to the public suffix.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>An <code><a href=\"/en/ACString\" title=\"en/ACString\">ACString</a></code> containing the base domain (public suffix plus the requested number of additional parts).</p>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>NS_ERROR_INVALID_ARG</code></dt>\n <dd>This exception is thrown if the hostname in <code>aURI</code> is empty.</dd>\n <dt><code>NS_ERROR_INSUFFICIENT_DOMAIN_LEVELS</code></dt>\n <dd>This exception is thrown if there were insufficient subdomain levels in the hostname to satisfy the requested <code>aAdditionalParts</code> value.</dd>\n <dt><code>NS_ERROR_HOST_IS_IP_ADDRESS</code></dt>\n <dd>This exception is thrown if <code>aURI</code> is a numeric IPv4 or IPv6 address.</dd>\n <dt><code>NS_ERROR_UNEXPECTED</code></dt>\n <dd>Or other error returned by <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIIDNService#normalize()\">nsIIDNService.normalize()</a></code> when the hostname contains characters disallowed in URIs.</dd>\n</dl>\n\n<h3 id=\"getBaseDomainFromHost()\" name=\"getBaseDomainFromHost()\">getBaseDomainFromHost()</h3>\n\n<p>Returns the base domain of a host string. Otherwise identical to <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIEffectiveTLDService#getBaseDomain()\">getBaseDomain()</a></code>.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong>Â It is strongly recommended that you use <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIEffectiveTLDService#getBaseDomain()\">getBaseDomain()</a></code> if a suitable <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> is available. Only use this method if this is not the case. </div><p></p>\n\n<pre class=\"eval\">ACString getBaseDomainFromHost(\n  in AUTF8String aHost,\n  in PRUint32 aAdditionalParts <span class=\"inlineIndicator optional optionalInline\">Optional</span>\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aHost</code></dt>\n <dd>The host string to be analyzed.</dd>\n <dt><code>aAdditionalParts <span class=\"inlineIndicator optional optionalInline\">Optional</span></code></dt>\n <dd>The number of domain name parts to be returned in addition to the public suffix.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>An <code><a href=\"/en/ACString\" title=\"en/ACString\">ACString</a></code> containing the base domain (public suffix plus the requested number of additional parts).</p>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>NS_ERROR_INVALID_ARG</code></dt>\n <dd>This exception is thrown if <code>aHost</code> is empty.</dd>\n <dt><code>NS_ERROR_UNEXPECTED</code></dt>\n <dd>This exception originates in the <code>Normalize()</code> method in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIIDNService\" title=\"\">nsIIDNService</a></code> and is thrown when <code>aHost</code> contains characters disallowed in URIs.</dd>\n <dt><code>NS_ERROR_INSUFFICIENT_DOMAIN_LEVELS</code></dt>\n <dd>This exception is thrown if there were insufficient subdomain levels in the hostname to satisfy the requested <code>aAdditionalParts</code> value.</dd>\n <dt><code>NS_ERROR_HOST_IS_IP_ADDRESS</code></dt>\n <dd>This exception is thrown if <code>aHost</code> is a numeric IPv4 or IPv6 address.</dd>\n</dl>\n\n<h6 id=\"Remarks_2\">Remarks</h6>\n\n<div class=\"note\">\n<p><strong>Note:</strong> Prior to Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1), this method worked if you passed host strings starting with a period (\".\"). That is no longer the case, since these are not valid host names. You should strip leading periods off host names before passing them to this method.</p>\n</div>\n\n<h3 id=\"getPublicSuffix()\" name=\"getPublicSuffix()\">getPublicSuffix()</h3>\n\n<p>Returns the public suffix of a URI. A public suffix is the highest-level domain under which individual domains may be registered; it may therefore contain one or more dots. For example, the public suffix for <code>www.bbc.co.uk</code> is <code>co.uk</code>. Likewise, the public suffix for <code>developer.mozilla.org</code> is <code>org</code>.</p>\n\n<pre class=\"eval\">ACString getPublicSuffix(\n  in nsIURI aURI\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The URI to be analyzed.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>An <a href=\"/en/ACString\" title=\"en/ACString\">ACString</a> containing the public suffix.</p>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>NS_ERROR_INVALID_ARG</code></dt>\n <dd>This exception is thrown if the hostname in <code>aURI</code> is empty.</dd>\n <dt><code>NS_ERROR_HOST_IS_IP_ADDRESS</code></dt>\n <dd>This exception is thrown if <code>aURI</code> is a numeric IPv4 or IPv6 address.</dd>\n <dt><code>NS_ERROR_UNEXPECTED</code></dt>\n <dd>Or other error returned by <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIIDNService#normalize()\">nsIIDNService.normalize()</a></code> when the hostname contains characters disallowed in URIs.</dd>\n</dl>\n\n<h3 id=\"getPublicSuffixFromHost()\" name=\"getPublicSuffixFromHost()\">getPublicSuffixFromHost()</h3>\n\n<p>Returns the public suffix of a host string. Otherwise identical to <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIEffectiveTLDService#getPublicSuffix()\">getPublicSuffix()</a></code>.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong>Â It is strongly recommended to use <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIEffectiveTLDService#getBaseDomain()\">getBaseDomain()</a></code> if a suitable <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> is available. Only use this method if this is not the case.</div><p></p>\n\n<pre class=\"eval\">ACString getPublicSuffixFromHost(\n  in AUTF8String aHost\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aHost</code></dt>\n <dd>The host string to be analyzed.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>An <a href=\"/en/ACString\" title=\"en/ACString\">ACString</a> containing the public suffix.</p>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>NS_ERROR_INVALID_ARG</code></dt>\n <dd>This exception is thrown if <code>aHost</code> is empty.</dd>\n <dt><code>NS_ERROR_UNEXPECTED</code></dt>\n <dd>This exception originates in the <code>Normalize()</code> method in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIIDNService\" title=\"\">nsIIDNService</a></code> and is thrown when <code>aHost</code> contains characters disallowed in URIs.</dd>\n <dt><code>NS_ERROR_HOST_IS_IP_ADDRESS</code></dt>\n <dd>This exception is thrown if <code>aHost</code> is a numeric IPv4 or IPv6 address.</dd>\n</dl>\n\n<h2 id=\"Remarks\" name=\"Remarks\">Remarks</h2>\n\n<p>All returned strings are encoded in ASCII/ACE and normalized according to <a class=\"external\" href=\"http://tools.ietf.org/html/rfc3454\" title=\"http://tools.ietf.org/html/rfc3454\">RFC 3454</a>.</p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Gerv\">Gerv</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/MKaply\">MKaply</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kscarfone\">kscarfone</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/darktrojan\">darktrojan</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Havarhen\">Havarhen</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Callek\">Callek</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Eff2k5\">Eff2k5</a>",
    "title": "nsIEffectiveTLDService"
}