{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/toolkit/components/places/public/nsIFaviconService.idl\" rel=\"custom\">toolkit/components/places/public/nsIFaviconService.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nStores favicons for pages in bookmarks and history.\n</span>\n\n  <div style=\"height: 42px; position: relative; padding: 2px; width: auto;\">\n\n  <div style=\"top: 22px; font-size: 11px; position: absolute;\">1.0</div>\n  \n  <div style=\"top: 22px; font-size: 11px; position: absolute; left: 0px; text-align: right; float: right; width: 100%;\">66</div>\n  \n  <div style=\"height: 8px; top: 16px; background: #dd0000; left: 0px; position: absolute; width: 5.714285714285714%;\"></div>\n  \n<div style=\"height: 8px; top: 16px; left: 5.714285714285714%; background: #00dd00; position: absolute; width: 94.28571428571429%;\" title=\"Introduced in Gecko 1.8 (Firefox 1.5 / Thunderbird 1.5 / SeaMonkey 1.0)\"></div>\n\n<div style=\"top: 0px; font-size: 11px; position: absolute; left: 5.714285714285714%;\">Introduced</div>\n<div style=\"top: 22px; font-size: 11px; position: absolute; left: 5.714285714285714%;\">Gecko 1.8</div>\n\n    <div style=\"height: 8px; top: 16px; left: 36.642857142857146%; background: #eeee00; position: absolute; width: 1%; border-radius: 4px; -webkit-border-radius: 4px;\" title=\"Last changed in Gecko 22.0 (Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)\"></div>\n    \n</div>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 22.0 (Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)</span></div>\n</div><p></p>\n<p>Implemented by: <code>@mozilla.org/browser/favicon-service;1</code>. To use this service, use:</p>\n<pre class=\"eval\">var faviconService = Components.classes[\"@mozilla.org/browser/favicon-service;1\"]\n                     .getService(Components.interfaces.nsIFaviconService);\n</pre>\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code>void <a href=\"#addFailedFavicon()\">addFailedFavicon</a>(in nsIURI aFaviconURI);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#expireAllFavicons()\">expireAllFavicons</a>();</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#getFaviconData()\">getFaviconData</a>(in nsIURI aFaviconURI, out AUTF8String aMimeType, [optional] out unsigned long aDataLen, [array,retval,size_is(aDataLen)] out octet aData);</code> <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)\">Obsolete since Gecko 22.0</span></td>\n  </tr>\n  <tr>\n   <td><code>AString <a href=\"#getFaviconDataAsDataURL()\">getFaviconDataAsDataURL</a>(in nsIURI aFaviconURI);</code>  <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)\">Obsolete since Gecko 22.0</span></td>\n  </tr>\n  <tr>\n   <td><code>nsIURI <a href=\"#getFaviconForPage()\">getFaviconForPage</a>(in nsIURI aPageURI);</code> <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)\">Obsolete since Gecko 22.0</span></td>\n  </tr>\n  <tr>\n   <td><code>nsIURI <a href=\"#getFaviconImageForPage()\">getFaviconImageForPage</a>(in nsIURI aPageURI);</code> <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)\">Obsolete since Gecko 22.0</span></td>\n  </tr>\n  <tr>\n   <td><code>nsIURI <a href=\"#getFaviconLinkForIcon()\">getFaviconLinkForIcon</a>(in nsIURI aFaviconURI);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#isFailedFavicon()\">isFailedFavicon</a>(in nsIURI aFaviconURI);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#removeFailedFavicon()\">removeFailedFavicon</a>(in nsIURI aFaviconURI);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setAndLoadFaviconForPage()\">setAndLoadFaviconForPage</a>(in nsIURI aPageURI, in nsIURI aFaviconURI, in boolean aForceReload, in unsigned long aFaviconLoadType, [optional] in nsIFaviconDataCallback aCallback);</code> <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)\">Obsolete since Gecko 22.0</span></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setFaviconData()\">setFaviconData</a>(in nsIURI aFaviconURI, [const,array,size_is(aDataLen)] in octet aData, in unsigned long aDataLen, in AUTF8String aMimeType, in PRTime aExpiration);</code> <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)\">Obsolete since Gecko 22.0</span></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setFaviconDataFromDataURL()\">setFaviconDataFromDataURL</a>(in nsIURI aFaviconURI, in AString aDataURL, in PRTime aExpiration);</code>  <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)\">Obsolete since Gecko 22.0</span></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setFaviconUrlForPage()\">setFaviconUrlForPage</a>(in nsIURI aPageURI, in nsIURI aFaviconURI);</code> <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)\">Obsolete since Gecko 22.0</span></td>\n  </tr>\n </tbody>\n</table>\n<h2 id=\"Attributes\" name=\"Attributes\">Attributes</h2>\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Attribute</td>\n   <td class=\"header\">Type</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>defaultFavicon</code></td>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code></code></td>\n   <td>The default favicon URI. <strong>Read only.</strong> </td>\n  </tr>\n </tbody>\n</table>\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n<h3 id=\"addFailedFavicon()\" name=\"addFailedFavicon()\">addFailedFavicon()</h3>\n<p>This method adds a given favicon's URI to the failed favicon cache.</p>\n<p>The lifespan of the favicon cache is up to the caching system. This cache will also be written to if you use <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFaviconService#setAndLoadFaviconForPage()\">setAndLoadFaviconForPage()</a></code> method and it encounters an error while fetching an icon.</p>\n<pre class=\"eval\">void addFailedFavicon(\n  in nsIURI aFaviconURI\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl>\n <dt>\n  <code>aFaviconURI</code></dt>\n <dd>\n  The URI of an icon in the favicon service. Can be <code>null</code>.</dd>\n</dl>\n<p></p><h3 id=\"expireAllFavicons()\">expireAllFavicons()</h3><p></p>\n<p>Expires all known favicons, removing them from the database.</p>\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> This is an asynchronous operation; when it completes, a \"places-favicons-expired\" notification is dispatched through the observer's service.</div><p></p>\n<pre class=\"eval\">void expireAllFavicons();\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<p>None.</p>\n<p></p><div class=\"headingWithIndicator\">\n        <h3 id=\"getFaviconData()\">getFaviconData()</h3>\n        <span class=\"indicatorInHeadline obsolete obsoleteMethod\">Obsolete since Gecko 22.0 (Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)</span>\n        </div><p></p>\n<div class=\"note\">\n <p><strong>Note:</strong> This method was removed in <span title=\"(Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)\">Gecko 22.0</span>. You should use the new async API <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIAsyncFavicons#getFaviconDataForPage()\">mozIAsyncFavicons.getFaviconDataForPage()</a></code> instead.</p>\n</div>\n<p>This method retrieves the given favicon data. Throws an exception if we don't have data.</p>\n<p>If there is no data but we have an entry for this favicon, <code>aDataLen</code> will be <code>\"0\"</code> and <code>aData</code> will be <code>null</code>.</p>\n<pre class=\"eval\">void getFaviconData(\n  in nsIURI aFaviconURI,\n  out AUTF8String aMimeType,\n  out unsigned long aDataLen, <span class=\"inlineIndicator optional optionalInline\">Optional from Gecko 2.0</span>\n  [array,retval,size_is(aDataLen)] out octet aData\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl>\n <dt>\n  <code>aFaviconURI</code></dt>\n <dd>\n  URI of the favicon whose data is being read.</dd>\n <dt>\n  <code>aMimeType</code></dt>\n <dd>\n  Output parameter where the <code>MIME</code> type will be placed.</dd>\n <dt>\n  <code>aDataLen</code></dt>\n <dd>\n  Output parameter where the size of the binary data will be placed.</dd>\n <dt>\n  <code>aData</code></dt>\n <dd>\n  Output parameter where the binary favicon data will be placed. This will be <code>null</code> if we have this URI but have no data associated with it.</dd>\n</dl>\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n<dl>\n <dt>\n  <code>NS_ERROR_NOT_AVAILABLE</code></dt>\n <dd>\n  Thrown when we have never heard of this favicon URL.</dd>\n</dl>\n<p></p><div class=\"headingWithIndicator\">\n        <h3 id=\"getFaviconDataAsDataURL()\">getFaviconDataAsDataURL()</h3>\n        <span class=\"indicatorInHeadline obsolete obsoleteMethod\">Obsolete since Gecko 22.0 (Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)</span>\n        </div><p></p>\n<div class=\"note\">\n <p><strong>Note:</strong> This method was removed in <span title=\"(Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)\">Gecko 22.0</span>. You should use the new async API <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIAsyncFavicons#getFaviconDataForPage()\">mozIAsyncFavicons.getFaviconDataForPage()</a></code> instead.</p>\n</div>\n<p>This method retrieves the given favicon data, returning it as a <code>data</code> URL Throws an exception if we don't have data.</p>\n<p>If there is no data but we have an entry for this favicon, returns <code>null</code>.</p>\n<pre class=\"eval\">AString getFaviconDataAsDataURL(\n  in nsIURI aFaviconURI\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl>\n <dt>\n  <code>aFaviconURI</code></dt>\n <dd>\n  URI of the favicon whose data is being read.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>A <code>data</code> URL containing the data for the favicon. This is <code>null</code> if there is no data but there is an entry for the favicon.</p>\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n<dl>\n <dt>\n  <code>NS_ERROR_NOT_AVAILABLE</code></dt>\n <dd>\n  Thrown when we have never heard of this favicon URL.</dd>\n</dl>\n<p></p><div class=\"headingWithIndicator\">\n        <h3 id=\"getFaviconForPage()\">getFaviconForPage()</h3>\n        <span class=\"indicatorInHeadline obsolete obsoleteMethod\">Obsolete since Gecko 22.0 (Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)</span>\n        </div><p></p>\n<div class=\"note\">\n <p><strong>Note:</strong> This method was removed in <span title=\"(Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)\">Gecko 22.0</span>. You should use the new async API <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIAsyncFavicons#getFaviconURLForPage()\">mozIAsyncFavicons.getFaviconURLForPage()</a></code> instead.</p>\n</div>\n<p>This method retrieves the URI of the favicon for the given page.</p>\n<pre class=\"eval\">nsIURI getFaviconForPage(\n  in nsIURI aPageURI\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl>\n <dt>\n  <code>aPageURI</code></dt>\n <dd>\n  URI of the page whose favicon is desired.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>Returns the URI of the favicon associated with that page. Returning a URI here does NOT mean that we have data for this favicon, only that we know what the favicon should be.</p>\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n<dl>\n <dt>\n  <code>NS_ERROR_NOT_AVAILABLE</code></dt>\n <dd>\n  When the page is not found or it has no favicon.</dd>\n</dl>\n<p></p><div class=\"headingWithIndicator\">\n        <h3 id=\"getFaviconImageForPage()\">getFaviconImageForPage()</h3>\n        <span class=\"indicatorInHeadline obsolete obsoleteMethod\">Obsolete since Gecko 22.0 (Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)</span>\n        </div><p></p>\n<div class=\"note\">\n <p><strong>Note:</strong> This method was removed in <span title=\"(Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)\">Gecko 22.0</span>. You should use the new async API <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIAsyncFavicons#getFaviconURLForPage()\">mozIAsyncFavicons.getFaviconURLForPage()</a></code> and <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFaviconService#getFaviconLinkForIcon()\">getFaviconLinkForIcon()</a></code> instead.</p>\n</div>\n<p>This method is very similar to that of <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFaviconService#getFaviconLinkForIcon()\">getFaviconLinkForIcon()</a></code> method. For a given page will give you a URI that, when displayed in chrome, will result in the given page's favicon. Unlike the other get functions, we needn't have heard of the page or its favicon: the default one will be returned in this case.</p>\n<p>When compared to <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFaviconService#getFaviconLinkForIcon()\">getFaviconLinkForIcon()</a></code> method, this method only adds the extra level of indirection, looking up the favicon based on the page URI and using the default if not found.</p>\n<pre class=\"eval\">nsIURI getFaviconImageForPage(\n  in nsIURI aPageURI\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl>\n <dt>\n  <code>aPageURI</code></dt>\n <dd>\n  URI of the page whose favicon is desired.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>Returns a URI that will give you the icon image. This is <strong>not</strong> the URI of the icon as set on the page, but a URI that will give you the data out of the favicon service. For a normal page with a favicon we've stored, this will be an annotation URI which will then cause the corresponding favicon data to be loaded from this service. For pages where we don't have a favicon, this will be a chrome URI of the default icon for a web page.</p>\n<h3 id=\"getFaviconLinkForIcon()\" name=\"getFaviconLinkForIcon()\">getFaviconLinkForIcon()</h3>\n<p>This method, for a given icon URI will return a URI that will result in the image. In most cases, this is an annotation URI. For chrome, this will do nothing and return the input URI.</p>\n<p>No validity checking is done. If you pass an icon URI that we've never seen, you'll get back a URI that references an invalid icon. The moz-anno protocol handler's special case for \"favicon\" annotations will resolve invalid icons to the default icon, although without caching. For invalid chrome URIs, you'll get a broken image.</p>\n<pre class=\"eval\">nsIURI getFaviconLinkForIcon(\n  in nsIURI aFaviconURI\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl>\n <dt>\n  <code>aFaviconURI</code></dt>\n <dd>\n  The URI of an icon in the favicon service.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>Returns a URI that will load the desired icon. This is <strong>not</strong> the URI of the icon as set on the page, but a URI that will give you the data out of the favicon service. For a normal page with a favicon we've stored, this will be an annotation URI which will then cause the corresponding favicon data to be loaded from this service. For pages where we don't have a favicon, this will be a chrome URI of the default icon for a web page. For chrome, the output will be the same as the input. For chrome, the output will be the same as the input.</p>\n<p>No validity checking is done. If you pass an icon URI that we've never seen, you'll get back a URI that references an invalid icon. The moz-anno protocol handler's special case for \"favicon\" annotations will detect most invalid icons and it will resolve to the default icon, although without caching. For invalid chrome URIs, you'll get a broken image.</p>\n<h3 id=\"isFailedFavicon()\" name=\"isFailedFavicon()\">isFailedFavicon()</h3>\n<p>This method checks to see if this favicon is in the failed favicon cache.</p>\n<pre class=\"eval\">boolean isFailedFavicon(\n  in nsIURI aFaviconURI\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl>\n <dt>\n  <code>aFaviconURI</code></dt>\n <dd>\n  The URI of an icon in the favicon service. Can be <code>null</code>.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>Returns <code>true</code> if the favicon is in the failed cache, meaning you probably shouldn't try to load it. A <code>false</code> return value means that it's worth trying to load it. This allows you to avoid trying to load <code>\"foo.com/favicon.ico\"</code> for every page on a site that doesn't have a favicon.</p>\n<h3 id=\"removeFailedFavicon()\" name=\"removeFailedFavicon()\">removeFailedFavicon()</h3>\n<p>This method removes the given favicon from the failed favicon cache. If the icon is not in the cache, this function will silently succeed.</p>\n<pre class=\"eval\">void removeFailedFavicon(\n  in nsIURI aFaviconURI\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl>\n <dt>\n  <code>aFaviconURI</code></dt>\n <dd>\n  The URI of an icon in the favicon service. Can be <code>null</code>.</dd>\n</dl>\n<p></p><div class=\"headingWithIndicator\">\n        <h3 id=\"setAndLoadFaviconForPage()\">setAndLoadFaviconForPage()</h3>\n        <span class=\"indicatorInHeadline obsolete obsoleteMethod\">Obsolete since Gecko 22.0 (Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)</span>\n        </div><p></p>\n<div class=\"note\">\n <p><strong>Note:</strong> This method was removed in <span title=\"(Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)\">Gecko 22.0</span>. You should use the new async API <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIAsyncFavicons#setAndFetchFaviconForPage()\">mozIAsyncFavicons.setAndFetchFaviconForPage()</a></code> instead.</p>\n</div>\n<p>This method is same as <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFaviconService#SetFaviconUrlForPage()\">SetFaviconUrlForPage()</a></code> except that this also attempts to set the data by loading the favicon URI. An async request will be created for this URI and if the data is available, it will asynchronously get saved in the database without any further work from the caller.</p>\n<p>If the icon data already exists, we won't normally try to re-load the icon from the net (or more likely the cache). If the icon is in the failed favicon cache we won't do anything. Use <code>aForceReload</code> to force a reload of the data. This will remove the favicon from the failed cache. If it then fails again, it will be re-added to the failed cache.</p>\n<p><code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFaviconService#SetFaviconUrlForPage()\">SetFaviconUrlForPage()</a></code> and <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFaviconService#setFaviconData()\">setFaviconData()</a></code> will take any URL you provide and save it. This function is intended for automatic usage, and will only save favicons for \"good\" URLs, as defined by what gets added to history. For \"bad\" URLs, this function will succeed and do nothing. This function will also ignore the error page favicon URI (<code><a class=\"external\" rel=\"freelink\">chrome://global/skin/icons/warning-16.png</a></code>). Icons that fail to load will automatically be added to the failed favicon cache.</p>\n<p>This function will not save favicons for non-bookmarked URLs when history is disabled (expiration time is 0 days). The rest of the functions here will always store favicons even when history is disabled.</p>\n<pre class=\"eval\">void setAndLoadFaviconForPage(\n  in nsIURI aPageURI,\n  in nsIURI aFaviconURI,\n  in boolean aForceReload,\n<code>  in unsigned long aFaviconLoadType, </code>\n  in nsIFaviconDataCallback aCallback <span class=\"inlineIndicator optional optionalInline\">Optional from Gecko 2.0</span> \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl>\n <dt>\n  <code>aPageURI</code></dt>\n <dd>\n  URI of the page whose favicon is being set.</dd>\n <dt>\n  <code>aFaviconURI</code></dt>\n <dd>\n  URI of the favicon to associate with the page.</dd>\n <dt>\n  <code>aForceReload</code></dt>\n <dd>\n  Unset is normal behavior, we will only try to reload the favicon if we don't have it or if it has expired from the cache. If set, it will always try to reload the favicon.</dd>\n <dt>\n  <code><strong>aFaviconLoadType</strong></code> </dt>\n <dd>\n  One of <code>nsIFaviconService.FAVICON_LOAD_PRIVATE</code> or <code>nsIFaviconService.FAVICON_LOAD_NON_PRIVATE</code> to indicate that any network requests performed should act like ones from a private browsing context (ie. no history entries, only store in the temporary disk cache, etc.). This should be determined via <code>PrivateBrowsingUtils.isWindowPrivate(<em>someRelatedWindow</em>)</code> if the favicon may expose the user's private browsing data by performing a network request, otherwise <code>FAVICON_LOAD_NON_PRIVATE</code> may be used.</dd>\n <dt>\n  <code>aCallback</code> <span class=\"inlineIndicator optional optionalInline\">Optional from Gecko 2.0</span> </dt>\n <dd>\n  An <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFaviconDataCallback\" title=\"\">nsIFaviconDataCallback</a></code>.</dd>\n</dl>\n<h6 id=\"Example\" name=\"Example\">Example</h6>\n<pre>var ioservice = Components.classes[\"@mozilla.org/network/io-service;1\"]\n                          .getService(Components.interfaces.nsIIOService);\nvar pageURI = ioservice.newURI(\"http://www.mozilla.org/\", null, null);\nvar faviconURI = ioservice.newURI(\"http://www.mozilla.org/favicon.ico\", null, null);\n\nfaviconService.setAndLoadFaviconForPage(pageURI, faviconURI, false);\n</pre>\n<p></p><div class=\"headingWithIndicator\">\n        <h3 id=\"setFaviconData()\">setFaviconData()</h3>\n        <span class=\"indicatorInHeadline obsolete obsoleteMethod\">Obsolete since Gecko 22.0 (Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)</span>\n        </div><p></p>\n<div class=\"note\">\n <p><strong>Note:</strong> This method was removed in <span title=\"(Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)\">Gecko 22.0</span>. You should use the new async API <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIAsyncFavicons#replaceFaviconData()\">mozIAsyncFavicons.replaceFaviconData()</a></code> instead.</p>\n</div>\n<p>This method stores the data of a given favicon. You must specify the <code>MIME</code> type unless you're clearing the data.</p>\n<p>You can set the data even if you haven't called <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFaviconService#setFaviconUrlForPage()\">setFaviconUrlForPage()</a></code> yet. It will be stored but will not be associated with any page. However, any favicons not associated with a visited web page, bookmark, or <code>\"place:\"</code> URI will be expired when history cleanup is done. This might be done at any time on a timer, so you should not let the message loop run between calls or your icon may get deleted.</p>\n<p>It is best to set the favicon data, and then associate it with a page. This will make the notifications more efficient since the icon will already have data when the set favicon observer messages goes out.</p>\n<p>The expiration time is stored. This will be used if you call <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFaviconService#setAndLoadFaviconForPage()\">setAndLoadFaviconForPage()</a></code> to see whether the data needs reloading.</p>\n<p>Do not use this function for <code>\"chrome:\"</code> icon URLs. You should reference the chrome image yourself. The <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFaviconService#getFaviconLinkForIcon()\">getFaviconLinkForIcon()</a></code> and <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFaviconService#getFaviconForPage()\">getFaviconForPage()</a></code> will ignore any associated data if the favicon URI is <code>\"chrome:\"</code> and just return the same chrome URI.</p>\n<p>This function does NOT send out notifications that the data has changed. Potentially, many pages could be referencing the favicon and they could be visible in a history view or toolbar. But sending out those notifications is very intensive. Those pages will keep the old icon until they have been refreshed by other means.</p>\n<pre class=\"eval\">void setFaviconData(\n  in nsIURI aFaviconURI,\n  [const,array,size_is(aDataLen)] in octet aData,\n  in unsigned long aDataLen, <span class=\"inlineIndicator optional optionalInline\">Optional from Gecko 2.0</span>\n  in AUTF8String aMimeType,\n  in PRTime aExpiration\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl>\n <dt>\n  <code>aFaviconURI</code></dt>\n <dd>\n  URI of the favicon whose data is being set.</dd>\n <dt>\n  <code>aData</code></dt>\n <dd>\n  Binary contents of the favicon to save.</dd>\n <dt>\n  <code>aDataLen</code> <span class=\"inlineIndicator optional optionalInline\">Optional from Gecko 2.0</span></dt>\n <dd>\n  Length of binary data.</dd>\n <dt>\n  <code>aMimeType</code></dt>\n <dd>\n  <code>MIME</code> type of the data to store. This is important so that we know what to report when the favicon is used. You should always set this param unless you are clearing an icon.</dd>\n <dt>\n  <code>aExpiration</code></dt>\n <dd>\n  Time in microseconds since the epoch when this favicon expires. Until this time, we won't try to load it again.</dd>\n</dl>\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n<dl>\n <dt>\n  <code>NS_ERROR_FAILURE</code></dt>\n <dd>\n  Thrown if the favicon is overbloated and won't be saved to the db.</dd>\n</dl>\n<p></p><div class=\"headingWithIndicator\">\n        <h3 id=\"setFaviconDataFromDataURL()\">setFaviconDataFromDataURL()</h3>\n        <span class=\"indicatorInHeadline obsolete obsoleteMethod\">Obsolete since Gecko 22.0 (Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)</span>\n        </div><p></p>\n<div class=\"note\">\n <p><strong>Note:</strong> This method was removed in <span title=\"(Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)\">Gecko 22.0</span>. You should use the new async API <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIAsyncFavicons#replaceFaviconDataFromDataURL()\">mozIAsyncFavicons.replaceFaviconDataFromDataURL()</a></code> instead.</p>\n</div>\n<p>This method stores the data of a given favicon. The data is provided using a <code>data</code> URL string.</p>\n<p>This function tries to optimize the favicon size; if it's bigger than a defined limit, Gecko attempts to convert it to a 16x16 pixel PNG image. If that fails and the image is bigger than a maximum acceptable favicon size, the entire operation fails and the favicon isn't saved.</p>\n<p>It is best to set the favicon data, and then associate it with a page. This will make the notifications more efficient since the icon will already have data when the set favicon observer messages goes out.</p>\n<p>The expiration time is stored. This will be used if you call <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFaviconService#setAndLoadFaviconForPage()\">setAndLoadFaviconForPage()</a></code> to see whether the data needs reloading.</p>\n<p>Do not use this function for <code>\"chrome:\"</code> icon URLs. You should reference the chrome image yourself. The <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFaviconService#getFaviconLinkForIcon()\">getFaviconLinkForIcon()</a></code> and <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFaviconService#getFaviconForPage()\">getFaviconForPage()</a></code> will ignore any associated data if the favicon URI is <code>\"chrome:\"</code> and just return the same chrome URI.</p>\n<p>This function does <strong>not</strong> send out notifications that the data has changed. Potentially, many pages could be referencing the favicon and they could be visible in a history view or toolbar. But sending out those notifications is very intensive. Those pages will keep the old icon until they have been refreshed by other means.</p>\n<pre class=\"eval\">void setFaviconDataFromDataURL(\n  in nsIURI aFaviconURI,\n  in AString aDataURL,\n  in PRTime aExpiration\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl>\n <dt>\n  <code>aFaviconURI</code></dt>\n <dd>\n  URI of the favicon whose data is being set.</dd>\n <dt>\n  <code>aDataURL</code></dt>\n <dd>\n  String containing a data URL that represents the contents of the favicon to save.</dd>\n <dt>\n  <code>aExpiration</code></dt>\n <dd>\n  The time in microseconds since epoch when this favicon expires; until this time, we won't try to load the favicon again.</dd>\n</dl>\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n<dl>\n <dt>\n  <code>NS_ERROR_FAILURE</code></dt>\n <dd>\n  Thrown if the favicon is overbloated and won't be saved to the db.</dd>\n</dl>\n<p></p><div class=\"headingWithIndicator\">\n        <h3 id=\"setFaviconUrlForPage()\">setFaviconUrlForPage()</h3>\n        <span class=\"indicatorInHeadline obsolete obsoleteMethod\">Obsolete since Gecko 22.0 (Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)</span>\n        </div><p></p>\n<div class=\"note\">\n <p><strong>Note:</strong> This method was removed in <span title=\"(Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)\">Gecko 22.0</span>. You should use the new async API <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIAsyncFavicons#setAndFetchFaviconForPage()\">mozIAsyncFavicons.setAndFetchFaviconForPage()</a></code> instead.</p>\n</div>\n<p>This method declares that a given page uses a favicon with the given URI.</p>\n<p>You needn't have any specified data at this point. An entry linking the favicon with the page will be create with no data. You can populate it later with <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFaviconService#SetFaviconData()\">SetFaviconData()</a></code>. However, any favicons not associated with a visited web page, a bookmark, or a <code>\"place:\"</code> URI will be expired when history cleanup is done * (typically at app shutdown, but also possibly if the user clears their * cache or history).</p>\n<p>This will send out history notifications if the new favicon has any data. This means that you should try to set data first if you have it, otherwise the page might not get a notification sent for it since data setting does not send notifications.</p>\n<pre class=\"eval\">void setFaviconUrlForPage(\n  in nsIURI aPageURI,\n  in nsIURI aFaviconURI\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl>\n <dt>\n  <code>aPageURI</code></dt>\n <dd>\n  URI of the page whose favicon is being set.</dd>\n <dt>\n  <code>aFaviconURI</code></dt>\n <dd>\n  URI of the favicon to associate with the page.</dd>\n</dl>\n<h2 id=\"See_also\" name=\"See_also\">See also</h2>\n<ul>\n <li><a href=\"/en/Places\" title=\"en/Places\">Places</a></li>\n <li><a href=\"/en/Using_the_Places_favicon_service\" title=\"en/Using_the_Places_favicon_service\">Using the Places favicon service</a></li>\n <li><a href=\"/en/Using_the_Places_annotation_service\" title=\"en/Using_the_Places_annotation_service\">Using the Places annotation service</a></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kscarfone\">kscarfone</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Editmonkey\">Editmonkey</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/jdm\">jdm</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mnoorenberghe\">mnoorenberghe</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/J%C3%BCrgen%20Jeka\">Jürgen Jeka</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ehsan\">Ehsan</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Arehman4\">Arehman4</a>",
    "title": "nsIFaviconService"
}