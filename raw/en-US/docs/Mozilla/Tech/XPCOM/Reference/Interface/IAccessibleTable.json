{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/other-licenses/ia2/AccessibleTable.idl\" rel=\"custom\">other-licenses/ia2/AccessibleTable.idl</a></code><span style=\"text-align: right; float: right;\"><span style=\"color: #cc0000; font-weight: 700;\">Not scriptable</span></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThis interface gives access to a two-dimensional table.\n</span>\n\n  <div style=\"height: 42px; position: relative; padding: 2px; width: auto;\">\n\n  <div style=\"top: 22px; font-size: 11px; position: absolute;\">1.0</div>\n  \n  <div style=\"top: 22px; font-size: 11px; position: absolute; left: 0px; text-align: right; float: right; width: 100%;\">66</div>\n  \n  <div style=\"height: 8px; top: 16px; background: #dd0000; left: 0px; position: absolute; width: 8.571428571428571%;\"></div>\n  \n<div style=\"height: 8px; top: 16px; left: 8.571428571428571%; background: #00dd00; position: absolute; width: 91.42857142857143%;\" title=\"Introduced in Gecko 1.9 (Firefox 3)\"></div>\n\n<div style=\"top: 0px; font-size: 11px; position: absolute; left: 8.571428571428571%;\">Introduced</div>\n<div style=\"top: 22px; font-size: 11px; position: absolute; left: 8.571428571428571%;\">Gecko 1.9</div>\n\n</div>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IUnknown\" title=\"\">IUnknown</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 1.9 (Firefox 3)</span></div>\n</div><p></p>\n<p>Typically all accessible objects that represent cells or cell-clusters of a table will be at the same time children of the table. In this case <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/IAccessible2#indexInParent()\">IAccessible2.indexInParent()</a></code> will return the child index which then can be used when calling <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessibleTable#rowIndex()\">rowIndex()</a></code> and <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessibleTable#columnIndex()\">columnIndex()</a></code>. However, in some cases that kind of implementation will not be possible. When the table cells are not direct children of a table, the object representing the cell can define a \"table-cell-index\" object attribute identifying the 0 based table cell index. This object attribute is obtained by parsing the attribute string returned by <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/IAccessible2#attributes()\">IAccessible2.attributes()</a></code>. The \"table-cell-index\" attribute can be used just like a child index of the typical case. ATs should first test for the presence of the \"table-cell-index\" attribute and if it is not present then <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/IAccessible2#indexInParent()\">IAccessible2.indexInParent()</a></code> can be used as in the typical case where cells are direct children of the table. The range of valid coordinates for this interface are implementation dependent. However, that range includes at least the intervals from the from the first row or column with the index 0 up to the last (but not including) used row or column as returned by <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessibleTable#nRows()\">nRows()</a></code> and <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessibleTable#nColumns()\">nColumns()</a></code>.</p>\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n<table class=\"standard-table\"> <tbody> <tr> <td><code>[propget] HRESULT <a href=\"#accessibleAt()\">accessibleAt</a>([in] long row, [in] long column, [out] IUnknown accessible );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#caption()\">caption</a>([out] IUnknown accessible );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#childIndex()\">childIndex</a>([in] long rowIndex, [in] long columnIndex, [out] long cellIndex );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#columnDescription()\">columnDescription</a>([in] long column, [out] BSTR description );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#columnExtentAt()\">columnExtentAt</a>([in] long row, [in] long column, [out] long nColumnsSpanned );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#columnHeader()\">columnHeader</a>([out] IAccessibleTable accessibleTable, [out] long startingRowIndex );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#columnIndex()\">columnIndex</a>([in] long cellIndex, [out] long columnIndex );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#isColumnSelected()\">isColumnSelected</a>([in] long column, [out] boolean isSelected );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#isRowSelected()\">isRowSelected</a>([in] long row, [out] boolean isSelected );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#isSelected()\">isSelected</a>([in] long row, [in] long column, [out] boolean isSelected );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#modelChange()\">modelChange</a>([out] IA2TableModelChange modelChange );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#nColumns()\">nColumns</a>([out] long columnCount );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#nRows()\">nRows</a>([out] long rowCount );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#nSelectedChildren()\">nSelectedChildren</a>([out] long cellCount );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#nSelectedColumns()\">nSelectedColumns</a>([out] long columnCount );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#nSelectedRows()\">nSelectedRows</a>([out] long rowCount );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#rowColumnExtentsAtIndex()\">rowColumnExtentsAtIndex</a>([in] long index, [out] long row, [out] long column, [out] long rowExtents, [out] long columnExtents, [out] boolean isSelected );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#rowDescription()\">rowDescription</a>([in] long row, [out] BSTR description );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#rowExtentAt()\">rowExtentAt</a>([in] long row, [in] long column, [out] long nRowsSpanned );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#rowHeader()\">rowHeader</a>([out] IAccessibleTable accessibleTable, [out] long startingColumnIndex );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#rowIndex()\">rowIndex</a>([in] long cellIndex, [out] long rowIndex );</code></td> </tr> <tr> <td><code>HRESULT <a href=\"#selectColumn()\">selectColumn</a>([in] long column );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#selectedChildren()\">selectedChildren</a>([in] long maxChildren, [out, size_is(,maxChildren), length_is(, nChildren)] long children, [out] long nChildren );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#selectedColumns()\">selectedColumns</a>([in] long maxColumns, [out, size_is(,maxColumns), length_is(, nColumns)] long columns, [out] long nColumns );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#selectedRows()\">selectedRows</a>([in] long maxRows, [out, size_is(,maxRows), length_is(, nRows)] long rows, [out] long nRows );</code></td> </tr> <tr> <td><code>HRESULT <a href=\"#selectRow()\">selectRow</a>([in] long row );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#summary()\">summary</a>([out] IUnknown accessible );</code></td> </tr> <tr> <td><code>HRESULT <a href=\"#unselectColumn()\">unselectColumn</a>([in] long column );</code></td> </tr> <tr> <td><code>HRESULT <a href=\"#unselectRow()\">unselectRow</a>([in] long row );</code></td> </tr> </tbody>\n</table>\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n<h3 id=\"accessibleAt()\" name=\"accessibleAt()\">accessibleAt()</h3>\n<p>Returns the accessible object at the specified row and column in the table. This object could be an <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessible\" title=\"\">IAccessible</a></code> or an <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessible2\" title=\"\">IAccessible2</a></code>.</p>\n<pre class=\"eval\">[propget] HRESULT accessibleAt(\n  [in] long row,\n  [in] long column,\n  [out] IUnknown accessible \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>row</code></dt> <dd>The 0 based row index for which to retrieve the cell.</dd> <dt><code>column</code></dt> <dd>The 0 based column index for which to retrieve the cell.</dd> <dt><code>accessible</code></dt> <dd>If both row and column index are valid then the corresponding accessible object is returned that represents the requested cell regardless of whether the cell is currently visible (on the screen).</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>E_INVALIDARG if bad [in] passed, [out] value is <code>null</code>. S_OK.</p>\n<h3 id=\"caption()\" name=\"caption()\">caption()</h3>\n<p>Returns the <code>caption</code> for the table. The returned object could be an <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessible\" title=\"\">IAccessible</a></code> or an <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessible2\" title=\"\">IAccessible2</a></code>.</p>\n<pre class=\"eval\">[propget] HRESULT caption(\n  [out] IUnknown accessible \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>accessible</code></dt> <dd>If the table has a <code>caption</code> then a reference to it is returned, else a <code>null</code> pointer is returned.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_FALSE if there is nothing to return, [out] value is <code>null</code>. S_OK.</p>\n<h3 id=\"childIndex()\" name=\"childIndex()\">childIndex()</h3>\n<p>Translates the given row and column indexes into the corresponding cell index.</p>\n<pre class=\"eval\">[propget] HRESULT childIndex(\n  [in] long rowIndex,\n  [in] long columnIndex,\n  [out] long cellIndex \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>rowIndex</code></dt> <dd>0 based row index for the cell.</dd> <dt><code>columnIndex</code></dt> <dd>0 based column index for the cell.</dd> <dt><code>cellIndex</code></dt> <dd>Returns the 0 based index of the cell at the specified row and column indexes.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>E_INVALIDARG if bad [in] passed, [out] value is 0. S_OK.</p>\n<h3 id=\"columnDescription()\" name=\"columnDescription()\">columnDescription()</h3>\n<p>Returns the description text of the specified column in the table.</p>\n<pre class=\"eval\">[propget] HRESULT columnDescription(\n  [in] long column,\n  [out] BSTR description \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>column</code></dt> <dd>The 0 based index of the column for which to retrieve the description.</dd> <dt><code>description</code></dt> <dd>Returns the description text of the specified column in the table if such a description exists. Otherwise a <code>null</code> pointer is returned.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>E_INVALIDARG if bad [in] passed, [out] value is <code>null</code>. S_FALSE if there is nothing to return, [out] value is <code>null</code>. S_OK.</p>\n<h3 id=\"columnExtentAt()\" name=\"columnExtentAt()\">columnExtentAt()</h3>\n<p>Returns the number of columns occupied by the accessible object at the specified row and column in the table. The result is greater than 1 if the specified cell spans multiple columns.</p>\n<pre class=\"eval\">[propget] HRESULT columnExtentAt(\n  [in] long row,\n  [in] long column,\n  [out] long nColumnsSpanned \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>row</code></dt> <dd>0 based row index of the accessible for which to return the column extent.</dd> <dt><code>column</code></dt> <dd>0 based column index of the accessible for which to return the column extent.</dd> <dt><code>nColumnsSpanned</code></dt> <dd>Returns the 1 based column extent of the specified cell.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>E_INVALIDARG if bad [in] passed, [out] value is 0. S_OK.</p>\n<h3 id=\"columnHeader()\" name=\"columnHeader()\">columnHeader()</h3>\n<p>Returns the column headers as an <code>IAccessibleTable</code> object. Content and size of the returned table are implementation dependent.</p>\n<pre class=\"eval\">[propget] HRESULT columnHeader(\n  [out] IAccessibleTable accessibleTable,\n  [out] long startingRowIndex \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>accessibleTable</code></dt> <dd>The column header.</dd> <dt><code>startingRowIndex</code></dt> <dd>The 0 based row index where the header starts, usually 0.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_FALSE if there is no header, [out] values are <code>null</code> and 0 respectively. S_OK.</p>\n<h3 id=\"columnIndex()\" name=\"columnIndex()\">columnIndex()</h3>\n<p>Translates the given cell index into the corresponding column index.</p>\n<pre class=\"eval\">[propget] HRESULT columnIndex(\n  [in] long cellIndex,\n  [out] long columnIndex \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>cellIndex</code></dt> <dd>0 based index of the cell in the parent or closest ancestor table. Typically this is the value returned from <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/IAccessible2#indexInParent()\">IAccessible2.indexInParent()</a></code>, but in the case where the table cells are not direct children of the table this is the cell index specified by the \"table-cell-index\" object attribute obtained from parsing the attributes string returned by calling <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/IAccessible2#attributes()\">IAccessible2.attributes()</a></code> on the cell object.</dd> <dt><code>columnIndex</code></dt> <dd>Returns the 0 based column index of the cell of the specified child or the index of the first column if the child spans multiple columns.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>E_INVALIDARG if bad [in] passed, [out] value is 0. S_OK.</p>\n<h3 id=\"isColumnSelected()\" name=\"isColumnSelected()\">isColumnSelected()</h3>\n<p>Returns a boolean value indicating whether the specified column is completely selected.</p>\n<pre class=\"eval\">[propget] HRESULT isColumnSelected(\n  [in] long column,\n  [out] boolean isSelected \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>column</code></dt> <dd>0 based index of the column for which to determine whether it is selected.</dd> <dt><code>isSelected</code></dt> <dd>Returns <code>true</code> if the specified column is selected completely and <code>false</code> otherwise.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>E_INVALIDARG if bad [in] passed, [out] value is <code>false</code>. S_OK.</p>\n<h3 id=\"isRowSelected()\" name=\"isRowSelected()\">isRowSelected()</h3>\n<p>Returns a boolean value indicating whether the specified row is completely selected.</p>\n<pre class=\"eval\">[propget] HRESULT isRowSelected(\n  [in] long row,\n  [out] boolean isSelected \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>row</code></dt> <dd>0 based index of the row for which to determine whether it is selected.</dd> <dt><code>isSelected</code></dt> <dd>Returns <code>true</code> if the specified row is selected completely and <code>false</code> otherwise.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>E_INVALIDARG if bad [in] passed, [out] value is <code>false</code>. S_OK.</p>\n<h3 id=\"isSelected()\" name=\"isSelected()\">isSelected()</h3>\n<p>Returns a boolean value indicating whether the specified cell is selected.</p>\n<pre class=\"eval\">[propget] HRESULT isSelected(\n  [in] long row,\n  [in] long column,\n  [out] boolean isSelected \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>row</code></dt> <dd>0 based index of the row for the cell to determine whether it is selected.</dd> <dt><code>column</code></dt> <dd>0 based index of the column for the cell to determine whether it is selected.</dd> <dt><code>isSelected</code></dt> <dd>Returns <code>true</code> if the specified cell is selected and <code>false</code> otherwise.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>E_INVALIDARG if bad [in] passed, [out] value is <code>false</code>. S_OK.</p>\n<h3 id=\"modelChange()\" name=\"modelChange()\">modelChange()</h3>\n<p>Returns the type and extents describing how a table changed. Provided for use by the IA2_EVENT_TABLE_MODEL_CHANGED event handler. This data is only guaranteed to be valid while the thread notifying the event continues. Once the handler has returned, the validity of the data depends on how the server manages the life cycle of its objects. Also, note that the server may have different life cycle management strategies for controls depending on whether or not a control manages its children. Lists, trees, and tables can have a large number of children and thus it's possible that the child objects for those controls would only be created as needed. Servers should document their life cycle strategy as this will be of interest to assistive technology or script engines accessing data out of process or from other threads. Servers only need to save the most recent row and column values associated with the change and a scope of the entire application is adequate.</p>\n<pre class=\"eval\">[propget] HRESULT modelChange(\n  [out] IA2TableModelChange modelChange \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>modelChange</code></dt> <dd>A struct of (type(insert, delete, update), firstRow, lastRow, firstColumn, lastColumn).</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_FALSE if there is nothing to return, [out] value is <code>null</code>. S_OK.</p>\n<h3 id=\"nColumns()\" name=\"nColumns()\">nColumns()</h3>\n<p>Returns the total number of columns in table.</p>\n<pre class=\"eval\">[propget] HRESULT nColumns(\n  [out] long columnCount \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>columnCount</code></dt> <dd>Number of columns in table (including columns outside the current viewport)</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_OK.</p>\n<h3 id=\"nRows()\" name=\"nRows()\">nRows()</h3>\n<p>Returns the total number of rows in table.</p>\n<pre class=\"eval\">[propget] HRESULT nRows(\n  [out] long rowCount \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>rowCount</code></dt> <dd>Number of rows in table (including rows outside the current viewport)</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_OK.</p>\n<h3 id=\"nSelectedChildren()\" name=\"nSelectedChildren()\">nSelectedChildren()</h3>\n<p>Returns the total number of selected cells.</p>\n<pre class=\"eval\">[propget] HRESULT nSelectedChildren(\n  [out] long cellCount \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>cellCount</code></dt> <dd>Number of cells currently selected.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_OK.</p>\n<h3 id=\"nSelectedColumns()\" name=\"nSelectedColumns()\">nSelectedColumns()</h3>\n<p>Returns the total number of selected columns.</p>\n<pre class=\"eval\">[propget] HRESULT nSelectedColumns(\n  [out] long columnCount \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>columnCount</code></dt> <dd>Number of columns currently selected.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_OK.</p>\n<h3 id=\"nSelectedRows()\" name=\"nSelectedRows()\">nSelectedRows()</h3>\n<p>Returns the total number of selected rows.</p>\n<pre class=\"eval\">[propget] HRESULT nSelectedRows(\n  [out] long rowCount \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>rowCount</code></dt> <dd>Number of rows currently selected.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_OK.</p>\n<h3 id=\"rowColumnExtentsAtIndex()\" name=\"rowColumnExtentsAtIndex()\">rowColumnExtentsAtIndex()</h3>\n<p>Given a cell index, gets the row and column indexes and extents of a cell and whether or not it is selected. This is a convenience function. It is not mandatory to implement it.</p>\n<pre class=\"eval\">[propget] HRESULT rowColumnExtentsAtIndex(\n  [in] long index,\n  [out] long row,\n  [out] long column,\n  [out] long rowExtents,\n  [out] long columnExtents,\n  [out] boolean isSelected \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>index</code></dt> <dd>0 based index of this cell in the table.</dd> <dt><code>row</code></dt> <dd>0 based row index.</dd> <dt><code>column</code></dt> <dd>0 based column index.</dd> <dt><code>rowExtents</code></dt> <dd>Number of cells spanned by this cell in this row.</dd> <dt><code>columnExtents</code></dt> <dd>Number of cells spanned by this cell in this column.</dd> <dt><code>isSelected</code></dt> <dd>Indicates if the specified cell is selected.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>E_INVALIDARG if bad [in] passed, [out] values are 0s and <code>false</code> respectively. S_OK.</p>\n<h3 id=\"rowDescription()\" name=\"rowDescription()\">rowDescription()</h3>\n<p>Returns the description text of the specified row in the table.</p>\n<pre class=\"eval\">[propget] HRESULT rowDescription(\n  [in] long row,\n  [out] BSTR description \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>row</code></dt> <dd>The 0 based index of the row for which to retrieve the description.</dd> <dt><code>description</code></dt> <dd>Returns the description text of the specified row in the table if such a description exists. Otherwise a <code>null</code> pointer is returned.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>E_INVALIDARG if bad [in] passed, [out] value is <code>null</code>. S_FALSE if there is nothing to return, [out] value is <code>null</code>. S_OK.</p>\n<h3 id=\"rowExtentAt()\" name=\"rowExtentAt()\">rowExtentAt()</h3>\n<p>Returns the number of rows occupied by the accessible object at the specified row and column in the table. The result is greater than 1 if the specified cell spans multiple rows.</p>\n<pre class=\"eval\">[propget] HRESULT rowExtentAt(\n  [in] long row,\n  [in] long column,\n  [out] long nRowsSpanned \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>row</code></dt> <dd>0 based row index of the accessible for which to return the row extent.</dd> <dt><code>column</code></dt> <dd>0 based column index of the accessible for which to return the row extent.</dd> <dt><code>nRowsSpanned</code></dt> <dd>Returns the row extent of the specified cell.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>E_INVALIDARG if bad [in] passed, [out] value is 0. S_OK.</p>\n<h3 id=\"rowHeader()\" name=\"rowHeader()\">rowHeader()</h3>\n<p>Returns the row headers as an <code>IAccessibleTable</code> object. Content and size of the returned table are implementation dependent.</p>\n<pre class=\"eval\">[propget] HRESULT rowHeader(\n  [out] IAccessibleTable accessibleTable,\n  [out] long startingColumnIndex \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>accessibleTable</code></dt> <dd>The row header.</dd> <dt><code>startingColumnIndex</code></dt> <dd>The 0 based column index where the header starts, usually 0.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_FALSE if there is no header, [out] values are <code>null</code> and 0 respectively. S_OK.</p>\n<h3 id=\"rowIndex()\" name=\"rowIndex()\">rowIndex()</h3>\n<p>Translates the given cell index into a row index.</p>\n<pre class=\"eval\">[propget] HRESULT rowIndex(\n  [in] long cellIndex,\n  [out] long rowIndex \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>cellIndex</code></dt> <dd>0 based index of the cell in the parent or closest ancestor table. Typically this is the value returned from <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/IAccessible2#indexInParent()\">IAccessible2.indexInParent()</a></code>, but in the case where the table cells are not direct children of the table this is the cell index specified by the \"table-cell-index\" object attribute obtained from parsing the attributes string returned by calling <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/IAccessible2#attributes()\">IAccessible2.attributes()</a></code> on the cell object.</dd> <dt><code>rowIndex</code></dt> <dd>0 based row index.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>E_INVALIDARG if bad [in] passed, [out] value is 0. S_OK.</p>\n<h3 id=\"selectColumn()\" name=\"selectColumn()\">selectColumn()</h3>\n<p>Selects a column and unselects all previously selected columns.</p>\n<pre class=\"eval\">HRESULT selectColumn(\n  [in] long column \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>column</code></dt> <dd>0 based index of the column to be selected.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>E_INVALIDARG if bad [in] passed. S_OK.</p>\n<h3 id=\"selectedChildren()\" name=\"selectedChildren()\">selectedChildren()</h3>\n<p>Returns a list of cell indexes currently selected (0 based).</p>\n<pre class=\"eval\">[propget] HRESULT selectedChildren(\n  [in] long maxChildren,\n  [out, size_is(,maxChildren), length_is(, nChildren)] long children,\n  [out] long nChildren \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>maxChildren</code></dt> <dd>This parameter is ignored. Refer to @ref _arrayConsideration \"Special Consideration when using Arrays\" for more details.</dd> <dt><code>children</code></dt> <dd>An array of cell indexes of selected cells (each index is 0 based), allocated by the server. Free it with CoTaskMemFree.</dd> <dt><code>nChildren</code></dt> <dd>The number of cell indexes returned; the size of the returned array.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_FALSE if there are none, [out] values are <code>null</code> and 0 respectively. S_OK.</p>\n<h3 id=\"selectedColumns()\" name=\"selectedColumns()\">selectedColumns()</h3>\n<p>Returns a list of column indexes currently selected (0 based).</p>\n<pre class=\"eval\">[propget] HRESULT selectedColumns(\n  [in] long maxColumns,\n  [out, size_is(,maxColumns), length_is(, nColumns)] long columns,\n  [out] long nColumns \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>maxColumns</code></dt> <dd>This parameter is ignored. Refer to @ref _arrayConsideration \"Special Consideration when using Arrays\" for more details.</dd> <dt><code>columns</code></dt> <dd>An array of column indexes of selected columns (each index is 0 based), allocated by the server. Free it with CoTaskMemFree.</dd> <dt><code>nColumns</code></dt> <dd>The number of column indexes returned; the size of the returned array.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_FALSE if there are none, [out] values are <code>null</code> and 0 respectively. S_OK.</p>\n<h3 id=\"selectedRows()\" name=\"selectedRows()\">selectedRows()</h3>\n<p>Returns a list of row indexes currently selected (0 based).</p>\n<pre class=\"eval\">[propget] HRESULT selectedRows(\n  [in] long maxRows,\n  [out, size_is(,maxRows), length_is(, nRows)] long rows,\n  [out] long nRows \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>maxRows</code></dt> <dd>This parameter is ignored. Refer to @ref _arrayConsideration \"Special Consideration when using Arrays\" for more details.</dd> <dt><code>rows</code></dt> <dd>An array of row indexes of selected rows (each index is 0 based), allocated by the server. Free it with CoTaskMemFree.</dd> <dt><code>nRows</code></dt> <dd>The number of row indexes returned; the size of the returned array.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_FALSE if there are none, [out] values are <code>null</code> and 0 respectively. S_OK.</p>\n<h3 id=\"selectRow()\" name=\"selectRow()\">selectRow()</h3>\n<p>Selects a row and unselects all previously selected rows.</p>\n<pre class=\"eval\">HRESULT selectRow(\n  [in] long row \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>row</code></dt> <dd>0 based index of the row to be selected.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>E_INVALIDARG if bad [in] passed. S_OK.</p>\n<h3 id=\"summary()\" name=\"summary()\">summary()</h3>\n<p>Returns the <code>summary</code> description of the table. The returned object could be an IAccessible or an IAccessible2.</p>\n<pre class=\"eval\">[propget] HRESULT summary(\n  [out] IUnknown accessible \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>accessible</code></dt> <dd>Returns a reference to an implementation dependent accessible object representing the table's <code>summary</code> or a <code>null</code> pointer if the table does not support a <code>summary</code>.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_FALSE if there is nothing to return, [out] value is <code>null</code>. S_OK.</p>\n<h3 id=\"unselectColumn()\" name=\"unselectColumn()\">unselectColumn()</h3>\n<p>Unselects one column, leaving other selected columns selected (if any).</p>\n<pre class=\"eval\">HRESULT unselectColumn(\n  [in] long column \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>column</code></dt> <dd>0 based index of the column to be unselected.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>E_INVALIDARG if bad [in] passed. S_OK.</p>\n<h3 id=\"unselectRow()\" name=\"unselectRow()\">unselectRow()</h3>\n<p>Unselects one row, leaving other selected rows selected (if any).</p>\n<pre class=\"eval\">HRESULT unselectRow(\n  [in] long row \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>row</code></dt> <dd>0 based index of the row to be unselected.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>E_INVALIDARG if bad [in] passed. S_OK.</p>\n<h2 id=\"See_also\" name=\"See_also\">See also</h2>\n<ul> <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessible\" title=\"\">IAccessible</a></code></li> <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessible2\" title=\"\">IAccessible2</a></code></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>",
    "title": "IAccessibleTable"
}