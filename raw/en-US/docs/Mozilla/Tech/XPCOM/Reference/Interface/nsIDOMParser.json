{
    "content": "<div class=\"note\"><strong>Note:</strong> If you're a web developer, please refer to the <a href=\"/en/DOM/DOMParser\" title=\"en/DOM/DOMParser\">DOMParser</a> documentation instead.</div>\n<h2 id=\"Creating_a_DOMParser\">Creating a DOMParser</h2>\n<p>To create a <code>DOMParser</code> object from a web page or a chrome script running in a window, simply use <code>new DOMParser()</code>. When you create a <code>DOMParser</code> from a privileged script, you can pass parameters to the constructor, more on that below.</p>\n<p>To create a <code>DOMParser</code> when the constructor is not available (e.g., from a JS XPCOM component, a JS module, or an xpcshell test), use:</p>\n<pre class=\"eval deki-transform\">var parser = Components.classes[\"@mozilla.org/xmlextras/domparser;1\"]\n             .createInstance(Components.interfaces.nsIDOMParser);\n// optionally, call parser.init(principal, documentURI, baseURI);\n</pre>\n<h2 id=\"Principals_document_and_base_URI\">Principals, document and base URI</h2>\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> This section covers changes introduced to <code>DOMParser</code> in Gecko 1.9.</div><p></p>\n<p>(This section is only relevant to Firefox extensions--not to Web content.)</p>\n<p>To create a document, the parser needs to specify a principal (see <a href=\"/en/Security_check_basics\" title=\"en/Security check basics\">Security check basics</a>), a base URI (see <a href=\"/en/DOM/document.baseURIObject\" title=\"en/DOM/document.baseURIObject\">document.baseURIObject</a>), and a <a href=\"/en/DOM/document.documentURI\" title=\"en/DOM/document.documentURI\">documentURI</a>.</p>\n<p>These values are automatically determined as defined below, but if you work with <code>DOMParser</code> from privileged code, you can override the defaults by providing arguments to the DOMParser constructor or calling <code>parser.init()</code>. Usually you don't need to do that. If you come across a situation when these matter, feel free to ask questions in <a class=\"external\" href=\"http://groups.google.com/group/mozilla.dev.tech.dom/topics\">mozilla.dev.tech.dom</a> and update this documentation to mention these cases.</p>\n<ul> <li>When a <code>DOMParser</code> is instantiated by calling <code>new DOMParser()</code>, it inherits the calling code's principal (except that for chrome callers the principal is set to the null principal) and the <code>documentURI</code> and <code>baseURI</code> of the window the constructor came from.</li> <li>If the caller has UniversalXPConnect privileges, it can pass parameters to <code>new DOMParser()</code>. If fewer than three parameters are passed, the remaining parameters will default to <code>null</code>. <ul> <li>The first parameter is the principal to use; this overrides the default principal normally inherited.</li> <li>The second parameter is the <code>documentURI</code> to use.</li> <li>The third parameter is the <code>baseURI</code> to use.</li> </ul> </li> <li>If you instantiate a <code>DOMParser</code> by calling <code>createInstance()</code>, and you don't call the <code>DOMParser</code>'s <code>init()</code> method, attempting to initiate a parsing operation will automatically call <code>init()</code> on the <code>DOMParser</code> with a null principal and <code>null</code> pointers for <code>documentURI</code> and <code>baseURI</code>.</li>\n</ul>\n<p>Cases where these values matter:</p>\n<ul> <li>If you don't specify the document URI by calling init() after creating the parser via <code>createInstance()</code> the created documents will use a moz-nullprincipal:{&lt;guid&gt;} URI, which will show in the Error Console in parsing errors, in particular.</li> <li>Supposedly, if you want to create objects that some particular set of unprivileged code will be able to access (see discussion in <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=565480\" title='XML parsing errors are reported with URL=moz-nullprincipal:{...} when using Components.classes [\"@mozilla.org/xmlextras/domparser;1\"].createInstance (Components.interfaces.nsIDOMParser), correct URL with the DOMParser constructor'>bug 565480</a>).</li>\n</ul>\n<h2 id=\"Parsing_a_string\">Parsing a string</h2>\n<p>Once you've created a <code>DOMParser</code> object, you can use its <code>parseFromString</code> method to parse XML or HTML as described in the <a href=\"/en/DOM/DOMParser\" title=\"en/DOM/DOMParser\">Web platform documentation</a>.</p>\n<h2 id=\"Examples\">Examples</h2>\n<p>Within the context of a window:</p>\n<pre class=\"eval deki-transform\">var parser = new DOMParser();\nvar doc = parser.parseFromString(aStr, \"application/xml\");\n</pre>\n<p>Outside of a window (e.g., a JS XPCOM component, a JS module, or an xpcshell test):</p>\n<pre class=\"eval deki-transform\">var parser = Components.classes[\"@mozilla.org/xmlextras/domparser;1\"]\n             .createInstance(Components.interfaces.nsIDOMParser);\nvar doc = parser.parseFromString(aStr, \"application/xml\");\n</pre>\n<p>Using <code>Components.Constructor()</code>:</p>\n<pre class=\"eval deki-transform\">const DOMParser = new Components.Constructor(\"@mozilla.org/xmlextras/domparser;1\", \"nsIDOMParser\");\nvar parser = new DOMParser();\nparser.init(principal, documentURI, baseURI);\nvar doc = parser.parseFromString(aStr, \"application/xml\");\n</pre>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>",
    "title": "nsIDOMParser"
}