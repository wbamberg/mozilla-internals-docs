{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/xpfe/appshell/nsIXULWindow.idl\" rel=\"custom\">xpfe/appshell/nsIXULWindow.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\n<i>Please add a summary to this article.</i>\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)</span></div>\n</div><p></p>\n\n<p>An <code>nsIXULWindow</code> is created as part of the creation of a top-level chrome window. When the window is destroyed, it will fire a \"xul-window-destroyed\" notification through the global observer service. This signals the application in case it needs to quit.</p>\n\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code>void <a href=\"#addChildWindow()\">addChildWindow</a>(in nsIXULWindow aChild);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#applyChromeFlags()\">applyChromeFlags</a>();</code> <span class=\"inlineIndicator noscript noscriptInline\" title=\"This method may only be called from C++; don't use it from JavaScript.\">Native code only!</span> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#assumeChromeFlagsAreFrozen()\">assumeChromeFlagsAreFrozen</a>();</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#center()\">center</a>(in nsIXULWindow aRelative, in boolean aScreen, in boolean aAlert);</code></td>\n  </tr>\n  <tr>\n   <td><code>nsIXULWindow <a href=\"#createNewWindow()\">createNewWindow</a>(in PRInt32 aChromeFlags, in nsIAppShell aAppShell);</code></td>\n  </tr>\n  <tr>\n   <td><code>nsIDocShellTreeItem <a href=\"#getContentShellById()\">getContentShellById</a>(in wstring ID);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#removeChildWindow()\">removeChildWindow</a>(in nsIXULWindow aChild);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#showModal()\">showModal</a>();</code></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Attributes\" name=\"Attributes\">Attributes</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Attribute</td>\n   <td class=\"header\">Type</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>chromeFlags</code></td>\n   <td><code><a href=\"/en/PRUint32\" title=\"en/PRUint32\">PRUint32</a></code></td>\n   <td> <code>chromeFlags</code> are from <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIWebBrowserChrome\" title=\"\">nsIWebBrowserChrome</a></code>.</td>\n  </tr>\n  <tr>\n   <td><code>contextFlags</code></td>\n   <td><code><a href=\"/en/PRUint32\" title=\"en/PRUint32\">PRUint32</a></code></td>\n   <td><code>contextFlags</code> are from <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIWindowCreator2\" title=\"\">nsIWindowCreator2</a></code>.</td>\n  </tr>\n  <tr>\n   <td><code>docShell</code></td>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDocShell\" title=\"\">nsIDocShell</a></code></code></td>\n   <td>The <code>docshell</code> owning the XUL for this window. <strong>Read only.</strong></td>\n  </tr>\n  <tr>\n   <td><code>intrinsicallySized</code></td>\n   <td><code><a href=\"/en/boolean\" title=\"en/boolean\">boolean</a></code></td>\n   <td>Indicates if this window is instrinsically sized.</td>\n  </tr>\n  <tr>\n   <td><code>primaryContentShell</code></td>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDocShellTreeItem\" title=\"\">nsIDocShellTreeItem</a></code></code></td>\n   <td>\n    <p>The primary content shell.</p>\n    <div class=\"blockIndicator note\"><strong>Note:</strong> That this is a <code>docshell</code> tree item and therefore can not be assured of what object it is. It could be an editor, a <code>docshell</code>, or a browser object. Or down the road any other object that supports being a DocShellTreeItem Query accordingly to determine the capabilities.</div> <strong>Read only.</strong></td>\n  </tr>\n  <tr>\n   <td><code>XULBrowserWindow</code></td>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIXULBrowserWindow\" title=\"\">nsIXULBrowserWindow</a></code></code></td>\n   <td> Provides access to the <code>XULBrowserWindow</code> object offering a way for the browser to update the user interface of the enclosing XUL window.</td>\n  </tr>\n  <tr>\n   <td><code>zLevel</code></td>\n   <td><code><a href=\"/en/unsigned_long\" title=\"en/unsigned long\">unsigned long</a></code></td>\n   <td>One of the Z level constants below. On some platforms, windows with a higher zLevel will be kept above windows with a lower zLevel.</td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Constants\" name=\"Constants\">Constants</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Constant</td>\n   <td class=\"header\">Value</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>lowestZ</code></td>\n   <td><code>0</code></td>\n   <td> </td>\n  </tr>\n  <tr>\n   <td><code>loweredZ</code></td>\n   <td><code>4</code></td>\n   <td>The Z level of an independent window opened with the \"alwaysLowered\" chrome flag.</td>\n  </tr>\n  <tr>\n   <td><code>normalZ</code></td>\n   <td><code>5</code></td>\n   <td>The default Z level of an independent window.</td>\n  </tr>\n  <tr>\n   <td><code>raisedZ</code></td>\n   <td><code>6</code></td>\n   <td>The Z level of an independent window opened with the \"alwaysRaised\" chrome flag.</td>\n  </tr>\n  <tr>\n   <td><code>highestZ</code></td>\n   <td><code>9</code></td>\n   <td> </td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n\n<h3 id=\"addChildWindow()\" name=\"addChildWindow()\">addChildWindow()</h3>\n\n<p>Tell this window that it has picked up a child XUL window.Note that XUL windows do not currently track child XUL windows.</p>\n\n<pre class=\"eval\">void addChildWindow(\n  in nsIXULWindow aChild\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aChild</code></dt>\n <dd>The child window being added.</dd>\n</dl>\n\n<p></p><div><span class=\"indicatorInHeadline noscript noscriptMethod\" title=\"This method may only be called from C++; don't use it from JavaScript.\">Native code only!</span><h3 id=\"applyChromeFlags\">applyChromeFlags</h3></div><p></p>\n\n<p></p>\n\n<p>Back-door method to force application of chrome flags at a particular time. Do NOT call this unless you know what you are doing! In particular, calling this when this XUL window does not yet have a document in its <code>docshell</code> could cause problems.</p>\n\n<pre class=\"eval\">void applyChromeFlags();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<p></p><h3 id=\"assumeChromeFlagsAreFrozen()\">assumeChromeFlagsAreFrozen()</h3><p></p>\n\n<p>Begin assuming <code>chromeFlags</code> do not change hereafter, and assert if they do change. The state change is one-way and idempotent.</p>\n\n<pre class=\"eval\">void assumeChromeFlagsAreFrozen();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h3 id=\"center()\" name=\"center()\">center()</h3>\n\n<p>Move the window to a centered position.</p>\n\n<pre class=\"eval\">void center(\n  in nsIXULWindow aRelative,\n  in boolean aScreen,\n  in boolean aAlert\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aRelative</code></dt>\n <dd>If not <code>null</code>, the window relative to which the window is moved. See <code>aScreen</code> parameter for details.</dd>\n <dt><code>aScreen</code></dt>\n <dd><code>true</code> to <code>center</code> the window relative to the screen containing <code>aRelative</code> if <code>aRelative</code> is not <code>null</code>. If aRelative is <code>null</code> then relative to the screen of the opener window if it was initialized by passing it to <code>nsWebShellWindow::Initialize</code>. Failing that relative to the main screen. <code>false</code> to <code>center</code> it relative to <code>aRelative</code> itself (<code>aRelative</code> must be set in this case.)</dd>\n <dt><code>aAlert</code></dt>\n <dd><code>true</code> to move the window to an alert position, generally centered horizontally and 1/3 down from the top.</dd>\n</dl>\n\n<h3 id=\"createNewWindow()\" name=\"createNewWindow()\">createNewWindow()</h3>\n\n<p>Create a new window.</p>\n\n<pre class=\"eval\">nsIXULWindow createNewWindow(\n  in PRInt32 aChromeFlags,\n  in nsIAppShell aAppShell\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aChromeFlags</code></dt>\n <dd>See <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIWebBrowserChrome\" title=\"\">nsIWebBrowserChrome</a></code>.</dd>\n <dt><code>aAppShell</code></dt>\n <dd>The app shell passed to <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAppShellService\" title=\"\">nsIAppShellService</a></code>'s <code>CreateTopLevelWindow</code> method.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>The newly minted window. In the case of a content window, the function creates a browser window and waits for it to load. You can then load a document into the window's primary content shell.</p>\n\n<h3 id=\"getContentShellById()\" name=\"getContentShellById()\">getContentShellById()</h3>\n\n<p>The content shell specified by the supplied id.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> That this is a <code>docshell</code> tree item and therefore can not be assured of what object it is. It could be an editor, a <code>docshell</code>, or a browser object. Or down the road any other object that supports being a DocShellTreeItem Query accordingly to determine the capabilities.</div><p></p>\n\n<pre class=\"eval\">nsIDocShellTreeItem getContentShellById(\n  in wstring ID\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>ID</code></dt>\n <dd>The ID of the content shell, which is the same as the \"type\" attribute on the containing frame element.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>The tree item corresponding to the given ID, if any.</p>\n\n<h3 id=\"removeChildWindow()\" name=\"removeChildWindow()\">removeChildWindow()</h3>\n\n<p>Tell this window that it has lost a child XUL window. Note that XUL windows do not currently track child XUL windows.</p>\n\n<pre class=\"eval\">void removeChildWindow(\n  in nsIXULWindow aChild\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aChild</code></dt>\n <dd>The child window being removed.</dd>\n</dl>\n\n<h3 id=\"showModal()\" name=\"showModal()\">showModal()</h3>\n\n<p>Shows the window as a modal window. That is, ensures that it is visible and runs a local event loop, exiting only once the window has been closed.</p>\n\n<pre class=\"eval\">void showModal();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/myrdd\">myrdd</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/berkerpeksag\">berkerpeksag</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Neil\">Neil</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>",
    "title": "nsIXULWindow"
}