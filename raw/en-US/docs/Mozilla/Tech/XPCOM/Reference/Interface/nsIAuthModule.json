{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/netwerk/base/public/nsIAuthModule.idl\" rel=\"custom\">netwerk/base/public/nsIAuthModule.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThis interface is intended to be used as server and client authentication service.\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 1.8 (Firefox 1.5 / Thunderbird 1.5 / SeaMonkey 1.0)</span></div>\n</div><p></p>\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n<table class=\"standard-table\"> <tbody> <tr> <td><code>void <a href=\"#getNextToken()\">getNextToken</a>([const] in voidPtr aInToken, in unsigned long aInTokenLength, out voidPtr aOutToken, out unsigned long aOutTokenLength);</code></td> </tr> <tr> <td><code>void <a href=\"#init()\">init</a>(in string aServiceName, in unsigned long aServiceFlags, in wstring aDomain, in wstring aUsername, in wstring aPassword);</code></td> </tr> <tr> <td><code>void <a href=\"#unwrap()\">unwrap</a>([const] in voidPtr aInToken, in unsigned long aInTokenLength, out voidPtr aOutToken, out unsigned long aOutTokenLength);</code> </td> </tr> <tr> <td><code>void <a href=\"#wrap()\">wrap</a>([const] in voidPtr aInToken, in unsigned long aInTokenLength, in boolean confidential, out voidPtr aOutToken, out unsigned long aOutTokenLength);</code> </td> </tr> </tbody>\n</table>\n<h2 id=\"Constants\" name=\"Constants\">Constants</h2>\n<table class=\"standard-table\"> <tbody> <tr> <td class=\"header\">Constant</td> <td class=\"header\">Value</td> <td class=\"header\">Description</td> </tr> <tr> <td><code>REQ_DEFAULT</code></td> <td><code>0</code></td> <td>Default behavior.</td> </tr> <tr> <td><code>REQ_MUTUAL_AUTH</code></td> <td><code>(1 &lt;&lt; 0)</code></td> <td>Client and server will be authenticated.</td> </tr> <tr> <td><code>REQ_DELEGATE</code></td> <td><code>(1 &lt;&lt; 1)</code></td> <td>The server is allowed to impersonate the client. The <code>REQ_MUTUAL_AUTH</code> flag may also need to be specified in order for this flag to take effect.</td> </tr> </tbody>\n</table>\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n<h3 id=\"getNextToken()\" name=\"getNextToken()\">getNextToken()</h3>\n<p>This method is called to get the next token in a sequence of authentication steps.</p>\n<pre class=\"eval\">void getNextToken(\n  [const] in voidPtr aInToken,\n  in unsigned long aInTokenLength,\n  out voidPtr aOutToken,\n  out unsigned long aOutTokenLength\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aInToken</code></dt> <dd>A buffer containing the input token (For example a challenge from a server). This may be <code>null</code>.</dd> <dt><code>aInTokenLength</code></dt> <dd>The length of the input token.</dd> <dt><code>aOutToken</code></dt> <dd>If <code>getNextToken</code> succeeds, then aOutToken will point to a buffer to be sent in response to the server challenge. The length of this buffer is given by <code>aOutTokenLength</code>. The buffer at <code>aOutToken</code> must be recycled with a call to <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIMemory#free()\">nsIMemory.free()</a></code>.</dd> <dt><code>aOutTokenLength</code></dt> <dd>If <code>getNextToken</code> succeeds, then <code>aOutTokenLength</code> contains the length of the buffer (number of bytes) pointed to by <code>aOutToken</code>.</dd>\n</dl>\n<h3 id=\"init()\" name=\"init()\">init()</h3>\n<p>This method is called to initialize an auth module. The other methods cannot be called unless this method succeeds.</p>\n<pre class=\"eval\">void init(\n  in string aServiceName,\n  in unsigned long aServiceFlags,\n  in wstring aDomain,\n  in wstring aUsername,\n  in wstring aPassword\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aServiceName</code></dt> <dd>The service name, which may be <code>null</code> if not applicable (For example, for NTLM, this parameter should be <code>null</code>).</dd> <dt><code>aServiceFlags</code></dt> <dd>A bitwise-or of the <code>REQ_</code> constants (pass <code>REQ_DEFAULT</code> for default behavior).</dd> <dt><code>aDomain</code></dt> <dd>The authentication domain, which may be <code>null</code> if not applicable.</dd> <dt><code>aUsername</code></dt> <dd>The user's login name.</dd> <dt><code>aPassword</code></dt> <dd>The user's password.</dd>\n</dl>\n<p></p><h3 id=\"unwrap()\">unwrap()</h3><p></p>\n<p>This method is used to unpack, decrypt, and verify the checksums on data returned by a server when security layers are in use.</p>\n<pre class=\"eval\">void unwrap(\n  [const] in voidPtr aInToken,\n  in unsigned long aInTokenLength,\n  out voidPtr aOutToken,\n  out unsigned long aOutTokenLength\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aInToken</code></dt> <dd>A buffer containing the data received from the server.</dd> <dt><code>aInTokenLength</code></dt> <dd>The length of the input token.</dd> <dt><code>aOutToken</code></dt> <dd>A buffer containing the plaintext data from the server.</dd> <dt><code>aOutTokenLength</code></dt> <dd>The length of the output token buffer.</dd>\n</dl>\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n<dl> <dt><code>NS_ERROR_NOT_IMPLEMENTED</code></dt> <dd>If the underlying authentication mechanism does not support security layers.</dd>\n</dl>\n<p></p><h3 id=\"wrap()\">wrap()</h3><p></p>\n<p>Once a security context has been established through calls to <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAuthModule#getNextToken()\">getNextToken()</a></code> it may be used to protect data exchanged between client and server. Calls to this method are used to protect items of data to be sent to the server.</p>\n<pre class=\"eval\">void wrap(\n  [const] in voidPtr aInToken,\n  in unsigned long aInTokenLength,\n  in boolean confidential,\n  out voidPtr aOutToken,\n  out unsigned long aOutTokenLength\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aInToken</code></dt> <dd>A buffer containing the data to be sent to the server.</dd> <dt><code>aInTokenLength</code></dt> <dd>The length of the input token.</dd> <dt><code>confidential</code></dt> <dd>If set to <code>true</code>, it will encrypt the data, otherwise data will just be integrity protected (checksummed).</dd> <dt><code>aOutToken</code></dt> <dd>A buffer containing the resulting data to be sent to the server.</dd> <dt><code>aOutTokenLength</code></dt> <dd>The length of the output token buffer.</dd>\n</dl>\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n<dl> <dt><code>NS_ERROR_NOT_IMPLEMENTED</code></dt> <dd>If the underlying authentication mechanism does not support security layers.</dd>\n</dl>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Arehman4\">Arehman4</a>",
    "title": "nsIAuthModule"
}