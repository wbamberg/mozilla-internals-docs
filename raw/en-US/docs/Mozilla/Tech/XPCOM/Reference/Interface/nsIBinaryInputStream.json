{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/xpcom/io/nsIBinaryInputStream.idl\" rel=\"custom\">xpcom/io/nsIBinaryInputStream.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\"> This interface allows consumption of primitive data types from a \"binary stream\" containing untagged, big-endian binary data, that is as produced by an implementation of <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIBinaryOutputStream\" title=\"\">nsIBinaryOutputStream</a></code>. This might be used, for example, to implement network protocols or to read from architecture-neutral disk files, that is ones that can be read and written by both big-endian and little-endian platforms.</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInputStream\" title=\"\">nsIInputStream</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 1.7 </span></div>\n</div><p></p>\n\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code>PRUint8 <a href=\"#read8()\">read8</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>PRUint16 <a href=\"#read16()\">read16</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>PRUint32 <a href=\"#read32()\">read32</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>PRUint64 <a href=\"#read64()\">read64</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>unsigned long <a href=\"#readArrayBuffer()\">readArrayBuffer</a>(in PRUint32 aLength, in jsval aArrayBuffer);</code></td>\n  </tr>\n  <tr>\n   <td><code>PRBool <a href=\"#readBoolean()\">readBoolean</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#readByteArray()\">readByteArray</a>(in PRUint32 aLength, [array, size_is(aLength), retval] out PRUint8 aBytes);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#readBytes()\">readBytes</a>(in PRUint32 aLength, [size_is(aLength), retval] out string aString);</code></td>\n  </tr>\n  <tr>\n   <td><code>ACString <a href=\"#readCString()\">readCString</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>double <a href=\"#readDouble()\">readDouble</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>float <a href=\"#readFloat()\">readFloat</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>AString <a href=\"#readString()\">readString</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setInputStream()\">setInputStream</a>(in nsIInputStream aInputStream);</code></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n\n<h3 id=\"read8()\" name=\"read8()\">read8()</h3>\n\n<p>Reads from the stream.</p>\n\n<pre class=\"eval\">PRUint8 read8();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>An 8-bit integer read from the stream.</p>\n\n<h3 id=\"read16()\" name=\"read16()\">read16()</h3>\n\n<p>Reads from the stream.</p>\n\n<pre class=\"eval\">PRUint16 read16();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>A 16-bit integer read from the stream.</p>\n\n<h3 id=\"read32()\" name=\"read32()\">read32()</h3>\n\n<p>Reads from the stream.</p>\n\n<pre class=\"eval\">PRUint32 read32();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>A 32-bit integer read from the stream.</p>\n\n<h3 id=\"read64()\" name=\"read64()\">read64()</h3>\n\n<p>Reads from the stream.</p>\n\n<div class=\"warning\"><strong>Warning:</strong> This method is available from JavaScript; however JavaScript does not support 64-bit integers.</div>\n\n<pre class=\"eval\">PRUint64 read64();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>A 64-bit integer read from the stream.</p>\n\n<h3 id=\"readArrayBuffer()\" name=\"readArrayBuffer()\">readArrayBuffer()</h3>\n\n<p>Read opaque bytes from the stream, storing the results in an ArrayBuffer.</p>\n\n<pre class=\"eval\">unsigned long readArrayBuffer(in PRUint32 aLength, in jsval aArrayBuffer);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aLength</code></dt>\n <dd>The number of bytes that should be read.</dd>\n <dt><code>aArrayBuffer</code></dt>\n <dd>The arraybuffer in which to store the results.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>The number of bytes actually read into aArrayBuffer.</p>\n\n<h3 id=\"readBoolean()\" name=\"readBoolean()\">readBoolean()</h3>\n\n<p>Reads an 8-bit value from the stream, treating it as a Boolean value.</p>\n\n<pre class=\"eval\">PRBool readBoolean();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>A boolean value read from the stream.</p>\n\n<h3 id=\"readByteArray()\" name=\"readByteArray()\">readByteArray()</h3>\n\n<p>Reads an opaque byte array from the stream, storing the results as an array of PRUint8s.</p>\n\n<pre class=\"eval\">void readByteArray(\n  in PRUint32 aLength,\n  [array, size_is(aLength), retval] out PRUint8 aBytes\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aLength</code></dt>\n <dd>The number of bytes that must be read.</dd>\n <dt><code>aBytes</code></dt>\n <dd>An array containing the bytes read from the stream.</dd>\n</dl>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>NS_ERROR_FAILURE</code></dt>\n <dd>If it can't read aLength bytes.</dd>\n</dl>\n\n<h3 id=\"readBytes()\" name=\"readBytes()\">readBytes()</h3>\n\n<p>Reads an opaque byte array from the stream.</p>\n\n<pre class=\"eval\">void readBytes(\n  in PRUint32 aLength,\n  [size_is(aLength), retval] out string aString\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aLength</code></dt>\n <dd>The number of bytes to read.</dd>\n <dt><code>aString</code></dt>\n <dd>A string containing the bytes read from the stream.</dd>\n</dl>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>NS_ERROR_FAILURE</code></dt>\n <dd>If it can't read aLength bytes.</dd>\n</dl>\n\n<h3 id=\"readCString()\" name=\"readCString()\">readCString()</h3>\n\n<p>Reads an 8-bit pascal style string from the stream. 32-bit length field, followed by length 8-bit chars.</p>\n\n<pre class=\"eval\">ACString readCString();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>The string read from the stream.</p>\n\n<h3 id=\"readDouble()\" name=\"readDouble()\">readDouble()</h3>\n\n<p>Reads from the stream.</p>\n\n<pre class=\"eval\">double readDouble();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>A <code>double</code> read from the stream.</p>\n\n<h3 id=\"readFloat()\" name=\"readFloat()\">readFloat()</h3>\n\n<p>Reads from the stream.</p>\n\n<pre class=\"eval\">float readFloat();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>A <code>float</code> read from the stream.</p>\n\n<h3 id=\"readString()\" name=\"readString()\">readString()</h3>\n\n<p>Reads an 16-bit pascal style string from the stream. 32-bit length field, followed by length PRUnichars.</p>\n\n<pre class=\"eval\">AString readString();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>The string read from the stream.</p>\n\n<h3 id=\"setInputStream()\" name=\"setInputStream()\">setInputStream()</h3>\n\n<pre class=\"eval\">void setInputStream(\n  in nsIInputStream aInputStream\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aInputStream</code></dt>\n <dd>The stream from which to read.</dd>\n</dl>\n\n<h2 id=\"See_also\" name=\"See_also\">See also</h2>\n\n<ul>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIBinaryOutputStream\" title=\"\">nsIBinaryOutputStream</a></code></li>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInputStream\" title=\"\">nsIInputStream</a></code></li>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIOutputStream\" title=\"\">nsIOutputStream</a></code></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Loirooriol\">Loirooriol</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/gew\">gew</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/DaveG\">DaveG</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Kglee\">Kglee</a>",
    "title": "nsIBinaryInputStream"
}