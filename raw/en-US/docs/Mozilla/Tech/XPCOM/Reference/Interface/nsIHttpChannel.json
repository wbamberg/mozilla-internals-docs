{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/netwerk/protocol/http/nsIHttpChannel.idl\" rel=\"custom\">netwerk/protocol/http/nsIHttpChannel.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThis interface allows for the modification of HTTP request parameters and the inspection of the resulting HTTP response status and headers when they become available.\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIChannel\" title=\"\">nsIChannel</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 1.3 </span></div>\n</div><p></p>\n\n<p>To create an HTTP channel, use <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIIOService\" title=\"\">nsIIOService</a></code> with a HTTP URI, for example:</p>\n\n<pre class=\"brush:js\">var ios = Components.classes[\"@mozilla.org/network/io-service;1\"]\n                    .getService(Components.interfaces.nsIIOService);\nvar ch = ios.newChannel(\"https://www.example.com/\", null, null);\n</pre>\n\n<h2 id=\"Method_overview\">Method overview</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code>void <a href=\"#getOriginalResponseHeader()\">getOriginalResponseHeader</a>(in ACString aHeader, in nsIHttpHeaderVisitor aVisitor);</code> </td>\n  </tr>\n  <tr>\n   <td><code>ACString <a href=\"#getRequestHeader()\">getRequestHeader</a>(in ACString aHeader);</code></td>\n  </tr>\n  <tr>\n   <td><code>ACString <a href=\"#getResponseHeader()\">getResponseHeader</a>(in ACString header);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#isNoCacheResponse()\">isNoCacheResponse</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#isNoStoreResponse()\">isNoStoreResponse</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#redirectTo()\">redirectTo</a>(in nsIURI aNewURI);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setEmptyRequestHeader()\">setEmptyRequestHeader</a>(in ACString aHeader);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setReferrerWithPolicy()\">setReferrerWithPolicy</a>(in nsIURI referrer, in unsigned long referrerPolicy);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setRequestHeader()\">setRequestHeader</a>(in ACString aHeader, in ACString aValue, in boolean aMerge);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setResponseHeader()\">setResponseHeader</a>(in ACString header, in ACString value, in boolean merge);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#visitOriginalResponseHeaders()\">visitOriginalResponseHeaders</a>(in nsIHttpHeaderVisitor aVisitor);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#visitRequestHeaders()\">visitRequestHeaders</a>(in nsIHttpHeaderVisitor aVisitor);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#visitResponseHeaders()\">visitResponseHeaders</a>(in nsIHttpHeaderVisitor aVisitor);</code></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Constants\">Constants</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Constant</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>REFERRER_POLICY_NO_REFERRER_WHEN_DOWNGRADE</code></td>\n   <td>Default; indicates not to pass on the referrer when downgrading from https to http</td>\n  </tr>\n  <tr>\n   <td><code>REFERRER_POLICY_NO_REFERRER</code></td>\n   <td>Indicates no referrer will be sent</td>\n  </tr>\n  <tr>\n   <td><code>REFERRER_POLICY_ORIGIN</code></td>\n   <td>Only send the origin of the referring URI</td>\n  </tr>\n  <tr>\n   <td><code>REFERRER_POLICY_ORIGIN_WHEN_XORIGIN</code></td>\n   <td>Same as the default; Only send the origin of the referring URI for cross-origin requests</td>\n  </tr>\n  <tr>\n   <td><code>REFERRER_POLICY_UNSAFE_URL</code></td>\n   <td>Always send the referrer, even when downgrading from https to http</td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Attributes\">Attributes</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Attribute</td>\n   <td class=\"header\">Type</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>allowPipelining</code></td>\n   <td><code>boolean</code></td>\n   <td>\n    <p>This attribute is a hint to the channel to indicate whether or not the underlying HTTP transaction should be allowed to be pipelined with other transactions. This should be set to <code>false</code>, for example, if the application knows that the corresponding document is likely to be very large.</p>\n\n    <p>This attribute is <code>true</code> by default, though other factors may prevent pipelining.</p>\n    This attribute may only be set before the channel is opened.\n\n    <h4 id=\"Exceptions_thrown\">Exceptions thrown</h4>\n\n    <dl>\n     <dt><code>NS_ERROR_FAILURE</code></dt>\n     <dd>If set after the channel has been opened.</dd>\n    </dl>\n   </td>\n  </tr>\n  <tr>\n   <td><code>redirectionLimit</code></td>\n   <td><code>unsigned long</code></td>\n   <td>\n    <p>This attribute specifies the number of redirects this channel is allowed to make. If zero, the channel will fail to redirect and will generate a <code>NS_ERROR_REDIRECT_LOOP</code> failure status.</p>\n\n    <div class=\"note\">\n    <p><strong>Note:</strong> An HTTP redirect results in a new channel being created. If the new channel supports <code>nsIHttpChannel</code>, then it will be assigned a value to its <code>redirectionLimit</code> attribute one less than the value of the redirected channel's <code>redirectionLimit</code> attribute. The initial value for this attribute may be a configurable preference (depending on the implementation).</p>\n    </div>\n   </td>\n  </tr>\n  <tr>\n   <td><code>referrer</code></td>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code></code></td>\n   <td>\n    <p>Get or set the URI of the HTTP <code>Referer:</code> header. This is the address (URI) of the resource from which this channel's URI was obtained (see RFC2616 section 14.36).</p>\n\n    <p>This attribute may only be set before the channel is opened.</p>\n\n    <div class=\"note\">\n    <p><strong>Note:</strong> The channel may silently refuse to set the Referer: header if the URI does not pass certain security checks (e.g., a \"https://\" URL will never be sent as the <code>referrer</code> for a plaintext HTTP request). The implementation is not required to throw an exception when the <code>referrer</code> URI is rejected.</p>\n    </div>\n\n    <h4 id=\"Exceptions_thrown_2\">Exceptions thrown</h4>\n\n    <dl>\n     <dt><code>NS_ERROR_IN_PROGRESS</code></dt>\n     <dd>If set after the channel has been opened.</dd>\n     <dt><code>NS_ERROR_FAILURE</code> </dt>\n     <dd>If used for setting referrer during <a href=\"#visitRequestHeaders()\"><code>visitRequestHeaders()</code></a>. Getting the value will not throw.</dd>\n    </dl>\n   </td>\n  </tr>\n  <tr>\n   <td><code>requestMethod</code></td>\n   <td><code>ACString</code></td>\n   <td>\n    <p>Set or get the HTTP request method (default is \"GET\"). Setter is case insensitive; getter returns an uppercase string.</p>\n\n    <p>This attribute may only be set before the channel is opened.</p>\n\n    <div class=\"note\">\n    <p><strong>Note:</strong> The data for a \"POST\" or \"PUT\" request can be configured via <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIUploadChannel\" title=\"\">nsIUploadChannel</a></code>. However, after setting the upload data, it may be necessary to set the request method explicitly. The documentation for <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIUploadChannel\" title=\"\">nsIUploadChannel</a></code> has further details.</p>\n    </div>\n\n    <h4 id=\"Exceptions_thrown_3\">Exceptions thrown</h4>\n\n    <dl>\n     <dt><code>NS_ERROR_IN_PROGRESS</code></dt>\n     <dd>If set after the channel has been opened.</dd>\n    </dl>\n   </td>\n  </tr>\n  <tr>\n   <td><code>requestSucceeded</code></td>\n   <td><code>boolean</code></td>\n   <td>\n    <p>Returns <code>true</code> if the HTTP response code indicates success. The value of <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIRequest#status()\">nsIRequest.status()</a></code> will be NS_OK even when processing a <code><a href=\"/en-US/docs/Web/HTTP/Response_codes#404\">404 File Not Found</a></code> response because such a response may include a message body that (in some cases) should be shown to the user. Use this attribute to distinguish server error pages from normal pages, instead of comparing the response status manually against the set of valid response codes, if that is required by your application. <strong>Read only.</strong></p>\n\n    <h4 id=\"Exceptions_thrown_4\">Exceptions thrown</h4>\n\n    <dl>\n     <dt><code>NS_ERROR_NOT_AVAILABLE</code></dt>\n     <dd>If called before the response has been received (before <code>onStartRequest()</code>).</dd>\n    </dl>\n   </td>\n  </tr>\n  <tr>\n   <td><code>responseStatus</code></td>\n   <td><code>unsigned long</code></td>\n   <td>Get the HTTP response code (For example 200). <strong>Read only.</strong>\n    <h4 id=\"Exceptions_thrown_5\">Exceptions thrown</h4>\n\n    <dl>\n     <dt><code>NS_ERROR_NOT_AVAILABLE</code></dt>\n     <dd>If called before the response has been received (before <code>onStartRequest()</code>).</dd>\n    </dl>\n   </td>\n  </tr>\n  <tr>\n   <td><code>responseStatusText</code></td>\n   <td><code>ACString</code></td>\n   <td>\n    <p>Get the HTTP response status text (For example \"OK\").</p>\n\n    <div class=\"note\">\n    <p><strong>Note:</strong> This returns the raw (possibly 8-bit) text from the server. There are no assumptions made about the charset of the returned text. You have been warned!</p>\n    </div>\n\n    <p><strong>Read only.</strong></p>\n\n    <h4 id=\"Exceptions_thrown_6\">Exceptions thrown</h4>\n\n    <dl>\n     <dt><code>NS_ERROR_NOT_AVAILABLE</code></dt>\n     <dd>If called before the response has been received (before <code>onStartRequest()</code>).</dd>\n    </dl>\n   </td>\n  </tr>\n  <tr>\n   <td><code>referrerPolicy </code> <span class=\"inlineIndicator readOnly readOnlyInline\" title=\"This value may not be changed.\">Read only </span></td>\n   <td><code>unsigned long</code></td>\n   <td>The referrer policy in use for this channel, indicated by one of the constants listed above</td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Methods\">Methods</h2>\n\n<h3 id=\"sect1\"></h3><h3 id=\"getOriginalResponseHeader()\">getOriginalResponseHeader()</h3>\n\n<p>Get the value of a particular original response header, that is, in the same form as it came from the network. I.e. empty headers will have an empty string as value and multiple headers will not be merged as opposed to <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIHttpChannel#getResponseHeader()\">getResponseHeader()</a></code>.</p>\n\n<pre class=\"syntaxbox\">void getOriginalResponseHeader(\n  in ACString aHeader,\n  in nsIHttpHeaderVisitor aVisitor\n);</pre>\n\n<h4 id=\"Parameters\">Parameters</h4>\n\n<dl>\n <dt><code>aHeader</code></dt>\n <dd>The case-insensitive name of the response header to query (For example \"Set-Cookie\").</dd>\n</dl>\n\n<dl>\n <dt><code>aVisitor</code></dt>\n <dd>An <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIHttpHeaderVisitor\" title=\"\">nsIHttpHeaderVisitor</a></code> instance allowing to visit all equally named response headers.</dd>\n</dl>\n\n<h4 id=\"Exceptions_thrown_7\">Exceptions thrown</h4>\n\n<dl>\n <dt><code>NS_ERROR_NOT_AVAILABLE</code></dt>\n <dd>If called before the response has been received (before <code>onStartRequest()</code>) or if no header with that name is set in the response.</dd>\n</dl>\n\n<h3 id=\"getRequestHeader()\">getRequestHeader()</h3>\n\n<p>Get the value of a particular request header.</p>\n\n<pre class=\"syntaxbox\">ACString getRequestHeader(\n  in ACString aHeader\n);\n</pre>\n\n<h4 id=\"Parameters_2\">Parameters</h4>\n\n<dl>\n <dt><code>aHeader</code></dt>\n <dd>The case-insensitive name of the request header to query (For example \"Cache-Control\").</dd>\n</dl>\n\n<h4 id=\"Return_value\">Return value</h4>\n\n<p>The value of the request header.</p>\n\n<h4 id=\"Exceptions_thrown_8\">Exceptions thrown</h4>\n\n<dl>\n <dt><code>NS_ERROR_NOT_AVAILABLE</code></dt>\n <dd>If the header is not set.</dd>\n</dl>\n\n<h3 id=\"getResponseHeader()\">getResponseHeader()</h3>\n\n<p>Get the value of a particular response header.</p>\n\n<pre class=\"syntaxbox\">ACString getResponseHeader(\n  in ACString header\n);\n</pre>\n\n<h4 id=\"Parameters_3\">Parameters</h4>\n\n<dl>\n <dt><code>header</code></dt>\n <dd>The case-insensitive name of the response header to query (For example \"Set-Cookie\").</dd>\n</dl>\n\n<h4 id=\"Return_value_2\">Return value</h4>\n\n<p>The value of the response header.</p>\n\n<h4 id=\"Exceptions_thrown_9\">Exceptions thrown</h4>\n\n<dl>\n <dt><code>NS_ERROR_NOT_AVAILABLE</code></dt>\n <dd>If called before the response has been received (before <code>onStartRequest()</code>) or if the header is not set in the response.</dd>\n</dl>\n\n<h3 id=\"isNoCacheResponse()\">isNoCacheResponse()</h3>\n\n<p>Returns <code>true</code> if the server sent the equivalent of a \"Cache-control: no-cache\" response header. Equivalent response headers include: \"Pragma: no-cache\", \"Expires: 0\", and \"Expires\" with a date value in the past relative to the value of the \"Date\" header.</p>\n\n<pre class=\"syntaxbox\">boolean isNoCacheResponse();\n</pre>\n\n<h4 id=\"Parameters_4\">Parameters</h4>\n\n<p>None.</p>\n\n<h4 id=\"Return_value_3\">Return value</h4>\n\n<p>Returns <code>true</code> if the server sent the equivalent of a \"Cache-control: no-cache\" response header, otherwise <code>false</code>.</p>\n\n<h4 id=\"Exceptions_thrown_10\">Exceptions thrown</h4>\n\n<dl>\n <dt><code>NS_ERROR_NOT_AVAILABLE</code></dt>\n <dd>If called before the response has been received (before <code>onStartRequest()</code>).</dd>\n</dl>\n\n<h3 id=\"isNoStoreResponse()\">isNoStoreResponse()</h3>\n\n<pre class=\"syntaxbox\">boolean isNoStoreResponse();\n</pre>\n\n<h4 id=\"Parameters_5\">Parameters</h4>\n\n<p>None.</p>\n\n<h4 id=\"Return_value_4\">Return value</h4>\n\n<p><code>true</code> if the server sent a \"Cache-Control: no-store\" response header.</p>\n\n<h4 id=\"Exceptions_thrown_11\">Exceptions thrown</h4>\n\n<dl>\n <dt><code>NS_ERROR_NOT_AVAILABLE</code></dt>\n <dd>If called before the response has been received (before <code>onStartRequest()</code>).</dd>\n</dl>\n\n<h3 id=\"sect2\"></h3><h3 id=\"redirectTo()\">redirectTo()</h3>\n\n<p>Instructs the channel to immediately redirect to a new destination. Can only be called on channels not yet opened.</p>\n\n<p>This method provides no explicit conflict resolution. The last caller to call it wins.</p>\n\n<pre class=\"syntaxbox\">void redirectTo(\n  in nsIURI aNewURI\n);\n</pre>\n\n<h4 id=\"Parameters_6\">Parameters</h4>\n\n<dl>\n <dt><code>aNewURI</code></dt>\n <dd>The new URI to which we should redirect.</dd>\n</dl>\n\n<h4 id=\"Exceptions_thrown_12\">Exceptions thrown</h4>\n\n<dl>\n <dt><code>NS_ERROR_ALREADY_OPENED</code></dt>\n <dd>If called after the channel has been opened.</dd>\n</dl>\n\n<h3 id=\"sect3\"></h3><h3 id=\"setEmptyRequestHeader()\">setEmptyRequestHeader()</h3>\n\n<p>This method is called to set an empty value for a particular request header. This should be used with caution in the cases where the behavior of <a href=\"#setRequestHeader()\"><code>setRequestHeader()</code></a> ignoring empty header values is undesirable. This method may only be called before the channel is opened.</p>\n\n<pre class=\"syntaxbox\">void setEmptyRequestHeader(\n  in ACString aHeader\n);\n</pre>\n\n<h4 id=\"Parameters_7\">Parameters</h4>\n\n<dl>\n <dt><code>aHeader</code></dt>\n <dd>The case-insensitive name of the request header to set (For example \"Cookie\").</dd>\n</dl>\n\n<h4 id=\"Exceptions_thrown_13\">Exceptions thrown</h4>\n\n<dl>\n <dt><code>NS_ERROR_IN_PROGRESS</code></dt>\n <dd>If called after the channel has been opened.</dd>\n <dt><code>NS_ERROR_FAILURE</code> </dt>\n <dd>If called during <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIHttpChannel#visitRequestHeaders()\">visitRequestHeaders()</a></code>.</dd>\n</dl>\n\n<h3 id=\"sect4\"></h3><h3 id=\"setReferrerWithPolicy()\">setReferrerWithPolicy()</h3>\n\n<p>Call this method to set the channel's referrer using the referrer policy indicated with one of the predefined constants.</p>\n\n<pre class=\"syntaxbox\">void setReferrerWithPolicy(\n  in nsIURI aReferrer,\n  in unsigned long aReferrerPolicy\n);</pre>\n\n<h4 id=\"Parameters_8\">Parameters</h4>\n\n<dl>\n <dt><code>aReferrer</code></dt>\n <dd>The URI to base the referrer on.</dd>\n <dt><code>aReferrerPolicy</code></dt>\n <dd>The referrer policy to use when determining the referrer to use.</dd>\n</dl>\n\n<h4 id=\"Exceptions_thrown_14\">Exceptions thrown</h4>\n\n<dl>\n <dt><code>NS_ERROR_FAILURE</code> </dt>\n <dd>If called during <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIHttpChannel#visitRequestHeaders()\">visitRequestHeaders()</a></code>.</dd>\n</dl>\n\n<h3 id=\"setRequestHeader()\">setRequestHeader()</h3>\n\n<p>This method is called to set the value of a particular request header. This method allows, for example, the cookies module to add \"Cookie\" headers to the outgoing HTTP request. This method may only be called before the channel is opened. If aValue is empty and aMerge is <code>false</code>, the header will be cleared.</p>\n\n<pre class=\"syntaxbox\">void setRequestHeader(\n  in ACString aHeader,\n  in ACString aValue,\n  in boolean aMerge\n);\n</pre>\n\n<h4 id=\"Parameters_9\">Parameters</h4>\n\n<dl>\n <dt><code>aHeader</code></dt>\n <dd>The case-insensitive name of the request header to query (For example \"Cookie\").</dd>\n <dt><code>aValue</code></dt>\n <dd>The request header value to set (For example \"X=1\").</dd>\n <dt><code>aMerge</code></dt>\n <dd>If <code>true</code>, the new header value will be merged with any existing values for the specified header. This flag is ignored if the specified header does not support merging (For example the \"Content-Type\" header can only have one value). The list of headers for which this flag is ignored is an implementation detail. If this flag is <code>false</code>, then the header value will be replaced with the contents of <code>aValue</code>.</dd>\n</dl>\n\n<h4 id=\"Exceptions_thrown_15\">Exceptions thrown</h4>\n\n<dl>\n <dt><code>NS_ERROR_IN_PROGRESS</code></dt>\n <dd>If called after the channel has been opened.</dd>\n <dt><code>NS_ERROR_FAILURE</code> </dt>\n <dd>If called during <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIHttpChannel#visitRequestHeaders()\">visitRequestHeaders()</a></code>.</dd>\n</dl>\n\n<h3 id=\"setResponseHeader()\">setResponseHeader()</h3>\n\n<p>Set the value of a particular response header. This method allows, for example, the HTML content sink to inform the HTTP channel about HTTP-EQUIV headers found in HTML &lt;META&gt; tags. If value is empty and merge is <code>false</code>, the header will be cleared.</p>\n\n<pre class=\"syntaxbox\">void setResponseHeader(\n  in ACString header,\n  in ACString value,\n  in boolean merge\n);\n</pre>\n\n<h4 id=\"Parameters_10\">Parameters</h4>\n\n<dl>\n <dt><code>header</code></dt>\n <dd>The case-insensitive name of the response header to set(For example \"Cache-Cookie\").</dd>\n <dt><code>value</code></dt>\n <dd>The response header value to set (For example \"no-cache\").</dd>\n <dt><code>merge</code></dt>\n <dd>If <code>true</code>, the new header value will be merged with any existing values for the specified header. This flag is ignored if the specified header does not support merging (For example the \"Content-Type\" header can only have one value). The list of headers for which this flag is ignored is an implementation detail. If this flag is false, then the header value will be replaced with the contents of <code>value</code>.</dd>\n</dl>\n\n<h4 id=\"Exceptions_thrown_16\">Exceptions thrown</h4>\n\n<dl>\n <dt><code>NS_ERROR_NOT_AVAILABLE</code></dt>\n <dd>If called before the response has been received (before <code>onStartRequest()</code>).</dd>\n <dt><code>NS_ERROR_ILLEGAL_VALUE</code></dt>\n <dd>If changing the value of this response header is not allowed.</dd>\n <dt><code>NS_ERROR_FAILURE</code> </dt>\n <dd>If called during <a href=\"#visitResponseHeaders()\"><code>visitResponseHeaders()</code></a>, <a href=\"#visitOriginalResponseHeaders()\"><code>visitOriginalResponseHeaders()</code></a> or <a href=\"#getOriginalResponseHeader()\"><code>getOriginalResponseHeader()</code></a>.</dd>\n</dl>\n\n<h3 id=\"sect5\"></h3><h3 id=\"visitOriginalResponseHeaders()\">visitOriginalResponseHeaders()</h3>\n\n<p>Call this method to visit all original response headers, that is, in the same form as they came from the network. I.e. empty headers will be have an empty string as value and multiple headers will not be merged as opposed to <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIHttpChannel#visitResponseHeaders()\">visitResponseHeaders()</a></code>.</p>\n\n<div class=\"warning\">\n<p><strong>Warning:</strong> Calling <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIHttpChannel#setResponseHeader()\">setResponseHeader()</a></code> while visiting response headers will return a <code>NS_ERROR_FAILURE</code>.</p>\n</div>\n\n<pre class=\"syntaxbox\">void visitOriginalResponseHeaders(\n  in nsIHttpHeaderVisitor aVisitor\n);\n</pre>\n\n<h4 id=\"Parameters_11\">Parameters</h4>\n\n<dl>\n <dt><code>aVisitor</code></dt>\n <dd>An <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIHttpHeaderVisitor\" title=\"\">nsIHttpHeaderVisitor</a></code> instance allowing to visit all original response headers.</dd>\n</dl>\n\n<h3 id=\"visitRequestHeaders()\">visitRequestHeaders()</h3>\n\n<p>Call this method to visit all request headers.</p>\n\n<div class=\"warning\">\n<p><strong>Warning:</strong> Calling <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIHttpChannel#setRequestHeader()\">setRequestHeader()</a></code>, <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIHttpChannel#setReferrerWithPolicy()\">setReferrerWithPolicy()</a></code> or <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIHttpChannel#setEmptyRequestHeader()\">setEmptyRequestHeader()</a></code> while visiting request headers has undefined behavior until Gecko 47 (Firefox 47.0 / Thunderbird 47.0 / SeaMonkey 2.44). Starting from Gecko 48 (Firefox 48.0 / Thunderbird 48.0 / SeaMonkey 2.45) they will return a <code>NS_ERROR_FAILURE</code>.</p>\n</div>\n\n<pre class=\"syntaxbox\">void visitRequestHeaders(\n  in nsIHttpHeaderVisitor aVisitor\n);\n</pre>\n\n<h4 id=\"Parameters_12\">Parameters</h4>\n\n<dl>\n <dt><code>aVisitor</code></dt>\n <dd>The header visitor instance.</dd>\n</dl>\n\n<h3 id=\"visitResponseHeaders()\">visitResponseHeaders()</h3>\n\n<p>Call this method to visit all response headers.</p>\n\n<div class=\"warning\">\n<p><strong>Warning:</strong> Calling <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIHttpChannel#setResponseHeader()\">setResponseHeader()</a></code> while visiting response headers has undefined behavior until Gecko 48 (Firefox 48.0 / Thunderbird 48.0 / SeaMonkey 2.45). Starting from Gecko 49 (Firefox 49.0 / Thunderbird 49.0 / SeaMonkey 2.46) it will return a <code>NS_ERROR_FAILURE</code>.</p>\n</div>\n\n<pre class=\"syntaxbox\">void visitResponseHeaders(\n  in nsIHttpHeaderVisitor aVisitor\n);\n</pre>\n\n<h4 id=\"Parameters_13\">Parameters</h4>\n\n<dl>\n <dt><code>aVisitor</code></dt>\n <dd>The header visitor instance.</dd>\n</dl>\n\n<h4 id=\"Exceptions_thrown_17\">Exceptions thrown</h4>\n\n<dl>\n <dt><code>NS_ERROR_NOT_AVAILABLE</code></dt>\n <dd>If called before the response has been received (before <code>onStartRequest()</code>).</dd>\n</dl>\n\n<div class=\"note\">\n<p><strong>Note:</strong> Starting from Firefox 49, empty headers will be returned in case the preference <code>network.http.keep_empty_response_headers_as_empty_string</code> is set to <code>true</code>. Since Firefox 50 the preference defaults to <code>true</code>.</p>\n</div>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sebastianz\">Sebastianz</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/GijsKruitbosch\">GijsKruitbosch</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/pde\">pde</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kmaglione\">kmaglione</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/lmorchard\">lmorchard</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/teoli\">teoli</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Btipling\">Btipling</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Anant\">Anant</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nickolay\">Nickolay</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ayhfung\">Ayhfung</a>",
    "title": "nsIHttpChannel"
}