{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/other-licenses/ia2/AccessibleHyperlink.idl\" rel=\"custom\">other-licenses/ia2/AccessibleHyperlink.idl</a></code><span style=\"text-align: right; float: right;\"><span style=\"color: #cc0000; font-weight: 700;\">Not scriptable</span></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThis interface represents hyperlinks.\n</span>\n\n  <div style=\"height: 42px; position: relative; padding: 2px; width: auto;\">\n\n  <div style=\"top: 22px; font-size: 11px; position: absolute;\">1.0</div>\n  \n  <div style=\"top: 22px; font-size: 11px; position: absolute; left: 0px; text-align: right; float: right; width: 100%;\">66</div>\n  \n  <div style=\"height: 8px; top: 16px; background: #dd0000; left: 0px; position: absolute; width: 8.571428571428571%;\"></div>\n  \n<div style=\"height: 8px; top: 16px; left: 8.571428571428571%; background: #00dd00; position: absolute; width: 91.42857142857143%;\" title=\"Introduced in Gecko 1.9 (Firefox 3)\"></div>\n\n<div style=\"top: 0px; font-size: 11px; position: absolute; left: 8.571428571428571%;\">Introduced</div>\n<div style=\"top: 22px; font-size: 11px; position: absolute; left: 8.571428571428571%;\">Gecko 1.9</div>\n\n</div>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessibleAction\" title=\"\">IAccessibleAction</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 1.9 (Firefox 3)</span></div>\n</div><p></p>\n<p>This interface represents a hyperlink associated with a single substring of text or single non-text object. Non-text objects can have either a single link or a collection of links such as when the non-text object is an image map. Linked objects and anchors are implementation dependent. This interface is derived from <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessibleAction\" title=\"\">IAccessibleAction</a></code>. <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/IAccessibleAction#nActions()\">IAccessibleAction.nActions()</a></code> is one greater than the maximum value for the indices used with the methods of this interface. Furthermore, the object that implements this interface has to be connected implicitly or explicitly with an object that implements <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessibleText\" title=\"\">IAccessibleText</a></code>. <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessibleHyperlink#startIndex()\">startIndex()</a></code> and <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessibleHyperlink#endIndex()\">endIndex()</a></code> are indices with respect to the text exposed by <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessibleText\" title=\"\">IAccessibleText</a></code>. This interface provides access to a single object which can have multiple actions. An example is an image map which is an image with multiple links each of which is associated with a separate non-overlapping area of the image. This interface could also be applied to other kinds of objects with multiple actions such as \"smart tags\" which are objects, typically strings, which have multiple actions such as \"Activate URI\", \"Bookmark URI\", end so on. An interesting use case is an image map where each area is associated with multiple actions, for example an image map of smart tags. In this case you would have to implement two levels of accessible hyperlinks. The first level hyperlinks would only implement <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessibleHyperlink#anchor()\">anchor()</a></code> and <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessibleHyperlink#anchorTarget()\">anchorTarget()</a></code>. The anchors would all reference the image object. The anchorTargets would reference the second level accessible hyperlink objects. None of the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessibleAction\" title=\"\">IAccessibleAction</a></code> methods would be implemented on the first level hyperlink objects. The second level hyperlink objects would implement the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessibleAction\" title=\"\">IAccessibleAction</a></code> methods. Their anchors would also reference the image object and their anchorTargets would reference URLs or the objects that would be activated. This use case demonstrates that in some cases there is no need for <code>IAccessibleHyperlink</code> to derive from <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessibleAction\" title=\"\">IAccessibleAction</a></code>. As a result it may be removed in a later version of the IDL and it is suggested that implementations should not rely on the inheritance.</p>\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n<table class=\"standard-table\"> <tbody> <tr> <td><code>[propget] HRESULT <a href=\"#anchor()\">anchor</a>([in] long index, [out] VARIANT anchor );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#anchorTarget()\">anchorTarget</a>([in] long index, [out] VARIANT anchorTarget );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#endIndex()\">endIndex</a>([out] long index );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#startIndex()\">startIndex</a>([out] long index );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#valid()\">valid</a>([out] boolean valid );</code></td> </tr> </tbody>\n</table>\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n<h3 id=\"anchor()\" name=\"anchor()\">anchor()</h3>\n<p>Returns an object that represents the link anchor, as appropriate for the link at the specified index.</p>\n<pre class=\"eval\">[propget] HRESULT anchor(\n  [in] long index,\n  [out] VARIANT anchor \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>index</code></dt> <dd>A 0 based index identifies the anchor when, as in the case of an image map, there is more than one link represented by this object. The valid maximal index is indicated by <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/IAccessibleAction#nActions()\">IAccessibleAction.nActions()</a></code>.</dd> <dt><code>anchor</code></dt> <dd>This is an implementation dependent value. For example, for a text link this method could return the substring of the containing string where the substring is overridden with link behavior, and for an image link this method could return an <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IUnknown\" title=\"\">IUnknown</a></code> VARIANT for <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessibleImage\" title=\"\">IAccessibleImage</a></code>. See the section about.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>E_INVALIDARG if bad [in] passed, [out] value is <code>null</code>. S_FALSE if there is nothing to return, [out] value is <code>null</code>. S_OK.</p>\n<h3 id=\"anchorTarget()\" name=\"anchorTarget()\">anchorTarget()</h3>\n<p>Returns an object representing the target of the link, as appropriate for the link at the specified index.</p>\n<pre class=\"eval\">[propget] HRESULT anchorTarget(\n  [in] long index,\n  [out] VARIANT anchorTarget \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>index</code></dt> <dd>A 0 based index identifies the anchor when, as in the case of an image map, there is more than one link represented by this object. The valid maximal index is indicated by <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/IAccessibleAction#nActions()\">IAccessibleAction.nActions()</a></code>.</dd> <dt><code>anchorTarget</code></dt> <dd>This is an implementation dependent value. For example this method could return a BSTR VARIANT of the URI. Alternatively this method could return an <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IUnknown\" title=\"\">IUnknown</a></code> VARIANT of a COM interface representing a target object to be activated when the link is activated. See the section about.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>E_INVALIDARG if bad [in] passed, [out] value is <code>null</code>. S_FALSE if there is nothing to return, [out] value is <code>null</code>. S_OK.</p>\n<h3 id=\"endIndex()\" name=\"endIndex()\">endIndex()</h3>\n<pre class=\"eval\">[propget] HRESULT endIndex(\n  [out] long index \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>index</code></dt> <dd>The 0 based character offset at which the textual representation of the hyperlink ends. The returned value is related to the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessibleText\" title=\"\">IAccessibleText</a></code> interface of the object that owns this hyperlink. The character at the index is not part of the hypertext.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_OK.</p>\n<h3 id=\"startIndex()\" name=\"startIndex()\">startIndex()</h3>\n<pre class=\"eval\">[propget] HRESULT startIndex(\n  [out] long index \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>index</code></dt> <dd>The 0 based character offset at which the textual representation of the hyperlink starts. The returned value is related to the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessibleText\" title=\"\">IAccessibleText</a></code> interface of the object that owns this hyperlink.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_OK.</p>\n<h3 id=\"valid()\" name=\"valid()\">valid()</h3>\n<p>Returns whether the target object referenced by this link is still <code>valid</code>. This is a volatile state that may change without sending an appropriate event.</p>\n<pre class=\"eval\">[propget] HRESULT valid(\n  [out] boolean valid \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>valid</code></dt> <dd><code>true</code> if the referenced target is still <code>valid</code> and <code>false</code> otherwise. This has also been used to indicate whether or not the URI of the anchorTarget is malformed.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_FALSE if there is nothing to return, [out] value is <code>false</code>. S_OK.</p>\n<h2 id=\"See_also\" name=\"See_also\">See also</h2>\n<ul> <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessibleAction\" title=\"\">IAccessibleAction</a></code></li> <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessibleText\" title=\"\">IAccessibleText</a></code></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>",
    "title": "IAccessibleHyperlink"
}