{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/editor/idl/nsIHTMLEditor.idl\" rel=\"custom\">editor/idl/nsIHTMLEditor.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\n<i>Please add a summary to this article.</i>\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 5.0 (Firefox 5.0 / Thunderbird 5.0 / SeaMonkey 2.2)</span></div>\n</div><p></p>\n\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code>void <a href=\"#addDefaultProperty()\">addDefaultProperty</a>(in nsIAtom aProperty, in AString aAttribute, in AString aValue);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#addInsertionListener()\">addInsertionListener</a>(in nsIContentFilter inFilter);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#align()\">align</a>(in AString aAlign);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#breakIsVisible()\">breakIsVisible</a>(in nsIDOMNode aNode);</code> </td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#canDrag()\">canDrag</a>(in nsIDOMEvent aEvent);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#checkSelectionStateForAnonymousButtons()\">checkSelectionStateForAnonymousButtons</a>(in nsISelection aSelection);</code></td>\n  </tr>\n  <tr>\n   <td><code>nsIDOMElement <a href=\"#createAnonymousElement()\">createAnonymousElement</a>(in AString aTag, in nsIDOMNode aParentNode, in AString aAnonClass, in boolean aIsCreatedHidden);</code></td>\n  </tr>\n  <tr>\n   <td><code>nsIDOMElement <a href=\"#createElementWithDefaults()\">createElementWithDefaults</a>(in AString aTagName);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#decreaseFontSize()\">decreaseFontSize</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#doDrag()\">doDrag</a>(in nsIDOMEvent aEvent);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#getAlignment()\">getAlignment</a>(out boolean aMixed, out short aAlign);</code></td>\n  </tr>\n  <tr>\n   <td><code>AString <a href=\"#getBackgroundColorState()\">getBackgroundColorState</a>(out boolean aMixed);</code></td>\n  </tr>\n  <tr>\n   <td><code>nsIDOMElement <a href=\"#getElementOrParentByTagName()\">getElementOrParentByTagName</a>(in AString aTagName, in nsIDOMNode aNode);</code></td>\n  </tr>\n  <tr>\n   <td><code>AString <a href=\"#getFontColorState()\">getFontColorState</a>(out boolean aMixed);</code></td>\n  </tr>\n  <tr>\n   <td><code>AString <a href=\"#getFontFaceState()\">getFontFaceState</a>(out boolean aMixed);</code></td>\n  </tr>\n  <tr>\n   <td><code>AString <a href=\"#getHeadContentsAsHTML()\">getHeadContentsAsHTML</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>AString <a href=\"#getHighlightColorState()\">getHighlightColorState</a>(out boolean aMixed);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#getIndentState()\">getIndentState</a>(out boolean aCanIndent, out boolean aCanOutdent);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#getInlineProperty()\">getInlineProperty</a>(in nsIAtom aProperty, in AString aAttribute, in AString aValue, out boolean aFirst, out boolean aAny, out boolean aAll);</code></td>\n  </tr>\n  <tr>\n   <td><code>AString <a href=\"#getInlinePropertyWithAttrValue()\">getInlinePropertyWithAttrValue</a>(in nsIAtom aProperty, in AString aAttribute, in AString aValue, out boolean aFirst, out boolean aAny, out boolean aAll);</code></td>\n  </tr>\n  <tr>\n   <td><code>nsISupportsArray <a href=\"#getLinkedObjects()\">getLinkedObjects</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#getListItemState()\">getListItemState</a>(out boolean aMixed, out boolean aLI, out boolean aDT, out boolean aDD);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#getListState()\">getListState</a>(out boolean aMixed, out boolean aOL, out boolean aUL, out boolean aDL);</code></td>\n  </tr>\n  <tr>\n   <td><code>AString <a href=\"#getParagraphState()\">getParagraphState</a>(out boolean aMixed);</code></td>\n  </tr>\n  <tr>\n   <td><code>nsIDOMElement <a href=\"#getSelectedElement()\">getSelectedElement</a>(in AString aTagName);</code></td>\n  </tr>\n  <tr>\n   <td><code>nsIDOMElement <a href=\"#getSelectionContainer()\">getSelectionContainer</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#ignoreSpuriousDragEvent()\">ignoreSpuriousDragEvent</a>(in boolean aIgnoreSpuriousDragEvent);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#increaseFontSize()\">increaseFontSize</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#indent()\">indent</a>(in AString aIndent);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#insertElementAtSelection()\">insertElementAtSelection</a>(in nsIDOMElement aElement, in boolean aDeleteSelection);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#insertFromDrop()\">insertFromDrop</a>(in nsIDOMEvent aEvent);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#insertHTML()\">insertHTML</a>(in AString aInputString);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#insertHTMLWithContext()\">insertHTMLWithContext</a>(in AString aInputString, in AString aContextStr, in AString aInfoStr, in AString aFlavor, in nsIDOMDocument aSourceDoc, in nsIDOMNode aDestinationNode, in long aDestinationOffset, in boolean aDeleteSelection);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#insertLinkAroundSelection()\">insertLinkAroundSelection</a>(in nsIDOMElement aAnchorElement);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#isAnonymousElement()\">isAnonymousElement</a>(in nsIDOMElement aElement);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#makeOrChangeList()\">makeOrChangeList</a>(in AString aListType, in boolean entireList, in AString aBulletType);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#nodeIsBlock()\">nodeIsBlock</a>(in nsIDOMNode node);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#pasteNoFormatting()\">pasteNoFormatting</a>(in long aSelectionType);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#rebuildDocumentFromSource()\">rebuildDocumentFromSource</a>(in AString aSourceString);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#removeAllDefaultProperties()\">removeAllDefaultProperties</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#removeAllInlineProperties()\">removeAllInlineProperties</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#removeDefaultProperty()\">removeDefaultProperty</a>(in nsIAtom aProperty, in AString aAttribute, in AString aValue);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#removeInlineProperty()\">removeInlineProperty</a>(in nsIAtom aProperty, in AString aAttribute);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#removeInsertionListener()\">removeInsertionListener</a>(in nsIContentFilter inFilter);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#removeList()\">removeList</a>(in AString aListType);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#replaceHeadContentsWithHTML()\">replaceHeadContentsWithHTML</a>(in AString aSourceToInsert);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#selectElement()\">selectElement</a>(in nsIDOMElement aElement);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setBackgroundColor()\">setBackgroundColor</a>(in AString aColor);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setBodyAttribute()\">setBodyAttribute</a>(in AString aAttr, in AString aValue);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setCaretAfterElement()\">setCaretAfterElement</a>(in nsIDOMElement aElement);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setCSSInlineProperty()\">setCSSInlineProperty</a>(in nsIAtom aProperty, in AString aAttribute, in AString aValue);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setDocumentTitle()\">setDocumentTitle</a>(in AString aTitle);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setInlineProperty()\">setInlineProperty</a>(in nsIAtom aProperty, in AString aAttribute, in AString aValue);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setParagraphFormat()\">setParagraphFormat</a>(in AString aParagraphFormat);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#updateBaseURL()\">updateBaseURL</a>();</code></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Attributes\" name=\"Attributes\">Attributes</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Attribute</td>\n   <td class=\"header\">Type</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>isCSSEnabled</code></td>\n   <td><code><a href=\"/en/boolean\" title=\"en/boolean\">boolean</a></code></td>\n   <td>A boolean which is <code>true</code> is the HTMLEditor has been instantiated with CSS knowledge and if the CSS pref is currently checked.</td>\n  </tr>\n  <tr>\n   <td><code>returnInParagraphCreatesNewParagraph</code></td>\n   <td><code><a href=\"/en/boolean\" title=\"en/boolean\">boolean</a></code></td>\n   <td>A boolean indicating if a return key pressed in a paragraph creates another paragraph or just inserts a &lt;br&gt; at the caret. </td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Constants\" name=\"Constants\">Constants</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Constant</td>\n   <td class=\"header\">Value</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>eLeft</code></td>\n   <td><code>0</code></td>\n   <td> </td>\n  </tr>\n  <tr>\n   <td><code>eCenter</code></td>\n   <td><code>1</code></td>\n   <td> </td>\n  </tr>\n  <tr>\n   <td><code>eRight</code></td>\n   <td><code>2</code></td>\n   <td> </td>\n  </tr>\n  <tr>\n   <td><code>eJustify</code></td>\n   <td><code>3</code></td>\n   <td> </td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n\n<h3 id=\"addDefaultProperty()\" name=\"addDefaultProperty()\">addDefaultProperty()</h3>\n\n<p><code>R</code>egisters a default style property with the editor.</p>\n\n<pre class=\"eval\">void addDefaultProperty(\n  in nsIAtom aProperty,\n  in AString aAttribute,\n  in AString aValue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aProperty</code></dt>\n <dd>The property to set by default.</dd>\n <dt><code>aAttribute</code></dt>\n <dd>The attribute of the property, if applicable. May be <code>null</code>. Example: <code>aProperty</code>=\"font\", <code>aAttribute</code>=\"color\"</dd>\n <dt><code>aValue</code></dt>\n <dd>If <code>aAttribute</code> is not <code>null</code>, the value of the attribute. Example: <code>aProperty</code>=\"font\", <code>aAttribute</code>=\"color\", <code>aValue</code>=\"0x00FFFF\"</dd>\n</dl>\n\n<h3 id=\"addInsertionListener()\" name=\"addInsertionListener()\">addInsertionListener()</h3>\n\n<p>Add listener for insertion override.</p>\n\n<pre class=\"eval\">void addInsertionListener(\n  in nsIContentFilter inFilter\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>inFilter</code></dt>\n <dd>Function which callers want called during insertion.</dd>\n</dl>\n\n<h3 id=\"align()\" name=\"align()\">align()</h3>\n\n<p>Document me!</p>\n\n<pre class=\"eval\">void align(\n  in AString aAlign\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aAlign</code></dt>\n <dd> </dd>\n</dl>\n\n<p></p><h3 id=\"breakIsVisible()\">breakIsVisible()</h3><p></p>\n\n<p>Checks whether a BR node is visible to the user.</p>\n\n<pre class=\"eval\">boolean breakIsVisible(\n  in nsIDOMNode aNode\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aNode</code></dt>\n <dd> </dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p> </p>\n\n<h3 id=\"canDrag()\" name=\"canDrag()\">canDrag()</h3>\n\n<p>Decides if a drag should be started (for example, based on the current selection and mousepoint).</p>\n\n<pre class=\"eval\">boolean canDrag(\n  in nsIDOMEvent aEvent\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aEvent</code></dt>\n <dd> </dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p> </p>\n\n<h3 id=\"checkSelectionStateForAnonymousButtons()\" name=\"checkSelectionStateForAnonymousButtons()\">checkSelectionStateForAnonymousButtons()</h3>\n\n<p>Checks if the anonymous nodes created by the HTML editor have to be refreshed or hidden depending on a possible new state of the selection.</p>\n\n<pre class=\"eval\">void checkSelectionStateForAnonymousButtons(\n  in nsISelection aSelection\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aSelection</code></dt>\n <dd>A selection.</dd>\n</dl>\n\n<h3 id=\"createAnonymousElement()\" name=\"createAnonymousElement()\">createAnonymousElement()</h3>\n\n<p>Returns an anonymous nsDOMElement of type <code>aTag</code>, child of <code>aParentNode</code>. If aIsCreatedHidden is <code>true</code>, the class \"hidden\" is added to the created element. If <code>aAnonClass</code> is not the empty string, it becomes the value of the attribute \"_moz_anonclass\"</p>\n\n<pre class=\"eval\">nsIDOMElement createAnonymousElement(\n  in AString aTag,\n  in nsIDOMNode aParentNode,\n  in AString aAnonClass,\n  in boolean aIsCreatedHidden\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aTag</code></dt>\n <dd>A string representing the desired type of the element to create.</dd>\n <dt><code>aParentNode</code></dt>\n <dd>The parent node of the created anonymous element.</dd>\n <dt><code>aAnonClass</code></dt>\n <dd>Contents of the _moz_anonclass attribute.</dd>\n <dt><code>aIsCreatedHidden</code></dt>\n <dd>A boolean specifying if the class \"hidden\" is to be added to the created anonymous element.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>A DOM Element.</p>\n\n<h3 id=\"createElementWithDefaults()\" name=\"createElementWithDefaults()\">createElementWithDefaults()</h3>\n\n<p>Return a new element with default attribute values.</p>\n\n<p>This does not rely on the selection, and is not sensitive to context.</p>\n\n<p>Used primarily to supply new element for various insert element dialogs (Image, Link, Table, and HorizontalRule are the only returned elements as of 9/12/18); NamedAnchor was removed in Firefox 63.</p>\n\n<pre class=\"eval\">nsIDOMElement createElementWithDefaults(\n  in AString aTagName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aTagName</code></dt>\n <dd>The HTML tagname. Special input value for Links: Use \"href\" to get a link node (an \"A\" tag with the \"href\" attribute set)</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>The new element created.</p>\n\n<h3 id=\"decreaseFontSize()\" name=\"decreaseFontSize()\">decreaseFontSize()</h3>\n\n<p>Decrease font size for text in selection by 1 HTML unit All existing text is scanned for existing &lt;FONT SIZE&gt; attributes so they will be decreased instead of inserting new &lt;FONT&gt; tag.</p>\n\n<pre class=\"eval\">void decreaseFontSize();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h3 id=\"doDrag()\" name=\"doDrag()\">doDrag()</h3>\n\n<p>Transfers the relevant data (as appropriate) to a transferable so it can later be dropped.</p>\n\n<pre class=\"eval\">void doDrag(\n  in nsIDOMEvent aEvent\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aEvent</code></dt>\n <dd> </dd>\n</dl>\n\n<h3 id=\"getAlignment()\" name=\"getAlignment()\">getAlignment()</h3>\n\n<p>Returns what alignment is in the selection.</p>\n\n<pre class=\"eval\">void getAlignment(\n  out boolean aMixed,\n  out short aAlign\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aMixed</code></dt>\n <dd><code>true</code> if there is more than one type of list item, or if there is some list and non-list.</dd>\n <dt><code>aAlign</code></dt>\n <dd>Enum value for first encountered alignment (left/center/right)</dd>\n</dl>\n\n<h3 id=\"getBackgroundColorState()\" name=\"getBackgroundColorState()\">getBackgroundColorState()</h3>\n\n<p><code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIHTMLEditor#getFontColorState()\">getFontColorState()</a></code> returns what font face is in the selection.</p>\n\n<pre class=\"eval\">AString getBackgroundColorState(\n  out boolean aMixed\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aMixed</code></dt>\n <dd><code>true</code> if there is more than one font color.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Color string. \"\" is returned for none.</p>\n\n<h3 id=\"getElementOrParentByTagName()\" name=\"getElementOrParentByTagName()\">getElementOrParentByTagName()</h3>\n\n<p>Return the input node or a parent matching the given <code>aTagName</code>, starting the search at the supplied node. An example of use is for testing if a node is in a table cell given a selection anchor node.</p>\n\n<pre class=\"eval\">nsIDOMElement getElementOrParentByTagName(\n  in AString aTagName,\n  in nsIDOMNode aNode\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aTagName</code></dt>\n <dd>The HTML tagname Special input values: Use \"href\" to get a link node (an \"A\" tag with the \"href\" attribute set) Use \"list\" to get an OL, UL, or DL list node Use \"td\" to get either a TD or TH cell node.</dd>\n <dt><code>aNode</code></dt>\n <dd>The node in the document to start the search. If it is <code>null</code>, the anchor node of the current selection is used.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>NS_EDITOR_ELEMENT_NOT_FOUND if an element is not found (passes NS_SUCCEEDED macro)</p>\n\n<h3 id=\"getFontColorState()\" name=\"getFontColorState()\">getFontColorState()</h3>\n\n<p>Returns what font face is in the selection.</p>\n\n<pre class=\"eval\">AString getFontColorState(\n  out boolean aMixed\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aMixed</code></dt>\n <dd><code>true</code> if there is more than one font color.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Color string. \"\" is returned for none.</p>\n\n<h3 id=\"getFontFaceState()\" name=\"getFontFaceState()\">getFontFaceState()</h3>\n\n<p>Returns what font face is in the selection.</p>\n\n<pre class=\"eval\">AString getFontFaceState(\n  out boolean aMixed\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aMixed</code></dt>\n <dd><code>true</code> if there is more than one font face.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Name of face. Note: \"tt\" is returned for tt tag. \"\" is returned for none.</p>\n\n<h3 id=\"getHeadContentsAsHTML()\" name=\"getHeadContentsAsHTML()\">getHeadContentsAsHTML()</h3>\n\n<p>Output the contents of the &lt;HEAD&gt; section as text/HTML format.</p>\n\n<pre class=\"eval\">AString getHeadContentsAsHTML();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p> </p>\n\n<h3 id=\"getHighlightColorState()\" name=\"getHighlightColorState()\">getHighlightColorState()</h3>\n\n<p>Returns what the highlight color of the selection.</p>\n\n<pre class=\"eval\">AString getHighlightColorState(\n  out boolean aMixed\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aMixed</code></dt>\n <dd><code>true</code> if there is more than one font color.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Color string. \"\" is returned for none.</p>\n\n<h3 id=\"getIndentState()\" name=\"getIndentState()\">getIndentState()</h3>\n\n<p>Document me!</p>\n\n<pre class=\"eval\">void getIndentState(\n  out boolean aCanIndent,\n  out boolean aCanOutdent\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aCanIndent</code></dt>\n <dd> </dd>\n <dt><code>aCanOutdent</code></dt>\n <dd> </dd>\n</dl>\n\n<h3 id=\"getInlineProperty()\" name=\"getInlineProperty()\">getInlineProperty()</h3>\n\n<p>Gets aggregate properties of the current selection. All object in the current selection are scanned and their attributes are represented in a list of Property object.</p>\n\n<pre class=\"eval\">void getInlineProperty(\n  in nsIAtom aProperty,\n  in AString aAttribute,\n  in AString aValue,\n  out boolean aFirst,\n  out boolean aAny,\n  out boolean aAll\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aProperty</code></dt>\n <dd>The property to get on the selection.</dd>\n <dt><code>aAttribute</code></dt>\n <dd>The attribute of the property, if applicable. May be <code>null</code>. Example: <code>aProperty</code>=\"font\", <code>aAttribute</code>=\"color\"</dd>\n <dt><code>aValue</code></dt>\n <dd>If aAttribute is not <code>null</code>, the value of the attribute. May be <code>null</code>. Example: <code>aProperty</code>=\"font\", <code>aAttribute</code>=\"color\", <code>aValue</code>=\"0x00FFFF\"</dd>\n <dt><code>aFirst</code></dt>\n <dd>PR_TRUE if the first text node in the selection has the property.</dd>\n <dt><code>aAny</code></dt>\n <dd>PR_TRUE if any of the text nodes in the selection have the property.</dd>\n <dt><code>aAll</code></dt>\n <dd>PR_TRUE if all of the text nodes in the selection have the property.</dd>\n</dl>\n\n<h3 id=\"getInlinePropertyWithAttrValue()\" name=\"getInlinePropertyWithAttrValue()\">getInlinePropertyWithAttrValue()</h3>\n\n<pre class=\"eval\">AString getInlinePropertyWithAttrValue(\n  in nsIAtom aProperty,\n  in AString aAttribute,\n  in AString aValue,\n  out boolean aFirst,\n  out boolean aAny,\n  out boolean aAll\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aProperty</code></dt>\n <dd> </dd>\n <dt><code>aAttribute</code></dt>\n <dd> </dd>\n <dt><code>aValue</code></dt>\n <dd> </dd>\n <dt><code>aFirst</code></dt>\n <dd> </dd>\n <dt><code>aAny</code></dt>\n <dd> </dd>\n <dt><code>aAll</code></dt>\n <dd> </dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p> </p>\n\n<h3 id=\"getLinkedObjects()\" name=\"getLinkedObjects()\">getLinkedObjects()</h3>\n\n<p>Find all the nodes in the document which contain references to outside URIs (for example a href, img src, script src, and so on.) The objects in the array will be type <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURIRefObject\" title=\"\">nsIURIRefObject</a></code>.</p>\n\n<pre class=\"eval\">nsISupportsArray getLinkedObjects();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>ANodeList the linked nodes found.</p>\n\n<h3 id=\"getListItemState()\" name=\"getListItemState()\">getListItemState()</h3>\n\n<p><code>getListItemState</code> returns what list item type is in the selection.</p>\n\n<pre class=\"eval\">void getListItemState(\n  out boolean aMixed,\n  out boolean aLI,\n  out boolean aDT,\n  out boolean aDD\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aMixed</code></dt>\n <dd><code>true</code> if there is more than one type of list item, or if there is some list and non-list.</dd>\n <dt><code>aLI</code></dt>\n <dd><code>true</code> if \"li\" list items are selected.</dd>\n <dt><code>aDT</code></dt>\n <dd><code>true</code> if \"dt\" list items are selected.</dd>\n <dt><code>aDD</code></dt>\n <dd><code>true</code> if \"dd\" list items are selected.</dd>\n</dl>\n\n<h3 id=\"getListState()\" name=\"getListState()\">getListState()</h3>\n\n<p>Returns what list type is in the selection.</p>\n\n<pre class=\"eval\">void getListState(\n  out boolean aMixed,\n  out boolean aOL,\n  out boolean aUL,\n  out boolean aDL\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aMixed</code></dt>\n <dd><code>true</code> if there is more than one type of list, or if there is some list and non-list.</dd>\n <dt><code>aOL</code></dt>\n <dd>The company that employs me. No, really, it is <code>true</code> if an \"ol\" list is selected.</dd>\n <dt><code>aUL</code></dt>\n <dd><code>true</code> if an \"ul\" list is selected.</dd>\n <dt><code>aDL</code></dt>\n <dd><code>true</code> if a \"dl\" list is selected.</dd>\n</dl>\n\n<h3 id=\"getParagraphState()\" name=\"getParagraphState()\">getParagraphState()</h3>\n\n<p>Returns what block tag paragraph format is in the selection.</p>\n\n<pre class=\"eval\">AString getParagraphState(\n  out boolean aMixed\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aMixed</code></dt>\n <dd><code>true</code> if there is more than one format.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Name of block tag. \"\" is returned for none.</p>\n\n<h3 id=\"getSelectedElement()\" name=\"getSelectedElement()\">getSelectedElement()</h3>\n\n<p>Return an element only if it is the only node selected, such as an image, horizontal rule, and so on. The exception is a link, which is more like a text attribute: The Anchor tag is returned if the selection is within the textnode(s) that are children of the \"A\" node. This could be a collapsed selection, that is, a caret within the link text.</p>\n\n<pre class=\"eval\">nsIDOMElement getSelectedElement(\n  in AString aTagName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aTagName</code></dt>\n <dd>The HTML tagname or and empty string to get any element (but only if it is the only element selected). Special input values for Links: Use \"href\" to get a link node (an \"A\" tag with the \"href\" attribute set).</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>NS_EDITOR_ELEMENT_NOT_FOUND if an element is not found (passes NS_SUCCEEDED macro)</p>\n\n<h3 id=\"getSelectionContainer()\" name=\"getSelectionContainer()\">getSelectionContainer()</h3>\n\n<p>Returns the deepest container of the selection.</p>\n\n<pre class=\"eval\">nsIDOMElement getSelectionContainer();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>A DOM Element.</p>\n\n<h3 id=\"ignoreSpuriousDragEvent()\" name=\"ignoreSpuriousDragEvent()\">ignoreSpuriousDragEvent()</h3>\n\n<p>Used to suppress spurious drag/drop events to workaround <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=50703\" title=\"After double-click that launches dialog, mouse up on dialog button triggers dragNdrop in content window\">bug 50703</a>. Do not use this method! It will go away after first release!</p>\n\n<pre class=\"eval\">void ignoreSpuriousDragEvent(\n  in boolean aIgnoreSpuriousDragEvent\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aIgnoreSpuriousDragEvent</code></dt>\n <dd> </dd>\n</dl>\n\n<h3 id=\"increaseFontSize()\" name=\"increaseFontSize()\">increaseFontSize()</h3>\n\n<p>Increase font size for text in selection by 1 HTML unit All existing text is scanned for existing &lt;FONT SIZE&gt; attributes so they will be incremented instead of inserting new &lt;FONT&gt; tag.</p>\n\n<pre class=\"eval\">void increaseFontSize();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h3 id=\"indent()\" name=\"indent()\">indent()</h3>\n\n<p>Document me!</p>\n\n<pre class=\"eval\">void indent(\n  in AString aIndent\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aIndent</code></dt>\n <dd> </dd>\n</dl>\n\n<h3 id=\"insertElementAtSelection()\" name=\"insertElementAtSelection()\">insertElementAtSelection()</h3>\n\n<p>Insert an element, which may have child nodes, at the selection Used primarily to insert a new element for various insert element dialogs, but it enforces the HTML 4.0 DTD \"CanContain\" rules, so it should be useful for other elements.</p>\n\n<pre class=\"eval\">void insertElementAtSelection(\n  in nsIDOMElement aElement,\n  in boolean aDeleteSelection\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aElement</code></dt>\n <dd>The element to insert.</dd>\n <dt><code>aDeleteSelection</code></dt>\n <dd>Delete the selection before inserting If aDeleteSelection is PR_FALSE, then the element is inserted after the end of the selection for all element except Named Anchors, which insert before the selection.</dd>\n</dl>\n\n<h3 id=\"insertFromDrop()\" name=\"insertFromDrop()\">insertFromDrop()</h3>\n\n<p>Looks for a dragsession and inserts the relevant data in response to a drop.</p>\n\n<pre class=\"eval\">void insertFromDrop(\n  in nsIDOMEvent aEvent\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aEvent</code></dt>\n <dd> </dd>\n</dl>\n\n<h3 id=\"insertHTML()\" name=\"insertHTML()\">insertHTML()</h3>\n\n<p>Insert some HTML source at the current location.</p>\n\n<pre class=\"eval\">void insertHTML(\n  in AString aInputString\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aInputString</code></dt>\n <dd>The string to be inserted.</dd>\n</dl>\n\n<h3 id=\"insertHTMLWithContext()\" name=\"insertHTMLWithContext()\">insertHTMLWithContext()</h3>\n\n<p>Insert some HTML source, interpreting the string argument according to the given context.</p>\n\n<pre class=\"eval\">void insertHTMLWithContext(\n  in AString aInputString,\n  in AString aContextStr,\n  in AString aInfoStr,\n  in AString aFlavor,\n  in nsIDOMDocument aSourceDoc,\n  in nsIDOMNode aDestinationNode,\n  in long aDestinationOffset,\n  in boolean aDeleteSelection\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aInputString</code></dt>\n <dd>The string to be inserted.</dd>\n <dt><code>aContextStr</code></dt>\n <dd>Context of insertion.</dd>\n <dt><code>aInfoStr</code></dt>\n <dd>Related info to aInputString.</dd>\n <dt><code>aFlavor</code></dt>\n <dd>Transferable flavor, can be \"\"</dd>\n <dt><code>aSourceDoc</code></dt>\n <dd>Document where input was dragged from (may be <code>null</code>)</dd>\n <dt><code>aDestinationNode</code></dt>\n <dd>Location for insertion (such as when dropped)</dd>\n <dt><code>aDestinationOffset</code></dt>\n <dd>Used with aDestNode to determine insert location.</dd>\n <dt><code>aDeleteSelection</code></dt>\n <dd>Used with aDestNode during drag&amp;drop.</dd>\n</dl>\n\n<h3 id=\"insertLinkAroundSelection()\" name=\"insertLinkAroundSelection()\">insertLinkAroundSelection()</h3>\n\n<p>Insert an link element as the parent of the current selection.</p>\n\n<pre class=\"eval\">void insertLinkAroundSelection(\n  in nsIDOMElement aAnchorElement\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aAnchorElement</code></dt>\n <dd> </dd>\n</dl>\n\n<h3 id=\"isAnonymousElement()\" name=\"isAnonymousElement()\">isAnonymousElement()</h3>\n\n<pre class=\"eval\">boolean isAnonymousElement(\n  in nsIDOMElement aElement\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aElement</code></dt>\n <dd> </dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p> </p>\n\n<h3 id=\"makeOrChangeList()\" name=\"makeOrChangeList()\">makeOrChangeList()</h3>\n\n<pre class=\"eval\">void makeOrChangeList(\n  in AString aListType,\n  in boolean entireList,\n  in AString aBulletType\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aListType</code></dt>\n <dd> </dd>\n <dt><code>entireList</code></dt>\n <dd> </dd>\n <dt><code>aBulletType</code></dt>\n <dd> </dd>\n</dl>\n\n<h3 id=\"nodeIsBlock()\" name=\"nodeIsBlock()\">nodeIsBlock()</h3>\n\n<p>Tests if a node is a BLOCK element according the the HTML 4.0 DTD. This does NOT consider CSS effect on display type.</p>\n\n<pre class=\"eval\">boolean nodeIsBlock(\n  in nsIDOMNode node\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>node</code></dt>\n <dd> </dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p> </p>\n\n<h3 id=\"pasteNoFormatting()\" name=\"pasteNoFormatting()\">pasteNoFormatting()</h3>\n\n<p>Paste the text in the OS clipboard at the cursor position, replacing the selected text (if any), but strip out any HTML styles and formatting.</p>\n\n<pre class=\"eval\">void pasteNoFormatting(\n  in long aSelectionType\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aSelectionType</code></dt>\n <dd> </dd>\n</dl>\n\n<h3 id=\"rebuildDocumentFromSource()\" name=\"rebuildDocumentFromSource()\">rebuildDocumentFromSource()</h3>\n\n<p>Rebuild the entire document from source HTML Needed to be able to edit HEAD and other outside-of-BODY content.</p>\n\n<pre class=\"eval\">void rebuildDocumentFromSource(\n  in AString aSourceString\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aSourceString</code></dt>\n <dd>HTML source string of the entire new document.</dd>\n</dl>\n\n<h3 id=\"removeAllDefaultProperties()\" name=\"removeAllDefaultProperties()\">removeAllDefaultProperties()</h3>\n\n<p>Unregisters all default style properties with the editor.</p>\n\n<pre class=\"eval\">void removeAllDefaultProperties();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h3 id=\"removeAllInlineProperties()\" name=\"removeAllInlineProperties()\">removeAllInlineProperties()</h3>\n\n<p>Deletes all the inline properties from all text in the current selection.</p>\n\n<pre class=\"eval\">void removeAllInlineProperties();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h3 id=\"removeDefaultProperty()\" name=\"removeDefaultProperty()\">removeDefaultProperty()</h3>\n\n<p>Unregisters a default style property with the editor.</p>\n\n<pre class=\"eval\">void removeDefaultProperty(\n  in nsIAtom aProperty,\n  in AString aAttribute,\n  in AString aValue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aProperty</code></dt>\n <dd>The property to remove from defaults.</dd>\n <dt><code>aAttribute</code></dt>\n <dd>The attribute of the property, if applicable. May be <code>null</code>. Example: <code>aProperty</code>=\"font\", <code>aAttribute</code>=\"color\"</dd>\n <dt><code>aValue</code></dt>\n <dd>If <code>aAttribute</code> is not <code>null</code>, the value of the attribute. Example: <code>aProperty</code>=\"font\", <code>aAttribute</code>=\"color\", <code>aValue</code>=\"0x00FFFF\"</dd>\n</dl>\n\n<h3 id=\"removeInlineProperty()\" name=\"removeInlineProperty()\">removeInlineProperty()</h3>\n\n<p>Deletes the properties from all text in the current selection. If <code>aProperty</code> is not set on the selection, nothing is done.</p>\n\n<pre class=\"eval\">void removeInlineProperty(\n  in nsIAtom aProperty,\n  in AString aAttribute\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aProperty</code></dt>\n <dd>The property to remove from the selection All atoms are for normal HTML tags (for example <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIEditorProperty#font()\">nsIEditorProperty.font()</a></code>) except when you want to remove just links and not named anchors. For that, use <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIEditorProperty#href()\">nsIEditorProperty.href()</a></code>.</dd>\n <dt><code>aAttribute</code></dt>\n <dd>The attribute of the property, if applicable. May be <code>null</code>. Example: <code>aProperty</code>=<code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIEditorProptery#font()\">nsIEditorProptery.font()</a></code>, <code>aAttribute</code>=\"color\" <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIEditProperty#allAttributes()\">nsIEditProperty.allAttributes()</a></code> is special. It indicates that all content-based text properties are to be removed from the selection.</dd>\n</dl>\n\n<h3 id=\"removeInsertionListener()\" name=\"removeInsertionListener()\">removeInsertionListener()</h3>\n\n<p>Remove listener for insertion override.</p>\n\n<pre class=\"eval\">void removeInsertionListener(\n  in nsIContentFilter inFilter\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>inFilter</code></dt>\n <dd>Function which callers do not want called during insertion.</dd>\n</dl>\n\n<h3 id=\"removeList()\" name=\"removeList()\">removeList()</h3>\n\n<p>Document me!</p>\n\n<pre class=\"eval\">void removeList(\n  in AString aListType\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aListType</code></dt>\n <dd> </dd>\n</dl>\n\n<h3 id=\"replaceHeadContentsWithHTML()\" name=\"replaceHeadContentsWithHTML()\">replaceHeadContentsWithHTML()</h3>\n\n<p>Replace all children of &lt;HEAD&gt; with string of HTML source.</p>\n\n<pre class=\"eval\">void replaceHeadContentsWithHTML(\n  in AString aSourceToInsert\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aSourceToInsert</code></dt>\n <dd> </dd>\n</dl>\n\n<h3 id=\"selectElement()\" name=\"selectElement()\">selectElement()</h3>\n\n<p>Set the selection at the suppled element.</p>\n\n<pre class=\"eval\">void selectElement(\n  in nsIDOMElement aElement\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aElement</code></dt>\n <dd>An element in the document.</dd>\n</dl>\n\n<h3 id=\"setBackgroundColor()\" name=\"setBackgroundColor()\">setBackgroundColor()</h3>\n\n<p>Set the value of the \"bgcolor\" attribute on the document's &lt;body&gt; element.</p>\n\n<pre class=\"eval\">void setBackgroundColor(\n  in AString aColor\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aColor</code></dt>\n <dd>The HTML color string, such as \"#ffccff\" or \"yellow\"</dd>\n</dl>\n\n<h3 id=\"setBodyAttribute()\" name=\"setBodyAttribute()\">setBodyAttribute()</h3>\n\n<p>Set an attribute on the document's &lt;body&gt; element such as text, link, background colors.</p>\n\n<pre class=\"eval\">void setBodyAttribute(\n  in AString aAttr,\n  in AString aValue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aAttr</code></dt>\n <dd>The attribute to be set.</dd>\n <dt><code>aValue</code></dt>\n <dd>The value of the attribute.</dd>\n</dl>\n\n<h3 id=\"setCaretAfterElement()\" name=\"setCaretAfterElement()\">setCaretAfterElement()</h3>\n\n<p>Create a collapsed selection just after aElement.</p>\n\n<p>The selection is set to parent-of-aElement with an offset 1 greater than aElement's offset but it enforces the HTML 4.0 DTD \"CanContain\" rules, so it should be useful for other elements.</p>\n\n<pre class=\"eval\">void setCaretAfterElement(\n  in nsIDOMElement aElement\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aElement</code></dt>\n <dd>An element in the document.</dd>\n</dl>\n\n<h3 id=\"setCSSInlineProperty()\" name=\"setCSSInlineProperty()\">setCSSInlineProperty()</h3>\n\n<p><code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIHTMLEditor#SetInlineProperty()\">SetInlineProperty()</a></code> sets the aggregate properties on the current selection.</p>\n\n<pre class=\"eval\">void setCSSInlineProperty(\n  in nsIAtom aProperty,\n  in AString aAttribute,\n  in AString aValue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aProperty</code></dt>\n <dd>The property to set on the selection.</dd>\n <dt><code>aAttribute</code></dt>\n <dd>The attribute of the property, if applicable. May be <code>null</code>. Example: <code>aProperty</code>=\"font\", <code>aAttribute</code>=\"color\"</dd>\n <dt><code>aValue</code></dt>\n <dd>If <code>aAttribute</code> is not <code>null</code>, the value of the attribute. May be <code>null</code>. Example: <code>aProperty</code>=\"font\", <code>aAttribute</code>=\"color\", <code>aValue</code>=\"0x00FFFF\"</dd>\n</dl>\n\n<h3 id=\"setDocumentTitle()\" name=\"setDocumentTitle()\">setDocumentTitle()</h3>\n\n<p>Set the documents title.</p>\n\n<pre class=\"eval\">void setDocumentTitle(\n  in AString aTitle\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aTitle</code></dt>\n <dd> </dd>\n</dl>\n\n<h3 id=\"setInlineProperty()\" name=\"setInlineProperty()\">setInlineProperty()</h3>\n\n<pre class=\"eval\">void setInlineProperty(\n  in nsIAtom aProperty,\n  in AString aAttribute,\n  in AString aValue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aProperty</code></dt>\n <dd> </dd>\n <dt><code>aAttribute</code></dt>\n <dd> </dd>\n <dt><code>aValue</code></dt>\n <dd> </dd>\n</dl>\n\n<h3 id=\"setParagraphFormat()\" name=\"setParagraphFormat()\">setParagraphFormat()</h3>\n\n<p>Insert a block paragraph tag around selection.</p>\n\n<pre class=\"eval\">void setParagraphFormat(\n  in AString aParagraphFormat\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aParagraphFormat</code></dt>\n <dd>\"p\", \"h1\" to \"h6\", \"address\", \"pre\", or \"blockquote\"</dd>\n</dl>\n\n<h3 id=\"updateBaseURL()\" name=\"updateBaseURL()\">updateBaseURL()</h3>\n\n<p>Set the BaseURL for the document to the current URL but only if the page doesn't have a &lt;base&gt; tag This should be done after the document URL has changed, such as after saving a file This is used as base for relativizing link and image urls.</p>\n\n<pre class=\"eval\">void updateBaseURL();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/chrisdavidmills\">chrisdavidmills</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>",
    "title": "nsIHTMLEditor"
}