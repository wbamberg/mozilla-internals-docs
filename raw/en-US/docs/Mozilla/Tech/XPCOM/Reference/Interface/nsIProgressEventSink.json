{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/netwerk/base/public/nsIProgressEventSink.idl\" rel=\"custom\">netwerk/base/public/nsIProgressEventSink.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThis interface is used to asynchronously convey channel status and progress information that is generally not critical to the processing of the channel. The information is intended to be displayed to the user in some meaningful way.\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 1.7 </span></div>\n</div><p></p>\n<p>This interface is used to asynchronously convey channel status and progress information that is generally not critical to the processing of the channel. The information is intended to be displayed to the user in some meaningful way.</p>\n<p>An implementation of this interface can be passed to a channel via the channel's notificationCallbacks attribute. See <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIChannel\" title=\"\">nsIChannel</a></code> for more info.</p>\n<p>The channel will begin passing notifications to the progress event sink after its asyncOpen method has been called. Notifications will cease once the channel calls its listener's onStopRequest method or once the channel is canceled (via <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIRequest#cancel()\">nsIRequest.cancel()</a></code>).</p>\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong>Â This interface is actually not specific to channels and may be used with other implementations of <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIRequest\" title=\"\">nsIRequest</a></code>.</div><p></p>\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n<table class=\"standard-table\">\n  <tbody>\n    <tr>\n      <td><code>void <a href=\"#onProgress()\">onProgress</a>(in nsIRequest aRequest, in nsISupports aContext, in unsigned long long aProgress, in unsigned long long aProgressMax);</code></td>\n    </tr>\n    <tr>\n      <td><code>void <a href=\"#onStatus()\">onStatus</a>(in nsIRequest aRequest, in nsISupports aContext, in nsresult aStatus, in wstring aStatusArg);</code></td>\n    </tr>\n  </tbody>\n</table>\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n<h3 id=\"onProgress()\" name=\"onProgress()\">onProgress()</h3>\n<p>Called to notify the event sink that progress has occurred for the given request.</p>\n<pre class=\"eval\">void onProgress(\n  in nsIRequest aRequest,\n  in nsISupports aContext,\n  in unsigned long long aProgress,\n  in unsigned long long aProgressMax\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl>\n  <dt>\n    <code>aRequest</code></dt>\n  <dd>\n    The request being observed (may QI to <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIChannel\" title=\"\">nsIChannel</a></code>).</dd>\n  <dt>\n    <code>aContext</code></dt>\n  <dd>\n    If <code>aRequest</code> is a channel, then this parameter is the listener context passed to <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIChannel#asyncOpen()\">nsIChannel.asyncOpen()</a></code>.</dd>\n  <dt>\n    <code>aProgress</code></dt>\n  <dd>\n    Numeric value in the range 0 to <code>aProgressMax</code> indicating the number of bytes transfered thus far.</dd>\n  <dt>\n    <code>aProgressMax</code></dt>\n  <dd>\n    Numeric value indicating maximum number of bytes that will be transfered (or 0xFFFFFFFFFFFFFFFF if total is unknown).</dd>\n</dl>\n<h3 id=\"onStatus()\" name=\"onStatus()\">onStatus()</h3>\n<p>Called to notify the event sink with a status message for the given request.</p>\n<pre class=\"eval\">void onStatus(\n  in nsIRequest aRequest,\n  in nsISupports aContext,\n  in nsresult aStatus,\n  in wstring aStatusArg\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl>\n  <dt>\n    <code>aRequest</code></dt>\n  <dd>\n    The request being observed (may QI to <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIChannel\" title=\"\">nsIChannel</a></code>).</dd>\n  <dt>\n    <code>aContext</code></dt>\n  <dd>\n    If <code>aRequest</code> is a channel, then this parameter is the listener context passed to <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIChannel#asyncOpen()\">nsIChannel.asyncOpen()</a></code>.</dd>\n  <dt>\n    <code>aStatus</code></dt>\n  <dd>\n    Status code (not necessarily an error code) indicating the state of the channel (usually the state of the underlying transport). see <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISocketTransport\" title=\"\">nsISocketTransport</a></code> for socket specific status codes.</dd>\n  <dt>\n    <code>aStatusArg</code></dt>\n  <dd>\n    Status code argument to be used with the string bundle service to convert the status message into localized, human readable text. the meaning of this parameter is specific to the value of the status code. for socket status codes, this parameter indicates the host:port associated with the status code.</dd>\n</dl>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/TheBits\">TheBits</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>",
    "title": "nsIProgressEventSink"
}