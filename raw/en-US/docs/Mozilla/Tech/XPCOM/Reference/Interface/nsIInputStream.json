{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/xpcom/io/nsIInputStream.idl\" rel=\"custom\">xpcom/io/nsIInputStream.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThis interface represents a readable stream of data.\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 17.0 (Firefox 17.0 / Thunderbird 17.0 / SeaMonkey 2.14)</span></div>\n</div><p></p>\n\n<p>An input stream may be \"blocking\" or \"non-blocking\" (see the <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInputStream#isNonBlocking()\">isNonBlocking()</a></code> method). A blocking input stream may suspend the calling thread in order to satisfy a call to <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInputStream#close()\">close()</a></code>, <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInputStream#available()\">available()</a></code>, <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInputStream#read()\">read()</a></code>, or <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInputStream#readSegments()\">readSegments()</a></code>. A non-blocking input stream, on the other hand, must not block the calling thread of execution.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> Blocking input streams are often read on a background thread to avoid locking up the main application thread. For this reason, it is generally the case that a blocking input stream should be implemented using thread-safe AddRef and Release.</div><p></p>\n\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code>unsigned long <a href=\"#available()\">available</a>();</code><span class=\"inlineIndicator deprecated deprecatedInline\" title=\"(Firefox 17.0 / Thunderbird 17.0 / SeaMonkey 2.14)\">Deprecated since Gecko 17.0</span></td>\n  </tr>\n  <tr>\n   <td><code>unsigned long long <a href=\"#available()\">available</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#close()\">close</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#isNonBlocking()\">isNonBlocking</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>unsigned long <a href=\"#read()\">read</a>(in charPtr aBuf, in unsigned long aCount);</code> <span class=\"inlineIndicator noscript noscriptInline\" title=\"This method may only be called from C++; don't use it from JavaScript.\">Native code only!</span></td>\n  </tr>\n  <tr>\n   <td><code>unsigned long <a href=\"#readSegments()\">readSegments</a>(in nsWriteSegmentFun aWriter, in voidPtr aClosure, in unsigned long aCount);</code> <span class=\"inlineIndicator noscript noscriptInline\" title=\"This method may only be called from C++; don't use it from JavaScript.\">Native code only!</span></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n\n<h3 id=\"available()\" name=\"available()\">available()</h3>\n\n<p>Determine number of bytes available in the stream.</p>\n\n<p>In addition to the number of bytes available in the stream, this method also informs the caller of the current status of the stream. A stream that is closed will throw an exception when this method is called. That enables the caller to know the condition of the stream before attempting to read from it. If a stream is at end-of-file, but not closed, then this method returns 0 bytes available.</p>\n\n<div class=\"note style-wrap\">\n<p><strong>Note:</strong> Some <code>nsIInputStream</code> implementations automatically <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInputStream#close()\">close()</a></code> when end-of-file is reached; others do not.</p>\n</div>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> This method should not be used to determine the total size of a stream, even if the stream corresponds to a local file. Moreover, since a stream may make available more than 2^32 bytes of data, this method is incapable of expressing the entire size of the underlying data source.</div><p></p>\n\n<pre class=\"eval\">unsigned long available();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Number of bytes currently available in the stream, or <code>PR_UINT32_MAX</code> if the size of the stream exceeds <code>PR_UINT32_MAX</code>.</p>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>&lt;other-error&gt;</code></dt>\n <dd>If the stream is closed due to some error condition.</dd>\n <dt><code>NS_BASE_STREAM_CLOSED</code></dt>\n <dd>If the stream is closed normally.</dd>\n</dl>\n\n<h3 id=\"close()\" name=\"close()\">close()</h3>\n\n<p>Close the stream. This method causes subsequent calls to <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInputStream#read()\">read()</a></code> and <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInputStream#readSegments()\">readSegments()</a></code> to return 0 bytes read to indicate end-of-file.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> The close method may be called more than once, but subsequent calls are ignored.</div><p></p>\n\n<pre class=\"eval\">void close();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h3 id=\"isNonBlocking()\" name=\"isNonBlocking()\">isNonBlocking()</h3>\n\n<pre class=\"eval\">boolean isNonBlocking();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p><code>true</code> if stream is non-blocking.</p>\n\n<p></p><div><span class=\"indicatorInHeadline noscript noscriptMethod\" title=\"This method may only be called from C++; don't use it from JavaScript.\">Native code only!</span><h3 id=\"read\">read</h3></div><p></p>\n\n<p>This method copies data from the stream into a buffer.</p>\n\n<pre class=\"eval\">unsigned long read(\n  in charPtr aBuf,\n  in unsigned long aCount\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aBuf</code></dt>\n <dd>The buffer into which the data from the stream is copied.</dd>\n <dt><code>aCount</code></dt>\n <dd>The size of the buffer, or the maximum number of bytes to copy from the stream.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>This method returns the number of bytes copied from the stream (may be less than aCount). It returns 0 to indicate end-of-file.</p>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>&lt;other-error&gt;</code></dt>\n <dd>On failure.</dd>\n <dt><code>NS_BASE_STREAM_WOULD_BLOCK</code></dt>\n <dd>Indicates that reading from the input stream would block the calling thread for indeterminate amount of time. This exception may only be thrown if <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInputStream#isNonBlocking()\">isNonBlocking()</a></code> returns true.</dd>\n</dl>\n\n<p></p><div><span class=\"indicatorInHeadline noscript noscriptMethod\" title=\"This method may only be called from C++; don't use it from JavaScript.\">Native code only!</span><h3 id=\"readSegments\">readSegments</h3></div><p></p>\n\n<p>This method provides direct access to the stream's internal buffer.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> A <code>nsIInputStream</code> is not required to implement this method. In some contexts, <code>readSegments</code> may be guaranteed to be implemented, but in general it is not. This method serves as an optimization.</div><p></p>\n\n<pre class=\"eval\">unsigned long readSegments(\n  in nsWriteSegmentFun aWriter,\n  in voidPtr aClosure,\n  in unsigned long aCount\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aWriter</code></dt>\n <dd>The \"consumer\" of the data to be read. A callback function that may be called once for each buffer segment contained in the stream. See <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsWriteSegmentFun\" title=\"\">nsWriteSegmentFun</a></code> for more details on this function.</dd>\n <dt><code>aClosure</code></dt>\n <dd>A parameter that is passed to aWriter each time it is called.</dd>\n <dt><code>aCount</code></dt>\n <dd>The maximum number of bytes to read from the stream.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>The number of bytes read from the stream (may be less than aCount). It returns 0 to indicate end-of-file.</p>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>&lt;other-error&gt;</code></dt>\n <dd>On failure.</dd>\n <dt><code>NS_ERROR_NOT_IMPLEMENTED</code></dt>\n <dd>Indicates that the stream does not have an internal buffer that can be accessed directly.</dd>\n <dt><code>NS_BASE_STREAM_WOULD_BLOCK</code></dt>\n <dd>Indicates that reading from the input stream would block the calling thread for indeterminate amount of time. This exception may only be thrown if <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInputStream#isNonBlocking()\">isNonBlocking()</a></code> returns true.</dd>\n</dl>\n\n<h2 id=\"Example\" name=\"Example\">Example</h2>\n\n<h4 id=\"Consume_all_data_from_an_input_stream_using_read().\">Consume all data from an input stream using <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInputStream#read()\">read()</a></code>.</h4>\n\n<pre>nsresult ConsumeStream(nsIInputStream* aStream)\n{\n  nsresult rv;\n  uint32_t numRead;\n  char buf[512];\n\n  while (1)\n  {\n    rv = aStream-&gt;Read(buf, sizeof(buf), &amp;numRead);\n    if (NS_FAILED(rv))\n    {\n      printf(\"### error reading stream: %x\\n\", rv);\n      break;\n    }\n    if (numRead == 0)\n      break;\n\n    // buf now contains numRead bytes of data\n  }\n\n  return rv;\n}\n</pre>\n\n<h4 id=\"Consume_all_data_from_an_input_stream_using_readSegments().\">Consume all data from an input stream using <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInputStream#readSegments()\">readSegments()</a></code>.</h4>\n\n<pre>static NS_METHOD AppendSegment(nsIInputStream* aStream,\n                               void* aClosure,\n                               const char* aFromSegment,\n                               uint32_t aToOffset,\n                               uint32_t aCount,\n                               uint32_t* aWriteCount)\n{\n  // aFromSegment now contains aCount bytes of data.\n\n  nsACString* pBuf = (nsACString*) aClosure;\n  pBuf-&gt;Append(aFromSegment, aCount);\n\n  // Indicate that we have consumed all of aFromSegment\n  *aWriteCount = aCount;\n  return NS_OK;\n}\n\n// Copy the contents of aStream into aResultBuf as one contiguous\n// buffer. Use ReadSegments to avoid an intermediate buffer copy.\nnsresult CopyStream(nsIInputStream* aStream, nsACString&amp; aResultBuf)\n{\n  uint32_t numRead;\n  return aStream-&gt;ReadSegments(AppendSegment, (void*) &amp;aResultBuf,\n                               PR_UINT32_MAX, &amp;numRead);\n}\n</pre>\n\n<h2 id=\"Remarks\" name=\"Remarks\">Remarks</h2>\n\n<p>This interface was frozen for <span title=\"\">Gecko 1.0</span>. See <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=124465\" title=\"FIXED: [meta] freeze specific necko APIs for mozilla 1.0\">bug 124465</a> for details. From <span title=\"(Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)\">Gecko 2.0</span> interfaces are no longer frozen.</p>\n\n<h2 id=\"See_also\" name=\"See_also\">See also</h2>\n\n<ul>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIWriteSegmentFun\" title=\"\">nsIWriteSegmentFun</a></code></li>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIScriptableInputStream\" title=\"\">nsIScriptableInputStream</a></code> - If you need to read a stream from JavaScript.</li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/jmh\">jmh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/baku\">baku</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mkato\">mkato</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/lmorchard\">lmorchard</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nickolay\">Nickolay</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sri%20krishnan\">Sri krishnan</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ted_Mielczarek\">Ted_Mielczarek</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Okome\">Okome</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Pmash\">Pmash</a>",
    "title": "nsIInputStream"
}