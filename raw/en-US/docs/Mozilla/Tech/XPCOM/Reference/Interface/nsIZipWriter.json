{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/modules/libjar/zipwriter/public/nsIZipWriter.idl\" rel=\"custom\">modules/libjar/zipwriter/public/nsIZipWriter.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThis interface provides an easy way for scripts to archive data in the Zip file format. Operations on the archive can be performed one by one, or queued for later execution.\n</span>\n\n  <div style=\"height: 42px; position: relative; padding: 2px; width: auto;\">\n\n  <div style=\"top: 22px; font-size: 11px; position: absolute;\">1.0</div>\n  \n  <div style=\"top: 22px; font-size: 11px; position: absolute; left: 0px; text-align: right; float: right; width: 100%;\">66</div>\n  \n  <div style=\"height: 8px; top: 16px; background: #dd0000; left: 0px; position: absolute; width: 8.571428571428571%;\"></div>\n  \n<div style=\"height: 8px; top: 16px; left: 8.571428571428571%; background: #00dd00; position: absolute; width: 91.42857142857143%;\" title=\"Introduced in Gecko 1.9 (Firefox 3)\"></div>\n\n<div style=\"top: 0px; font-size: 11px; position: absolute; left: 8.571428571428571%;\">Introduced</div>\n<div style=\"top: 22px; font-size: 11px; position: absolute; left: 8.571428571428571%;\">Gecko 1.9</div>\n\n</div>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 1.9 (Firefox 3)</span></div>\n</div><p></p>\n\n<p>Once all the operations you wish to perform are added to the queue, a call to <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIZipWriter#processQueue()\">processQueue()</a></code> will perform the operations in the order they were added to the queue. Operations performed on the queue throw any errors that occur out to the observer.</p>\n\n<p>Attempting to perform a synchronous operation on the interface while the background queue is in progress will throw an <code>NS_ERROR_IN_PROGRESS</code> exception.</p>\n\n<p>File and directory names should use slashes (\"/\") as separators and should not begin with a slash.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> Although it is not necessary to add directory entries in order to add file entries within them, some Zip utilities may have problems with that, so it may be best to add the directory entries explicitly first.</div><p></p>\n\n<p>Implemented by: <code>@mozilla.org/zipwriter;1</code>. To create an instance, use:</p>\n\n<pre class=\"eval\">var zipWriter = Components.classes[\"@mozilla.org/zipwriter;1\"]\n                .createInstance(Components.interfaces.nsIZipWriter);\n</pre>\n\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code>void <a href=\"#addEntryChannel()\">addEntryChannel</a>(in AUTF8String aZipEntry, in PRTime aModTime, in PRInt32 aCompression, in nsIChannel aChannel, in boolean aQueue);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#addEntryDirectory()\">addEntryDirectory</a>(in AUTF8String aZipEntry, in PRTime aModTime, in boolean aQueue);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#addEntryFile()\">addEntryFile</a>(in AUTF8String aZipEntry, in PRInt32 aCompression, in nsIFile aFile, in boolean aQueue);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#addEntryStream()\">addEntryStream</a>(in AUTF8String aZipEntry, in PRTime aModTime, in PRInt32 aCompression, in nsIInputStream aStream, in boolean aQueue);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#close()\">close</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>nsIZipEntry <a href=\"#getEntry()\">getEntry</a>(in AUTF8String aZipEntry);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#hasEntry()\">hasEntry</a>(in AUTF8String aZipEntry);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#open()\">open</a>(in nsIFile aFile, in PRInt32 aIoFlags);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#processQueue()\">processQueue</a>(in nsIRequestObserver aObserver, in nsISupports aContext);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#removeEntry()\">removeEntry</a>(in AUTF8String aZipEntry, in boolean aQueue);</code></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Attributes\" name=\"Attributes\">Attributes</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Attribute</td>\n   <td class=\"header\">Type</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>comment</code></td>\n   <td><code><a href=\"/en/ACString\" title=\"en/ACString\">ACString</a></code></td>\n   <td>Gets or sets the comment associated with the currently open Zip file.\n    <h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n    <dl>\n     <dt><code>NS_ERROR_NOT_INITIALIZED</code></dt>\n     <dd>If no zip file has been opened.</dd>\n    </dl>\n   </td>\n  </tr>\n  <tr>\n   <td><code>file</code></td>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFile\" title=\"\">nsIFile</a></code></code></td>\n   <td>The Zip file being written to. <strong>Read only.</strong></td>\n  </tr>\n  <tr>\n   <td><code>inQueue</code></td>\n   <td><code><a href=\"/en/boolean\" title=\"en/boolean\">boolean</a></code></td>\n   <td><code>true</code> if operations are being performed in the background queue, or <code>false</code> if background operations are not in progress. <strong>Read only.</strong></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Constants\" name=\"Constants\">Constants</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Constant</td>\n   <td class=\"header\">Value</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>COMPRESSION_NONE</code></td>\n   <td><code>0</code></td>\n   <td>Do not compress the file.</td>\n  </tr>\n  <tr>\n   <td><code>COMPRESSION_FASTEST</code></td>\n   <td><code>1</code></td>\n   <td>Use the fastest compression method when adding the file to the archive.</td>\n  </tr>\n  <tr>\n   <td><code>COMPRESSION_DEFAULT</code></td>\n   <td><code>6</code></td>\n   <td>Use the default compression method when adding the file to the archive.</td>\n  </tr>\n  <tr>\n   <td><code>COMPRESSION_BEST</code></td>\n   <td><code>9</code></td>\n   <td>Use the best compression method when adding the file to the archive.</td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n\n<h3 id=\"addEntryChannel()\" name=\"addEntryChannel()\">addEntryChannel()</h3>\n\n<p>Adds data from a channel to the Zip file. If the operation is performed on the queue then the channel will be opened asynchronously, otherwise the channel must support being opened synchronously.</p>\n\n<pre class=\"eval\">void addEntryChannel(\n  in AUTF8String aZipEntry,\n  in PRTime aModTime,\n  in PRInt32 aCompression,\n  in nsIChannel aChannel,\n  in boolean aQueue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aZipEntry</code></dt>\n <dd>The path of the file entry to add to the Zip file. This is the path it will be located at within the Zip file.\n <p></p><div class=\"blockIndicator note\"><strong>Note:</strong> You must use forward slashes ('/') in the path.</div><p></p>\n </dd>\n <dt><code>aModTime</code></dt>\n <dd>The modification time of the entry in microseconds.</dd>\n <dt><code>aCompression</code></dt>\n <dd>One of the <a href=\"#Constants\">compression constants</a>, indicating the compression method to use.</dd>\n <dt><code>aChannel</code></dt>\n <dd>The channel from which to get the data.</dd>\n <dt><code>aQueue</code></dt>\n <dd>If <code>true</code>, the operation is queued for later execution. If <code>false</code>, the operation is performed immediately. Will be performed when <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIZipWriter#processQueue()\">processQueue()</a></code> is called.</dd>\n</dl>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>NS_ERROR_NOT_INITIALIZED</code></dt>\n <dd>No Zip file is open.</dd>\n <dt><code>NS_ERROR_FILE_ALREADY_EXISTS</code></dt>\n <dd>The specified path already exists in the Zip file.</dd>\n <dt><code>NS_ERROR_IN_PROGRESS</code></dt>\n <dd>The Zip writer is already performing another operation.</dd>\n</dl>\n\n<h3 id=\"addEntryDirectory()\" name=\"addEntryDirectory()\">addEntryDirectory()</h3>\n\n<p>Adds a new directory entry to the Zip file. If aZipEntry does not end with \"/\" then it will be added.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> Although it is not necessary to add directory entries in order to add file entries within them, some Zip utilities may have problems with that, so it may be best to add the directory entries explicitly first.</div><p></p>\n\n<pre class=\"eval\">void addEntryDirectory(\n  in AUTF8String aZipEntry,\n  in PRTime aModTime,\n  in boolean aQueue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aZipEntry</code></dt>\n <dd>The path of the directory entry to add to the Zip file.<div class=\"blockIndicator note\"><strong>Note:</strong> You must use forward slashes in the path. (A forward slash is '/')</div>\n <div class=\"note\">\n <p><strong>Detail:</strong> This aZipEntry is very important, this example demonstrates its usage:</p>\n\n <pre class=\"eval\">var zw = Cc['@mozilla.org/zipwriter;1'].createInstance(Ci.nsIZipWriter);\nvar myZipFile = fu.File('C:\\\\MyZipFile.zip'); //this file will be creatd in C drive\nvar pr = {PR_RDONLY: 0x01, PR_WRONLY: 0x02, PR_RDWR: 0x04, PR_CREATE_FILE: 0x08, PR_APPEND: 0x10, PR_TRUNCATE: 0x20, PR_SYNC: 0x40, PR_EXCL: 0x80};\nzw.open(xpi, pr.PR_WRONLY | pr.PR_CREATE_FILE | pr.PR_TRUNCATE); //xpi file is created if not there, if it is there it is truncated/deleted\n\nvar fileToAddToZip = FileUtils.File('C:\\\\add this file.txt');\nvar saveInZipAs = 'blah.txt';\nzw.addEntryFile(saveInZipAs, Ci.nsIZipWriter.COMPRESSION_NONE, fileToAddToZip, false);</pre>\n\n <p>In the above example, the file (\"add this file.txt\") located at \"C:\\add this file.txt\" will be added to the zip file \"C:\\MyZipFile.zip\", however in the zip file this file (\"add this file.txt\") will be named \"blah.txt\". If <code>saveInZipAs </code>was equal to <code>\"add this file.txt\"</code> then in the zip file it will also be named \"add this file.txt\"</p>\n\n <p> </p>\n\n <p><strong>Further Detail: </strong>This example gives futher detail on the importance of forward slashes</p>\n\n <pre class=\"eval\">var fileToAddToZip = FileUtils.File('C:\\\\add this file.txt');\nvar saveInZipAs = 'sub folder/blah.txt'; //DO NOT USE BACKWARD SLASH for example do not do: 'sub folder\\\\blah.txt'. Using backward slash will not throw any errors but if this was an xpi file, firefox would not be able to read it properly.\nzw.addEntryFile(saveInZipAs, Ci.nsIZipWriter.COMPRESSION_NONE, fileToAddToZip, false);</pre>\n\n <p>This example creates a folder in the zip called \"sub folder\" and then adds \"C:\\add this file.txt\" to it, but it will be called \"blah.txt\".</p>\n </div>\n </dd>\n <dt><code>aModTime</code></dt>\n <dd>The modification time of the entry in microseconds.</dd>\n <dt><code>aQueue</code></dt>\n <dd>If <code>true</code>, the operation is queued for later execution. If <code>false</code>, the operation is performed immediately. Will be performed when <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIZipWriter#processQueue()\">processQueue()</a></code> is called.</dd>\n</dl>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>NS_ERROR_NOT_INITIALIZED</code></dt>\n <dd>No Zip file is open.</dd>\n <dt><code>NS_ERROR_FILE_ALREADY_EXISTS</code></dt>\n <dd>The specified path already exists in the Zip file.</dd>\n <dt><code>NS_ERROR_IN_PROGRESS</code></dt>\n <dd>The Zip writer is already performing another operation.</dd>\n</dl>\n\n<h3 id=\"addEntryFile()\" name=\"addEntryFile()\">addEntryFile()</h3>\n\n<p>Adds a new file or directory to the Zip file. If the specified file is a directory, this call is equivalent to:</p>\n\n<pre class=\"eval\">addEntryDirectory(aZipEntry, aFile.lastModifiedTime, aQueue);\n</pre>\n\n<pre class=\"eval\">void addEntryFile(\n  in AUTF8String aZipEntry,\n  in PRInt32 aCompression,\n  in nsIFile aFile,\n  in boolean aQueue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aZipEntry</code></dt>\n <dd>The path of the file entry to add to the Zip file. This is the path it will be located at within the Zip file. <div class=\"blockIndicator note\"><strong>Note:</strong> You must use forward slashes in the path. (A forward slash is '/')</div></dd>\n <dt><code>aCompression</code></dt>\n <dd>One of the <a href=\"#Constants\">compression constants</a>, indicating the compression method to use.</dd>\n <dt><code>aFile</code></dt>\n <dd>The file from which to get the data and modification time.</dd>\n <dt><code>aQueue</code></dt>\n <dd>If <code>true</code>, the operation is queued for later execution. If <code>false</code>, the operation is performed immediately. Will be performed when <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIZipWriter#processQueue()\">processQueue()</a></code> is called.</dd>\n</dl>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>NS_ERROR_NOT_INITIALIZED</code></dt>\n <dd>No Zip file is open.</dd>\n <dt><code>NS_ERROR_FILE_ALREADY_EXISTS</code></dt>\n <dd>The specified path already exists in the Zip file.</dd>\n <dt><code>NS_ERROR_IN_PROGRESS</code></dt>\n <dd>The Zip writer is already performing another operation.</dd>\n <dt><code>NS_ERROR_FILE_NOT_FOUND</code></dt>\n <dd>If file does not exist.</dd>\n</dl>\n\n<h3 id=\"addEntryStream()\" name=\"addEntryStream()\">addEntryStream()</h3>\n\n<p>Adds data from an input stream to the Zip file.</p>\n\n<pre class=\"eval\">void addEntryStream(\n  in AUTF8String aZipEntry,\n  in PRTime aModTime,\n  in PRInt32 aCompression,\n  in nsIInputStream aStream,\n  in boolean aQueue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aZipEntry</code></dt>\n <dd>The path of the file entry to add to the Zip file. This is the path it will be located at within the Zip file. <div class=\"blockIndicator note\"><strong>Note:</strong> You must use forward slashes in the path.</div></dd>\n <dt><code>aModTime</code></dt>\n <dd>The modification time of the entry in microseconds.</dd>\n <dt><code>aCompression</code></dt>\n <dd>One of the <a href=\"#Constants\">compression constants</a>, indicating the compression method to use.</dd>\n <dt><code>aStream</code></dt>\n <dd>The input stream from which to get the data.</dd>\n <dt><code>aQueue</code></dt>\n <dd>If <code>true</code>, the operation is queued for later execution. If <code>false</code>, the operation is performed immediately. Will be performed when <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIZipWriter#processQueue()\">processQueue()</a></code> is called.</dd>\n</dl>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>NS_ERROR_NOT_INITIALIZED</code></dt>\n <dd>No Zip file is open.</dd>\n <dt><code>NS_ERROR_FILE_ALREADY_EXISTS</code></dt>\n <dd>The specified path already exists in the Zip file.</dd>\n <dt><code>NS_ERROR_IN_PROGRESS</code></dt>\n <dd>The Zip writer is already performing another operation.</dd>\n</dl>\n\n<h3 id=\"close()\" name=\"close()\">close()</h3>\n\n<p>Closes the Zip file.</p>\n\n<pre class=\"eval\">void close();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>NS_ERROR_NOT_INITIALIZED</code></dt>\n <dd>No Zip file is open.</dd>\n <dt><code>NS_ERROR_IN_PROGRESS</code></dt>\n <dd>The Zip writer is already performing another operation.</dd>\n</dl>\n\n<p>Other errors may be thrown if a failure to complete the Zip file occurs.</p>\n\n<h3 id=\"getEntry()\" name=\"getEntry()\">getEntry()</h3>\n\n<p>Returns a specified entry or <code>null</code> if there is no such entry in the current Zip file.</p>\n\n<pre class=\"eval\">nsIZipEntry getEntry(\n  in AUTF8String aZipEntry\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aZipEntry</code></dt>\n <dd>The path of the file entry to get.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>An <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIZipEntry\" title=\"\">nsIZipEntry</a></code> object describing the specified entry, or <code>null</code> if there is no such entry.</p>\n\n<h3 id=\"hasEntry()\" name=\"hasEntry()\">hasEntry()</h3>\n\n<p>Determines whether or not a specific entry exists in the Zip file.</p>\n\n<pre class=\"eval\">boolean hasEntry(\n  in AUTF8String aZipEntry\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aZipEntry</code></dt>\n <dd>The path of the file entry to check for.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p><code>true</code> if there is an entry with the given path in the Zip file, otherwise returns <code>false</code>.</p>\n\n<h3 id=\"open()\" name=\"open()\">open()</h3>\n\n<p>Opens the specified Zip file.</p>\n\n<pre class=\"eval\">void open(\n  in nsIFile aFile,\n  in PRInt32 aIoFlags\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aFile</code></dt>\n <dd>The Zip file to open.</dd>\n <dt><code>aIoFlags</code></dt>\n <dd>The open flags for the Zip file, from <code>prio.h</code>.</dd>\n</dl>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>NS_ERROR_ALREADY_INITIALIZED</code></dt>\n <dd>A Zip file is already open.</dd>\n <dt><code>NS_ERROR_INVALID_ARG</code></dt>\n <dd>The <code>aFile</code> parameter is <code>null</code>.</dd>\n <dt><code>NS_ERROR_FILE_NOT_FOUND</code></dt>\n <dd>The specified file was not found and the flags didn't permit creating it. Or the directory for the file does not exist.</dd>\n <dt><code>NS_ERROR_FILE_CORRUPTED</code></dt>\n <dd>The specified file is not a recognizable Zip file.</dd>\n</dl>\n\n<p>Other errors may be thrown upon failing to open the file, such as if the file is corrupt or in an unsupported format.</p>\n\n<h3 id=\"processQueue()\" name=\"processQueue()\">processQueue()</h3>\n\n<p>Processes all queued items until the entire queue has been processed or an error occurs. The observer is notified when the first operation begins and when the last operation completes.</p>\n\n<p>Any failures are passed to the observer.</p>\n\n<p>The Zip writer will be busy until the queue is complete or an error halts processing of the queue early. In the event of an early failure, the remaining items stay in the queue; calling <code>processQueue()</code> again will continue where operations left off.</p>\n\n<pre class=\"eval\">void processQueue(\n  in nsIRequestObserver aObserver,\n  in nsISupports aContext\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aObserver</code></dt>\n <dd>The observer to receive notifications from the queue.</dd>\n <dt><code>aContext</code></dt>\n <dd>The context to pass to the observer.</dd>\n</dl>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>NS_ERROR_NOT_INITIALIZED</code></dt>\n <dd>No Zip file is open.</dd>\n <dt><code>NS_ERROR_IN_PROGRESS</code></dt>\n <dd>The queue is already in progress.</dd>\n</dl>\n\n<h3 id=\"removeEntry()\" name=\"removeEntry()\">removeEntry()</h3>\n\n<p>Removes an entry from the Zip file.</p>\n\n<pre class=\"eval\">void removeEntry(\n  in AUTF8String aZipEntry,\n  in boolean aQueue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aZipEntry</code></dt>\n <dd>The path of the entry to remove from the Zip file.</dd>\n <dt><code>aQueue</code></dt>\n <dd><code>true</code> to place the remove operation into the queue, or <code>false</code> to process it at once. Will be performed when <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIZipWriter#processQueue()\">processQueue()</a></code> is called.</dd>\n</dl>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>NS_ERROR_NOT_INITIALIZED</code></dt>\n <dd>No Zip file is open.</dd>\n <dt><code>NS_ERROR_IN_PROGRESS</code></dt>\n <dd>The queue is already in progress.</dd>\n <dt><code>NS_ERROR_FILE_NOT_FOUND</code></dt>\n <dd>No entry with the given path exists.</dd>\n</dl>\n\n<p>Other errors may occur if updating the Zip file fails.</p>\n\n<h2 id=\"Example\" name=\"Example\">Example</h2>\n\n<h4 id=\"Adding_a_comment_to_a_Zip_file\" name=\"Adding_a_comment_to_a_Zip_file\">Adding a comment to a Zip file</h4>\n\n<pre class=\"brush: js\">var zipWriter = Components.Constructor(\"@mozilla.org/zipwriter;1\", \"nsIZipWriter\");\nvar zipW = new zipWriter();\n\nzipW.open(myZipFilePath, PR_RDWR | PR_CREATE_FILE | PR_TRUNCATE);\nzipW.comment = \"This is a comment.\";\nzipW.close();\n</pre>\n\n<p><code>PR_RDWR</code> and friends are constants that are not in any interface (see <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=433295\" title=\"Make prio.h constants easier to access from JS\">bug 433295</a>), so for the code above to work you need something like:</p>\n\n<pre class=\"brush: js\">const PR_RDONLY      = 0x01;\nconst PR_WRONLY      = 0x02;\nconst PR_RDWR        = 0x04;\nconst PR_CREATE_FILE = 0x08;\nconst PR_APPEND      = 0x10;\nconst PR_TRUNCATE    = 0x20;\nconst PR_SYNC        = 0x40;\nconst PR_EXCL        = 0x80;\n</pre>\n\n<p>See <a href=\"/en/PR_Open#Parameters\" title=\"en/PR_Open#Parameters\">PR_Open Documentation</a> or <a class=\"external\" href=\"/en/Code_snippets/File_I//O\" title=\"en/Code_snippets/File_I//O\">File I/O Snippets</a> for details.</p>\n\n<h4 id=\"Adding_a_file_to_a_Zip_archive\">Adding a file to a Zip archive</h4>\n\n<p>This code synchronously adds the file specified by the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFile\" title=\"\">nsIFile</a></code> <code>theFile</code> to the Zip archive.</p>\n\n<pre class=\"brush: js\">var zipWriter = Components.Constructor(\"@mozilla.org/zipwriter;1\", \"nsIZipWriter\");\nvar zipW = new zipWriter();\n\nzipW.open(myZipFilePath, PR_RDWR | PR_CREATE_FILE | PR_TRUNCATE);\nzipW.addEntryFile(\"Path/For/This/File/In/Zip Archive\", Components.interfaces.nsIZipWriter.COMPRESSION_DEFAULT, theFile, false);\nzipW.close();\n</pre>\n\n<p>The argument <code>myZipFilePath</code> isn't a path but rather it has to be an <code>nsIFile</code> instance specifying the location of the new zip file. The file need not exist, but the directory that contains it (nsIFile.parent) must exist.</p>\n\n<h4 id=\"Adding_a_comment_to_a_Zip_file\" name=\"Adding_a_comment_to_a_Zip_file\">Recursively Add All Contents of a Directory to Zip File</h4>\n\n<p>This example below can be copied and pasted into your scratchpad, set the environment to \"Browser\" and can run. What it does is shows a File Picker dialog and asks you to pick a folder. Once you pick a folder, it will create a zip file inside this folder with the same name as the folder. It will then recursively go through all contents in the folder selected and add them into this zip file. This example is also a good of example of the <code>in AUTF8String aZipEntry </code>argument of addEntryFile and how it is used, this entry is very important, it is basically what to save the file as in the zip, you can take a file \"blah.exe\" and make it save in the zip as \"hi and no extension\".</p>\n\n<pre class=\"brush: js\">var {Cc: classes, Ci: interfaces, Cu: utils} = Components;\nvar zw = Cc['@mozilla.org/zipwriter;1'].createInstance(Ci.nsIZipWriter);\nvar pr = {PR_RDONLY: 0x01, PR_WRONLY: 0x02, PR_RDWR: 0x04, PR_CREATE_FILE: 0x08, PR_APPEND: 0x10, PR_TRUNCATE: 0x20, PR_SYNC: 0x40, PR_EXCL: 0x80}; //https://developer.mozilla.org/en-US/docs/PR_Open#Parameters\nvar fu = Cu.import('resource://gre/modules/FileUtils.jsm').FileUtils;\n\nvar fp = Cc['@mozilla.org/filepicker;1'].createInstance(Ci.nsIFilePicker);\nfp.init(window, 'Select Directory to Compile', Ci.nsIFilePicker.modeGetFolder);\nfp.appendFilters(Ci.nsIFilePicker.filterAll | Ci.nsIFilePicker.filterText);\n\nvar rv = fp.show();\nif (rv == Ci.nsIFilePicker.returnOK) {\n    var dir = fp.file;\n    //dir must exist, as the user selected it. but note that if dir doesnt exist zw.open throws problems\n    //var path = fp.file.path; //returns C:\\Users\\3K2KYC1\\Documents\\prefs\\prefs\n    \n    var xpi = fu.File(dir.path + '\\\\' + dir.leafName + '.zip');\n    \n    zw.open(xpi, pr.PR_RDWR | pr.PR_CREATE_FILE | pr.PR_TRUNCATE); //PR_TRUNCATE overwrites if file exists //PR_CREATE_FILE creates file if it dne //PR_RDWR opens for reading and writing\n    \n    //recursviely add all    \n    var dirArr = [dir]; //adds dirs to this as it finds it\n    for (var i=0; i&lt;dirArr.length; i++) {\n        Cu.reportError('adding contents of dir['+i+']: ' + dirArr[i].leafName + ' PATH: ' + dirArr[i].path);\n        var dirEntries = dirArr[i].directoryEntries;\n        while (dirEntries.hasMoreElements()) {\n        \tvar entry = dirEntries.getNext().QueryInterface(Ci.nsIFile); //entry is instance of nsiFile so here https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIFile\n        \tif (entry.path == xpi.path) {\n        \t\tCu.reportError('skipping entry - will not add this entry to the zip file - as this is the zip itself: \"' + xpi.path + '\" leafName:\"' + xpi.leafName + '\"');\n        \t\tcontinue;\n        \t}\n        \tif (entry.isDirectory()) {\n        \t   dirArr.push(entry);\n        \t}\n            var relPath = entry.path.replace(dirArr[0].path, ''); //need relative because we need to use this for telling addEntryFile where in the zip it should create it, and because zip is a copy of the directory\n            Cu.reportError('+' + relPath); //makes it relative to directory the parent dir (dir[0]) so it can succesfully populate files with same names but different folders in this parent dir, needed because recursviely going through all dirs\n            var saveInZipAs = relPath.substr(1); //need to get ride of the first '\\' forward slash at start otherwise it puts every file added in a folder of its own.\n            saveInZipAs = saveInZipAs.replace(/\\\\/g,'/'); //remember MUST use forward slash (/)\n            Cu.reportError('--' + saveInZipAs);\n            zw.addEntryFile(saveInZipAs, Ci.nsIZipWriter.COMPRESSION_NONE, entry, false);\n        }\n    }\n    zw.close()\n}\n</pre>\n\n<h4 id=\"Other_example\" name=\"Other_example\">Other examples</h4>\n\n<p>For other examples, take a look at the unit tests in the source tree:</p>\n\n<ul>\n <li><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/modules/libjar/zipwriter/test/unit\" rel=\"custom\">modules/libjar/zipwriter/test/unit</a></code></li>\n</ul>\n\n<h2 id=\"See_also\" name=\"See_also\">See also</h2>\n\n<ul>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIZipReader\" title=\"\">nsIZipReader</a></code></li>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFile\" title=\"\">nsIFile</a></code></li>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIChannel\" title=\"\">nsIChannel</a></code></li>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInputStream\" title=\"\">nsIInputStream</a></code></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/SphinxKnight\">SphinxKnight</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/MKaply\">MKaply</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Noitidart\">Noitidart</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mh512\">Mh512</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Kohei\">Kohei</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Smi\">Smi</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Johnjbarton\">Johnjbarton</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Miksago\">Miksago</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nickolay\">Nickolay</a>",
    "title": "nsIZipWriter"
}