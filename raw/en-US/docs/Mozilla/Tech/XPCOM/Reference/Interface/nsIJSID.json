{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/js/src/xpconnect/idl/xpcjsid.idl\" rel=\"custom\">js/src/xpconnect/idl/xpcjsid.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThis interface provides information about a contract or interface.\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 1.9 (Firefox 3)</span></div>\n</div><p></p>\n<p>The following methods return objects that implement this interface:</p>\n<pre>Components.interfaces.name\nComponents.classes[contract]\nComponents.interfacesById[uuid]\nComponents.classesById[cid]\n</pre>\n<p>The first two cases create a named JSID while the last two cases create an unnamed JSID. An unnamed JSID also results when you implement a function that is passed an <code>nsIIDRef </code>parameter, such as <code>QueryInterface()</code>. Note that for these cases of JSID the specified class or interface must exist and be scriptable.</p>\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n<table class=\"standard-table\"> <tbody> <tr> <td><code>boolean <a href=\"#equals()\">equals</a>(in nsIJSID other);</code></td> </tr> <tr> <td><code>const nsID* <a href=\"#getID()\">getID</a>();</code> <span class=\"inlineIndicator notXPCOM notXPCOMInline\" title=\"Only use this method if you REALLY know what you are doing!\">Violates the XPCOM interface guidelines</span> </td> </tr> <tr> <td><code>void <a href=\"#initialize()\">initialize</a>(in string idString);</code></td> </tr> <tr> <td><code>string <a href=\"#toString()\">toString</a>();</code></td> </tr> </tbody>\n</table>\n<h2 id=\"Attributes\" name=\"Attributes\">Attributes</h2>\n<table class=\"standard-table\"> <tbody> <tr> <td class=\"header\">Attribute</td> <td class=\"header\">Type</td> <td class=\"header\">Description</td> </tr> <tr> <td><code>id</code></td> <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDPtr\" title=\"\">nsIDPtr</a></code></code></td> <td><strong>Read only.</strong> <span class=\"inlineIndicator noscript noscriptInline\" title=\"This method may only be called from C++; don't use it from JavaScript.\">Native code only!</span> <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 3)\">Obsolete since Gecko 1.9</span> The internal <code>nsID</code>.</td> </tr> <tr> <td><code>name</code></td> <td><code><a href=\"/en/string\" title=\"en/string\">string</a></code></td> <td><strong>Read only.</strong> The name of the JSID, if it was set.</td> </tr> <tr> <td><code>number</code></td> <td><code><a href=\"/en/string\" title=\"en/string\">string</a></code></td> <td><strong>Read only.</strong> The string representation of the internal <code>nsID</code>.</td> </tr> <tr> <td><code>valid</code></td> <td><code><a href=\"/en/boolean\" title=\"en/boolean\">boolean</a></code></td> <td><strong>Read only.</strong> Returns true if the JSID has been initialised.</td> </tr> </tbody>\n</table>\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n<h3 id=\"equals()\" name=\"equals()\">equals()</h3>\n<p>This method determines if this <code>nsIJSID</code> has the same nsID as another <code>nsIJSID</code>.</p>\n<pre class=\"eval\">boolean equals(\n  in nsIJSID other\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>other</code></dt> <dd>The other <code>nsIJSID</code> to compare to.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p><code>true</code> if the <code>nsIJSID</code>'s are valid and have the same <code>nsID</code>, otherwise <code>false</code>.</p>\n<p></p><div>\n  <span class=\"indicatorInHeadline notXPCOM notXPCOMMethod\" title=\"Only use this method if you REALLY know what you are doing!\">Violates the XPCOM interface guidelines</span>\n  <h3 id=\"getID()\">getID()</h3>\n</div><p></p>\n<p></p>\n<pre class=\"eval\">const nsID* getID();\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<p>None.</p>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>A pointer to the internal <code>nsID</code> structure.</p>\n<h3 id=\"initialize()\" name=\"initialize()\">initialize()</h3>\n<p>Initializes the JSID.</p>\n<pre class=\"eval\">void initialize(\n  in string idString\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>idString</code></dt> <dd>The number to initialize the JSID, in string format, e.g. <code>{00000000-0000-0000-c000-000000000046}</code>. A JSID can only be initialized once.</dd>\n</dl>\n<h3 id=\"toString()\" name=\"toString()\">toString()</h3>\n<p>This methods returns a string representation of the object.</p>\n<pre class=\"eval\">string toString();\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<p>None.</p>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>The name of the JSID if it has one, otherwise the string representation of its <code>nsID</code>.</p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Neil\">Neil</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Andreas%20Wuest\">Andreas Wuest</a>",
    "title": "nsIJSID"
}