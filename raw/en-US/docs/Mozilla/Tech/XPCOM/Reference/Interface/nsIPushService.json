{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/dom/interfaces/push/nsIPushService.idl\" rel=\"custom\">dom/interfaces/push/nsIPushService.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nA service for components to subscribe and receive push messages from remote servers.\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 46.0 (Firefox 46.0 / Thunderbird 46.0 / SeaMonkey 2.43)</span></div>\n</div><p></p>\n\n<p>Push lets a remote server send payloads to a web site, add-on, or component running in the browser. <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIPushService\" title=\"\">nsIPushService</a></code> supports the <a class=\"external\" href=\"https://w3c.github.io/push-api/\" hreflang=\"en\" lang=\"en\" title=\"The 'Push API' specification\">Push API</a> implementation in Firefox, and can be used directly from privileged code to create system subscriptions.</p>\n\n<p>Implemented by <code>@mozilla.org/push/Service;1</code> as a service:</p>\n\n<pre class=\"eval\">const pushService = Components.classes[\"@mozilla.org/push/Service;1\"]\n                              .getService(Components.interfaces.nsIPushService);\n</pre>\n\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code>void <a href=\"#subscribe()\">subscribe</a>(in DOMString scope, in nsIPrincipal principal, in nsIPushSubscriptionCallback callback);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#getSubscription()\">getSubscription</a>(in DOMString scope, in nsIPrincipal principal, in nsIPushSubscriptionCallback callback);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#unsubscribe()\">unsubscribe</a>(in DOMString scope, in nsIPrincipal principal, in nsIUnsubscribeResultCallback callback);</code></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n\n<h3 id=\"subscribe()\" name=\"subscribe()\">subscribe()</h3>\n\n<p>Creates a push subscription.</p>\n\n<pre class=\"eval\">void subscribe(\n  in DOMString scope,\n  in nsIPrincipal principal,\n  in nsIPushSubscriptionCallback callback\n);\n</pre>\n\n<h4 id=\"subscribe-parameters\" name=\"subscribe-parameters\">Parameters</h4>\n\n<dl>\n <dt><code>scope</code></dt>\n <dd>The <a href=\"/en-US/docs/Web/API/ServiceWorkerRegistration/scope\" title=\"The scope read-only property of the ServiceWorkerRegistration interface returns a unique identifier for a service worker registration. The service worker must be on the same origin as the document that registers theÂ ServiceWorker.\"><code>ServiceWorkerRegistration.scope</code></a> for a service worker subscription, or a unique <a class=\"glossaryLink\" href=\"/en-US/docs/Glossary/URL\" title=\"URL: Uniform Resource Locator (URL) is a text string specifying where a resource can be found on the Internet.\">URL</a> (for example, <code>chrome://my-module/push</code>) for a system subscription.</dd>\n <dt><code>principal</code></dt>\n <dd>The <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIPrincipal\" title=\"\">nsIPrincipal</a></code> to associate with the subscription. Privileged code should pass the <a href=\"/en-US/docs/Mozilla/Gecko/Script_security#System_principal\">system principal</a>.</dd>\n <dt><code>callback</code></dt>\n <dd>The callback to call when the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIPushSubscription\" title=\"\">nsIPushSubscription</a></code> is created.</dd>\n</dl>\n\n<div class=\"note\">\n<p>Passing the system principal exempts the subscription from permission checks and background messages quotas, which are enforced for service worker subscriptions.</p>\n</div>\n\n<h4 id=\"subscribe-example\" name=\"subscribe-example\">Example</h4>\n\n<pre class=\"brush: javascript\">const { classes: Cc, interfaces: Ci, utils: Cu } = Components;\n\nconst scriptSecurityManager = Cc[\"@mozilla.org/scriptsecuritymanager;1\"]\n                                .getService(Ci.nsIScriptSecurityManager);\nconst pushService = Cc[\"@mozilla.org/push/Service;1\"]\n                      .getService(Ci.nsIPushService);\n\npushService.subscribe(\n  \"chrome://my-module/push\",\n  scriptSecurityManager.getSystemPrincipal(),\n  (code, subscription) =&gt; {\n    if (!Components.isSuccessCode(code)) {\n      Cu.reportError(\"Error creating subscription: \" + code);\n      return;\n    }\n    // `subscription` implements `nsIPushSubscription`.\n    subscription.endpoint;\n    subscription.getKey(\"p256dh\");\n    subscription.getKey(\"auth\");\n  }\n);\n</pre>\n\n<h3 id=\"getSubscription()\" name=\"getSubscription()\">getSubscription()</h3>\n\n<p>Fetches an existing subscription.</p>\n\n<pre class=\"eval\">void getSubscription(\n  in DOMString scope,\n  in nsIPrincipal principal,\n  in nsIPushSubscriptionCallback callback\n);\n</pre>\n\n<h4 id=\"getSubscription-parameters\" name=\"getSubscription-parameters\">Parameters</h4>\n\n<dl>\n <dt><code>scope</code></dt>\n <dd>The unique scope URL, as passed to <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIPushService#subscribe()\">nsIPushService.subscribe()</a></code>.</dd>\n <dt><code>principal</code></dt>\n <dd>The subscription <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIPrincipal\" title=\"\">nsIPrincipal</a></code>, as passed to <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIPushService#subscribe()\">nsIPushService.subscribe()</a></code>.</dd>\n <dt><code>callback</code></dt>\n <dd>The callback to call with the fetched <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIPushSubscription\" title=\"\">nsIPushSubscription</a></code>.</dd>\n</dl>\n\n<h4 id=\"getSubscription-example\" name=\"getSubscription-example\">Example</h4>\n\n<pre class=\"brush: javascript\">pushService.getSubscription(\n  \"chrome://my-module/push\",\n  scriptSecurityManager.getSystemPrincipal(),\n  (code, subscription) =&gt; {\n    if (!Components.isSuccessCode(code)) {\n      Cu.reportError(\"Error fetching subscription: \" + code);\n      return;\n    }\n    // `subscription == null` if the `(scope, principal)` pair doesn't have a\n    // push subscription. Otherwise, it's an instance of `nsIPushSubscription`.\n  }\n);\n</pre>\n\n<h3 id=\"unsubscribe()\" name=\"unsubscribe()\">unsubscribe()</h3>\n\n<p>Drops an existing push subscription.</p>\n\n<pre class=\"eval\">void unsubscribe(\n  in DOMString scope,\n  in nsIPrincipal principal,\n  in nsIUnsubscribeResultCallback callback\n);\n</pre>\n\n<h4 id=\"unsubscribe-parameters\" name=\"unsubscribe-parameters\">Parameters</h4>\n\n<dl>\n <dt><code>scope</code></dt>\n <dd>The unique scope URL, as passed to <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIPushService#subscribe()\">nsIPushService.subscribe()</a></code>.</dd>\n <dt><code>principal</code></dt>\n <dd>The subscription <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIPrincipal\" title=\"\">nsIPrincipal</a></code>, as passed to <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIPushService#subscribe()\">nsIPushService.subscribe()</a></code>.</dd>\n <dt><code>callback</code></dt>\n <dd>The callback to call when the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIPushSubscription\" title=\"\">nsIPushSubscription</a></code> is dropped.</dd>\n</dl>\n\n<h4 id=\"unsubscribe-example\" name=\"unsubscribe-example\">Example</h4>\n\n<pre class=\"brush: javascript\">pushService.unsubscribe(\n  \"chrome://my-module/push\",\n  scriptSecurityManager.getSystemPrincipal(),\n  (code, ok) =&gt; {\n    if (!Components.isSuccessCode(code)) {\n      Cu.reportError(\"Error unsubscribing: \" + code);\n      return;\n    }\n    // `ok === true` if the subscription was removed, or `false` if the\n    // `(scope, principal)` pair didn't have a subscription.\n  }\n);\n</pre>\n\n<h2 id=\"Receiving_Push_Messages\" name=\"Receiving_Push_Messages\">Receiving Push Messages</h2>\n\n<p>Subscriptions created from privileged code use XPCOM observer notifications instead of service worker events. You can use the global <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIObserverService\" title=\"\">nsIObserverService</a></code> to listen for these notifications.</p>\n\n<div class=\"warning\">\n<p>Messages sent to system subscriptions are broadcasted to all <code>push-message</code> observers. Your <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIObserver\" title=\"\">nsIObserver</a></code> should ensure the <code>data</code> parameter matches your subscription scope. Otherwise, your code may try to handle messages meant for other subscriptions.</p>\n</div>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Topic</td>\n   <td class=\"header\">Subject</td>\n   <td class=\"header\">Data</td>\n   <td class=\"header\">Description</td>\n   <td class=\"header\"><a class=\"external\" href=\"https://w3c.github.io/push-api/\" hreflang=\"en\" lang=\"en\" title=\"The 'Push API' specification\">Push API</a> Counterpart</td>\n  </tr>\n  <tr>\n   <td><code>push-message</code></td>\n   <td><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIPushMessage\" title=\"\">nsIPushMessage</a></code> if the message has a payload; <code>null</code> for blank messages.</td>\n   <td>Scope</td>\n   <td>Fired when a push message is sent to a system subscription.</td>\n   <td><a href=\"/en-US/docs/Web/API/ServiceWorkerGlobalScope/onpush\" title=\"The ServiceWorkerGlobalScope.onpush event of the ServiceWorkerGlobalScope interface is fired whenever a push message is received by a service worker via a push server.\"><code>ServiceWorkerGlobalScope.onpush</code></a></td>\n  </tr>\n  <tr>\n   <td><code>push-subscription-change</code></td>\n   <td><code>null</code></td>\n   <td>Scope</td>\n   <td>Fired when the Push server drops a subscription, or the subscription identifier changes.</td>\n   <td><a href=\"/en-US/docs/Web/API/ServiceWorkerGlobalScope/onpushsubscriptionchange\" title=\"The ServiceWorkerGlobalScope.onpushsubscriptionchange event of the ServiceWorkerGlobalScope interface is fired to indicate a change in push subscription that was triggered outside the application's control, e.g. when browser refresh the push subscription.\"><code>ServiceWorkerGlobalScope.onpushsubscriptionchange</code></a></td>\n  </tr>\n </tbody>\n</table>\n\n<div class=\"warning\">\n<p>Please make sure you listen for <code>push-subscription-change</code>. If the subscription is lost, and your code isn't listening for this notification, you won't be able to receive messages until you create a new subscription.</p>\n</div>\n\n<h3 id=\"receive-example\" name=\"receive-example\">Example</h3>\n\n<pre class=\"brush: javascript\">const obsService = Cc[\"@mozilla.org/observer-service;1\"]\n                     .getService(Ci.nsIObserverService);\n\nlet pushObserver = {\n  scope: \"chrome://my-module/push\",\n\n  observe(subject, topic, data) {\n    // The scope is passed as the `data` argument for `push-message` and\n    // `push-subscription-change` observers. Make sure the message is meant\n    // for us.\n    if (data == this.scope) {\n      if (topic == \"push-message\") {\n        this.onPushMessage(subject);\n      } else if (topic == \"push-subscription-change\") {\n        this.onPushSubscriptionChange();\n      }\n    }\n  },\n\n  onPushMessage(maybeMessage) {\n    if (!maybeMesssage) {\n      // The subject will be `null` for messages without data.\n      return;\n    }\n    let message = maybeMesssage.QueryInterface(Ci.nsIPushMessage);\n    message.text(); // Returns the message contents as a UTF-8 string.\n    message.json(); // Parses the message as JSON.\n    message.binary(); // Returns a byte array.\n  },\n\n  onPushSubscriptionChange() {\n    // Re-subscribe if the subscription was dropped.\n    pushService.subscribe(\n      this.scope,\n      scriptSecurityManager.getSystemPrincipal(),\n      (code, subscription) =&gt; {\n        // ...\n    });\n  }\n};\n\nobsService.addObserver(pushObserver, \"push-message\", false);\nobsService.addObserver(pushObserver, \"push-subscription-change\", false);\n</pre>\n\n<h2 id=\"See_also\" name=\"See_also\">See also</h2>\n\n<ul>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIPushSubscription\" title=\"\">nsIPushSubscription</a></code></li>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIPushMessage\" title=\"\">nsIPushMessage</a></code></li>\n <li><a href=\"/en-US/docs/Web/API/PushManager\" title=\"The PushManager interface of the Push API provides a way to receive notifications from third-party servers as well as request URLs for push notifications.\"><code>PushManager</code></a></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/rolfedh\">rolfedh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/vladikoff\">vladikoff</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kitcambridge\">kitcambridge</a>",
    "title": "nsIPushService"
}