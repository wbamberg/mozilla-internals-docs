{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/uriloader/exthandler/nsIExternalProtocolService.idl\" rel=\"custom\">uriloader/exthandler/nsIExternalProtocolService.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThe external protocol service is used for finding and launching web handlers (a la registerProtocolHandler in the HTML5 draft) or platform-specific applications for handling particular protocols.\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 1.9 (Firefox 3)</span></div>\n</div><p></p>\n<p>You can ask the external protocol service if it has an external handler for a given protocol scheme. And you can ask it to load the url using the default handler.</p>\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n<table class=\"standard-table\"> <tbody> <tr> <td><code>boolean <a href=\"#externalProtocolHandlerExists()\">externalProtocolHandlerExists</a>(in string aProtocolScheme);</code></td> </tr> <tr> <td><code>AString <a href=\"#getApplicationDescription()\">getApplicationDescription</a>(in AUTF8String aScheme);</code> </td> </tr> <tr> <td><code>nsIHandlerInfo <a href=\"#getProtocolHandlerInfo()\">getProtocolHandlerInfo</a>(in ACString aProtocolScheme);</code> </td> </tr> <tr> <td><code>nsIHandlerInfo <a href=\"#getProtocolHandlerInfoFromOS()\">getProtocolHandlerInfoFromOS</a>(in ACString aProtocolScheme, out boolean aFound);</code> </td> </tr> <tr> <td><code>boolean <a href=\"#isExposedProtocol()\">isExposedProtocol</a>(in string aProtocolScheme);</code></td> </tr> <tr> <td><code>void <a href=\"#loadURI()\">loadURI</a>(in nsIURI aURI, [optional] in nsIInterfaceRequestor aWindowContext);</code> </td> </tr> <tr> <td><code>void <a href=\"#loadUrl()\">loadUrl</a>(in nsIURI aURL);</code></td> </tr> <tr> <td><code>void <a href=\"#setProtocolHandlerDefaults()\">setProtocolHandlerDefaults</a>(in nsIHandlerInfo aHandlerInfo, in boolean aOSHandlerExists);</code> </td> </tr> </tbody>\n</table>\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n<h3 id=\"externalProtocolHandlerExists()\" name=\"externalProtocolHandlerExists()\">externalProtocolHandlerExists()</h3>\n<p>Check whether a handler for a specific protocol exists. Specifically, this looks to see whether there are any known possible application handlers in either the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIHandlerService\" title=\"\">nsIHandlerService</a></code> datastore or registered with the OS.</p>\n<pre class=\"eval\">boolean externalProtocolHandlerExists(\n  in string aProtocolScheme\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aProtocolScheme</code></dt> <dd>The scheme from a url: http, ftp, mailto, and so on. <div class=\"blockIndicator note\"><strong>Note:</strong> aProtocolScheme should not include a trailing colon, which is part of the URI syntax, not part of the scheme itself. That is, pass \"mailto\" not \"mailto:\".</div></dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p><code>true</code> if we have a handler and <code>false</code> otherwise.</p>\n<p></p><h3 id=\"getApplicationDescription()\">getApplicationDescription()</h3><p></p>\n<p>Gets a human-readable description for the application responsible for handling a specific protocol.</p>\n<pre class=\"eval\">AString getApplicationDescription(\n  in AUTF8String aScheme\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aScheme</code></dt> <dd>The scheme to look up. For example, \"mms\".</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p><span class=\"comment\">This code makes little sense and needs to be cleaned up. -Nickolay &lt;pre&gt; // first construct an nsIURI object using the ioservice var ioservice = Components.classes[\"@mozilla.org/network/io-service;1\"].getService(Components.interfaces.nsIIOService); var uriToOpen = ioservice.newURI(\"<a class=\" external\" href=\"http://www.example.com/\" rel=\"freelink\">http://www.example.com/</a>\", null, null); var extps = Components.classes[\"@mozilla.org/uriloader/external-protocol-service;1\"] .getService(Components.interfaces.nsIExternalProtocolService); if (extps.externalProtocolHandlerExists(\"tlcxp\")) { // Handler for http:// URLs exists } else { // suppress external-load warning for standard browser schemes pref(\"network.protocol-handler.external.tlcxp\", True); pref(\"network.protocol-handler.app.tlcxp, \"LZX\"); } &lt;/pre&gt;</span></p>\n<p></p><h3 id=\"getProtocolHandlerInfo()\">getProtocolHandlerInfo()</h3><p></p>\n<p>Retrieve the handler for the given protocol. If neither the application nor the OS knows about a handler for the protocol, the object this method returns will represent a default handler for unknown content.</p>\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> AProtocolScheme should not include a trailing colon, which is part of the URI syntax, not part of the scheme itself (That is pass \"mailto\" not \"mailto:\").</div><p></p>\n<pre class=\"eval\">nsIHandlerInfo getProtocolHandlerInfo(\n  in ACString aProtocolScheme\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aProtocolScheme</code></dt> <dd>The scheme from a URL: http, ftp, mailto, and so on.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>The handler, if any; otherwise a default handler.</p>\n<p></p><h3 id=\"getProtocolHandlerInfoFromOS()\">getProtocolHandlerInfoFromOS()</h3><p></p>\n<p>Given a scheme, looks up the protocol info from the OS. This should be overridden by each OS's implementation.</p>\n<pre class=\"eval\">nsIHandlerInfo getProtocolHandlerInfoFromOS(\n  in ACString aProtocolScheme,\n  out boolean aFound\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aProtocolScheme</code></dt> <dd>The scheme from a url: http, ftp, mailto, and so on.</dd> <dt><code>aFound</code></dt> <dd>Was an OS default handler for this scheme found?</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>An <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIHanderInfo\" title=\"\">nsIHanderInfo</a></code> for the protocol.</p>\n<h3 id=\"isExposedProtocol()\" name=\"isExposedProtocol()\">isExposedProtocol()</h3>\n<p>Check whether a handler for a specific protocol is \"exposed\" as a visible feature of the current application. An exposed protocol handler is one that can be used in all contexts. A non-exposed protocol handler is one that can only be used internally by the application. For example, a non-exposed protocol would not be loaded by the application in response to a link click or a X-remote openURL command. Instead, it would be deferred to the system's external protocol handler.</p>\n<pre class=\"eval\">boolean isExposedProtocol(\n  in string aProtocolScheme\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aProtocolScheme</code></dt> <dd>The scheme from a url: http, ftp, mailto, and so on.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p><code>true</code> if the protocol is exposed, <code>false</code> otherwise.</p>\n<p></p><h3 id=\"loadURI()\">loadURI()</h3><p></p>\n<p>Used to load a URI via an external application. Might prompt the user for permission to load the external application.</p>\n<pre class=\"eval\">void loadURI(\n  in nsIURI aURI,\n  [optional] in nsIInterfaceRequestor aWindowContext\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aURI</code></dt> <dd>The URI to load.</dd> <dt><code>aWindowContext</code></dt> <dd>The window to parent the dialog against, and, if a web handler is chosen, it is loaded in this window as well. This parameter may be ultimately passed <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIURILoader#openURI()\">nsIURILoader.openURI()</a></code> in the case of a web handler, and aWindowContext is <code>null</code> or not present, web handlers will fail.</dd>\n</dl>\n<h3 id=\"loadUrl()\" name=\"loadUrl()\">loadUrl()</h3>\n<p>Used to load a url via an external protocol handler (if one exists).</p>\n<pre class=\"eval\">void loadUrl(\n  in nsIURI aURL\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aURL</code></dt> <dd>The url to load.</dd>\n</dl>\n<p></p><h3 id=\"setProtocolHandlerDefaults()\">setProtocolHandlerDefaults()</h3><p></p>\n<p>Set some sane defaults for a protocol handler object.</p>\n<pre class=\"eval\">void setProtocolHandlerDefaults(\n  in nsIHandlerInfo aHandlerInfo,\n  in boolean aOSHandlerExists\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aHandlerInfo</code></dt> <dd>An <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIHandlerInfo\" title=\"\">nsIHandlerInfo</a></code> object, as returned by <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIExternalProtocolService#getProtocolHandlerInfoFromOS()\">getProtocolHandlerInfoFromOS()</a></code>.</dd> <dt><code>aOSHandlerExists</code></dt> <dd>Was the object above created for an extant OS default handler? This is generally the value of the aFound out param from <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIExternalProtocolService#getProtocolHandlerInfoFromOS()\">getProtocolHandlerInfoFromOS()</a></code>.</dd>\n</dl>\n<h2 id=\"See_also\" name=\"See_also\">See also</h2>\n<ul> <li><a href=\"/en/Web-based_protocol_handlers\" title=\"en/Web-based_protocol_handlers\"> registerProtocolHandler</a></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Eff2k5\">Eff2k5</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nickolay\">Nickolay</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Callek\">Callek</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Typischdenis\">Typischdenis</a>",
    "title": "nsIExternalProtocolService"
}