{
    "content": "<p></p><div class=\"blockIndicator obsolete obsoleteHeader\"><p><strong><span class=\"icon-only-inline\" title=\"This is an obsolete API and is no longer guaranteed to work.\"><i class=\"icon-trash\"> </i></span> Obsolete since Gecko 60 (Firefox 60 / Thunderbird 60 / SeaMonkey 2.57)</strong><br>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p></div><p></p>\n\n<p><code>nsIXMLHttpRequest</code> along with <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIJSXMLHttpRequest\" title=\"\">nsIJSXMLHttpRequest</a></code> and <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIXMLHttpRequestEventTarget\" title=\"\">nsIXMLHttpRequestEventTarget</a></code> are Mozilla's implementation details of the DOM <a href=\"/en/DOM/XMLHttpRequest\" title=\"en/DOM/XMLHttpRequest\">XMLHttpRequest</a> object.</p>\n\n<div class=\"note\"><strong>Note:</strong> If you're a web developer or a Mozilla add-on developer, please refer to the <a href=\"/en/DOM/XMLHttpRequest\" title=\"en/DOM/XMLHttpRequest\">XMLHttpRequest</a> documentation instead.</div>\n\n<p>This page contains documentation, specific to Mozilla application and add-on developers.</p>\n\n<p>The interface definition: <a href=\"https://dxr.mozilla.org/mozilla-central/source/dom/xhr/nsIXMLHttpRequest.idl\">https://dxr.mozilla.org/mozilla-central/source/dom/xhr/nsIXMLHttpRequest.idl</a></p>\n\n<h3 id=\"Elevated_Privileges\">Elevated Privileges</h3>\n\n<p>As mentioned in the \"Non-Standard Properties\" the property of <code>channel</code> was read-only. When using the XPCOM interface, as seen below in <a href=\"#Example_code\">Example 2</a>, we can get access to this. The most obvious benefit is that we can set <a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/NsIRequest#Constants\">nsiRequest - Constants</a> in the <code>xhr.channel.loadFlags</code>. For instance, as done in <a href=\"#Example_code\">Example 2</a>, the flag of <code>LOAD_ANONYMOUS</code> is added, this strips all user data (cookies, tokens, etc).</p>\n\n<h3 id=\"Using_event_handlers_from_native_code\">Using event handlers from native code</h3>\n\n<p>(Not sure if it's up-to-date)</p>\n\n<p>From native code, the way to set up onload and onerror handlers is a bit different. Here is a comment from Johnny Stenback &lt;<a class=\"link-mailto\" href=\"mailto:jst@netscape.com\" rel=\"freelink\">jst@netscape.com</a>&gt;:</p>\n\n<blockquote>The mozilla implementation of nsIXMLHttpRequest implements the interface nsIDOMEventTarget and that's how you're supported to add event listeners. Try something like this: nsCOMPtr&lt;nsIDOMEventTarget&gt; target(do_QueryInterface(myxmlhttpreq)); target-&gt;AddEventListener(NS_LITERAL_STRING(\"load\"), mylistener, PR_FALSE) where mylistener is your event listener object that implements the interface nsIDOMEventListener. The 'onload', 'onerror', and 'onreadystatechange' attributes moved to nsIJSXMLHttpRequest, but if you're coding in C++ you should avoid using those.</blockquote>\n\n<p>Though actually, if you use addEventListener from C++ weird things will happen too, since the result will depend on what JS happens to be on the stack when you do it....</p>\n\n<p>Conclusion: Do not use event listeners on XMLHttpRequest from C++, unless you're aware of all the security implications. And then think twice about it.</p>\n\n<h2 id=\"Example_code\" name=\"Example_code\">Example code</h2>\n\n<p>This is a simple example code for opening a simple HTTP request from a xul application (like a Mozilla extension) without using observers:</p>\n\n<pre class=\"eval\"> var req = Components.classes[\"@mozilla.org/xmlextras/xmlhttprequest;1\"].createInstance();\n req.open('POST', \"<a class=\"external\" href=\"http://www.foo.bar:8080/nietzsche.do\" rel=\"freelink\">http://www.foo.bar:8080/nietzsche.do</a>\", true);\n req.send('your=data&amp;and=more&amp;stuff=here');\n</pre>\n\n<h2 id=\"Example_code\" name=\"Example_code\">Example 2</h2>\n\n<pre><code>var {Cu: utils, Cc: classes, Ci: instances} = Components;\nCu.import('resource://gre/modules/Services.jsm');\nfunction xhr(url, cb) {\n    let xhr = Cc[\"@mozilla.org/xmlextras/xmlhttprequest;1\"].createInstance(Ci.nsIXMLHttpRequest);\n\n    let handler = ev =&gt; {\n        evf(m =&gt; xhr.removeEventListener(m, handler, !1));\n        switch (ev.type) {\n            case 'load':\n                if (xhr.status == 200) {\n                    cb(xhr.response);\n                    break;\n                }\n            default:\n                Services.prompt.alert(null, 'XHR Error', 'Error Fetching Package: ' + xhr.statusText + ' [' + ev.type + ':' + xhr.status + ']');\n                break;\n        }\n    };\n\n    let evf = f =&gt; ['load', 'error', 'abort'].forEach(f);\n    evf(m =&gt; xhr.addEventListener(m, handler, false));\n\n    xhr.mozBackgroundRequest = true;\n    xhr.open('GET', url, true);\n    xhr.channel.loadFlags |= Ci.nsIRequest.LOAD_ANONYMOUS | Ci.nsIRequest.LOAD_BYPASS_CACHE | Ci.nsIRequest.INHIBIT_PERSISTENT_CACHING;\n    xhr.responseType = \"arraybuffer\"; //dont set it, so it returns string, you dont want arraybuffer. you only want this if your url is to a zip file or some file you want to download and make a nsIArrayBufferInputStream out of it or something\n    xhr.send(null);\n}\n\nxhr('https://www.gravatar.com/avatar/eb9895ade1bd6627e054429d1e18b576?s=24&amp;d=identicon&amp;r=PG&amp;f=1', data =&gt; {\n    Services.prompt.alert(null, 'XHR Success', data);\n    var file = OS.Path.join(OS.Constants.Path.desktopDir, \"test.png\");\n    var promised = OS.File.writeAtomic(file, new UInt8Array(data));\n    promised.then(\n        function() {\n            alert('succesfully saved image to desktop')\n        },\n        function(ex) {\n             alert('FAILED in saving image to desktop')\n        }\n    );\n});</code></pre>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Loirooriol\">Loirooriol</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/SphinxKnight\">SphinxKnight</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/adorsaz\">adorsaz</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/teoli\">teoli</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/ZhenboLi\">ZhenboLi</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/hatekate\">hatekate</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Noitidart\">Noitidart</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kscarfone\">kscarfone</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nickolay\">Nickolay</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Yoric\">Yoric</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Doem%20Bondol\">Doem Bondol</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/ericjung\">ericjung</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mook\">Mook</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Jminta\">Jminta</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Tprogers\">Tprogers</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nightstrike\">Nightstrike</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Cancerbero%20sgx\">Cancerbero sgx</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>",
    "title": "nsIXMLHttpRequest"
}