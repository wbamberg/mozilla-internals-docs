{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/xpcom/io/nsIScriptableInputStream.idl\" rel=\"custom\">xpcom/io/nsIScriptableInputStream.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">This interface provides scriptable access to a <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInputStream\" title=\"\">nsIInputStream</a></code> instance.</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)</span></div>\n</div><p></p>\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code>unsigned long <a href=\"#available()\">available</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#close()\">close</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#init()\">init</a>(in nsIInputStream aInputStream);</code></td>\n  </tr>\n  <tr>\n   <td><code>string <a href=\"#read()\">read</a>(in unsigned long aCount);</code></td>\n  </tr>\n  <tr>\n   <td><code>ACString <a href=\"#readBytes()\">readBytes</a>(in unsigned long aCount);</code> </td>\n  </tr>\n </tbody>\n</table>\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n<h3 id=\"available()\" name=\"available()\">available()</h3>\n<p>Return the number of bytes currently available in the stream.</p>\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> This method should not be used to determine the total size of a stream, even if the stream corresponds to a local file. Moreover, since a stream may make available more than 2^32 bytes of data, this method is incapable of expressing the entire size of the underlying data source.</div><p></p>\n<pre class=\"eval\">unsigned long available();\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<p>None.</p>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>The number of bytes.</p>\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n<dl>\n <dt>\n  <code>NS_BASE_STREAM_CLOSED</code></dt>\n <dd>\n  If called after the stream has been closed.</dd>\n</dl>\n<h3 id=\"close()\" name=\"close()\">close()</h3>\n<p>Closes the stream.</p>\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> The close method may be called more than once, but subsequent calls are ignored.</div><p></p>\n<pre class=\"eval\">void close();\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<p>None.</p>\n<h3 id=\"init()\" name=\"init()\">init()</h3>\n<p>Wrap the given <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInputStream\" title=\"\">nsIInputStream</a></code> with this <code>nsIScriptableInputStream</code>.</p>\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> The init method may be called more than once, allowing a <code>nsIScriptableInputStream</code> instance to be reused.</div><p></p>\n<pre class=\"eval\">void init(\n  in nsIInputStream aInputStream\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl>\n <dt>\n  <code>aInputStream</code></dt>\n <dd>\n  The <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInputStream\" title=\"\">nsIInputStream</a></code> to be wrapped.</dd>\n</dl>\n<h3 id=\"read()\" name=\"read()\">read()</h3>\n<p>Read data from the stream.</p>\n<p></p><div class=\"blockIndicator warning\">\n    <p><strong>Warning:</strong> If the data contains a <code>null</code> byte, then this method will return a truncated string.</p>\n</div> <div class=\"blockIndicator note\"><strong>Note:</strong> It is also important to consider how a language bindings may interpret the string data type. In particular, some bindings may convert the byte values into Unicode code points, by assuming the byte values are encoded as ISO-Latin-1. This is the case for the JavaScript bindings.</div><p></p>\n<pre class=\"eval\">string read(\n  in unsigned long aCount\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl>\n <dt>\n  <code>aCount</code></dt>\n <dd>\n  The maximum number of bytes to read from the stream.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>The data read as a string, which will be an empty string if the stream is at EOF.</p>\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n<dl>\n <dt>\n  <code>NS_ERROR_NOT_INITIALIZED</code></dt>\n <dd>\n  If <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIScriptableInputStream#init()\">init()</a></code> was not called.</dd>\n <dt>\n  <code>NS_BASE_STREAM_CLOSED</code></dt>\n <dd>\n  If called after the stream has been closed.</dd>\n <dt>\n  <code>NS_BASE_STREAM_WOULD_BLOCK</code></dt>\n <dd>\n  Indicates that reading from the input stream would block the calling thread for an indeterminate amount of time. This exception may only be thrown if <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIInputStream#isNonBlocking()\">nsIInputStream.isNonBlocking()</a></code> returns <code>true</code>.</dd>\n</dl>\n<p></p><h3 id=\"readBytes()\">readBytes()</h3><p></p>\n<p>Read data from the stream, including <code>null</code> bytes.</p>\n<pre class=\"eval\">ACString readBytes(\n  in unsigned long aCount\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl>\n <dt>\n  <code>aCount</code></dt>\n <dd>\n  The maximum number of bytes to read.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>The data from the stream, which will be an empty string if EOF has been reached.</p>\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n<dl>\n <dt>\n  <code>NS_ERROR_FAILURE</code></dt>\n <dd>\n  If there are not enough bytes available to read aCount amount of data.</dd>\n <dt>\n  <code>NS_BASE_STREAM_WOULD_BLOCK</code></dt>\n <dd>\n  If reading from the input stream would block the calling thread (non-blocking mode only).</dd>\n</dl>\n<h2 id=\"Remarks\" name=\"Remarks\">Remarks</h2>\n<p>This interface provides JavaScript with a way to read ASCII text from a <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInputStream\" title=\"\">nsIInputStream</a></code>. However, it does not address the problem of reading arbitrary binary data from a stream. For binary input see <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIBinaryInputStream\" title=\"\">nsIBinaryInputStream</a></code>.</p>\n<div class=\"note\">\n <p><strong>Note:</strong> Starting in <span title=\"(Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)\">Gecko 2.0</span>, you can use the <code>NetUtils.jsm</code> JavaScript code module and its <a href=\"/en/JavaScript_code_modules/NetUtil.jsm#readInputStreamToString()\" title=\"en/JavaScript code modules/NetUtil.jsm#readInputStreamToString()\"><code>readInputStreamToString()</code></a> method to read arbitrary binary data into a JavaScript string.</p>\n</div>\n<p>The <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsScriptableInputStream\" title=\"\">nsScriptableInputStream</a></code> component implements this interface.</p>\n<p>This interface was frozen for <span title=\"\">Gecko 1.2</span>. From <span title=\"(Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)\">Gecko 2.0</span> interfaces are no longer frozen.</p>\n<h2 id=\"See_also\" name=\"See_also\">Examples</h2>\n<h3 id=\"List_contents_of_XPI_and_read_file_contents\">List contents of XPI and read file contents</h3>\n<p>This example here uses the <code><a href=\"#read()\">read</a> </code>function. It takes a input stream from the zip reader and outputs the text in it. Full example using the zip interfaces is seen here: <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIZipReader#List_contents_of_XPI_and_read_file_contents\" rel=\"internal\">List contents of XPI and read file contents</a>. Remember: The nsIScriptableInputStream has a contract where `init` should only be called once, and should always be closed. Excerpt of the stream for this stream article is here, this is only an excerpt so cannot copy paste this code into scratchpad.</p>\n<pre class=\"default prettyprint prettyprinted\" style=\"\"><code><span class=\"kwd\"><code><span class=\"kwd\">var</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">classes</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"typ\">Cc</span><span class=\"pun\">,</span><span class=\"pln\"> interfaces</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"typ\">Ci</span><span class=\"pun\">,</span><span class=\"pln\"> results</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"typ\">Cr</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"typ\">Constructor</span><span class=\"pun\">:</span><span class=\"pln\"> CC</span><span class=\"pun\">,</span><span class=\"pln\"> utils</span><span class=\"pun\">:</span><span class=\"pln\"> </span><span class=\"typ\">Cu</span><span class=\"pln\"> </span><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Components</span><span class=\"pun\">;</span></code>\nvar </span><span class=\"typ\">ScriptableInputStream</span><span class=\"pln\"> </span><span class=\"pun\">=</span><span class=\"pln\"> CC</span><span class=\"pun\">(</span><span class=\"str\">\"@mozilla.org/scriptableinputstream;1\"</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">\"nsIScriptableInputStream\"</span><span class=\"pun\">,</span><span class=\"pln\"> </span><span class=\"str\">\"init\"</span><span class=\"pun\">);\n\n\n<code><span class=\"pln\"><code><span class=\"kwd\"><code><span class=\"pun\"><code><span class=\"pln\">    </span></code></span></code>let</span><span class=\"pln\"> entry </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">getEntry</span><span class=\"pun\">(</span><span class=\"pln\">name</span><span class=\"pun\">);</span></code>\n    </span><span class=\"kwd\">let</span><span class=\"pln\"> stream </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">ScriptableInputStream</span><span class=\"pun\">(</span><span class=\"kwd\">this</span><span class=\"pun\">.</span><span class=\"pln\">getInputStream</span><span class=\"pun\">(</span><span class=\"pln\">name</span><span class=\"pun\">));</span><span class=\"pln\">\n    </span><span class=\"kwd\">try</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n      </span><span class=\"com\">// Use readBytes to get binary data, read to read a (null-terminated) string</span><span class=\"pln\">\n      </span><span class=\"kwd\">let</span><span class=\"pln\"> contents </span><span class=\"pun\">=</span><span class=\"pln\"> stream</span><span class=\"pun\">.</span><span class=\"pln\">readBytes</span><span class=\"pun\">(</span><span class=\"pln\">entry</span><span class=\"pun\">.</span><span class=\"pln\">realSize</span><span class=\"pun\">);</span><span class=\"pln\">\n    </span><span class=\"pun\">}</span><span class=\"pln\">\n    </span><span class=\"kwd\">finally</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\n      stream</span><span class=\"pun\">.</span><span class=\"pln\">close</span><span class=\"pun\">();</span><span class=\"pln\">\n    </span><span class=\"pun\">}</span></code></span></code></pre>\n<h3 id=\"Example_usage_in_onDataAvailable\">Example usage in onDataAvailable</h3>\n<p>Remember: The nsIScriptableInputStream has a contract where `init` should only be called once, and should always be closed.</p>\n<pre><code>var ScriptableInputStream = CC(\"@mozilla.org/scriptableinputstream;1\", \"nsIScriptableInputStream\", \"init\");\n\nvar blah = {\n    data: '',\n    onStartRequest: function (aRequest, aContext) {\n        this.data = '';\n    },\n    onDataAvailable: function(request, context, inputStream, offset, count) {\n        var scriptStream = new ScriptableInputStream(inputStream);\n        this.data += scriptStream.read(count);\n        scriptStream.close();\n    }\n};</code></pre>\n<h2 id=\"See_also\" name=\"See_also\">See also</h2>\n<ul>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsScriptableInputStream\" title=\"\">nsScriptableInputStream</a></code></li>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInputStream\" title=\"\">nsIInputStream</a></code></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/dcolascione\">dcolascione</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Noitidart\">Noitidart</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kscarfone\">kscarfone</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Wladimir_Palant\">Wladimir_Palant</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/karthikin\">karthikin</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/rufus\">rufus</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ted_Mielczarek\">Ted_Mielczarek</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/20after4\">20after4</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Pmash\">Pmash</a>",
    "title": "nsIScriptableInputStream"
}