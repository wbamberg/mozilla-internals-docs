{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/other-licenses/ia2/Accessible2.idl\" rel=\"custom\">other-licenses/ia2/Accessible2.idl</a></code><span style=\"text-align: right; float: right;\"><span style=\"color: #cc0000; font-weight: 700;\">Not scriptable</span></span></div>\n<span style=\"padding: 4px 2px;\">\n\n<i>Please add a summary to this article.</i>\n</span>\n\n  <div style=\"height: 42px; position: relative; padding: 2px; width: auto;\">\n\n  <div style=\"top: 22px; font-size: 11px; position: absolute;\">1.0</div>\n  \n  <div style=\"top: 22px; font-size: 11px; position: absolute; left: 0px; text-align: right; float: right; width: 100%;\">66</div>\n  \n  <div style=\"height: 8px; top: 16px; background: #dd0000; left: 0px; position: absolute; width: 8.571428571428571%;\"></div>\n  \n<div style=\"height: 8px; top: 16px; left: 8.571428571428571%; background: #00dd00; position: absolute; width: 91.42857142857143%;\" title=\"Introduced in Gecko 1.9 (Firefox 3)\"></div>\n\n<div style=\"top: 0px; font-size: 11px; position: absolute; left: 8.571428571428571%;\">Introduced</div>\n<div style=\"top: 22px; font-size: 11px; position: absolute; left: 8.571428571428571%;\">Gecko 1.9</div>\n\n</div>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessible\" title=\"\">IAccessible</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 1.9 (Firefox 3)</span></div>\n</div><p></p>\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n<table class=\"standard-table\"> <tbody> <tr> <td><code>[propget] HRESULT <a href=\"#attributes()\">attributes</a>([out] BSTR attributes );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#extendedRole()\">extendedRole</a>([out] BSTR extendedRole );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#extendedStates()\">extendedStates</a>([in] long maxExtendedStates, [out, size_is(,maxExtendedStates), length_is(, nExtendedStates)] BSTR extendedStates, [out] long nExtendedStates );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#groupPosition()\">groupPosition</a>([out] long groupLevel, [out] long similarItemsInGroup, [out] long positionInGroup );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#indexInParent()\">indexInParent</a>([out] long indexInParent );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#locale()\">locale</a>([out] IA2Locale locale );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#localizedExtendedRole()\">localizedExtendedRole</a>([out] BSTR localizedExtendedRole );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#localizedExtendedStates()\">localizedExtendedStates</a>([in] long maxLocalizedExtendedStates, [out, size_is(,maxLocalizedExtendedStates), length_is(, nLocalizedExtendedStates)] BSTR localizedExtendedStates, [out] long nLocalizedExtendedStates );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#nExtendedStates()\">nExtendedStates</a>([out] long nExtendedStates );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#nRelations()\">nRelations</a>([out] long nRelations );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#relation()\">relation</a>([in] long relationIndex, [out] IAccessibleRelation relation );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#relations()\">relations</a>([in] long maxRelations, [out, size_is(maxRelations), length_is( nRelations)] IAccessibleRelation relations, [out] long nRelations );</code></td> </tr> <tr> <td><code>HRESULT <a href=\"#role()\">role</a>([out] long role );</code></td> </tr> <tr> <td><code>HRESULT <a href=\"#scrollTo()\">scrollTo</a>([in] enum IA2ScrollType scrollType );</code></td> </tr> <tr> <td><code>HRESULT <a href=\"#scrollToPoint()\">scrollToPoint</a>([in] enum IA2CoordinateType coordinateType, [in] long x, [in] long y );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#states()\">states</a>([out] AccessibleStates states );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#uniqueID()\">uniqueID</a>([out] long uniqueID );</code></td> </tr> <tr> <td><code>[propget] HRESULT <a href=\"#windowHandle()\">windowHandle</a>([out] HWND windowHandle );</code></td> </tr> </tbody>\n</table>\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n<h3 id=\"attributes()\" name=\"attributes()\">attributes()</h3>\n<p>Returns the <code>attributes</code> specific to this <code>IAccessible2</code> object, such as a cell's formula.</p>\n<pre class=\"eval\">[propget] HRESULT attributes(\n  [out] BSTR attributes \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>attributes</code></dt> <dd>\n</dd></dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_FALSE returned if there is nothing to return, [out] value is <code>null</code>. S_OK.</p>\n<h3 id=\"extendedRole()\" name=\"extendedRole()\">extendedRole()</h3>\n<p>Returns the extended role. An extended role is a role which is dynamically generated by the application. It is not predefined by the <code>IAccessible2</code> specification.</p>\n<pre class=\"eval\">[propget] HRESULT extendedRole(\n  [out] BSTR extendedRole \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>extendedRole</code></dt> <dd>\n</dd></dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_FALSE if there is nothing to return, [out] value is <code>null</code>. S_OK.</p>\n<h3 id=\"extendedStates()\" name=\"extendedStates()\">extendedStates()</h3>\n<p>Returns the extended states (array of strings). An extended state is a state which is dynamically generated by the application. It is not predefined by the <code>IAccessible2</code> specification.</p>\n<pre class=\"eval\">[propget] HRESULT extendedStates(\n  [in] long maxExtendedStates,\n  [out, size_is(,maxExtendedStates), length_is(, nExtendedStates)] BSTR extendedStates,\n  [out] long nExtendedStates \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>maxExtendedStates</code></dt> <dd>This parameter is ignored. Refer to @ref _arrayConsideration \"Special Consideration when using Arrays\" for more details.</dd> <dt><code>extendedStates</code></dt> <dd>This array is allocated by the server. Free it with CoTaskMemFree.</dd> <dt><code>nExtendedStates</code></dt> <dd>The number of extended states returned; the size of the returned array.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_FALSE if there are no states, [out] values are <code>null</code> and 0 respectively. S_OK.</p>\n<h3 id=\"groupPosition()\" name=\"groupPosition()\">groupPosition()</h3>\n<p>Returns grouping information. Used for tree items, list items, tab panel labels, radio buttons, and so on. Also used for collections of non-text objects.</p>\n<pre class=\"eval\">[propget] HRESULT groupPosition(\n  [out] long groupLevel,\n  [out] long similarItemsInGroup,\n  [out] long positionInGroup \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>groupLevel</code></dt> <dd>1 based, 0 indicates that this value is not applicable.</dd> <dt><code>similarItemsInGroup</code></dt> <dd>1 based, 0 indicates that this value is not applicable.</dd> <dt><code>positionInGroup</code></dt> <dd>1 based, 0 indicates that this value is not applicable. This is an index into the objects in the current group, not an index into all the objects at the same group level.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_FALSE if no values are valid. S_OK if at least one value is valid.</p>\n<h3 id=\"indexInParent()\" name=\"indexInParent()\">indexInParent()</h3>\n<p>Returns the index of this object in its parent object.</p>\n<pre class=\"eval\">[propget] HRESULT indexInParent(\n  [out] long indexInParent \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>indexInParent</code></dt> <dd>0 based; -1 indicates there is no parent; the upper bound is the value returned by the parent's IAccessible::get_accChildCount.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_FALSE if no parent, [out] value is -1. S_OK.</p>\n<h3 id=\"locale()\" name=\"locale()\">locale()</h3>\n<p>Returns the IA2Locale of the accessible object.</p>\n<pre class=\"eval\">[propget] HRESULT locale(\n  [out] IA2Locale locale \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>locale</code></dt> <dd>\n</dd></dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_OK.</p>\n<h3 id=\"localizedExtendedRole()\" name=\"localizedExtendedRole()\">localizedExtendedRole()</h3>\n<p>Returns the localized extended role.</p>\n<pre class=\"eval\">[propget] HRESULT localizedExtendedRole(\n  [out] BSTR localizedExtendedRole \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>localizedExtendedRole</code></dt> <dd>\n</dd></dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_FALSE if there is nothing to return, [out] value is <code>null</code>. S_OK.</p>\n<h3 id=\"localizedExtendedStates()\" name=\"localizedExtendedStates()\">localizedExtendedStates()</h3>\n<p>Returns the localized extended <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessible2#states()\">states()</a></code> (array of strings).</p>\n<pre class=\"eval\">[propget] HRESULT localizedExtendedStates(\n  [in] long maxLocalizedExtendedStates,\n  [out, size_is(,maxLocalizedExtendedStates), length_is(, nLocalizedExtendedStates)] BSTR localizedExtendedStates,\n  [out] long nLocalizedExtendedStates \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>maxLocalizedExtendedStates</code></dt> <dd>This parameter is ignored. Refer to @ref _arrayConsideration \"Special Consideration when using Arrays\" for more details.</dd> <dt><code>localizedExtendedStates</code></dt> <dd>This array is allocated by the server. Free it with CoTaskMemFree.</dd> <dt><code>nLocalizedExtendedStates</code></dt> <dd>The number of localized extended states returned; the size of the returned array.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_FALSE if there are no states, [out] values are <code>null</code> and 0 respectively. S_OK.</p>\n<h3 id=\"nExtendedStates()\" name=\"nExtendedStates()\">nExtendedStates()</h3>\n<p>Returns the number of extended states.</p>\n<pre class=\"eval\">[propget] HRESULT nExtendedStates(\n  [out] long nExtendedStates \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>nExtendedStates</code></dt> <dd>\n</dd></dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_OK.</p>\n<h3 id=\"nRelations()\" name=\"nRelations()\">nRelations()</h3>\n<p>Returns the number of accessible relations for this object.</p>\n<pre class=\"eval\">[propget] HRESULT nRelations(\n  [out] long nRelations \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>nRelations</code></dt> <dd>\n</dd></dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_OK.</p>\n<h3 id=\"relation()\" name=\"relation()\">relation()</h3>\n<p>Returns one accessible <code>relation</code> for this object.</p>\n<pre class=\"eval\">[propget] HRESULT relation(\n  [in] long relationIndex,\n  [out] IAccessibleRelation relation \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>relationIndex</code></dt> <dd>0 based.</dd> <dt><code>relation</code></dt> <dd>\n</dd></dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>E_INVALIDARG if bad [in] passed, [out] value is <code>null</code>. S_OK.</p>\n<h3 id=\"relations()\" name=\"relations()\">relations()</h3>\n<p>Returns multiple accessible <code>relations</code> for this object.</p>\n<pre class=\"eval\">[propget] HRESULT relations(\n  [in] long maxRelations,\n  [out, size_is(maxRelations), length_is( nRelations)] IAccessibleRelation relations,\n  [out] long nRelations \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>maxRelations</code></dt> <dd>Maximum size of the array allocated by the client.</dd> <dt><code>relations</code></dt> <dd>The array of accessible relation objects. Note that this array is to be allocated by the client and freed when no longer needed. Refer to @ref _arrayConsideration \"Special Consideration when using Arrays\" for more details.</dd> <dt><code>nRelations</code></dt> <dd>Actual number of <code>relations</code> in the returned array (not more than maxRelations)</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_FALSE if there are no <code>relations</code>, <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessible2#nRelations()\">nRelations()</a></code> is set to 0. S_OK.</p>\n<h3 id=\"role()\" name=\"role()\">role()</h3>\n<p>Returns the <code>role</code> of an <code>IAccessible2</code> object.</p>\n<pre class=\"eval\">HRESULT role(\n  [out] long role \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>role</code></dt> <dd>The <code>role</code> of an <code>IAccessible2</code> object.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_OK.</p>\n<h3 id=\"scrollTo()\" name=\"scrollTo()\">scrollTo()</h3>\n<p>Makes an object visible on the screen.</p>\n<pre class=\"eval\">HRESULT scrollTo(\n  [in] enum IA2ScrollType scrollType \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>scrollType</code></dt> <dd>Defines where the object should be placed on the screen.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>E_INVALIDARG if bad [in] passed. S_OK.</p>\n<h3 id=\"scrollToPoint()\" name=\"scrollToPoint()\">scrollToPoint()</h3>\n<p>Moves the top left of an object to a specified location.</p>\n<pre class=\"eval\">HRESULT scrollToPoint(\n  [in] enum IA2CoordinateType coordinateType,\n  [in] long x,\n  [in] long y \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>coordinateType</code></dt> <dd>Specifies whether the coordinates are relative to the screen or the parent object.</dd> <dt><code>x</code></dt> <dd>Defines the x coordinate.</dd> <dt><code>y</code></dt> <dd>Defines the y coordinate.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>E_INVALIDARG if bad [in] passed. S_OK.</p>\n<h3 id=\"states()\" name=\"states()\">states()</h3>\n<p>Returns the bit strip containing any <code>IAccessible2</code> <code>states</code>. The <code>IAccessible2</code> <code>states</code> are in addition to the MSAA <code>states</code> and are defined in the IA2States enum.</p>\n<pre class=\"eval\">[propget] HRESULT states(\n  [out] AccessibleStates states \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>states</code></dt> <dd>\n</dd></dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_OK.</p>\n<h3 id=\"uniqueID()\" name=\"uniqueID()\">uniqueID()</h3>\n<p>Returns the unique ID. The <code>uniqueID</code> is an identifier for this object, is unique within the current window, and remains the same for the lifetime of the accessible object. The <code>uniqueID</code> is not related to:</p>\n<ul> <li>The MSAA objectID which is used by the server to disambiguate between IAccessibles per HWND or</li> <li>The MSAA childID which is used to disambiguate between children being managed by an <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessible\" title=\"\">IAccessible</a></code>. This value is provided so the AT can have access to a unique runtime persistent identifier even when not handling an event for the object. An example of when this value is useful is if the AT wants to build a cache. The AT could cache the uniqueIDs in addition to other data being cached. When an event is fired the AT could map the <code>uniqueID</code> to its internal model. Thus, if there's a REORDER/SHOW/HIDE event the AT knows which part of the internal structure has been invalidated and can refetch just that part. This value can also be used by an AT to determine when the current control has changed. If the role is the same for two controls that are adjacent in the tab order, this can be used to detect the new control. Another use of this value by an AT is to identify when a grouping object has changed, for example when moving from a radio button in one group to a radio button in a different group. One means of implementing this would be to create a factory with a 32 bit number generator and a reuse pool. The number generator would emit numbers starting at 1. Each time an object's life cycle ended, its number would be saved into a reuse pool. The number generator would be used whenever the reuse pool was empty.</li>\n</ul>\n<pre class=\"eval\">[propget] HRESULT uniqueID(\n  [out] long uniqueID \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>uniqueID</code></dt> <dd>\n</dd></dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_OK.</p>\n<h3 id=\"windowHandle()\" name=\"windowHandle()\">windowHandle()</h3>\n<p>Returns the window handle for the parent window which contains this object. This is the same window handle which will be passed for any events that occur on the object, but is cached in the accessible object for use when it would be helpful to access the window handle in cases where an event isn't fired on this object. A use case is when a screen reader is grabbing an entire web page on a page load. Without the availability of <code>windowHandle</code>, the AT would have to get the window handle by using WindowFromAccessibleObject on each <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessible\" title=\"\">IAccessible</a></code>, which is slow because it's implemented by oleacc.dll as a loop which crawls up the ancestor chain and looks for a ROLE_WINDOW object, mapping that back to a window handle.</p>\n<pre class=\"eval\">[propget] HRESULT windowHandle(\n  [out] HWND windowHandle \n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>windowHandle</code></dt> <dd>\n</dd></dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>S_OK.</p>\n<h2 id=\"Remarks\" name=\"Remarks\">Remarks</h2>\n<p>When you have a reference to an <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessible\" title=\"\">IAccessible</a></code> and require a reference to an <code>IAccessible2</code> use QueryService as follows:</p>\n<pre class=\"eval\">// pAcc is a reference to the accessible object's IAccessible interface. \nIServiceProvider *pService = NULL; \nhr = pAcc-&gt;QueryInterface(IID_IServiceProvider, (void **)&amp;pService); \nif(SUCCEEDED(hr)) { \n  IAccessible2 *pIA2 = NULL; \n  hr = pService-&gt;QueryService(IID_IAccessible, IID_IAccessible2, (void**)&amp;pIA2); \n  if (SUCCEEDED(hr) &amp;&amp; pIA2) { \n    // The control supports IAccessible2. \n    // pIA2 is the reference to the accessible object's IAccessible2 interface.\n  } \n}\n</pre>\n<h2 id=\"See_also\" name=\"See_also\">See also</h2>\n<ul> <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/IAccessible\" title=\"\">IAccessible</a></code></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>",
    "title": "IAccessible2"
}