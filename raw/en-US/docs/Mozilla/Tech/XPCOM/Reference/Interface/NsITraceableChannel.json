{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/netwerk/base/public/nsITraceableChannel.idl\" rel=\"custom\">netwerk/base/public/nsITraceableChannel.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">This interface is used to allow intercepting of <a href=\"/en-US/docs/HTTP\" title=\"/en-US/docs/HTTP\">HTTP</a> traffic. It is implemented by <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIHttpChannel\" title=\"\">nsIHttpChannel</a></code>.</span>\n\n  <div style=\"height: 42px; position: relative; padding: 2px; width: auto;\">\n\n  <div style=\"top: 22px; font-size: 11px; position: absolute;\">1.0</div>\n  \n  <div style=\"top: 22px; font-size: 11px; position: absolute; left: 0px; text-align: right; float: right; width: 100%;\">66</div>\n  \n  <div style=\"height: 8px; top: 16px; background: #dd0000; left: 0px; position: absolute; width: 8.952380571428572%;\"></div>\n  \n<div style=\"height: 8px; top: 16px; left: 8.952380571428572%; background: #00dd00; position: absolute; width: 91.04761942857142%;\" title=\"Introduced in Gecko 1.9.0.4 \"></div>\n\n<div style=\"top: 0px; font-size: 11px; position: absolute; left: 8.952380571428572%;\">Introduced</div>\n<div style=\"top: 22px; font-size: 11px; position: absolute; left: 8.952380571428572%;\">Gecko 1.9.0.4</div>\n\n</div>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 1.9.0.4 </span></div>\n</div><p></p>\n\n<p>The typical way to use this interface is as follows:</p>\n\n<ul>\n <li><a href=\"/en/XUL_School/Intercepting_Page_Loads#HTTP_Observers\" title=\"en/XUL_School/Intercepting_Page_Loads#HTTP_Observers\">Register for the \"http-on-examine-response\" notification</a> to track all HTTP responses;</li>\n <li>Skip redirects (<code>responseStatus</code> = 3xx on <a href=\"/en-US/docs/XPCOM_Interface_Reference/nsIHttpChannel\" title=\"/en-US/docs/XPCOM_Interface_Reference/nsIHttpChannel\">nsIHttpChannel</a>), since otherwise you may <a class=\"link-https\" href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=728901#c8\" title=\"https://bugzilla.mozilla.org/show_bug.cgi?id=728901#c8\">end up with two listeners registered for a channel</a>;</li>\n <li>QI the channel passed as the \"<code>subject</code>\" to your observer to <code>nsITraceableChannel</code>, and replace the default <code>nsIStreamListener</code> (that passes the data to the original requester - e.g. to XMLHttpRequest or to the browser tab that made the request) with your own implementation (see <a href=\"#Using_channel_listeners\" title=\"#Using_channel_listeners\">\"Implementing nsIStreamListener\"</a> below).</li>\n</ul>\n\n<p>After that your <code>nsIStreamListener</code> implementation will get the response data and will be able to pass the data on to the original nsIStreamListener (possibly modifying it).</p>\n\n<p>See <a class=\"external\" href=\"http://www.softwareishard.com/blog/firebug/nsitraceablechannel-intercept-http-traffic/\" title=\"http://www.softwareishard.com/blog/firebug/nsitraceablechannel-intercept-http-traffic/\">nsITraceableChannel, Intercept HTTP Traffic</a> for a more detailed description with code samples.</p>\n\n<p>See <a href=\"http://stackoverflow.com/questions/5205672/modify-url-before-loading-page-in-firefox/\" title=\"http://stackoverflow.com/questions/5205672/modify-url-before-loading-page-in-firefox/\"> Modify URL before loading page in firefox</a> for an overview of how to <strong>modify</strong> a request before it is made.</p>\n\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code>nsIStreamListener <a href=\"#setNewListener()\">setNewListener</a>(in nsIStreamListener aListener);</code></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n\n<h3 id=\"setNewListener()\" name=\"setNewListener()\">setNewListener()</h3>\n\n<p>Replaces the channel's current listener with a new one, returning the listener previously assigned to the channel.</p>\n\n<pre class=\"eval\">nsIStreamListener setNewListener(\n  in nsIStreamListener aListener\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aListener</code></dt>\n <dd>An <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIStreamListener\" title=\"\">nsIStreamListener</a></code> to be notified of events on the HTTP channel.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>The previous listener for the channel. Each listener call through to the previous listener for every call, in order to establish a call chain to allow all interested parties a chance to act on each event.</p>\n\n<h2 id=\"Using_channel_listeners\" name=\"Using_channel_listeners\">Implementing nsIStreamListener</h2>\n\n<p>The <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIStreamListener\" title=\"\">nsIStreamListener</a></code> passed to <code>setNewListener()</code> should implement the following methods, which are called to notify it of events that occur on the HTTP stream:</p>\n\n<ul>\n <li><code>onStartRequest</code>: An HTTP request is beginning.</li>\n <li><code>onDataAvailable</code>: Data is arriving on the HTTP channel.</li>\n <li><code>onStopRequest</code>: The HTTP request is ending.</li>\n</ul>\n\n<div class=\"note\"><strong>Note:</strong> It is critical that you pass along requests to the previous listener as soon as possible -- especially for <code>onStartRequest</code>.</div>\n\n<p>Channels may restrict when you may replace the listener. In particular, listeners typically should not be replaced after <code>onStartRequest</code> has been called.</p>\n\n<h3 id=\"Example\">Example</h3>\n\n<p>This example can be copied and pasted into Scratchpad and run with \"Environment\" menu item set to \"Browser\". This uses <a href=\"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a> syntax that is available in Firefox 30 and onwards.</p>\n\n<pre>/////// START - DO NOT EDIT\nvar {classes: Cc, interfaces: Ci, results: Cr, Constructor: CC, utils: Cu} = Components;\nCu.import('resource://gre/modules/Services.jsm');\n\nvar BinaryInputStream = CC('@mozilla.org/binaryinputstream;1', 'nsIBinaryInputStream', 'setInputStream');\nvar BinaryOutputStream = CC('@mozilla.org/binaryoutputstream;1', 'nsIBinaryOutputStream', 'setOutputStream');\nvar StorageStream = CC('@mozilla.org/storagestream;1', 'nsIStorageStream', 'init');\n\nfunction TracingListener() {\n\tthis.receivedChunks = []; // array for incoming data. holds chunks as they come, onStopRequest we join these junks to get the full source\n\tthis.responseBody; // we'll set this to the \n\tthis.responseStatusCode;\n\n\tthis.deferredDone = {\n\t\tpromise: null,\n\t\tresolve: null,\n\t\treject: null\n\t};\n\tthis.deferredDone.promise = new Promise(function(resolve, reject) {\n\t\tthis.resolve = resolve;\n\t\tthis.reject = reject;\n\t}.bind(this.deferredDone));\n\tObject.freeze(this.deferredDone);\n\tthis.promiseDone = this.deferredDone.promise;\n}\nTracingListener.prototype = {\n\tonDataAvailable: function(aRequest, aContext, aInputStream, aOffset, aCount) {\n\t\tvar iStream = new BinaryInputStream(aInputStream) // binaryaInputStream\n\t\tvar sStream = new StorageStream(8192, aCount, null); // storageStream // not sure why its 8192 but thats how eveyrone is doing it, we should ask why\n\t\tvar oStream = new BinaryOutputStream(sStream.getOutputStream(0)); // binaryOutputStream\n\n\t\t// Copy received data as they come.\n\t\tvar data = iStream.readBytes(aCount);\n\t\tthis.receivedChunks.push(data);\n\n\t\toStream.writeBytes(data, aCount);\n\n\t\tthis.originalListener.onDataAvailable(aRequest, aContext, sStream.newInputStream(0), aOffset, aCount);\n\t},\n\tonStartRequest: function(aRequest, aContext) {\n\t\tthis.originalListener.onStartRequest(aRequest, aContext);\n\t},\n\tonStopRequest: function(aRequest, aContext, aStatusCode) {\n\t\tthis.responseBody = this.receivedChunks.join(\"\");\n\t\tdelete this.receivedChunks;\n\t\tthis.responseStatus = aStatusCode;\n\t\tthis.originalListener.onStopRequest(aRequest, aContext, aStatusCode);\n\n\t\tthis.deferredDone.resolve();\n\t},\n\tQueryInterface: function(aIID) {\n\t\tif (aIID.equals(Ci.nsIStreamListener) || aIID.equals(Ci.nsISupports)) {\n\t\t\treturn this;\n\t\t}\n\t\tthrow Cr.NS_NOINTERFACE;\n\t}\n};\n\nvar httpResponseObserver = {\n\tobserve: function(aSubject, aTopic, aData) {\n\t\tvar newListener = new TracingListener();\n\t\taSubject.QueryInterface(Ci.nsITraceableChannel);\n\t\tnewListener.originalListener = aSubject.setNewListener(newListener);\n/////// END - DO NOT EDIT\n\t\tnewListener.promiseDone.then(\n\t\t\tfunction() {\n\t\t\t\t// no error happened\n\t\t\t\tconsole.log('yay response done:', newListener.responseBody);\n\t\t\t},\n\t\t\tfunction(aReason) {\n\t\t\t\t// promise was rejected, right now i didnt set up rejection, but i should listen to on abort or bade status code then reject maybe\n\t\t\t}\n\t\t).catch(\n\t\t\tfunction(aCatch) {\n\t\t\t\tconsole.error('something went wrong, a typo by dev probably:', aCatch);\n\t\t\t}\n\t\t);\n\t}\n};\n\nServices.obs.addObserver(httpResponseObserver, 'http-on-examine-response', false);\n// Services.obs.removeObserver(httpResponseObserver, 'http-on-examine-response'); // call this when you dont want to listen anymore</pre>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mig\">mig</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Noitidart\">Noitidart</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Brettz9\">Brettz9</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/d2mw\">d2mw</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nickolay\">Nickolay</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/teoli\">teoli</a>",
    "title": "nsITraceableChannel"
}