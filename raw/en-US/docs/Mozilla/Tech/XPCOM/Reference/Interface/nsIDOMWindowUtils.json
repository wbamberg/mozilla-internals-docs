{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/dom/interfaces/base/nsIDOMWindowUtils.idl\" rel=\"custom\">dom/interfaces/base/nsIDOMWindowUtils.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThis interface is a DOM utility interface that provides useful DOM methods and attributes.\n</span>\n\n  <div style=\"height: 42px; position: relative; padding: 2px; width: auto;\">\n\n  <div style=\"top: 22px; font-size: 11px; position: absolute;\">1.0</div>\n  \n  <div style=\"top: 22px; font-size: 11px; position: absolute; left: 0px; text-align: right; float: right; width: 100%;\">66</div>\n  \n  <div style=\"height: 8px; top: 16px; background: #dd0000; left: 0px; position: absolute; width: 5.714285714285714%;\"></div>\n  \n<div style=\"height: 8px; top: 16px; left: 5.714285714285714%; background: #00dd00; position: absolute; width: 94.28571428571429%;\" title=\"Introduced in Gecko 1.8 (Firefox 1.5 / Thunderbird 1.5 / SeaMonkey 1.0)\"></div>\n\n<div style=\"top: 0px; font-size: 11px; position: absolute; left: 5.714285714285714%;\">Introduced</div>\n<div style=\"top: 22px; font-size: 11px; position: absolute; left: 5.714285714285714%;\">Gecko 1.8</div>\n\n    <div style=\"height: 8px; top: 16px; left: 75.21428571428571%; background: #eeee00; position: absolute; width: 1%; border-radius: 4px; -webkit-border-radius: 4px;\" title=\"Last changed in Gecko 49.0 (Firefox 49.0 / Thunderbird 49.0 / SeaMonkey 2.46)\"></div>\n    \n</div>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 49.0 (Firefox 49.0 / Thunderbird 49.0 / SeaMonkey 2.46)</span></div>\n</div><p></p>\n\n<p>Implemented by: <code>Window</code>. To get this interface, use:</p>\n\n<pre class=\"eval\">var domWindowUtils = window.windowUtils;\n</pre>\n\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code>void <a href=\"#activateNativeMenuItemAt()\">activateNativeMenuItemAt</a>(in AString indexString);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#clearMozAfterPaintEvents()\">clearMozAfterPaintEvents</a>();</code> </td>\n  </tr>\n  <tr>\n   <td><code>PRUint32 <a href=\"#compareCanvases()\">compareCanvases</a>(in nsIDOMHTMLCanvasElement aCanvas1, in nsIDOMHTMLCanvasElement aCanvas2, out unsigned long aMaxDifference);</code> </td>\n  </tr>\n  <tr>\n   <td><code>double <a href=\"#computeAnimationDistance()\">computeAnimationDistance</a>(in nsIDOMElement element, in AString property, in AString value1, in AString value2);</code> </td>\n  </tr>\n  <tr>\n   <td><code>nsICompositionStringSynthesizer <a href=\"#createCompositionStringSynthesizer()\">createCompositionStringSynthesizer</a>();</code>  <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 38.0 / Thunderbird 38.0 / SeaMonkey 2.35)\">Obsolete since Gecko 38.0</span></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#disableNonTestMouseEvents()\">disableNonTestMouseEvents</a>(in boolean aDisable);</code> </td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#dispatchDOMEventViaPresShell()\">dispatchDOMEventViaPresShell</a>(in nsIDOMNode aTarget, in nsIDOMEvent aEvent, in boolean aTrusted);</code> </td>\n  </tr>\n  <tr>\n   <td><code>nsIDOMElement <a href=\"#elementFromPoint()\">elementFromPoint</a>(in float aX, in float aY, in boolean aIgnoreRootScrollFrame, in boolean aFlushLayout);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#enterModalState()\">enterModalState</a>();</code> </td>\n  </tr>\n  <tr>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDOMElement\" title=\"\">nsIDOMElement</a></code> <a href=\"/en/XPCOM_Interface_Reference/nsIDOMWindowUtils#findElementWithViewId()\" title=\"en/XPCOM Interface Reference/nsIDOMWindowUtils#findElementWithViewId()\">findElementWithViewId</a>(in nsViewID aId);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#focus()\">focus</a>(in nsIDOMElement aElement);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#forceUpdateNativeMenuAt()\">forceUpdateNativeMenuAt</a>(in AString indexString);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#garbageCollect()\">garbageCollect</a>([optional] in nsICycleCollectorListener aListener);</code> </td>\n  </tr>\n  <tr>\n   <td><code>short <a href=\"#getCursorType()\">getCursorType</a>();</code> </td>\n  </tr>\n  <tr>\n   <td><code>AString <a href=\"#getDocumentMetadata()\">getDocumentMetadata</a>(in AString aName);</code></td>\n  </tr>\n  <tr>\n   <td><code>nsIDOMWindow <a href=\"#getOuterWindowWithId()\">getOuterWindowWithId</a>(in unsigned long long aOuterWindowID);</code> </td>\n  </tr>\n  <tr>\n   <td><code>long <a href=\"#getPCCountScriptCount()\" title=\"#getPCCountScriptCount()\">getPCCountScriptCount</a>();</code>  <span title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></td>\n  </tr>\n  <tr>\n   <td><code>AString <a href=\"#getPCCountScriptSummary()\" title=\"#getPCCountScriptSummary()\">getPCCountScriptSummary</a>(in long aScript);</code>  <span title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></td>\n  </tr>\n  <tr>\n   <td><code>AString <a href=\"#getPCCountScriptContents()\" title=\"#getPCCountScriptContents()\">getPCCountScriptContents</a>(in long aScript);</code>  <span title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#getScrollXY()\">getScrollXY</a>(in boolean aFlushLayout, out long aScrollX, out long aScrollY);</code> </td>\n  </tr>\n  <tr>\n   <td><code>AString <a href=\"#getVisitedDependentComputedStyle()\">getVisitedDependentComputedStyle</a>(in nsIDOMElement aElement, in AString aPseudoElement, in AString aPropertyName);</code> </td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#isInModalState()\">isInModalState</a>();</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#leaveModalState()\">leaveModalState</a>();</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#loadSheet()\">loadSheet</a>(in nsIURI sheetURI, in unsigned long type);</code> </td>\n  </tr>\n  <tr>\n   <td><code>nsIDOMNodeList <a href=\"#nodesFromRect()\">nodesFromRect</a>(in float aX, in float aY, in float aTopSize, in float aRightSize, in float aBottomSize, in float aLeftSize, in boolean aIgnoreRootScrollFrame, in boolean aFlushLayout);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#processUpdates()\">processUpdates</a>();</code> Â <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 13.0 / Thunderbird 13.0 / SeaMonkey 2.10)\">Obsolete since Gecko 13.0</span></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#purgePCCounts()\" title=\"#purgePCCounts()\">purgePCCounts</a>();</code>  <span title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></td>\n  </tr>\n  <tr>\n   <td><code>unsigned long <a href=\"#redraw()\">redraw</a>([optional] in unsigned long aCount);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#RenderDocument()\">RenderDocument</a>(in nsConstRect aRect, in PRUint32 aFlags, in nscolor aBackgroundColor, in gfxContext aThebesContext);</code> <span class=\"inlineIndicator noscript noscriptInline\" title=\"This method may only be called from C++; don't use it from JavaScript.\">Native code only!</span> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#removeSheet()\">removeSheet</a>(in nsIURI sheetURI, in unsigned long type);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#resumeTimeouts()\">resumeTimeouts</a>();</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#sendCompositionEvent()\">sendCompositionEvent</a>(in AString aType);</code> <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 9 / Thunderbird 9 / SeaMonkey 2.6)\">Obsolete since Gecko 9</span></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#sendCompositionEvent()\">sendCompositionEvent</a>(in AString aType, in AString aData, in AString aLocale);</code> <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 38.0 / Thunderbird 38.0 / SeaMonkey 2.35)\">Obsolete since Gecko 38.0</span></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#sendContentCommandEvent()\">sendContentCommandEvent</a>(in AString aType, [optional] in nsITransferable aTransferable);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#getClassName()\">getClassName</a>(in object aObj);</code> </td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#sendKeyEvent()\">sendKeyEvent</a>(in AString aType, in long aKeyCode, in long aCharCode, in long aModifiers, [optional] in boolean aPreventDefault);</code>  <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 15.0 / Thunderbird 15.0 / SeaMonkey 2.12)\">Obsolete since Gecko 15.0</span></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#sendKeyEvent()\">sendKeyEvent</a>(in AString aType, in long aKeyCode, in long aCharCode, in long aModifiers, [optional] in unsigned long aAdditionalFlags);</code>  <span class=\"inlineIndicator deprecated deprecatedInline\" title=\"(Firefox 38.0 / Thunderbird 38.0 / SeaMonkey 2.35)\">Deprecated since Gecko 38.0</span></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#sendMouseEvent()\">sendMouseEvent</a>(in AString aType, in float aX, in float aY, in long aButton, in long aClickCount, in long aModifiers, [optional] in boolean aIgnoreRootScrollFrame);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#sendMouseEventToWindow()\">sendMouseEventToWindow</a>(in AString aType, in float aX, in float aY, in long aButton, in long aClickCount, in long aModifiers, [optional] in boolean aIgnoreRootScrollFrame);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#sendMouseScrollEvent()\">sendMouseScrollEvent</a>(in AString aType, in float aX, in float aY, in long aButton, in long aScrollFlags, in long aDelta, in long aModifiers);</code>  <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 17.0 / Thunderbird 17.0 / SeaMonkey 2.14)\">Obsolete since Gecko 17.0</span></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#sendWheelEvent\">sendWheelEvent</a>(in float aX, in float aY, in double aDeltaX, in double aDeltaY, in double aDeltaZ, in unsigned long aDeltaMode, in long aModifiers, in long aLineOrPageDeltaX, in long aLineOrPageDeltaY, in unsigned long aOptions);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#sendNativeKeyEvent()\">sendNativeKeyEvent</a>(in long aNativeKeyboardLayout, in long aNativeKeyCode, in long aModifierFlags, in AString aCharacters, in AString aUnmodifiedCharacters);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#sendNativeMouseEvent()\">sendNativeMouseEvent</a>(in long aScreenX, in long aScreenY, in long aNativeMessage, in long aModifierFlags, in nsIDOMElement aElement);</code> </td>\n  </tr>\n  <tr>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIQueryContentEventResult\" title=\"\">nsIQueryContentEventResult</a></code> <a href=\"#sendQueryContentEvent()\">sendQueryContentEvent</a>(in unsigned long aType, in unsigned long aOffset, in unsigned long aLength, in long aX, in long aY);</code>  <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 31.0 / Thunderbird 31.0 / SeaMonkey 2.28)\">Obsolete since Gecko 31.0</span></td>\n  </tr>\n  <tr>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIQueryContentEventResult\" title=\"\">nsIQueryContentEventResult</a></code> <a href=\"#sendQueryContentEvent()\">sendQueryContentEvent</a>(in unsigned long aType, in unsigned long aOffset, in unsigned long aLength, in long aX, in long aY, [optional] in unsigned long aAdditionalFlags);</code> </td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#sendSelectionSetEvent()\">sendSelectionSetEvent</a>(in unsigned long aOffset, in unsigned long aLength, in boolean aReverse);</code>  <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 31.0 / Thunderbird 31.0 / SeaMonkey 2.28)\">Obsolete since Gecko 31.0</span></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#sendSelectionSetEvent()\">sendSelectionSetEvent</a>(in unsigned long aOffset, in unsigned long aLength, [optional] in unsigned long aAdditionalFlags);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#sendSimpleGestureEvent()\">sendSimpleGestureEvent</a>(in AString aType, in float aX, in float aY, in unsigned long aDirection, in double aDelta, in long aModifiers);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#sendTextEvent()\">sendTextEvent</a>(in AString aCompositionString, in long aFirstClauseLength, in unsigned long aFirstClauseAttr, in long aSecondClauseLength, in unsigned long aSecondClauseAttr, in long aThirdClauseLength, in unsigned long aThirdClauseAttr, in long aCaretStart, in long aCaretLength);</code> <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 26 / Thunderbird 26 / SeaMonkey 2.23 / Firefox OS 1.2)\">Obsolete since Gecko 26</span></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"/en/XPCOM_Interface_Reference/nsIDOMWindowUtils#sendTouchEvent()\" title=\"en/XPCOM_Interface_Reference/nsIDOMWindowUtils#sendTouchEvent()\">sendTouchEvent</a>(in AString aType, [array, size_is(count)] in PRUint32 aIdentifiers, [array, size_is(count)] in PRInt32 aXs, [array, size_is(count)] in PRInt32 aYs, [array, size_is(count)] in PRUint32 aRxs, [array, size_is(count)] in PRUint32 aRys, [array, size_is(count)] in float aRotationAngles, [array, size_is(count)] in float aForces, in PRUint32 count, in long aModifiers, [optional] in boolean aIgnoreRootScrollFrame);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setCSSViewport()\">setCSSViewport</a>(in float aWidthPx, in float aHeightPx);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setDisplayPort()\">setDisplayPort</a>(in float aXPx, in float aYPx, in float aWidthPx, in float aHeightPx);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setResolution()\">setResolution</a>(in float aXResolution, in float aYResolution);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#startPCCountProfiling()\" title=\"/en/XPCOM_Interface_Reference/nsIDOMWindowUtils#startPCCountProfiling()\">startPCCountProfiling</a>(); </code> <span title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#stopPCCountProfiling()\" title=\"/en/XPCOM_Interface_Reference/nsIDOMWindowUtils#stopPCCountProfiling()\">stopPCCountProfiling</a>();</code>  <span title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#suppressEventHandling()\">suppressEventHandling</a>(in boolean aSuppress);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#suspendTimeouts()\">suspendTimeouts</a>();</code> </td>\n  </tr>\n  <tr>\n   <td><code>nsIDOMFile <a href=\"#wrapDOMFile()\" title=\"wrapDOMFile()\">wrapDOMFile</a>(<code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFile\" title=\"\">nsIFile</a></code> aFile);</code> </td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Attributes\" name=\"Attributes\">Attributes</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Attribute</td>\n   <td class=\"header\">Type</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><a id=\"currentInnerWindowID\" name=\"currentInnerWindowID\"><code>currentInnerWindowID</code></a></td>\n   <td><code><a href=\"/en/unsigned_long_long\" title=\"en/unsigned long long\">unsigned long long</a></code></td>\n   <td>\n    <p>The ID of the window's current inner window. <strong>Read only.</strong> </p>\n\n    <h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n    <dl>\n     <dt><code>NS_ERROR_NOT_AVAILABLE</code></dt>\n     <dd>There is no current inner window</dd>\n    </dl>\n   </td>\n  </tr>\n  <tr>\n   <td><a id=\"displayDPI\" name=\"displayDPI\"><code>displayDPI</code></a></td>\n   <td><code><a href=\"/en/float\" title=\"en/float\">float</a></code></td>\n   <td>The DPI of the display. <strong>Read only.</strong> </td>\n  </tr>\n  <tr>\n   <td><a id=\"docCharsetIsForced\" name=\"docCharsetIsForced\"><code>docCharsetIsForced</code></a></td>\n   <td><code><a href=\"/en/boolean\" title=\"en/boolean\">boolean</a></code></td>\n   <td>Whether the charset of the window's current document has been forced by the user. Cannot be accessed from unprivileged context (not content-accessible) <strong>Read only.</strong> </td>\n  </tr>\n  <tr>\n   <td><a id=\"elementsRestyled\" name=\"elementsRestyled\"><code>elementsRestyled</code></a> <span class=\"inlineIndicator readOnly readOnlyInline\" title=\"This value may not be changed.\">Read only </span></td>\n   <td><code><a href=\"/en/unsigned_long_long\" title=\"en/unsigned long long\">unsigned long long</a></code></td>\n   <td>The number of elements which have been restyled for the current document. Keep in mind that during a restyle operation, an element may be restyled multiple times (for example, when an inline element contains blocks). This number also counts restyling of pseudo-elements and anonymous boxes. Throws <code>NS_ERROR_NOT_AVAILABLE</code> if the count can't be provided.</td>\n  </tr>\n  <tr>\n   <td><a id=\"focusedInputType\" name=\"focusedInputType\"><code>focusedInputType</code></a></td>\n   <td><code>string</code></td>\n   <td>The type of the currently-focused HTML <a href=\"/en-US/docs/Web/HTML/Element/input\" title=\"The HTML &lt;input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent.\"><code>&lt;input&gt;</code></a> element, if one is focused. </td>\n  </tr>\n  <tr>\n   <td><a id=\"imageAnimationMode\" name=\"imageAnimationMode\"><code>imageAnimationMode</code></a></td>\n   <td><code><a href=\"/en/unsigned_short\" title=\"en/unsigned short\">unsigned short</a></code></td>\n   <td>Returns the image animation mode of the window. The attribute's value must be one of the animationMode values from <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/imgIContainer\" title=\"\">imgIContainer</a></code>.</td>\n  </tr>\n  <tr>\n   <td><a id=\"IMEIsOpen\" name=\"IMEIsOpen\"><code>IMEIsOpen</code></a></td>\n   <td><code><a href=\"/en/boolean\" title=\"en/boolean\">boolean</a></code></td>\n   <td>Returns the IME open state. <code>True</code> if it's open, otherwise <code>false</code>. This attribute only works when <code>IMEStatus</code> is <code>IME_STATUS_ENABLED</code>. <strong>Read only.</strong> </td>\n  </tr>\n  <tr>\n   <td><a id=\"IMEStatus\" name=\"IMEStatus\"><code>IMEStatus</code></a></td>\n   <td><code><a href=\"/en/unsigned_long\" title=\"en/unsigned long\">unsigned long</a></code></td>\n   <td>Returns the current IME status. Values correspond to the <code>IME_STATUS_*</code> constants defined below. <strong>Read only.</strong> </td>\n  </tr>\n  <tr>\n   <td><a id=\"isMozAfterPaintPending\" name=\"isMozAfterPaintPending\"><code>isMozAfterPaintPending</code></a></td>\n   <td><code><a href=\"/en/boolean\" title=\"en/boolean\">boolean</a></code></td>\n   <td>Returns <code>true</code> if a <code>MozAfterPaint</code> event has been queued but not yet fired. <strong>Read only.</strong> </td>\n  </tr>\n  <tr>\n   <td><a id=\"layerManagerType\" name=\"layerManagerType\"><code>layerManagerType</code></a></td>\n   <td><code><a href=\"/en/AString\" title=\"en/AString\">AString</a></code></td>\n   <td>What type of layer manager the widget associated with this window is using. \"Basic\" is unaccelerated; other types are accelerated. Throws an error if there is no widget associated with this window. <strong>Read only.</strong> </td>\n  </tr>\n  <tr>\n   <td><a id=\"outerWindowID\" name=\"outerWindowID\"><code>outerWindowID</code></a></td>\n   <td><code><a href=\"/en/unsigned_long_long\" title=\"en/unsigned long long\">unsigned long long</a></code></td>\n   <td>The ID of the window's outer window. <strong>Read only.</strong> </td>\n  </tr>\n  <tr>\n   <td><a id=\"paintingSuppressed\" name=\"paintingSuppressed\"><code>paintingSuppressed</code></a></td>\n   <td><code>boolean</code></td>\n   <td>\n    <p><code>true</code> if painting is currently suppressed for this window; otherwise <code>false</code>. <strong>Read only.</strong> </p>\n\n    <p>This is used on mobile, for example, to prevent attempts to render content until enough of the page has been loaded to avoid content bouncing around excessively as more content is loaded.</p>\n   </td>\n  </tr>\n  <tr>\n   <td><a id=\"screenPixelsPerCSSPixel\" name=\"screenPixelsPerCSSPixel\"><code>screenPixelsPerCSSPixel</code></a></td>\n   <td><code><a href=\"/en/float\" title=\"en/float\">float</a></code></td>\n   <td>Returns the number of screen pixels per CSS pixel. <strong>Read only.</strong> </td>\n  </tr>\n  <tr>\n   <td><a id=\"audioMuted\" name=\"audioMuted\">audioMuted</a></td>\n   <td><code><a href=\"/en/boolean\" title=\"en/boolean\">boolean</a></code></td>\n   <td>With this it's possible to mute all the MediaElements in this window. We have audioMuted and audioVolume to preserve the volume across mute/umute.</td>\n  </tr>\n  <tr>\n   <td><a id=\"audioVolume\" name=\"audioVolume\">audioVolume</a></td>\n   <td><code><a href=\"/en/float\" title=\"en/float\">float</a></code></td>\n   <td>Range: greater or equal to 0. The real volume level is affected by the volume of all ancestor windows.</td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Constants\" name=\"Constants\">Constants</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Constant</td>\n   <td class=\"header\">Value</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>MODIFIER_ALT</code></td>\n   <td><code>0x0001</code></td>\n   <td><code>getModifierState(\"Alt\")</code> of the send event will return <code>true</code> if this is specified for <code>aModifiers</code> of <code>send*Event()</code> except <code>sendNative*Event()</code>. </td>\n  </tr>\n  <tr>\n   <td><code>MODIFIER_CONTROL</code></td>\n   <td><code>0x0002</code></td>\n   <td><code>getModifierState(\"Control\")</code> of the send event will return <code>true</code> if this is specified for <code>aModifiers</code> of <code>send*Event()</code> except <code>sendNative*Event()</code>. </td>\n  </tr>\n  <tr>\n   <td><code>MODIFIER_SHIFT</code></td>\n   <td><code>0x0004</code></td>\n   <td><code>getModifierState(\"Shift\")</code> of the send event will return <code>true</code> if this is specified for <code>aModifiers</code> of <code>send*Event()</code> except <code>sendNative*Event()</code>. </td>\n  </tr>\n  <tr>\n   <td><code>MODIFIER_META</code></td>\n   <td><code>0x0008</code></td>\n   <td><code>getModifierState(\"Meta\")</code> of the send event will return <code>true</code> if this is specified for <code>aModifiers</code> of <code>send*Event()</code> except <code>sendNative*Event()</code>. </td>\n  </tr>\n  <tr>\n   <td><code>MODIFIER_ALTGRAPH</code></td>\n   <td><code>0x0010</code></td>\n   <td><code>getModifierState(\"AltGraph\")</code> of the send event will return <code>true</code> if this is specified for <code>aModifiers</code> of <code>send*Event()</code> except <code>sendNative*Event()</code>. </td>\n  </tr>\n  <tr>\n   <td><code>MODIFIER_CAPSLOCK</code></td>\n   <td><code>0x0020</code></td>\n   <td><code>getModifierState(\"CapsLock\")</code> of the send event will return <code>true</code> if this is specified for <code>aModifiers</code> of <code>send*Event()</code> except <code>sendNative*Event()</code>. </td>\n  </tr>\n  <tr>\n   <td><code>MODIFIER_FN</code></td>\n   <td><code>0x0040</code></td>\n   <td><code>getModifierState(\"Fn\")</code> of the send event will return <code>true</code> if this is specified for <code>aModifiers</code> of <code>send*Event()</code> except <code>sendNative*Event()</code>. </td>\n  </tr>\n  <tr>\n   <td><code>MODIFIER_FNLOCK</code></td>\n   <td><code>0x0080</code></td>\n   <td><code>getModifierState(\"Fn\")</code> of the send event will return <code>true</code> if this is specified for <code>aModifiers</code> of <code>send*Event()</code> except <code>sendNative*Event()</code>. </td>\n  </tr>\n  <tr>\n   <td><code>MODIFIER_NUMLOCK</code></td>\n   <td><code>0x0100</code></td>\n   <td><code>getModifierState(\"NumLock\")</code> of the send event will return <code>true</code> if this is specified for <code>aModifiers</code> of <code>send*Event()</code> except <code>sendNative*Event()</code>.  Value Changed , was 0x0080.</td>\n  </tr>\n  <tr>\n   <td><code>MODIFIER_SCROLL</code></td>\n   <td><code>0x0100</code></td>\n   <td><code>getModifierState(\"Scroll\")</code> of the send event will return <code>true</code> if this is specified for <code>aModifiers</code> of <code>send*Event()</code> except <code>sendNative*Event()</code>. <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"\">Obsolete</span></td>\n  </tr>\n  <tr>\n   <td><code>MODIFIER_SCROLLLOCK</code></td>\n   <td><code>0x0200</code></td>\n   <td><code>getModifierState(\"Scroll\")</code> of the send event will return <code>true</code> if this is specified for <code>aModifiers</code> of <code>send*Event()</code> except <code>sendNative*Event()</code>. </td>\n  </tr>\n  <tr>\n   <td><code>MODIFIER_SYMBOL</code></td>\n   <td><code>0x0400</code></td>\n   <td><code>getModifierState(\"SymbolLock\")</code> of the send event will return <code>true</code> if this is specified for <code>aModifiers</code> of <code>send*Event()</code> except <code>sendNative*Event()</code>. </td>\n  </tr>\n  <tr>\n   <td><code>MODIFIER_SYMBOLLOCK</code></td>\n   <td><code>0x0800</code></td>\n   <td><code>getModifierState(\"SymbolLock\")</code> of the send event will return <code>true</code> if this is specified for <code>aModifiers</code> of <code>send*Event()</code> except <code>sendNative*Event()</code>.  Value Changed , was 0x0200.</td>\n  </tr>\n  <tr>\n   <td><code>MODIFIER_WIN</code></td>\n   <td><code>0x0400</code></td>\n   <td><code>getModifierState(\"Win\")</code> of the send event will return <code>true</code> if this is specified for <code>aModifiers</code> of <code>send*Event()</code> except <code>sendNative*Event()</code>. <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"\">Obsolete</span></td>\n  </tr>\n  <tr>\n   <td><code>MODIFIER_OS</code></td>\n   <td><code>0x1000</code></td>\n   <td><code>getModifierState(\"Os\")</code> of the send event will return <code>true</code> if this is specified for <code>aModifiers</code> of <code>send*Event()</code> except <code>sendNative*Event()</code>. </td>\n  </tr>\n  <tr>\n   <td><code>KEY_FLAG_PREVENT_DEFAULT</code></td>\n   <td><code>0x0001</code></td>\n   <td><code>getDefaultPrevented()</code> returns <code>true</code> if this is specified to <code>aAdditionalFlags</code> of <code>sendKeyEvent()</code>.  <span class=\"inlineIndicator deprecated deprecatedInline\" title=\"(Firefox 38.0 / Thunderbird 38.0 / SeaMonkey 2.35)\">Deprecated since Gecko 38.0</span></td>\n  </tr>\n  <tr>\n   <td><code>KEY_FLAG_NOT_SYNTHESIZED_FOR_TESTS</code></td>\n   <td><code>0x0002</code></td>\n   <td><code></code></td>\n  </tr>\n  <tr>\n   <td><code>KEY_FLAG_LOCATION_STANDARD</code></td>\n   <td><code>0x0010</code></td>\n   <td><code>location</code> attrubute of the sending key event by <code>sendKeyEvent()</code> returns <code>KeyboardEvent.DOM_KEY_LOCATION_STANDARD</code> if this is specified to the <code>aAdditionalFlags</code>. <span class=\"inlineIndicator deprecated deprecatedInline\" title=\"(Firefox 38.0 / Thunderbird 38.0 / SeaMonkey 2.35)\">Deprecated since Gecko 38.0</span></td>\n  </tr>\n  <tr>\n   <td><code>KEY_FLAG_LOCATION_LEFT</code></td>\n   <td><code>0x0020</code></td>\n   <td><code>location</code> attrubute of the sending key event by <code>sendKeyEvent()</code> returns <code>KeyboardEvent.DOM_KEY_LOCATION_LEFT</code> if this is specified to the <code>aAdditionalFlags</code>. <span class=\"inlineIndicator deprecated deprecatedInline\" title=\"(Firefox 38.0 / Thunderbird 38.0 / SeaMonkey 2.35)\">Deprecated since Gecko 38.0</span></td>\n  </tr>\n  <tr>\n   <td><code>KEY_FLAG_LOCATION_RIGHT</code></td>\n   <td><code>0x0040</code></td>\n   <td><code>location</code> attrubute of the sending key event by <code>sendKeyEvent()</code> returns <code>KeyboardEvent.DOM_KEY_LOCATION_RIGHT</code> if this is specified to the <code>aAdditionalFlags</code>. <span class=\"inlineIndicator deprecated deprecatedInline\" title=\"(Firefox 38.0 / Thunderbird 38.0 / SeaMonkey 2.35)\">Deprecated since Gecko 38.0</span></td>\n  </tr>\n  <tr>\n   <td><code>KEY_FLAG_LOCATION_NUMPAD</code></td>\n   <td><code>0x0080</code></td>\n   <td><code>location</code> attrubute of the sending key event by <code>sendKeyEvent()</code> returns <code>KeyboardEvent.DOM_KEY_LOCATION_NUMPAD</code> if this is specified to the <code>aAdditionalFlags</code>. <span class=\"inlineIndicator deprecated deprecatedInline\" title=\"(Firefox 38.0 / Thunderbird 38.0 / SeaMonkey 2.35)\">Deprecated since Gecko 38.0</span></td>\n  </tr>\n  <tr>\n   <td><code>KEY_FLAG_LOCATION_MOBILE</code></td>\n   <td><code>0x0100</code></td>\n   <td><code>location</code> attrubute of the sending key event by <code>sendKeyEvent()</code> returns <code>KeyboardEvent.DOM_KEY_LOCATION_MOBILE</code> if this is specified to the <code>aAdditionalFlags</code>.<span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 38.0 / Thunderbird 38.0 / SeaMonkey 2.35)\">Obsolete since Gecko 38.0</span></td>\n  </tr>\n  <tr>\n   <td><code>KEY_FLAG_LOCATION_JOYSTICK</code></td>\n   <td><code>0x0200</code></td>\n   <td><code>location</code> attrubute of the sending key event by <code>sendKeyEvent()</code> returns <code>KeyboardEvent.DOM_KEY_LOCATION_JOYSTICK</code> if this is specified to the <code>aAdditionalFlags</code>.<span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 38.0 / Thunderbird 38.0 / SeaMonkey 2.35)\">Obsolete since Gecko 38.0</span></td>\n  </tr>\n  <tr>\n   <td><code>WHEEL_EVENT_CAUSED_BY_NO_LINE_OR_PAGE_DELTA_DEVICE</code></td>\n   <td><code>0x0001</code></td>\n   <td>Used for <code>aOptions</code> of <code>sendWheelEvent()</code>.</td>\n  </tr>\n  <tr>\n   <td><code>WHEEL_EVENT_CAUSED_BY_PIXEL_ONLY_DEVICE</code></td>\n   <td><code>0x0001</code></td>\n   <td>Used for <code>aOptions</code> of <code>sendWheelEvent()</code>. If this is set, the synthesized wheel event emulates wheel events come from some devices without the line scroll amount by the event. It means that the <code>aLineOrPageDeltaX</code> and <code>aLineOrPageDeltaY</code> don't have proper values. </td>\n  </tr>\n  <tr>\n   <td><code>WHEEL_EVENT_CAUSED_BY_MOMENTUM</code></td>\n   <td><code>0x0002</code></td>\n   <td>Used for <code>aOptions</code> of <code>sendWheelEvent()</code>. If this is set, the synthesized wheel event emulates momentum scroll event. </td>\n  </tr>\n  <tr>\n   <td><code>WHEEL_EVENT_CUSTOMIZED_BY_USER_PREFS</code></td>\n   <td><code>0x0004</code></td>\n   <td>Used for <code>aOptions</code> of <code>sendWheelEvent()</code>. If this is set, the synthesized wheel event emulates an event whose delta values are computed from user prefs in widget level. </td>\n  </tr>\n  <tr>\n   <td><code>WHEEL_EVENT_EXPECTED_OVERFLOW_DELTA_X_ZERO</code></td>\n   <td><code>0x0010</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>WHEEL_EVENT_EXPECTED_OVERFLOW_DELTA_X_POSITIVE</code></td>\n   <td><code>0x0020</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>WHEEL_EVENT_EXPECTED_OVERFLOW_DELTA_X_NEGATIVE</code></td>\n   <td><code>0x0040</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>WHEEL_EVENT_EXPECTED_OVERFLOW_DELTA_Y_ZERO</code></td>\n   <td><code>0x0100</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>WHEEL_EVENT_EXPECTED_OVERFLOW_DELTA_Y_POSITIVE</code></td>\n   <td><code>0x0200</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>WHEEL_EVENT_EXPECTED_OVERFLOW_DELTA_Y_NEGATIVE</code></td>\n   <td><code>0x0400</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>MOUSESCROLL_PREFER_WIDGET_AT_POINT</code></td>\n   <td><code>1</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>MOUSESCROLL_SCROLL_LINES</code></td>\n   <td><code>2</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>MOUSESCROLL_WIN_SCROLL_LPARAM_NOT_NULL</code></td>\n   <td><code>65536</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>TOUCH_HOVER</code></td>\n   <td><code>1</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>TOUCH_CONTACT</code></td>\n   <td><code>2</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>TOUCH_REMOVE</code></td>\n   <td><code>4</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>TOUCH_CANCEL</code></td>\n   <td><code>8</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>IME_STATUS_DISABLED</code></td>\n   <td><code>0</code></td>\n   <td>Users cannot use IME at all. This state is not the same as <code>ime-mode: disabled</code>. </td>\n  </tr>\n  <tr>\n   <td><code>IME_STATUS_ENABLED</code></td>\n   <td><code>1</code></td>\n   <td>Users can use all functions of IME. This state is same as <code>ime-mode: normal</code>. </td>\n  </tr>\n  <tr>\n   <td><code>IME_STATUS_PASSWORD</code></td>\n   <td><code>2</code></td>\n   <td>Users cannot use most IME functions. On GTK2, users can use \"Simple IME\" which only supports dead key inputting. This state is the same as <code>ime-mode: password.</code> </td>\n  </tr>\n  <tr>\n   <td><code>IME_STATUS_PLUGIN</code></td>\n   <td><code>3</code></td>\n   <td>Plug-in has focus. At this time we should not attempt to set the IME state. </td>\n  </tr>\n  <tr>\n   <td><code>COMPOSITION_ATTR_RAWINPUT</code></td>\n   <td><code>0x02</code></td>\n   <td>\n    <p>Synthesize a text event to the window.</p>\n\n    <p>Cannot be accessed from unprivileged context (not content-accessible) Will throw a DOM security error if called without UniversalXPConnect privileges.</p>\n    Currently, this method doesn't support 4 or more clauses composition string.  <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 38.0 / Thunderbird 38.0 / SeaMonkey 2.35)\">Obsolete since Gecko 38.0</span></td>\n  </tr>\n  <tr>\n   <td><code>COMPOSITION_ATTR_SELECTEDRAWTEXT</code></td>\n   <td><code>0x03</code></td>\n   <td> <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 38.0 / Thunderbird 38.0 / SeaMonkey 2.35)\">Obsolete since Gecko 38.0</span></td>\n  </tr>\n  <tr>\n   <td><code>COMPOSITION_ATTR_CONVERTEDTEXT</code></td>\n   <td><code>0x04</code></td>\n   <td> <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 38.0 / Thunderbird 38.0 / SeaMonkey 2.35)\">Obsolete since Gecko 38.0</span></td>\n  </tr>\n  <tr>\n   <td><code>COMPOSITION_ATTR_SELECTEDCONVERTEDTEXT</code></td>\n   <td><code>0x05</code></td>\n   <td> <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 38.0 / Thunderbird 38.0 / SeaMonkey 2.35)\">Obsolete since Gecko 38.0</span></td>\n  </tr>\n  <tr>\n   <td><code>QUERY_CONTENT_FLAG_USE_NATIVE_LINE_BREAK</code></td>\n   <td><code>0x0000</code></td>\n   <td>One of values of <code>aAdditionalFlags</code> of <code>sendQueryContentEvent()</code>. This flag must not be set with <code>QUERY_CONTENT_FLAG_USE_XP_LINE_BREAK</code>. When this is set (or not set <code><code>QUERY_CONTENT_FLAG_USE_XP_LINE_BREAK</code></code>), the <code>aOffset</code> and <code>aLength</code> are offset and length in/of the content generated with native line breaks (E.g., <code>\"\\r\\n\"</code> on Windows). Additionally, the offset, length and string of result are also computed with native line breaks. </td>\n  </tr>\n  <tr>\n   <td><code>QUERY_CONTENT_FLAG_USE_XP_LINE_BREAK</code></td>\n   <td><code>0x0001</code></td>\n   <td>One of values of <code>aAdditionalFlags</code> of <code>sendQueryContentEvent()</code>. This flag must not be set with <code>QUERY_CONTENT_FLAG_USE_NATIVE_LINE_BREAK</code>. When this is set, the <code>aOffset</code> and <code>aLength</code> are offset and length in/of the content generated with XP line breaks (I.e., <code>\"\\n\"</code> on all platforms). Additionally, the offset, length and string of result are also computed with XP line breaks. This is more useful for Javascript in chrome. </td>\n  </tr>\n  <tr>\n   <td><code>QUERY_CONTENT_FLAG_SELECTION_SPELLCHECK</code></td>\n   <td><code>0x0002</code></td>\n   <td>One of values of <code>aAdditionalFlags</code> of <code>sendQueryContentEvent()</code>.</td>\n  </tr>\n  <tr>\n   <td><code>QUERY_CONTENT_FLAG_SELECTION_IME_RAWINPUT</code></td>\n   <td><code>0x0008</code></td>\n   <td>One of values of <code>aAdditionalFlags</code> of <code>sendQueryContentEvent()</code>.</td>\n  </tr>\n  <tr>\n   <td><code>QUERY_CONTENT_FLAG_SELECTION_IME_SELECTEDRAWTEXT</code></td>\n   <td><code>0x0010</code></td>\n   <td>One of values of <code>aAdditionalFlags</code> of <code>sendQueryContentEvent()</code>.</td>\n  </tr>\n  <tr>\n   <td><code>QUERY_CONTENT_FLAG_SELECTION_IME_CONVERTEDTEXT</code></td>\n   <td><code>0x0020</code></td>\n   <td>One of values of <code>aAdditionalFlags</code> of <code>sendQueryContentEvent()</code>.</td>\n  </tr>\n  <tr>\n   <td><code>QUERY_CONTENT_FLAG_SELECTION_IME_SELECTEDCONVERTEDTEXT</code></td>\n   <td><code>0x0040</code></td>\n   <td>One of values of <code>aAdditionalFlags</code> of <code>sendQueryContentEvent()</code>.</td>\n  </tr>\n  <tr>\n   <td><code>QUERY_CONTENT_FLAG_SELECTION_ACCESSIBILITY</code></td>\n   <td><code>0x0080</code></td>\n   <td>One of values of <code>aAdditionalFlags</code> of <code>sendQueryContentEvent()</code>.</td>\n  </tr>\n  <tr>\n   <td><code>QUERY_CONTENT_FLAG_SELECTION_FIND</code></td>\n   <td><code>0x0100</code></td>\n   <td>One of values of <code>aAdditionalFlags</code> of <code>sendQueryContentEvent()</code>.</td>\n  </tr>\n  <tr>\n   <td><code>QUERY_CONTENT_FLAG_SELECTION_URLSECONDARY</code></td>\n   <td><code>0x0200</code></td>\n   <td>One of values of <code>aAdditionalFlags</code> of <code>sendQueryContentEvent()</code>.</td>\n  </tr>\n  <tr>\n   <td><code>QUERY_CONTENT_FLAG_SELECTION_URLSTRIKEOUT</code></td>\n   <td><code>0x0400</code></td>\n   <td>One of values of <code>aAdditionalFlags</code> of <code>sendQueryContentEvent()</code>.</td>\n  </tr>\n  <tr>\n   <td><code>QUERY_CONTENT_FLAG_OFFSET_RELATIVE_TO_INSERTION_POINT</code></td>\n   <td><code>0x0800</code></td>\n   <td>One of values of <code>aAdditionalFlags</code> of <code>sendQueryContentEvent()</code>.</td>\n  </tr>\n  <tr>\n   <td><code>QUERY_SELECTED_TEXT</code></td>\n   <td><code>3200</code></td>\n   <td><code>QUERY_SELECTED_TEXT</code> queries the first selection range's information. </td>\n  </tr>\n  <tr>\n   <td><code>QUERY_TEXT_CONTENT</code></td>\n   <td><code>3201</code></td>\n   <td><code>QUERY_TEXT_CONTENT</code> queries the text at the specified range. </td>\n  </tr>\n  <tr>\n   <td><code>QUERY_CARET_RECT</code></td>\n   <td><code>3203</code></td>\n   <td><code>QUERY_CARET_RECT</code> queries the (collapsed) caret rect of the offset. If the actual caret is there at the specified offset, this returns the actual caret rect. Otherwise, this guesses the caret rect from the metrics of the text. </td>\n  </tr>\n  <tr>\n   <td><code>QUERY_TEXT_RECT</code></td>\n   <td><code>3204</code></td>\n   <td><code>QUERY_TEXT_RECT</code> queries the specified text's rect. </td>\n  </tr>\n  <tr>\n   <td><code>QUERY_EDITOR_RECT</code></td>\n   <td><code>3205</code></td>\n   <td><code>QUERY_TEXT_RECT</code> queries the focused editor's rect. </td>\n  </tr>\n  <tr>\n   <td><code>QUERY_CHARACTER_AT_POINT</code></td>\n   <td><code>3208</code></td>\n   <td>\n    <p><code>QUERY_CHARACTER_AT_POINT</code> queries the character information at the specified point. The point is offset in the window.</p>\n    <div class=\"blockIndicator note\"><strong>Note:</strong>Â If there are some panels at the point, this method send the query event to the panel's widget automatically.</div> </td>\n  </tr>\n  <tr>\n   <td><code>QUERY_TEXT_RECT_ARRAY</code></td>\n   <td><code>3209</code></td>\n   <td></td>\n  </tr>\n  <tr>\n  </tr>\n  <tr>\n   <td><code>SELECTION_SET_FLAG_USE_NATIVE_LINE_BREAK</code></td>\n   <td><code>0x0000</code></td>\n   <td>One of values of <code>aAdditionalFlags</code> of <code>sendSelectionSetEvent()</code>. This flag must not be set with <code>SELECTION_SET_FLAG_USE_XP_LINE_BREAK</code>. When this is set (or not set <code>SELECTION_SET_FLAG_USE_XP_LINE_BREAK)</code>, the <code>aOffset</code> and <code>aLength</code> are offset and length in/of the content generated with native line breaks (E.g., <code>\"\\r\\n\"</code> on Windows) </td>\n  </tr>\n  <tr>\n   <td><code>SELECTION_SET_FLAG_USE_XP_LINE_BREAK</code></td>\n   <td><code>0x0001</code></td>\n   <td>One of values of <code>aAdditionalFlags</code> of <code>sendSelectionSetEvent()</code>. This flag must not be set with <code>SELECTION_SET_FLAG_USE_NATIVE_LINE_BREAK</code>. When this is set, the <code>aOffset</code> and <code>aLength</code> are offset and length in/of the content generated with XP line breaks (I.e., <code>\"\\n\"</code> on all platforms). This is more useful for Javascript in chrome </td>\n  </tr>\n  <tr>\n   <td><code>SELECTION_SET_FLAG_REVERSE</code></td>\n   <td><code>0x0002</code></td>\n   <td>One of values of <code>aAdditionalFlags</code> of <code>sendSelectionSetEvent()</code>. If this is set, the selection is set from <code>aOffset + aLength</code> to <code>aOffset</code>.</td>\n  </tr>\n  <tr>\n   <td><code>SELECT_CHARACTER</code></td>\n   <td><code>0</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>SELECT_CLUSTER</code></td>\n   <td><code>1</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>SELECT_WORD</code></td>\n   <td><code>2</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>SELECT_LINE</code></td>\n   <td><code>3</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>SELECT_BEGINLINE</code></td>\n   <td><code>4</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>SELECT_ENDLINE</code></td>\n   <td><code>5</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>SELECT_PARAGRAPH</code></td>\n   <td><code>6</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>SELECT_WORDNOSPACE</code></td>\n   <td><code>7</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>AGENT_SHEET</code></td>\n   <td><code>0</code></td>\n   <td>A possible <code>type</code> of a style sheet loaded/removed with <code>loadSheet()</code>/<code>removeSheet()</code>. See <a href=\"http://www.w3.org/TR/CSS2/cascade.html#cascade\">CSS2 specification</a> for details. </td>\n  </tr>\n  <tr>\n   <td><code>USER_SHEET</code></td>\n   <td><code>1</code></td>\n   <td>A possible <code>type</code> of a style sheet loaded/removed with <code>loadSheet()</code>/<code>removeSheet()</code>. See <a href=\"http://www.w3.org/TR/CSS2/cascade.html#cascade\">CSS2 specification</a> for details. </td>\n  </tr>\n  <tr>\n   <td><code>AUTHOR_SHEET</code></td>\n   <td><code>2</code></td>\n   <td>A possible <code>type</code> of a style sheet loaded/removed with <code>loadSheet()</code>/<code>removeSheet()</code>. See <a href=\"http://www.w3.org/TR/CSS2/cascade.html#cascade\">CSS2 specification</a> for details. </td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n\n<p></p><h3 id=\"activateNativeMenuItemAt()\">activateNativeMenuItemAt()</h3><p></p>\n\n<p>See <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIWidget#ActivateNativeMenuItemAt()\">nsIWidget.ActivateNativeMenuItemAt()</a></code>.</p>\n\n<p>Cannot be accessed from unprivileged context (not content-accessible) Will throw a DOM security error if called without UniversalXPConnect privileges.</p>\n\n<pre class=\"eval\">void activateNativeMenuItemAt(\n  in AString indexString\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>indexString</code></dt>\n <dd>Â </dd>\n</dl>\n\n<p></p><h3 id=\"clearMozAfterPaintEvents()\">clearMozAfterPaintEvents()</h3><p></p>\n\n<pre class=\"eval\">void clearMozAfterPaintEvents();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<p></p><h3 id=\"compareCanvases()\">compareCanvases()</h3><p></p>\n\n<p>Compare the two canvases, returning the number of differing pixels and the maximum difference in a channel. This will throw an error if the dimensions of the two canvases are different.</p>\n\n<p>This method requires UniversalXPConnect privileges.</p>\n\n<pre class=\"eval\">PRUint32 compareCanvases(\n  in nsIDOMHTMLCanvasElement aCanvas1,\n  in nsIDOMHTMLCanvasElement aCanvas2,\n  out unsigned long aMaxDifference\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aCanvas1</code></dt>\n <dd>Â </dd>\n <dt><code>aCanvas2</code></dt>\n <dd>Â </dd>\n <dt><code>aMaxDifference</code></dt>\n <dd>Â </dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Â </p>\n\n<p></p><h3 id=\"computeAnimationDistance()\">computeAnimationDistance()</h3><p></p>\n\n<p>Method for testing nsStyleAnimation::ComputeDistance.</p>\n\n<p>Returns the distance between the two values as reported by nsStyleAnimation::ComputeDistance for the given element and property.</p>\n\n<pre class=\"eval\">double computeAnimationDistance(\n  in nsIDOMElement element,\n  in AString property,\n  in AString value1,\n  in AString value2\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>element</code></dt>\n <dd>Â </dd>\n <dt><code>property</code></dt>\n <dd>Â </dd>\n <dt><code>value1</code></dt>\n <dd>Â </dd>\n <dt><code>value2</code></dt>\n <dd>Â </dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Â </p>\n\n<p></p><h3 id=\"createCompositionStringSynthesizer()\">createCompositionStringSynthesizer()</h3><p></p>\n\n<p><span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 38 / Thunderbird 38 / SeaMonkey 2.35)\">Obsolete since Gecko 38</span> Method for creating an instance which has <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsICompositionStringSynthesizer\" title=\"\">nsICompositionStringSynthesizer</a></code>.</p>\n\n<p>However, this is obsoleted since <span title=\"(Firefox 38 / Thunderbird 38 / SeaMonkey 2.35)\">GeckoÂ 38</span>, use <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITextInputProcessor\" title=\"\">nsITextInputProcessor</a></code> instead.</p>\n\n<pre>nsICompositionStringSynthesizer createCompositionStringSynthesizer();</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Return value</h6>\n\n<p>An instance of <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsICompositionStringSynthesizer\" title=\"\">nsICompositionStringSynthesizer</a></code>. It's associated with the DOM window which is associated with the instance of nsIDOMWindowUtils.</p>\n\n<p></p><h3 id=\"disableNonTestMouseEvents()\">disableNonTestMouseEvents()</h3><p></p>\n\n<p>Disable or enable non synthetic test mouse events on *all* windows.</p>\n\n<p>Cannot be accessed from unprivileged context (not content-accessible). Will throw a DOM security error if called without UniversalXPConnect privileges.</p>\n\n<pre class=\"eval\">void disableNonTestMouseEvents(\n  in boolean aDisable\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aDisable</code></dt>\n <dd>If <code>true</code>, disable all non synthetic test mouse events on all windows. Otherwise, enable them.</dd>\n</dl>\n\n<p></p><h3 id=\"dispatchDOMEventViaPresShell()\">dispatchDOMEventViaPresShell()</h3><p></p>\n\n<p>Dispatches aEvent via the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIPresShell\" title=\"\">nsIPresShell</a></code> object of the window's document. The event is dispatched to aTarget, which should be an object which implements <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIContent\" title=\"\">nsIContent</a></code> interface (#element, #text, etc).</p>\n\n<p>Cannot be accessed from unprivileged context (not content-accessible) Will throw a DOM security error if called without UniversalXPConnect privileges.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong>Â Event handlers won't get aEvent as parameter, but a similar event. Also, aEvent should not be reused.</div><p></p>\n\n<pre class=\"eval\">boolean dispatchDOMEventViaPresShell(\n  in nsIDOMNode aTarget,\n  in nsIDOMEvent aEvent,\n  in boolean aTrusted\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aTarget</code></dt>\n <dd>Â </dd>\n <dt><code>aEvent</code></dt>\n <dd>Â </dd>\n <dt><code>aTrusted</code></dt>\n <dd>Â </dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>boolean to show if the event was successful</p>\n\n<p>Â </p>\n\n<p></p><h3 id=\"elementFromPoint()\">elementFromPoint()</h3><p></p>\n\n<p>Retrieve the element at point aX, aY in the window's document.</p>\n\n<pre class=\"eval\">nsIDOMElement elementFromPoint(\n  in float aX,\n  in float aY,\n  in boolean aIgnoreRootScrollFrame,\n  in boolean aFlushLayout\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aX</code></dt>\n <dd>Â </dd>\n <dt><code>aY</code></dt>\n <dd>Â </dd>\n <dt><code>aIgnoreRootScrollFrame</code></dt>\n <dd>Whether or not to ignore the root scroll frame when retrieving the element. If <code>false</code>, this method returns <code>null</code> for coordinates outside of the viewport.</dd>\n <dt><code>aFlushLayout</code></dt>\n <dd>Flushes layout if <code>true</code>. Otherwise, no flush occurs.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Â </p>\n\n<p></p><h3 id=\"enterModalState()\">enterModalState()</h3><p></p>\n\n<p>Put the window into a state where scripts are frozen and events suppressed, for use when the window has launched a modal prompt.</p>\n\n<pre class=\"eval\">void enterModalState();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<p></p><h3 id=\"findElementWithViewId()\">findElementWithViewId()</h3><p></p>\n\n<p>Given a view IDÂ from the compositor process, return the corresponding DOMÂ element object.</p>\n\n<pre>nsIDOMElement findElementWithViewId(\nÂ  in nsViewID aId\n); \n</pre>\n\n<h6 id=\"Parameters_2\">Parameters</h6>\n\n<dl>\n <dt><code>aId</code></dt>\n <dd>The ID of the view for which to retrieve the corresponding <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDOMElement\" title=\"\">nsIDOMElement</a></code>Â object.</dd>\n</dl>\n\n<h6 id=\"Return_value_2\">Return value</h6>\n\n<p>The <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDOMElement\" title=\"\">nsIDOMElement</a></code>Â object for the HTMLÂ element drawn by the specified view ID.</p>\n\n<div class=\"note\"><strong>Note:</strong> For scrollable frames containing documents (that is, <a href=\"/en-US/docs/Web/HTML/Element/frame\" title=\"&lt;frame> is an HTML element which defines a particular area in which another HTML document can be displayed. A frame should be used within a &lt;frameset>.\"><code>&lt;frame&gt;</code></a>Â and <a href=\"/en-US/docs/Web/HTML/Element/iframe\" title=\"The HTML Inline Frame element (&lt;iframe>) represents a nested browsing context, embedding another HTML page into the current one.\"><code>&lt;iframe&gt;</code></a>), the enclosed document's root element is returned.</div>\n\n<p></p><h3 id=\"focus()\">focus()</h3><p></p>\n\n<p>Focus the element aElement. The element should be in the same document that the window is displaying. Pass <code>null</code> to blur the element, if any, that currently has focus, and focus the document.</p>\n\n<p>Cannot be accessed from unprivileged context (not content-accessible) Will throw a DOM security error if called without UniversalXPConnect privileges.</p>\n\n<p>Do not use this method. Just use element.focus if available or <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIFocusManager#SetFocus()\">nsIFocusManager.SetFocus()</a></code> instead.</p>\n\n<pre class=\"eval\">void focus(\n  in nsIDOMElement aElement\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aElement</code></dt>\n <dd>The element to focus.</dd>\n</dl>\n\n<p></p><h3 id=\"forceUpdateNativeMenuAt()\">forceUpdateNativeMenuAt()</h3><p></p>\n\n<p>See <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIWidget#ForceUpdateNativeMenuAt()\">nsIWidget.ForceUpdateNativeMenuAt()</a></code>.</p>\n\n<p>Cannot be accessed from unprivileged context (not content-accessible) Will throw a DOM security error if called without UniversalXPConnect privileges.</p>\n\n<pre class=\"eval\">void forceUpdateNativeMenuAt(\n  in AString indexString\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>indexString</code></dt>\n <dd>Â </dd>\n</dl>\n\n<p></p><h3 id=\"garbageCollect()\">garbageCollect()</h3><p></p>\n\n<p>Force a garbage collection followed by a cycle collection.</p>\n\n<p>Will throw a DOM security error if called without UniversalXPConnect privileges in non-debug builds. Available to all callers in debug builds.</p>\n\n<pre class=\"eval\">void garbageCollect(\n  in nsICycleCollectorListener aListener <span class=\"inlineIndicator optional optionalInline\">Optional</span> \n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aListener</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span> </dt>\n <dd>Listener that receives information about the CC graph (see @mozilla.org/cycle-collector-logger;1 for a logger component)</dd>\n</dl>\n\n<p></p><h3 id=\"getCursorType()\">getCursorType()</h3><p></p>\n\n<p>Get current cursor type from this window.</p>\n\n<pre class=\"eval\">short getCursorType();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>The current value of nsCursor.</p>\n\n<h3 id=\"getDocumentMetadata()\" name=\"getDocumentMetadata()\">getDocumentMetadata()</h3>\n\n<p>Function to get metadata associated with the window's current document.</p>\n\n<p>Will throw a DOM security error if called without UniversalXPConnect privileges.</p>\n\n<pre class=\"eval\">AString getDocumentMetadata(\n  in AString aName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aName</code></dt>\n <dd>The name of the metadata. This should be all lowercase.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>The value of the metadata, or the empty string if it's not set.</p>\n\n<p></p><h3 id=\"getOuterWindowWithId()\">getOuterWindowWithId()</h3><p></p>\n\n<p>Returns the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDOMWindow\" title=\"\">nsIDOMWindow</a></code> matching the specified outer window's ID.</p>\n\n<pre class=\"eval\">nsIDOMWindow getOuterWindowWithId(\n  in unsigned long long aOuterWindowID\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aOuterWindowID</code></dt>\n <dd>The ID of the outer window for which to return the window.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>An <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDOMWindow\" title=\"\">nsIDOMWindow</a></code> object representing the outer window with the specified ID; if no matching window is found, returns <code>null</code>.</p>\n\n<p><br>\n <a name=\"getPCCountScriptCount()\"></a></p><h3 id=\"getPCCountScriptCount()_2\">getPCCountScriptCount()</h3> <span title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span><p></p>\n\n<p>Returns the number of scripts which profile information was constructed for.Â  This should be used after a call to <code><a href=\"#stopPCCountProfiling()\" title=\"#stopPCCountProfiling()\">stopPCCountProfiling</a>()</code>.</p>\n\n<pre>long getPCCountScriptCount();</pre>\n\n<h6 id=\"Parameters_3\">Parameters</h6>\n\n<p>None.</p>\n\n<p><a name=\"getPCCountScriptSummary()\"></a></p><h3 id=\"getPCCountScriptSummary()_2\">getPCCountScriptSummary()</h3> <span title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span><p></p>\n\n<p>Returns a summary of the profile information for a script.Â  This should be used after a call to <code><a href=\"#stopPCCountProfiling()\" title=\"#stopPCCountProfiling()\">stopPCCountProfiling</a>()</code>.</p>\n\n<pre>AString getPCCountScriptSummary(in long aScript);</pre>\n\n<h6 id=\"Parameters_4\">Parameters</h6>\n\n<dl>\n <dt><code>aScript</code></dt>\n <dd>Index of the profiled script to get the profile summary for.Â  Should be less than <code><a href=\"#getPCCountScriptCount()\" title=\"#getPCCountScriptCount()\">getPCCountScriptCount</a>()</code>.</dd>\n</dl>\n\n<h6 id=\"Return_value_3\">Return value</h6>\n\n<p>A JSON string summarizing the information profiled about the script.Â  This includes counts for how often and in what ways the script executed.Â  The structure of the JSON is unspecified and may vary between versions of Firefox.</p>\n\n<p><a name=\"getPCCountScriptContents()\"></a></p><h3 id=\"getPCCountScriptContents()_2\">getPCCountScriptContents()</h3> <span title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span><p></p>\n\n<p>Returns detailed information about the profile information for a script.Â  This should be used after a call to <code><a href=\"#stopPCCountProfiling()\" title=\"#stopPCCountProfiling()\">stopPCCountProfiling</a>()</code>.</p>\n\n<pre>AString getPCCountScriptContents(in long script);</pre>\n\n<h6 id=\"Parameters_5\">Parameters</h6>\n\n<dl>\n <dt><code>aScript</code></dt>\n <dd>Index of the profiled script to get the profile contents for.Â  Should be less than <code><a href=\"#getPCCountScriptCount()\" title=\"#getPCCountScriptCount()\">getPCCountScriptCount</a>()</code>.</dd>\n</dl>\n\n<h6 id=\"Return_value_4\">Return value</h6>\n\n<p>A JSON string with all profile information accumulated for the script.Â  This includes the text of the script and details about its internal representation in SpiderMonkey, and counts for how often and in what ways each operation in the script executed.Â  The structure of the JSON is unspecified and may vary between versions of Firefox.</p>\n\n<p></p><h3 id=\"getScrollXY()\">getScrollXY()</h3><p></p>\n\n<p>Returns the scroll position of the window's currently loaded document.</p>\n\n<pre class=\"eval\">void getScrollXY(\n  in boolean aFlushLayout,\n  out long aScrollX,\n  out long aScrollY\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aFlushLayout</code></dt>\n <dd>Flushes layout if <code>true</code>. Otherwise, no flush occurs.</dd>\n <dt><code>aScrollX</code></dt>\n <dd>Â </dd>\n <dt><code>aScrollY</code></dt>\n <dd>Â </dd>\n</dl>\n\n<p></p><h3 id=\"getVisitedDependentComputedStyle()\">getVisitedDependentComputedStyle()</h3><p></p>\n\n<p>Perform the equivalent of: window.getComputedStyle(aElement, aPseudoElement). getPropertyValue(aPropertyName) except that, when the link whose presence in history is allowed to influence aElement's style is visited, get the value the property would have if allowed all properties to change as a result of :visited selectors (except for cases where getComputedStyle uses data from the frame).</p>\n\n<p>This is easier to implement than adding our property restrictions to this API, and is sufficient for the present testing requirements (which are essentially testing 'color').</p>\n\n<pre class=\"eval\">AString getVisitedDependentComputedStyle(\n  in nsIDOMElement aElement,\n  in AString aPseudoElement,\n  in AString aPropertyName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aElement</code></dt>\n <dd>Â </dd>\n <dt><code>aPseudoElement</code></dt>\n <dd>Â </dd>\n <dt><code>aPropertyName</code></dt>\n <dd>Â </dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Â </p>\n\n<p></p><h3 id=\"isInModalState()\">isInModalState()</h3><p></p>\n\n<p>Is the window is in a modal state? [See <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDOMWindowUtils#enterModalState()\">enterModalState()</a></code>]</p>\n\n<pre class=\"eval\">boolean isInModalState();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Â </p>\n\n<p></p><h3 id=\"leaveModalState()\">leaveModalState()</h3><p></p>\n\n<p>Resume normal window state, where scripts can run and events are delivered.</p>\n\n<pre class=\"eval\">void leaveModalState();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<p>Â </p>\n\n<p></p><h3 id=\"loadSheet()\">loadSheet()</h3><p></p>\n\n<p>Synchronously loads a style sheet from |sheetURI| and adds it to the list of additional style sheets of the document.<br>\n These additional style sheets are very much like user/agent sheets loaded with <code>loadAndRegisterSheet</code>. The only difference is that they are applied only on the document owned by this window.<br>\n Sheets added via this API take effect immediately on the document.</p>\n\n<pre class=\"eval\">unsigned long loadSheet(\n  in nsIURI sheetURI, in unsigned long type\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>sheetURI</code></dt>\n <dd>The <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> of the CSS file to be removed.</dd>\n <dt><code>type</code></dt>\n <dd>The type of the sheet (<code>AGENT_SHEET</code>, <code>USER_SHEET</code> or <code>AUTHOR_SHEET</code>).</dd>\n</dl>\n\n<p></p><h3 id=\"nodesFromRect()\">nodesFromRect()</h3><p></p>\n\n<p>Returns an <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDOMNodeList\" title=\"\">nsIDOMNodeList</a></code> containing all nodes that intersect a specified rectangle within the window's document. The rectangle is specified using a central point and a distance to expand in all four cardinal directions. This is used to locate nodes that are within some number of pixels of a point; for example, you can use this to find candidate target nodes when the user taps on a touch screen.</p>\n\n<pre class=\"eval\">nsIDOMNodeList nodesFromRect(\n  in float aX,\n  in float aY,\n  in float aTopSize,\n  in float aRightSize,\n  in float aBottomSize,\n  in float aLeftSize,\n  in boolean aIgnoreRootScrollFrame,\n  in boolean aFlushLayout\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aX</code></dt>\n <dd>The X coordinate of the point at which to begin constructing the rectangle, in CSSÂ pixels.</dd>\n <dt><code>aY</code></dt>\n <dd>The Y coordinate of the point at which to begin constructing the rectangle, in CSSÂ pixels.</dd>\n <dt><code>aTopSize</code></dt>\n <dd>The number of CSS pixels to expand the rectangle upward from the point <code>(aX, aY)</code>.</dd>\n <dt><code>aRightSize</code></dt>\n <dd>The number of CSS pixels to expand the rectangle to the right from the point <code>(aX, aY)</code>.</dd>\n <dt><code>aBottomSize</code></dt>\n <dd>The number of CSS pixels to expand the rectangle downward from the point <code>(aX, aY)</code>.</dd>\n <dt><code>aLeftSize</code></dt>\n <dd>The number of CSS pixels to expand the rectangle to the left from the point <code>(aX, aY)</code>.</dd>\n <dt><code>aIgnoreRootScrollFrame</code></dt>\n <dd>Whether or not to ignore the root scroll frame when retrieving the nodes. If this is <code>false</code>, this method will return <code>null</code> for coordinates outside the viewport.</dd>\n <dt><code>aFlushLayout</code></dt>\n <dd>If <code>true</code>, layout is flushed before hit testing begins. This ensures that the node list is current. If you don't need an absolutely up to date node list, you can set this to <code>false</code>.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>An <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDOMNodeList\" title=\"\">nsIDOMNodeList</a></code> referencing all the nodes that intersect the specified rectangle.</p>\n\n<p></p><div class=\"headingWithIndicator\">\n        <h3 id=\"processUpdates()\">processUpdates()</h3>\n        <span class=\"indicatorInHeadline obsolete obsoleteMethod\">Obsolete since Gecko 13.0 (Firefox 13.0 / Thunderbird 13.0 / SeaMonkey 2.10)</span>\n        </div><p></p>\n\n<p>Force processing of any queued paints.</p>\n\n<pre class=\"eval\">void processUpdates();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<p><a name=\"purgePCCounts()\"></a></p><h3 id=\"purgePCCounts()_2\">purgePCCounts()</h3> <span title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span><p></p>\n\n<p>Purge all accumulated profile information for scripts which was generated after a call to <code><a href=\"#stopPCCountProfiling()\" title=\"#stopPCCountProfiling()\">stopPCCountProfiling</a>()</code>.</p>\n\n<pre>void purgePCCounts();</pre>\n\n<h6 id=\"Parameters_6\">Parameters</h6>\n\n<p>None.</p>\n\n<p></p><h3 id=\"redraw()\">redraw()</h3><p></p>\n\n<p>Force an immediate redraw of this window. The parameter specifies the number of times to redraw, and the return value is the length, in milliseconds, that the redraws took. If aCount is not specified or is 0, it is taken to be 1.</p>\n\n<pre class=\"eval\">unsigned long redraw(\n  in unsigned long aCount <span class=\"inlineIndicator optional optionalInline\">Optional</span> \n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aCount</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span> </dt>\n <dd>Â </dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Â </p>\n\n<p></p><h3 id=\"removeSheet()\">removeSheet()</h3><p></p>\n\n<p>Remove the document style sheet at <code>sheetURI</code> from the list of additional style sheets of the document. The removal takes effect immediately.</p>\n\n<pre class=\"eval\">unsigned long removeSheet(\n  in nsIURI sheetURI, in unsigned long type\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>sheetURI</code></dt>\n <dd>The <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> of the CSS file to be removed.</dd>\n <dt><code>type</code></dt>\n <dd>The type of the sheet (<code>AGENT_SHEET</code>, <code>USER_SHEET</code> or <code>AUTHOR_SHEET</code>).</dd>\n</dl>\n\n<p>Â </p>\n\n<p></p><div><span class=\"indicatorInHeadline noscript noscriptMethod\" title=\"This method may only be called from C++; don't use it from JavaScript.\">Native code only!</span><h3 id=\"RenderDocument\">RenderDocument</h3></div><p></p>\n\n<p></p>\n\n<pre class=\"eval\">void RenderDocument(\n  in nsConstRect aRect,\n  in PRUint32 aFlags,\n  in nscolor aBackgroundColor,\n  in gfxContext aThebesContext\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aRect</code></dt>\n <dd>Â </dd>\n <dt><code>aFlags</code></dt>\n <dd>Â </dd>\n <dt><code>aBackgroundColor</code></dt>\n <dd>Â </dd>\n <dt><code>aThebesContext</code></dt>\n <dd>Â </dd>\n</dl>\n\n<p></p><h3 id=\"resumeTimeouts()\">resumeTimeouts()</h3><p></p>\n\n<p>Resumes timeouts on this window and its descendant windows.</p>\n\n<pre class=\"eval\">void resumeTimeouts();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<p></p><h3 id=\"sendCompositionEvent()\">sendCompositionEvent()</h3><p></p>\n\n<p><span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 38 / Thunderbird 38 / SeaMonkey 2.35)\">Obsolete since Gecko 38</span> Synthesize a composition event to the window.</p>\n\n<p>Cannot be accessed from unprivileged context (not content-accessible) Will throw a DOM security error if called without UniversalXPConnect privileges.</p>\n\n<p>This is obsoleted since <span title=\"(Firefox 38 / Thunderbird 38 / SeaMonkey 2.35)\">GeckoÂ 38</span>. Use <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITextInputProcessor\" title=\"\">nsITextInputProcessor</a></code>, instead.</p>\n\n<pre>void sendCompositionEvent(\n  in AString aType,\n); <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 9 / Thunderbird 9 / SeaMonkey 2.6)\">Obsolete since Gecko 9</span>\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aType</code></dt>\n <dd>The event type: <code>\"compositionstart\"</code> or <code>\"compositionend\"</code>.</dd>\n</dl>\n\n<pre>void sendCompositionEvent(\nÂ  in AString aType,\nÂ  in AString aData, \nÂ  in AString aLocale\n);  <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 38 / Thunderbird 38 / SeaMonkey 2.35)\">Obsolete since Gecko 38</span></pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aType</code></dt>\n <dd>The event type: <code>\"compositionstart\"</code> or <code>\"compositionend\"</code> <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 36 / Thunderbird 36 / SeaMonkey 2.33)\">Obsolete since Gecko 36</span>. Since <span title=\"(Firefox 36 / Thunderbird 36 / SeaMonkey 2.33)\">GeckoÂ 36</span>, specifying <code>\"compositionend\"</code> isn't fired anything. Instead, use <code>\"compositioncommitasis\"</code> or <code>\"compositioncommit\".</code><br>\n <br>\n Or <code>\"compositionupdate\"</code>.  <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 35 / Thunderbird 35 / SeaMonkey 2.32)\">Obsolete since Gecko 35</span> Note that, since <span title=\"(Firefox 35 / Thunderbird 35 / SeaMonkey 2.32)\">GeckoÂ 35</span>, specifying <code>\"compositionupdate\"</code> isn't fired anything. Instead, <code><a href=\"/en-US/docs/Web/Events/compositionupdate\" title=\"/en-US/docs/Web/Events/compositionupdate\">compositionupdate</a></code> event is fired automatically when it should be fired.<br>\n <br>\n Or <code>\"compositioncommitasis\"</code> or <code>\"compositioncommit\"</code>.  <code>\"compositioncommitasis\"</code> will cause commiting the composition with the last composing string. <code>\"compositioncommit\"</code> will cause commiting the composition with <code>aData</code>. Both <code><a href=\"/en-US/docs/Web/Events/compositionupdate\" title=\"/en-US/docs/Web/Events/compositionupdate\">compositionupdate</a></code> event and <code><a href=\"/en-US/docs/Web/Events/compositionend\" title=\"/en-US/docs/Web/Events/compositionend\">compositionend</a></code> event are fired automatically if they are necessary.</dd>\n <dt>aData</dt>\n <dd>The data value of dispatching composition event. If <code>aType</code> is \"compositionstart\" or \"compositioncommitasis\", this is ignored.</dd>\n <dt>aLocale</dt>\n <dd>The locale value of dispatching composition event.</dd>\n</dl>\n\n<p></p><h3 id=\"getClassName()\">getClassName()</h3><p></p>\n\n<p>Returns the real classname (possibly of the mostly-transparent security wrapper) of aObj.</p>\n\n<p></p><h3 id=\"sendContentCommandEvent()\">sendContentCommandEvent()</h3><p></p>\n\n<p>Generate a content command event.</p>\n\n<p>Cannot be accessed from unprivileged context (not content-accessible) Will throw a DOM security error if called without UniversalXPConnect privileges.</p>\n\n<pre class=\"eval\">void sendContentCommandEvent(\n  in AString aType,\n  in nsITransferable aTransferable <span class=\"inlineIndicator optional optionalInline\">Optional</span>\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aType</code></dt>\n <dd>Type of command content event to send. Can be one of \"cut\", \"copy\", \"paste\", \"delete\", \"undo\", \"redo\", or \"pasteTransferable\".</dd>\n <dt><code>aTransferable</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n <dd>An instance of <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITransferable\" title=\"\">nsITransferable</a></code> when aType is \"pasteTransferable\"</dd>\n</dl>\n\n<p></p><h3 id=\"sendKeyEvent()\">sendKeyEvent()</h3><p></p>\n\n<p>Synthesize a key event to the window. The event types supported are: keydown, keyup, keypress.</p>\n\n<p>Key events generally end up being sent to the focused node.</p>\n\n<p>Cannot be accessed from unprivileged context (not content-accessible) Will throw a DOM security error if called without UniversalXPConnect privileges.</p>\n\n<p>However, this is deprecated since <span title=\"(Firefox 38 / Thunderbird 38 / SeaMonkey 2.35)\">GeckoÂ 38</span> (and will be obsolete soon), use <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITextInputProcessor\" title=\"\">nsITextInputProcessor</a></code> instead.</p>\n\n<pre>boolean sendKeyEvent(\n  in AString aType,\n  in long aKeyCode,\n  in long aCharCode,\n  in long aModifiers,\n  in unsigned long aAdditionalFlags <span class=\"inlineIndicator optional optionalInline\">Optional</span>\n);  <span class=\"inlineIndicator deprecated deprecatedInline\" title=\"(Firefox 38.0 / Thunderbird 38.0 / SeaMonkey 2.35)\">Deprecated since Gecko 38.0</span></pre>\n\n<pre class=\"eval\">boolean sendKeyEvent(\n  in AString aType,\n  in long aKeyCode,\n  in long aCharCode,\n  in long aModifiers,\n  in boolean aPreventDefault <span class=\"inlineIndicator optional optionalInline\">Optional</span> \n); <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 15.0 / Thunderbird 15.0 / SeaMonkey 2.12)\">Obsolete since Gecko 15.0</span>\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aType</code></dt>\n <dd>Event type.</dd>\n <dt><code>aKeyCode</code></dt>\n <dd>Key code.</dd>\n <dt><code>aCharCode</code></dt>\n <dd>Character code.</dd>\n <dt><code>aModifiers</code></dt>\n <dd>Modifiers pressed.</dd>\n <dd>Using constants defined in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDOMNSEvent\" title=\"\">nsIDOMNSEvent</a></code>. <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 15.0 / Thunderbird 15.0 / SeaMonkey 2.12)\">Obsolete since Gecko 15.0</span></dd>\n <dd>Using constants defined as MODIFIER_*. </dd>\n <dt><code>aPreventDefault</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span>  <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 15.0 / Thunderbird 15.0 / SeaMonkey 2.12)\">Obsolete since Gecko 15.0</span></dt>\n <dd>If <code>true</code>, preventDefault() the event before dispatch.</dd>\n <dt><code>aAdditionalFlags</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span> </dt>\n <dd><code>0</code> or <code>KEY_FLAG_PREVENT_DEFAULT</code> and/or one of <code>KEY_FLAG_LOCATION_*</code>.</dd>\n <dd>If <code>KEY_FLAG_PREVENT_DEFAULT</code> is specified, the dispatching key event's default is prevented.</dd>\n <dd>If <code>KEY_FLAG_LOCATION_*</code> isn't set, an appropriate location is automatically computed from <code>aKeyCode</code>. If two or more <code>KEY_FLAG_LOCATION_*</code> is specified, this method will throw an exception.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p><code>false</code> if the event had preventDefault() called on it, <code>true</code> otherwise. In other words, <code>true</code> if and only if the default action was taken.</p>\n\n<p></p><h3 id=\"sendMouseEvent()\">sendMouseEvent()</h3><p></p>\n\n<p>Synthesize a mouse event. The event types supported are: mousedown, mouseup, mousemove, mouseover, mouseout, contextmenu.</p>\n\n<p>Events are sent in coordinates offset by aX and aY from the window.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong>Â That additional events may be fired as a result of this call. For instance, typically a click event will be fired as a result of a mousedown and mouseup in sequence.</div><p></p>\n\n<p>Normally at this level of events, the mouseover and mouseout events are only fired when the window is entered or exited. For inter-element mouseover and mouseout events, a movemove event fired on the new element should be sufficient to generate the correct over and out events as well.</p>\n\n<p>Cannot be accessed from unprivileged context (not content-accessible) Will throw a DOM security error if called without UniversalXPConnect privileges.</p>\n\n<p>The event is dispatched via the toplevel window, so it could go to any window under the toplevel window, in some cases it could never reach this window at all.</p>\n\n<pre class=\"eval\">void sendMouseEvent(\n  in AString aType,\n  in float aX,\n  in float aY,\n  in long aButton,\n  in long aClickCount,\n  in long aModifiers,\n  in boolean aIgnoreRootScrollFrame <span class=\"inlineIndicator optional optionalInline\">Optional</span> \n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aType</code></dt>\n <dd>Event type.</dd>\n <dt><code>aX</code></dt>\n <dd>X offset in CSS pixels.</dd>\n <dt><code>aY</code></dt>\n <dd>Y offset in CSS pixels.</dd>\n <dt><code>aButton</code></dt>\n <dd>Button to synthesize.</dd>\n <dt><code>aClickCount</code></dt>\n <dd>Number of clicks that have been performed.</dd>\n <dt><code>aModifiers</code></dt>\n <dd>Modifiers pressed.</dd>\n <dd>Using constants defined in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDOMNSEvent\" title=\"\">nsIDOMNSEvent</a></code>. <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 15.0 / Thunderbird 15.0 / SeaMonkey 2.12)\">Obsolete since Gecko 15.0</span></dd>\n <dd>Using constants defined as MODIFIER_*. </dd>\n <dt><code>aIgnoreRootScrollFrame</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span> </dt>\n <dd>Whether the event should ignore viewport bounds during dispatch.</dd>\n</dl>\n\n<p></p><h3 id=\"sendMouseEventToWindow()\">sendMouseEventToWindow()</h3><p></p>\n\n<p>The same as <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDOMWindowUtils#sendMouseEvent()\">sendMouseEvent()</a></code> but ensures that the event is dispatched to this DOM window or one of its children.</p>\n\n<pre class=\"eval\">void sendMouseEventToWindow(\n  in AString aType,\n  in float aX,\n  in float aY,\n  in long aButton,\n  in long aClickCount,\n  in long aModifiers,\n  in boolean aIgnoreRootScrollFrame <span class=\"inlineIndicator optional optionalInline\">Optional</span>\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aType</code></dt>\n <dd>Â </dd>\n <dt><code>aX</code></dt>\n <dd>Â </dd>\n <dt><code>aY</code></dt>\n <dd>Â </dd>\n <dt><code>aButton</code></dt>\n <dd>Â </dd>\n <dt><code>aClickCount</code></dt>\n <dd>Â </dd>\n <dt><code>aModifiers</code></dt>\n <dd>Modifiers pressed.</dd>\n <dd>Using constants defined in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDOMNSEvent\" title=\"\">nsIDOMNSEvent</a></code>. <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 15.0 / Thunderbird 15.0 / SeaMonkey 2.12)\">Obsolete since Gecko 15.0</span></dd>\n <dd>Using constants defined as MODIFIER_*. </dd>\n <dt><code>aIgnoreRootScrollFrame</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n <dd>Â </dd>\n</dl>\n\n<p></p><h3 id=\"sendMouseScrollEvent()\">sendMouseScrollEvent()</h3><p></p>\n\n<p></p><div class=\"blockIndicator obsolete obsoleteHeader\"><p><strong><span class=\"icon-only-inline\" title=\"This is an obsolete API and is no longer guaranteed to work.\"><i class=\"icon-trash\"> </i></span> Obsolete since Gecko 17.0 (Firefox 17.0 / Thunderbird 17.0 / SeaMonkey 2.14)</strong><br>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p></div><p></p>\n\n<p>Synthesize a mouse scroll event for a window. The event types supported are: DOMMouseScroll MozMousePixelScroll.</p>\n\n<p>Events are sent in coordinates offset by aX and aY from the window.</p>\n\n<p>Cannot be accessed from unprivileged context (not content-accessible) Will throw a DOM security error if called without UniversalXPConnect privileges.</p>\n\n<pre class=\"eval\">void sendMouseScrollEvent(\n  in AString aType,\n  in float aX,\n  in float aY,\n  in long aButton,\n  in long aScrollFlags,\n  in long aDelta,\n  in long aModifiers\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aType</code></dt>\n <dd>Event type.</dd>\n <dt><code>aX</code></dt>\n <dd>X offset in CSS pixels.</dd>\n <dt><code>aY</code></dt>\n <dd>Y offset in CSS pixels.</dd>\n <dt><code>aButton</code></dt>\n <dd>Button to synthesize.</dd>\n <dt><code>aScrollFlags</code></dt>\n <dd>Flag bits --- see nsMouseScrollFlags in nsGUIEvent.h.</dd>\n <dt><code>aDelta</code></dt>\n <dd>The direction and amount to scroll (in lines or pixels, depending on the event type)</dd>\n <dt><code>aModifiers</code></dt>\n <dd>Modifiers pressed.</dd>\n <dd>Using constants defined in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDOMNSEvent\" title=\"\">nsIDOMNSEvent</a></code>. <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 15.0 / Thunderbird 15.0 / SeaMonkey 2.12)\">Obsolete since Gecko 15.0</span></dd>\n <dd>Using constants defined as MODIFIER_*. </dd>\n</dl>\n\n<p></p><h3 id=\"sendWheelEvent()\">sendWheelEvent()</h3><p></p>\n\n<p>Synthesize a wheel event for a window. The event type is always \"wheel\".</p>\n\n<p>Events are sent in coordinates offset by aX and aY from the window.</p>\n\n<p>Cannot be accessed from unprivileged context (not content-accessible) Will throw a DOM security error if called without UniversalXPConnect privileges.</p>\n\n<pre class=\"eval\">void sendWheelEvent(\n  in float aX,\n  in float aY,\n  in double aDeltaX,\n  in double aDeltaY,\n  in double aDeltaZ,\n  in unsigned long aDeltaMode,\n  in long aModifiers,\n  in long aLineOrPageDeltaX,\n  in long aLineOrPageDeltaY,\n  in unsigned long aOptions\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aX</code></dt>\n <dd>X offset in CSS pixels.</dd>\n <dt><code>aY</code></dt>\n <dd>Y offset in CSS pixels.</dd>\n <dt><code>aDeltaX</code></dt>\n <dd>Delta value around x-axis.</dd>\n <dt><code>aDeltaY</code></dt>\n <dd>Delta value around y-axis.</dd>\n <dt><code>aDeltaZ</code></dt>\n <dd>Delta value around z-axis.</dd>\n <dt><code>aDeltaMode</code></dt>\n <dd>One of delta mode values which are defined by <a href=\"/en-US/docs/Web/API/WheelEvent\" title=\"The WheelEvent interface represents events that occur due to the user moving a mouse wheel or similar input device.\"><code>WheelEvent</code></a> (<code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDOMWheelEvent\" title=\"\">nsIDOMWheelEvent</a></code>).</dd>\n <dt><code>aModifiers</code></dt>\n <dd>Modifiers pressed. Using constants defined as MODIFIER_*.</dd>\n <dt><code>aLineOrPageDeltaX</code></dt>\n <dd>Scroll amount around x-axis by lines (if aDeltaMode is <code>DOM_DELTA_PIXEL</code> or <code>DOM_DELTA_LINE</code>) or pages (if aDeltaMode is <code>DOM_DELTA_PAGE</code>). If this values isn't 0, horizontal <code>DOMMouseScroll</code> event will be dispatched with this value. However, this value may be ignored by <code>nsEventStateManager</code> if some prefs are customized or <code>aOptions</code> value includes some flags.</dd>\n <dt><code>aLineOrPageDeltaY</code></dt>\n <dd>Scroll amount around y-axis by lines (if aDeltaMode is <code>DOM_DELTA_PIXEL</code> or <code>DOM_DELTA_LINE</code>) or pages (if aDeltaMode is <code>DOM_DELTA_PAGE</code>). If this values isn't 0, vertical <code>DOMMouseScroll</code> event will be dispatched with this value. However, this value may be ignored by <code>nsEventStateManager</code> if some prefs are customized or <code>aOptions</code> value includes some flags.</dd>\n <dt><code>aOptions</code></dt>\n <dd>0 or one or more <code>WHEEL_EVENT_*</code> flags.</dd>\n</dl>\n\n<p></p><h3 id=\"sendNativeKeyEvent()\">sendNativeKeyEvent()</h3><p></p>\n\n<p>This method lets you create and send keyboard events to a DOMÂ window from a privileged context; for example, this can be used to automate testing. This delivers the key to the currently-focused widget by calling its See <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIWidget#synthesizeNativeKeyEvent()\">nsIWidget.synthesizeNativeKeyEvent()</a></code> method.</p>\n\n<p>This method throws a DOM security error if called without UniversalXPConnect privileges.</p>\n\n<pre class=\"eval\">void sendNativeKeyEvent(\n  in long aNativeKeyboardLayout,\n  in long aNativeKeyCode,\n  in long aModifierFlags,\n  in AString aCharacters,\n  in AString aUnmodifiedCharacters\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aNativeKeyboardLayout</code></dt>\n <dd>Â </dd>\n <dt><code>aNativeKeyCode</code></dt>\n <dd>The key code to send.</dd>\n <dt><code>aModifierFlags</code></dt>\n <dd>The modifier flags to send.</dd>\n <dt><code>aCharacters</code></dt>\n <dd>Â </dd>\n <dt><code>aUnmodifiedCharacters</code></dt>\n <dd>Â </dd>\n</dl>\n\n<p></p><h3 id=\"sendNativeMouseEvent()\">sendNativeMouseEvent()</h3><p></p>\n\n<p>See <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIWidget#SynthesizeNativeMouseEvent()\">nsIWidget.SynthesizeNativeMouseEvent()</a></code>.</p>\n\n<p>Will be called on the widget that contains aElement. Cannot be accessed from unprivileged context (not content-accessible) Will throw a DOM security error if called without UniversalXPConnect privileges.</p>\n\n<pre class=\"eval\">void sendNativeMouseEvent(\n  in long aScreenX,\n  in long aScreenY,\n  in long aNativeMessage,\n  in long aModifierFlags,\n  in nsIDOMElement aElement\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aScreenX</code></dt>\n <dd>Â </dd>\n <dt><code>aScreenY</code></dt>\n <dd>Â </dd>\n <dt><code>aNativeMessage</code></dt>\n <dd>Â </dd>\n <dt><code>aModifierFlags</code></dt>\n <dd>Â </dd>\n <dt><code>aElement</code></dt>\n <dd>Â </dd>\n</dl>\n\n<p></p><h3 id=\"sendQueryContentEvent()\">sendQueryContentEvent()</h3><p></p>\n\n<p>Synthesize a query content event.</p>\n\n<pre class=\"eval\">nsIQueryContentEventResult sendQueryContentEvent(\n  in unsigned long aType,\n  in unsigned long aOffset,\n  in unsigned long aLength,\n  in long aX,\n  in long aY,\n  in unsigned long aAdditionalFlags <span class=\"inlineIndicator optional optionalInline\">Optional</span>\n); \n</pre>\n\n<pre class=\"eval\">nsIQueryContentEventResult sendQueryContentEvent(\n  in unsigned long aType,\n  in unsigned long aOffset,\n  in unsigned long aLength,\n  in long aX,\n  in long aY\n);  <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 31.0 / Thunderbird 31.0 / SeaMonkey 2.28)\">Obsolete since Gecko 31.0</span>\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aType</code></dt>\n <dd>On of the following const values. And see also each comment for the other parameters and the result.</dd>\n <dt><code>aOffset</code></dt>\n <dd>Â </dd>\n <dt><code>aLength</code></dt>\n <dd>Â </dd>\n <dt><code>aX</code></dt>\n <dd>Â </dd>\n <dt><code>aY</code></dt>\n <dd>Â </dd>\n <dt><code>aAdditionalFlags</code></dt>\n <dd>See the explanation of <code>QUERY_CONTENT_FLAG_*</code>.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Â </p>\n\n<p></p><h3 id=\"sendSelectionSetEvent()\">sendSelectionSetEvent()</h3><p></p>\n\n<p>Synthesize a selection set event to the window.</p>\n\n<p>This sets the selection as the specified information.</p>\n\n<pre class=\"eval\">boolean sendSelectionSetEvent(\n  in unsigned long aOffset,\n  in unsigned long aLength,\n  in unsigned long aAdditionalFlags <span class=\"inlineIndicator optional optionalInline\">Optional</span>\n); \n</pre>\n\n<pre class=\"eval\">boolean sendSelectionSetEvent(\n  in unsigned long aOffset,\n  in unsigned long aLength,\n  in boolean aReverse\n);  <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 31.0 / Thunderbird 31.0 / SeaMonkey 2.28)\">Obsolete since Gecko 31.0</span>\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aOffset</code></dt>\n <dd>The caret offset of the selection start.</dd>\n <dt><code>aLength</code></dt>\n <dd>The length of the selection. If this is too long, the extra length is ignored.</dd>\n <dt><code>aReverse</code> <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 31.0 / Thunderbird 31.0 / SeaMonkey 2.28)\">Obsolete since Gecko 31.0</span></dt>\n <dd>If <code>true</code>, the selection set from |aOffset + aLength| to |aOffset|. Otherwise, set from |aOffset| to |aOffset + aLength|.</dd>\n <dt><code>aAdditionalFlags</code></dt>\n <dd>See the explanation of <code>SELECTION_SET_FLAG_*</code>.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p><code>True</code>, if succeeded. Otherwise, <code>false</code>.</p>\n\n<p></p><h3 id=\"sendSimpleGestureEvent()\">sendSimpleGestureEvent()</h3><p></p>\n\n<p>Synthesize a simple gesture event for a window. The event types supported are: MozSwipeGestureMayStart, MozSwipeGestureStart, MozSwipeGestureUpdate, MozSwipeGestureEnd, MozSwipeGesture, MozMagnifyGestureStart, MozMagnifyGestureUpdate, MozMagnifyGesture, MozRotateGestureStart, MozRotateGestureUpdate, MozRotateGesture, MozPressTapGesture, MozTapGesture, and MozEdgeUIGesture.</p>\n\n<p>Cannot be accessed from unprivileged context (not content-accessible) Will throw a DOM security error if called without UniversalXPConnect privileges.</p>\n\n<pre class=\"eval\">void sendSimpleGestureEvent(\n  in AString aType,\n  in float aX,\n  in float aY,\n  in unsigned long aDirection,\n  in double aDelta,\n  in long aModifiers,\n  in unsigned long aClickCount <span class=\"inlineIndicator optional optionalInline\">Optional</span>\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aType</code></dt>\n <dd>Event type.</dd>\n <dt><code>aX</code></dt>\n <dd>X offset in CSS pixels.</dd>\n <dt><code>aY</code></dt>\n <dd>Y offset in CSS pixels.</dd>\n <dt><code>aDirection</code></dt>\n <dd>Direction, using constants defined in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDOMSimpleGestureEvent\" title=\"\">nsIDOMSimpleGestureEvent</a></code>.</dd>\n <dt><code>aDelta</code></dt>\n <dd>Amount of magnification or rotation for magnify and rotation events.</dd>\n <dt><code>aModifiers</code></dt>\n <dd>Modifiers pressed, using constants defined in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDOMNSEvent\" title=\"\">nsIDOMNSEvent</a></code>. <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 15.0 / Thunderbird 15.0 / SeaMonkey 2.12)\">Obsolete since Gecko 15.0</span></dd>\n <dd>Using constants defined as MODIFIER_*. </dd>\n <dt><code>aClickCount</code></dt>\n <dd>For tap gestures, the number of taps.</dd>\n</dl>\n\n<p></p><h3 id=\"sendTextEvent()\">sendTextEvent()</h3><p></p>\n\n<p><span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 26 / Thunderbird 26 / SeaMonkey 2.23 / Firefox OS 1.2)\">Obsolete since Gecko 26</span> This can create composition string with 3 or less clauses. Use <a href=\"#createCompositionStringSynthesizer()\">createCompositionStringSynthesizer</a>() instead. New API doesn't have this limitation.</p>\n\n<pre class=\"eval\">void sendTextEvent(\n  in AString aCompositionString,\n  in long aFirstClauseLength,\n  in unsigned long aFirstClauseAttr,\n  in long aSecondClauseLength,\n  in unsigned long aSecondClauseAttr,\n  in long aThirdClauseLength,\n  in unsigned long aThirdClauseAttr,\n  in long aCaretStart,\n  in long aCaretLength\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aCompositionString</code></dt>\n <dd>Â </dd>\n <dt><code>aFirstClauseLength</code></dt>\n <dd>Â </dd>\n <dt><code>aFirstClauseAttr</code></dt>\n <dd>Â </dd>\n <dt><code>aSecondClauseLength</code></dt>\n <dd>Â </dd>\n <dt><code>aSecondClauseAttr</code></dt>\n <dd>Â </dd>\n <dt><code>aThirdClauseLength</code></dt>\n <dd>Â </dd>\n <dt><code>aThirdClauseAttr</code></dt>\n <dd>Â </dd>\n <dt><code>aCaretStart</code></dt>\n <dd>Â </dd>\n <dt><code>aCaretLength</code></dt>\n <dd>Â </dd>\n</dl>\n\n<p></p><h3 id=\"sendTouchEvent()\">sendTouchEvent()</h3><p></p>\n\n<p>Synthesizes a touch event and sends it to the window. This method supports multiple touches of the same type, but not multiple touches on the screen of different types.</p>\n\n<div class=\"note\"><strong>Note:</strong> This method cannot be called from unprivileged content; that is, it's not accessible from web content. It will throw a DOM security error if called without UniversalXPConnect privileges.</div>\n\n<p>The event is dispatched via the top-level window, so it could go to any window under that top level. In some cases, it may not even reach the target window, if one of those other windows accepts it.</p>\n\n<pre>boolean sendTouchEvent(\nÂ  in AString aType,\nÂ  [array, size_is(count)] in PRUint32 aIdentifiers,\nÂ  [array, size_is(count)] in PRInt32 aXs,\nÂ  [array, size_is(count)] in PRInt32 aYs,\nÂ  [array, size_is(count)] in PRUint32 aRxs,\nÂ  [array, size_is(count)] in PRUint32 aRys,\nÂ  [array, size_is(count)] in float aRotationAngles,\nÂ  [array, size_is(count)] in float aForces,\nÂ  in PRUint32 count,\nÂ  in long aModifiers,\nÂ  [optional] in boolean aIgnoreRootScrollFrame\n);</pre>\n\n<h6 id=\"Parameters_7\">Parameters</h6>\n\n<dl>\n <dt><code>aType</code></dt>\n <dd>The touch event type to dispatch to the window. This must be one of \"touchstart\", \"touchend\", \"touchmove\", or \"touchcancel\".</dd>\n <dt><code>aIdentifiers</code></dt>\n <dd>An array of the identifiers for each of the touches.</dd>\n <dt><code>aXs</code></dt>\n <dd>An array of X offsets in CSS pixels for each touch to be sent to the window.</dd>\n <dt><code>aYs</code></dt>\n <dd>An array of Y offsets in CSS pixels for each touch to be sent to the window.</dd>\n <dt><code>aRxs</code></dt>\n <dd>An array of touch X radii in CSS pixels for each touch to be sent to the window.</dd>\n <dt><code>aRys</code></dt>\n <dd>An array of touch Y radii in CSS pixels for each touch to be sent to the window.</dd>\n <dt><code>aRotationAngles</code></dt>\n <dd>An array of angles in degrees for each touch's touch oval.</dd>\n <dt><code>aForces</code></dt>\n <dd>An array of forces (from 0 to 1) indicating the amount of pressure applied at each touch point.</dd>\n <dt><code>count</code></dt>\n <dd>The number of touches; this is the number of entries in each of the preceding arrays.</dd>\n <dt><code>aModifiers</code></dt>\n <dd>Modifiers pressed.</dd>\n <dd>Using constants defined in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDOMNSEvent\" title=\"\">nsIDOMNSEvent</a></code>. <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 15.0 / Thunderbird 15.0 / SeaMonkey 2.12)\">Obsolete since Gecko 15.0</span></dd>\n <dd>Using constants defined as MODIFIER_*. </dd>\n <dt><code>aIgnoreRootScrollFrames</code></dt>\n <dd>A Boolean value indicating whether or not the event should ignore viewport bounds during dispatch.</dd>\n</dl>\n\n<h6 id=\"Return_value_5\">Return value</h6>\n\n<p><code>true</code> if the page called <a href=\"/en-US/docs/Web/API/Event/preventDefault\" title=\"The Event interface's preventDefault() method tells the user agent that if the event does not get explicitly handled, its default action should not be taken as it normally would be. The event continues to propagate as usual, unless one of its event listeners calls stopPropagation() or stopImmediatePropagation(), either of which terminates propagation at once.\"><code>Event.preventDefault()</code></a>, indicating that default processing of the event should not occur.</p>\n\n<p></p><h3 id=\"setCSSViewport()\">setCSSViewport()</h3><p></p>\n\n<p>Sets the dimensions of the CSS viewport to the specified size in CSS pixels, regardless of the size of the enclosing widget/view. This triggers reflow.</p>\n\n<p>The caller of this method must have UniversalXPConnect privileges.</p>\n\n<div class=\"note\"><strong>Note:</strong> After calling this method, the <a href=\"/en-US/docs/Web/API/Window/innerWidth\" title=\"Width (in pixels) of the browser window viewport including, if rendered, the vertical scrollbar.\"><code>window.innerWidth</code></a> and <a href=\"/en-US/docs/Web/API/Window/innerHeight\" title=\"Height (in pixels) of the browser window viewport including, if rendered, the horizontal scrollbar.\"><code>window.innerHeight</code></a> properties return the size of the viewport you've specified instead of the size of the browser widget.</div>\n\n<pre class=\"eval\">void setCSSViewport(\n  in float aWidthPx,\n  in float aHeightPx\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aWidthPx</code></dt>\n <dd>The width of the viewport in CSS pixels.</dd>\n <dt><code>aHeightPx</code></dt>\n <dd>The height of the viewport in CSSÂ pixels.</dd>\n</dl>\n\n<p></p><h3 id=\"setDisplayPort()\">setDisplayPort()</h3><p></p>\n\n<p>Set the \"displayport\" to be &lt;xPx, yPx, widthPx, heightPx&gt; in units of CSS pixels, regardless of the size of the enclosing widget/view. This will *not* trigger reflow.</p>\n\n<p>&lt;x, y&gt; is relative to the top-left of the CSS viewport. This means that the pixels rendered to the displayport take scrolling into account, for example.</p>\n\n<p>The displayport will be used as the window's visible region for the purposes of invalidation and painting. The displayport can approximately be thought of as a \"persistent\" drawWindow() (albeit with coordinates relative to the CSS viewport): the bounds are remembered by the platform, and layer pixels are retained and updated inside the viewport bounds.</p>\n\n<p>It's legal to set a displayport that extends beyond the CSS viewport in any direction (left/right/top/bottom).</p>\n\n<p>It's also legal to set a displayport that extends beyond the document's bounds. The value of the pixels rendered outside the document bounds is not yet defined.</p>\n\n<p>The caller of this method must have UniversalXPConnect privileges.</p>\n\n<pre class=\"eval\">void setDisplayPort(\n  in float aXPx,\n  in float aYPx,\n  in float aWidthPx,\n  in float aHeightPx\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aXPx</code></dt>\n <dd>Â </dd>\n <dt><code>aYPx</code></dt>\n <dd>Â </dd>\n <dt><code>aWidthPx</code></dt>\n <dd>Â </dd>\n <dt><code>aHeightPx</code></dt>\n <dd>Â </dd>\n</dl>\n\n<p></p><h3 id=\"setResolution()\">setResolution()</h3><p></p>\n\n<p>Get/set the resolution at which rescalable web content is drawn. Currently this is only (some) thebes content.</p>\n\n<p>Setting a new resolution does *not* trigger reflow. This API is entirely separate from textZoom and fullZoom; a resolution scale can be applied together with both textZoom and fullZoom.</p>\n\n<p>The effect of is API for gfx code to allocate more or fewer pixels for rescalable content by a factor of |resolution| in either or both dimensions. <code>setResolution</code> together with <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDOMWindowUtils#setDisplayport()\">setDisplayport()</a></code> can be used to implement a non-reflowing scale-zoom in concert with another entity that can draw with a scale. For example, to scale a content |window| inside a &lt;browser&gt; by a factor of 2.0.</p>\n\n<p>window.<code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDOMWindowUtils#setDisplayport()\">setDisplayport()</a></code>(x, y, oldW / 2.0, oldH / 2.0); window.<code>setResolution</code>(2.0, 2.0); // elsewhere browser.setViewportScale(2.0, 2.0);</p>\n\n<p>The caller of this method must have UniversalXPConnect privileges.</p>\n\n<pre class=\"eval\">void setResolution(\n  in float aXResolution,\n  in float aYResolution\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aXResolution</code></dt>\n <dd>Â </dd>\n <dt><code>aYResolution</code></dt>\n <dd>Â </dd>\n</dl>\n\n<p><a name=\"startPCCountProfiling()\"></a></p><h3 id=\"startPCCountProfiling()_2\">startPCCountProfiling()</h3> <span title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span><p></p>\n\n<p>Begins detailed profiling of all executed JavaScript code in the browser.Â  This slows down JavaScript execution, but accumulates information about what code has executed that may be queried after a call to <code><a href=\"#stopPCCountProfiling()\" title=\"#stopPCCountProfiling()\">stopPCCountProfiling</a>()</code>.</p>\n\n<pre>void startPCCountProfiling();\n</pre>\n\n<h6 id=\"Parameters_8\">Parameters</h6>\n\n<p>None.</p>\n\n<p><a name=\"stopPCCountProfiling()\"></a> </p><h3 id=\"stopPCCountProfiling()_2\">stopPCCountProfiling()</h3> <span title=\"This is an experimental API that should not be used in production code.\"><i class=\"icon-beaker\"> </i></span><p></p>\n\n<p>Stops profiling of executed JavaScript code.Â  Profile information about code that has executed since a preceding call to <code><a href=\"#startPCCountProfiling()\" title=\"#startPCCountProfiling()\">startPCCountProfiling</a>()</code> will be constructed, and will be retained until a call to <code><a href=\"#purgePCCounts()\" title=\"#purgePCCounts()\">purgePCCounts</a>()</code>.Â  This profile information may be queried using <code><a href=\"#getPCCountScriptCount()\" title=\"#getPCCountScriptCount()\">getPCCountScriptCount</a>()</code>, <code><a href=\"#getPCCountScriptSummary()\" title=\"#getPCCountScriptSummary()\">getPCCountScriptSummary</a>()</code>, and <code><a href=\"#getPCCountScriptContents()\" title=\"#getPCCountScriptContents()\">getPCCountScriptContents</a>()</code>.</p>\n\n<pre>void stopPCCountProfiling();</pre>\n\n<h6 id=\"Parameters_9\">Parameters</h6>\n\n<p>None.</p>\n\n<p></p><h3 id=\"suppressEventHandling()\">suppressEventHandling()</h3><p></p>\n\n<p>Suppresses/unsuppresses user initiated event handling in window's document and subdocuments.</p>\n\n<pre class=\"eval\">void suppressEventHandling(\n  in boolean aSuppress\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aSuppress</code></dt>\n <dd>Â </dd>\n</dl>\n\n<p></p><h3 id=\"suspendTimeouts()\">suspendTimeouts()</h3><p></p>\n\n<p>Suspend/resume timeouts on this window and its descendant windows.</p>\n\n<pre class=\"eval\">void suspendTimeouts();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<p></p><h3 id=\"wrapDOMFile()\">wrapDOMFile()</h3><p></p>\n\n<p>Wraps the specified <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDOMFile\" title=\"\">nsIDOMFile</a></code> in a DOM <a href=\"/en-US/docs/Web/API/File\" title=\"The File interface provides information about files and allows JavaScript in a web page to access their content.\"><code>File</code></a> object.</p>\n\n<pre>nsIDOMFile wrapDOMFile(\nÂ  nsIFile aFile\n);\n</pre>\n\n<h6 id=\"Parameters_10\">Parameters</h6>\n\n<dl>\n <dt><code>aFile</code></dt>\n <dd>The <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFile\" title=\"\">nsIFile</a></code> object to wrap in a DOM <a href=\"/en-US/docs/Web/API/File\" title=\"The File interface provides information about files and allows JavaScript in a web page to access their content.\"><code>File</code></a> object.</dd>\n</dl>\n\n<h6 id=\"Return_value_6\">Return value</h6>\n\n<p>An <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDOMFile\" title=\"\">nsIDOMFile</a></code> object, which is a DOM <a href=\"/en-US/docs/Web/API/File\" title=\"The File interface provides information about files and allows JavaScript in a web page to access their content.\"><code>File</code></a>. You can then use that object with DOM methods that use the <a href=\"/en/Extensions/Using_the_DOM_File_API_in_chrome_code\" title=\"Using the DOM File API in chrome code\">File API</a>.</p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/fscholz\">fscholz</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Bzbarsky\">Bzbarsky</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Jonathan_Watt\">Jonathan_Watt</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Makyen\">Makyen</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/maybe\">maybe</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ede123\">Ede123</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Masayuki\">Masayuki</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/baku\">baku</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/madarche\">madarche</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ann_Yiming\">Ann_Yiming</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Simon%20Lindholm\">Simon Lindholm</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/bhackett\">bhackett</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mnoorenberghe\">mnoorenberghe</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/rmkn85\">rmkn85</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/automatedtester\">automatedtester</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Waldo\">Waldo</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Gomita\">Gomita</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mook_sb\">Mook_sb</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Natch\">Natch</a>",
    "title": "nsIDOMWindowUtils"
}