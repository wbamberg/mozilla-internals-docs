{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/modules/libpr0n/public/imgIRequest.idl\" rel=\"custom\">modules/libpr0n/public/imgIRequest.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\n<i>Please add a summary to this article.</i>\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIRequest\" title=\"\">nsIRequest</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 8.0 (Firefox 8.0 / Thunderbird 8.0 / SeaMonkey 2.5)</span></div>\n</div><p></p>\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n<table class=\"standard-table\"> <tbody> <tr> <td><code>void <a href=\"#cancelAndForgetObserver()\">cancelAndForgetObserver</a>(in nsresult aStatus);</code> </td> </tr> <tr> <td><code>imgIRequest <a href=\"#clone()\">clone</a>(in imgIDecoderObserver aObserver);</code></td> </tr> <tr> <td><code>void <a href=\"#decrementAnimationConsumers()\">decrementAnimationConsumers</a>();</code> </td> </tr> <tr> <td><code>imgIRequest <a href=\"#getStaticRequest()\">getStaticRequest</a>();</code> </td> </tr> <tr> <td><code>void <a href=\"#incrementAnimationConsumers()\">incrementAnimationConsumers</a>();</code> </td> </tr> <tr> <td><code>void <a href=\"#lockImage()\">lockImage</a>();</code> </td> </tr> <tr> <td><code>void <a href=\"#requestDecode()\">requestDecode</a>();</code> </td> </tr> <tr> <td><code>void <a href=\"#unlockImage()\">unlockImage</a>();</code> </td> </tr> </tbody>\n</table>\n<h2 id=\"Attributes\" name=\"Attributes\">Attributes</h2>\n<table class=\"standard-table\"> <tbody> <tr> <td class=\"header\">Attribute</td> <td class=\"header\">Type</td> <td class=\"header\">Description</td> </tr> <tr> <td><code>CORSMode</code></td> <td><a href=\"/en/long\" title=\"en/long\">long</a></td> <td>The CORS mode that this <code>image</code> was loaded with. <strong>Read only.</strong> </td> </tr> <tr> <td><code>decoderObserver</code></td> <td><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/imgIDecoderObserver\" title=\"\">imgIDecoderObserver</a></code></td> <td><strong>Read only.</strong></td> </tr> <tr> <td><code>image</code></td> <td><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/imgIContainer\" title=\"\">imgIContainer</a></code></td> <td>The <code>image</code> container. <strong>Read only.</strong></td> </tr> <tr> <td><code>imagePrincipal</code></td> <td><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIPrincipal\" title=\"\">nsIPrincipal</a></code></td> <td>The principal gotten from the channel the <code>image</code> was loaded from. <strong>Read only.</strong> </td> </tr> <tr> <td><code>imageStatus</code></td> <td><a href=\"/en/unsigned_long\" title=\"en/unsigned long\">unsigned long</a></td> <td>Status flags of the STATUS_* variety. <strong>Read only.</strong></td> </tr> <tr> <td><code>mimeType</code></td> <td><a href=\"/en/string\" title=\"en/string\">string</a></td> <td><strong>Read only.</strong></td> </tr> <tr> <td><code>URI</code></td> <td><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code></td> <td>The <code>URI</code> the <code>image</code> load was started with. Note that this might not be the actual <code>URI</code> for the <code>image</code> (for example if HTTP redirects happened during the load). <strong>Read only.</strong></td> </tr> </tbody>\n</table>\n<h2 id=\"Constants\" name=\"Constants\">Constants</h2>\n<table class=\"standard-table\"> <tbody> <tr> <td class=\"header\">Constant</td> <td class=\"header\">Value</td> <td class=\"header\">Description</td> </tr> <tr> <td><code>STATUS_NONE</code></td> <td><code>0x0</code></td> <td> <p>Nothing to report.</p> </td> </tr> <tr> <td><code>STATUS_SIZE_AVAILABLE</code></td> <td><code>0x1</code></td> <td>We received enough <code>image</code> data from the network or filesystem that we know the width and height of the <code>image</code>, and have thus called SetSize() on the container.</td> </tr> <tr> <td><code>STATUS_LOAD_PARTIAL</code></td> <td><code>0x2</code></td> <td>Used internally by imgRequest to flag that a request is being cancelled as a result of a failure of a proxy holder and not an internal failure. At least I think that's what it does. Regardless, there's no reason for this flag to be public, and it should either go away or become a private state flag within imgRequest. Do not rely on it.</td> </tr> <tr> <td><code>STATUS_LOAD_COMPLETE</code></td> <td><code>0x4</code></td> <td>The data has been fully loaded to memory, but not necessarily fully decoded.</td> </tr> <tr> <td><code>STATUS_ERROR</code></td> <td><code>0x8</code></td> <td>An error occurred loading the <code>image</code>.</td> </tr> <tr> <td><code>STATUS_FRAME_COMPLETE</code></td> <td><code>0x10</code></td> <td>The first frame has been completely decoded.</td> </tr> <tr> <td><code>STATUS_DECODE_COMPLETE</code></td> <td><code>0x20</code></td> <td>The whole <code>image</code> has been decoded. </td> </tr> <tr> <td><code>CORS_NONE</code></td> <td><code>1</code></td> <td> <p>CORS modes images can be loaded with.</p> <p>By default, all images are loaded with <code>CORS_NONE</code> and cannot be used cross-origin in context like WebGL.</p> If an HTML img element has the crossorigin attribute set, the <code>imgIRequest</code> will be validated for cross-origin usage with CORS, and, if successful, will have its CORS mode set to the relevant type. </td> </tr> <tr> <td><code>CORS_ANONYMOUS</code></td> <td><code>2</code></td> <td></td> </tr> <tr> <td><code>CORS_USE_CREDENTIALS</code></td> <td><code>3</code></td> <td></td> </tr> </tbody>\n</table>\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n<p></p><h3 id=\"cancelAndForgetObserver()\">cancelAndForgetObserver()</h3><p></p>\n<p>Cancels this request as in <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIRequest#Cancel()\">nsIRequest.Cancel()</a></code>; further, also nulls out <code>decoderObserver</code> so it gets no further notifications from us.</p>\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> You should not use this in any new code; instead, use cancel(). Note that cancel() is asynchronous, which means that some time after you call it, the listener/observer will get an OnStopRequest(). This means that, if you're the observer, you can not call cancel() from your destructor.</div><p></p>\n<pre class=\"eval\">void cancelAndForgetObserver(\n  in nsresult aStatus\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aStatus</code></dt> <dd>\n</dd></dl>\n<h3 id=\"clone()\" name=\"clone()\">clone()</h3>\n<p><code>Clone</code> this request; the returned request will have aObserver as the observer. aObserver will be notified synchronously (before the <code>clone</code> call returns) with all the notifications that have already been dispatched for this <code>image</code> load.</p>\n<pre class=\"eval\">imgIRequest clone(\n  in imgIDecoderObserver aObserver\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aObserver</code></dt> <dd>\n</dd></dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p> </p>\n<p></p><h3 id=\"decrementAnimationConsumers()\">decrementAnimationConsumers()</h3><p></p>\n<p>Tell the <code>image</code> it can forget about a request that the <code>image</code> animate.</p>\n<pre class=\"eval\">void decrementAnimationConsumers();\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<p>None.</p>\n<p></p><h3 id=\"getStaticRequest()\">getStaticRequest()</h3><p></p>\n<p>If this request is for an animated <code>image</code>, the method creates a new request which contains the current frame of the <code>image</code>. Otherwise returns the same request.</p>\n<pre class=\"eval\">imgIRequest getStaticRequest();\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<p>None.</p>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p> </p>\n<p></p><h3 id=\"incrementAnimationConsumers()\">incrementAnimationConsumers()</h3><p></p>\n<p>Requests that the <code>image</code> animate (if it has an animation).</p>\n<pre class=\"eval\">void incrementAnimationConsumers();\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<p>None.</p>\n<p></p><h3 id=\"lockImage()\">lockImage()</h3><p></p>\n<p>Locks an <code>image</code>. If the <code>image</code> does not exist yet, locks it once it becomes available. The lock persists for the lifetime of the <code>imgIRequest</code> (until <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/imgIRequest#unlockImage()\">unlockImage()</a></code> is called) even if the underlying <code>image</code> changes.</p>\n<p>If you do not call <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/imgIRequest#unlockImage()\">unlockImage()</a></code> by the time this <code>imgIRequest</code> goes away, it will be called for you automatically.</p>\n<pre class=\"eval\">void lockImage();\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<p>None.</p>\n<p></p><h3 id=\"requestDecode()\">requestDecode()</h3><p></p>\n<p>Requests a decode for the <code>image</code>.</p>\n<p><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/imgIContainer\" title=\"\">imgIContainer</a></code> has a <code>requestDecode</code> method, but callers may want to request a decode before the container has necessarily been instantiated. Calling <code>requestDecode</code> on the <code>imgIRequest</code> simply forwards along the request if the container already exists, or calls it once it gets OnStartContainer if the container does not yet exist.</p>\n<pre class=\"eval\">void requestDecode();\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<p>None.</p>\n<p></p><h3 id=\"unlockImage()\">unlockImage()</h3><p></p>\n<p>Unlocks an <code>image</code>.</p>\n<pre class=\"eval\">void unlockImage();\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<p>None.</p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>",
    "title": "imgIRequest"
}