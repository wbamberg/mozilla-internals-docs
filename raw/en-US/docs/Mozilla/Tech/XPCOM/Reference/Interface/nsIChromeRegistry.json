{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/chrome/public/nsIChromeRegistry.idl\" rel=\"custom\">chrome/public/nsIChromeRegistry.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nProvides access to the chrome registry; you can use this to get information about chrome documents that have been registered.\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 1.9.2 (Firefox 3.6 / Thunderbird 3.1 / Fennec 1.0)</span></div>\n</div><p></p>\n<p>Implemented by: <code>@mozilla.org/chrome/chrome-registry;1</code> as a service:</p>\n<pre class=\"eval\">var chromeRegistry = Components.classes[\"<span id=\"the-code\"><span class=\"s\">@mozilla.org/chrome/chrome-registry;1</span></span>\"]\n                     .getService(Components.interfaces.nsIChromeRegistry);\n</pre>\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code>void <a href=\"#canonify()\">canonify</a>(in nsIURI aChromeURL);</code> <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 1.5 / Thunderbird 1.5 / SeaMonkey 1.0)\">Obsolete since Gecko 1.8</span></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#checkForNewChrome()\">checkForNewChrome</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>nsIURI <a href=\"#convertChromeURL()\">convertChromeURL</a>(in nsIURI aChromeURL);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#wrappersEnabled()\">wrappersEnabled</a>(in nsIURI aURI);</code> <span class=\"inlineIndicator notXPCOM notXPCOMInline\" title=\"Only use this method if you REALLY know what you are doing!\">Violates the XPCOM interface guidelines</span> </td>\n  </tr>\n </tbody>\n</table>\n<h2 id=\"Constants\" name=\"Constants\">Constants</h2>\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Constant</td>\n   <td class=\"header\">Value</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>NONE</code></td>\n   <td><code>0</code></td>\n   <td> </td>\n  </tr>\n  <tr>\n   <td><code>PARTIAL</code></td>\n   <td><code>1</code></td>\n   <td> </td>\n  </tr>\n  <tr>\n   <td><code>FULL</code></td>\n   <td><code>2</code></td>\n   <td> </td>\n  </tr>\n </tbody>\n</table>\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n<p></p><div class=\"headingWithIndicator\">\n        <h3 id=\"canonify()\">canonify()</h3>\n        <span class=\"indicatorInHeadline obsolete obsoleteMethod\">Obsolete since Gecko 1.8 (Firefox 1.5 / Thunderbird 1.5 / SeaMonkey 1.0)</span>\n        </div><p></p>\n<div class=\"note\">\n <strong>Note:</strong> This method is obsolete; use <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIChromeRegistry#convertChromeURL()\">convertChromeURL()</a></code> instead.</div>\n<p>Converts a chrome URL into a canonical representation by ensuring that the filename portion of the URL is included, as in <span class=\"nowiki\"><code>chrome://package/provider/file</code></span>. This is useful because chrome URLs are allowed to be specified in \"shorthand\", leaving the \"file\" portion off. In that case, the URL is expanded to <span class=\"nowiki\"><code>chrome://package/provider/package.ext</code></span>.</p>\n<p>The extension, ext, is one of:</p>\n<dl>\n <dt>\n  xul</dt>\n <dd>\n  For a \"content\" package.</dd>\n <dt>\n  css</dt>\n <dd>\n  For a \"skin\" package.</dd>\n <dt>\n  dtd</dt>\n <dd>\n  For a \"locale\" package.</dd>\n</dl>\n<ul>\n</ul>\n<pre class=\"eval\">void canonify(\n  in nsIURI aChromeURL\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl>\n <dt>\n  <code>aChromeURL</code></dt>\n <dd>\n  The URL that is to be canonified.</dd>\n</dl>\n<h3 id=\"checkForNewChrome()\" name=\"checkForNewChrome()\">checkForNewChrome()</h3>\n<p>Refreshes the chrome list at runtime, looking for new packages and so forth.</p>\n<pre class=\"eval\">void checkForNewChrome();\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<p>None.</p>\n<h3 id=\"convertChromeURL()\" name=\"convertChromeURL()\">convertChromeURL()</h3>\n<p>Resolves a chrome URL to an loadable URI using the information in the registry. A new <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> is returned; the original is left unmodified.</p>\n<p>This lets you take a non-canonical chrome URI, such as <span class=\"nowiki\"><code>chrome://package/provider/file</code></span>, and convert it into a canonical one. This is useful because chrome URLs are allowed to be specified in \"shorthand\", leaving the \"file\" portion off. In that case, the URL is expanded to <span class=\"nowiki\"><code>chrome://package/provider/package.ext</code></span>.</p>\n<p>The extension, <code>ext</code>, is one of:</p>\n<dl>\n <dt>\n  xul</dt>\n <dd>\n  For a \"content\" package.</dd>\n <dt>\n  css</dt>\n <dd>\n  For a \"skin\" package.</dd>\n <dt>\n  dtd</dt>\n <dd>\n  For a \"locale\" package.</dd>\n</dl>\n<ul>\n</ul>\n<pre class=\"eval\">nsIURI convertChromeURL(\n  in nsIURI aChromeURL\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl>\n <dt>\n  <code>aChromeURL</code></dt>\n <dd>\n  The URL that is to be converted.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>A new <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> object containing the loadable URI for the specified chrome URL.</p>\n<p></p><div>\n  <span class=\"indicatorInHeadline notXPCOM notXPCOMMethod\" title=\"Only use this method if you REALLY know what you are doing!\">Violates the XPCOM interface guidelines</span>\n  <h3 id=\"wrappersEnabled()\">wrappersEnabled()</h3>\n</div><p></p>\n<p></p>\n<p>Returns whether XPCNativeWrappers are enabled for the specified URI.</p>\n<pre class=\"eval\">boolean wrappersEnabled(\n  in nsIURI aURI\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl>\n <dt>\n  <code>aURI</code></dt>\n <dd>\n  The URI for which to determine if XPCNativeWrappers are enabled.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p><code>true</code> if XPCNativeWrappers are enabled for the specified URI; otherwise <code>false</code>.</p>\n<h2 id=\"See_also\" name=\"See_also\">See also</h2>\n<ul>\n <li> <a href=\"/en/Chrome_registration\" title=\"en/Chrome registration\">Chrome Registration</a></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kscarfone\">kscarfone</a>",
    "title": "nsIChromeRegistry"
}