{
    "content": "<p>This is an interface that must be implemented by consumers.  It allows consumers to add  aggregate functions that are available to SQL queries and triggers.  An aggregate function is a function that returns one value from a series of values.  There are a <a class=\"external\" href=\"http://www.sqlite.org/lang_aggfunc.html\" title=\"http://www.sqlite.org/lang_corefunc.html\">number of already defined aggregate functions provided by SQLite</a>.  Objects implementing this interface can be registered with <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIStorageConnection#createAggregateFunction()\">mozIStorageConnection.createAggregateFunction()</a></code>.</p>\n\n<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/storage/public/mozIStorageAggregateFunction.idl\" rel=\"custom\">storage/public/mozIStorageAggregateFunction.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\n<i>Please add a summary to this article.</i>\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\n<span> </span>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 1.9 (Firefox 3)</span></div>\n</div><p></p>\n\n<p>Inherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code></p>\n\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code>void <a href=\"#onStep()\">onStep</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageValueArray\" title=\"\">mozIStorageValueArray</a></code> aFunctionArguments);</code></td>\n  </tr>\n  <tr>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIVariant\" title=\"\">nsIVariant</a></code> <a href=\"#onFinal()\">onFinal</a>();</code></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n\n<h3 id=\"onStep()\" name=\"onStep()\">onStep()</h3>\n\n<p>This is called for each row of results returned by the query.  The implementation should store or perform some work to prepare to return a value.</p>\n\n<p>{{ Storage:threadsafety_callback_warning() }}</p>\n\n<pre class=\"eval\">void onStep(\n  in mozIStorageValueArray aFunctionArguments\n);</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aFunctionArguments</code></dt>\n <dd>A <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageValueArray\" title=\"\">mozIStorageValueArray</a></code> holding the arguments passed in to the function.</dd>\n</dl>\n\n<h3 id=\"onFinal()\" name=\"onFinal()\">onFinal()</h3>\n\n<p>This is called after all results have been obtained and notified via <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageAggregateFunction\" title=\"\">mozIStorageAggregateFunction</a></code>.  The implementation should finish its calculations on the data, and return a result.</p>\n\n<p>{{ Storage:threadsafety_callback_warning() }}</p>\n\n<pre class=\"eval\">nsIVariant onFinal()</pre>\n\n<h6 id=\"Return\" name=\"Return\">Return value</h6>\n\n<p>An <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIVariant\" title=\"\">nsIVariant</a></code> this is the return value of the function.</p>\n\n<h2 id=\"Sample_Code\">Sample Code</h2>\n\n<p>Both of the following code samples assume that the variable dbConn is an opened <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageConnection\" title=\"\">mozIStorageConnection</a></code>.</p>\n\n<h3 id=\"JavaScript\">JavaScript</h3>\n\n<pre class=\"brush: js\">// First, create our object that will represent our function.\nvar standardDeviationFunc = {\n  _numbers: [],\n  onStep: function(aArguments) {\n    this._numbers.push(aArguments.getInt32(0));\n  },\n  onFinal: function() {\n    let total = 0;\n    let iLength = this._numbers.length;\n    this._numbers.forEach(function(elt) { total += elt });\n    let mean = total / this._numbers.length;\n    let data = this._numbers.map(function(elt) {\n      let value = elt - mean;\n      return value * value;\n    });\n    total = 0;\n    data.forEach(function(elt) { total += elt });\n    this._numbers = [];\n    return Math.sqrt(total / iLength); \n  }\n};\n\n// Now, register our function with the database connection.\ndbConn.createAggregateFunction(\"stdDev\", 1, standardDeviationFunc);\n\n// Run some query that uses the function.\nlet stmt = dbConn.createStatement(\"SELECT stdDev(value) FROM some_table\");\ntry {\n  while (stmt.executeStep()) {\n    // handle the results\n  }\n}\nfinally {\n  stmt.reset();\n}\n</pre>\n\n<h3 id=\"C\">C++</h3>\n\n<pre class=\"brush: cpp\">// First, create our class that will represent our function.\nclass standardDeviationFunc : public mozIStorageAggregateFunction\n{\npublic:\n  NS_IMETHOD OnStep(mozIStorageValueArray *aArguments)\n  {\n    PRInt32 value;\n    nsresult rv = aArguments-&gt;GetInt32(&amp;value);\n    NS_ENSURE_SUCCESS(rv, rv);\n\n    mNumbers.AppendElement(value);\n  }\n\n  NS_IMETHOD OnFinal(nsIVariant **_result)\n  {\n    PRInt64 total = 0;\n    for (PRUint32 i = 0; i &lt; mNumbers.Length(); i++)\n      total += mNumbers[i];\n    PRInt32 mean = total / mNumbers.Length();\n\n    nsTArray&lt;PRInt64&gt; data(mNumbers);\n    for (PRUint32 i = 0; i &lt; data.Length(); i++) {\n      PRInt32 value = data[i] - mean;\n      data[i] = value * value;\n    }\n\n    total = 0;\n    for (PRUint32 i = 0; i &lt; data.Length(); i++)\n      total += data[i];\n\n    nsCOMPtr&lt;nsIWritableVariant&gt; result =\n      do_CreateInstance(\"@mozilla.org/variant;1\");\n    NS_ENSURE_TRUE(result, NS_ERROR_OUT_OF_MEMORY);\n    \n    rv = result-&gt;SetAsDouble(sqrt(double(total) / double(data.Length())));\n    NS_ENSURE_SUCCESS(rv, rv);\n\n    NS_ADDREF(*_result = result);\n    return NS_OK;\n  }\nprivate:\n  nsTArray&lt;PRInt32&gt; mNumbers;\n};\n\n// Now, register our function with the database connection.\nnsCOMPtr&lt;mozIStorageFunction&gt; func = new standardDeviationFunc();\nNS_ENSURE_TRUE(func, NS_ERROR_OUT_OF_MEMORY);\nnsresult rv = dbConn-&gt;CreateFunction(\n  NS_LITERAL_CSTRING(\"stdDev\"),\n  1,\n  func\n);\nNS_ENSURE_SUCCESS(rv, rv);\n\n// Run some query that uses the function.\nnsCOMPtr&lt;mozIStorageStatement&gt; stmt;\nrv = dbConn-&gt;CreateStatement(NS_LITERAL_CSTRING(\n  \"SELECT stdDev(value) FROM some_table\"),\n  getter_AddRefs(stmt)\n);\nNS_ENSURE_SUCCESS(rv, rv);\nPRBool hasMore;\nwhile (NS_SUCCEEDED(stmt-&gt;ExecuteStep(&amp;hasMore)) &amp;&amp; hasMore) {\n  // handle the results\n}\n</pre>\n\n<p> </p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/tirein\">tirein</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/teoli\">teoli</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mrinal.kant\">Mrinal.kant</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/sdwilsh\">sdwilsh</a>",
    "title": "mozIStorageAggregateFunction"
}