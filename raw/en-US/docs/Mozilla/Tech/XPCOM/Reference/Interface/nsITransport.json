{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/netwerk/base/public/nsITransport.idl\" rel=\"custom\">netwerk/base/public/nsITransport.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThis interface provides a common way of accessing i/o streams connected to some resource. This interface does not in any way specify the resource.\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 1.8 (Firefox 1.5 / Thunderbird 1.5 / SeaMonkey 1.0)</span></div>\n</div><p></p>\n<p>This interface provides methods to open blocking or non-blocking, buffered or unbuffered streams to the resource. The name \"transport\" is meant to connote the inherent data transfer implied by this interface (that is, data is being transfered in some fashion via the streams exposed by this interface).</p>\n<p>A transport can have an event sink associated with it. The event sink receives transport-specific events as the transfer is occurring. For a socket transport, these events can include status about the connection. See <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISocketTransport\" title=\"\">nsISocketTransport</a></code> for more info about socket transport specifics.</p>\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n<table class=\"standard-table\"> <tbody> <tr> <td><code>void <a href=\"#close()\">close</a>(in nsresult aReason);</code></td> </tr> <tr> <td><code>nsIInputStream <a href=\"#openInputStream()\">openInputStream</a>(in unsigned long aFlags, in unsigned long aSegmentSize, in unsigned long aSegmentCount);</code></td> </tr> <tr> <td><code>nsIOutputStream <a href=\"#openOutputStream()\">openOutputStream</a>(in unsigned long aFlags, in unsigned long aSegmentSize, in unsigned long aSegmentCount);</code></td> </tr> <tr> <td><code>void <a href=\"#setEventSink()\">setEventSink</a>(in nsITransportEventSink aSink, in nsIEventTarget aEventTarget);</code></td> </tr> </tbody>\n</table>\n<h2 id=\"Constants\" name=\"Constants\">Constants</h2>\n<p>Open flags.</p>\n<table class=\"standard-table\"> <tbody> <tr> <td class=\"header\">Constant</td> <td class=\"header\">Value</td> <td class=\"header\">Description</td> </tr> <tr> <td><code>OPEN_BLOCKING</code></td> <td><code>1&lt;&lt;0</code></td> <td>Open flags.</td> </tr> <tr> <td><code>OPEN_UNBUFFERED</code></td> <td><code>1&lt;&lt;1</code></td> <td> </td> </tr> </tbody>\n</table>\n<p>Generic <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITransportEventSink\" title=\"\">nsITransportEventSink</a></code> status codes. <code>nsITransport</code> implementations may override these status codes with their own more specific status codes (for example, see <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISocketTransport\" title=\"\">nsISocketTransport</a></code>).</p>\n<table class=\"standard-table\"> <tbody> <tr> <td class=\"header\">Constant</td> <td class=\"header\">Value</td> <td class=\"header\">Description</td> </tr> <tr> <td><code>STATUS_READING</code></td> <td><code>0x804b0008</code></td> <td> </td> </tr> <tr> <td><code>STATUS_WRITING</code></td> <td><code>0x804b0009</code></td> <td> </td> </tr> </tbody>\n</table>\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n<h3 id=\"close()\" name=\"close()\">close()</h3>\n<p>Close the transport and any open streams.</p>\n<pre class=\"eval\">void close(\n  in nsresult aReason\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aReason</code></dt> <dd>The reason for closing the stream.</dd>\n</dl>\n<h3 id=\"openInputStream()\" name=\"openInputStream()\">openInputStream()</h3>\n<p>Open an input stream on this transport.</p>\n<pre class=\"eval\">nsIInputStream openInputStream(\n  in unsigned long aFlags,\n  in unsigned long aSegmentSize,\n  in unsigned long aSegmentCount\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aFlags</code></dt> <dd>Optional transport specific flags. <p>Flags have the following meaning:</p> <p><code>OPEN_BLOCKING</code> If specified, then the resulting stream will have blocking stream semantics. This means that if the stream has no data and is not closed, then reading from it will block the calling thread until at least one byte is available or until the stream is closed. If this flag is NOT specified, then the stream has non-blocking stream semantics. This means that if the stream has no data and is not closed, then reading from it returns NS_BASE_STREAM_WOULD_BLOCK. In addition, in non-blocking mode, the stream is guaranteed to support <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAsyncInputStream\" title=\"\">nsIAsyncInputStream</a></code>. This interface allows the consumer of the stream to be notified when the stream can again be read.</p> <p><code>OPEN_UNBUFFERED</code> If specified, the resulting stream may not support ReadSegments. ReadSegments is only guaranteed to be implemented when this flag is NOT specified.</p> </dd> <dt><code>aSegmentSize</code></dt> <dd>If <code>OPEN_UNBUFFERED</code> is not set, then this parameter specifies the size of each buffer segment (pass 0 to use default value).</dd> <dt><code>aSegmentCount</code></dt> <dd>If <code>OPEN_UNBUFFERED</code> is not set, then this parameter specifies the maximum number of buffer segments (pass 0 to use default value).</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p> </p>\n<h3 id=\"openOutputStream()\" name=\"openOutputStream()\">openOutputStream()</h3>\n<p>Open an output stream on this transport.</p>\n<pre class=\"eval\">nsIOutputStream openOutputStream(\n  in unsigned long aFlags,\n  in unsigned long aSegmentSize,\n  in unsigned long aSegmentCount\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aFlags</code></dt> <dd>Optional transport specific flags. <p>Flags have the following meaning:</p> <p><code>OPEN_BLOCKING</code> If specified, then the resulting stream will have blocking stream semantics. This means that if the stream is full and is not closed, then writing to it will block the calling thread until ALL of the data can be written or until the stream is closed. If this flag is NOT specified, then the stream has non-blocking stream semantics. This means that if the stream is full and is not closed, then writing to it returns NS_BASE_STREAM_WOULD_BLOCK. In addition, in non- blocking mode, the stream is guaranteed to support <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAsyncOutputStream\" title=\"\">nsIAsyncOutputStream</a></code>. This interface allows the consumer of the stream to be notified when the stream can again accept more data.</p> <p><code>OPEN_UNBUFFERED</code> If specified, the resulting stream may not support WriteSegments and WriteFrom. WriteSegments and WriteFrom are only guaranteed to be implemented when this flag is NOT specified.</p> </dd> <dt><code>aSegmentSize</code></dt> <dd>If <code>OPEN_UNBUFFERED</code> is not set, then this parameter specifies the size of each buffer segment (pass 0 to use default value).</dd> <dt><code>aSegmentCount</code></dt> <dd>If <code>OPEN_UNBUFFERED</code> is not set, then this parameter specifies the maximum number of buffer segments (pass 0 to use default value).</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p> </p>\n<h3 id=\"setEventSink()\" name=\"setEventSink()\">setEventSink()</h3>\n<p>Set the transport event sink.</p>\n<pre class=\"eval\">void setEventSink(\n  in nsITransportEventSink aSink,\n  in nsIEventTarget aEventTarget\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aSink</code></dt> <dd>Receives transport layer notifications.</dd> <dt><code>aEventTarget</code></dt> <dd>Indicates the event target to which the notifications should be delivered. If <code>null</code>, then the notifications may occur on any thread.</dd>\n</dl>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/LouCypher\">LouCypher</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Cheba\">Cheba</a>",
    "title": "nsITransport"
}