{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/netwerk/base/public/nsIUploadChannel.idl\" rel=\"custom\">netwerk/base/public/nsIUploadChannel.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nA channel may optionally implement this interface if it supports the notion of uploading a data stream. The upload stream may only be set prior to the invocation of asyncOpen on the channel.\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 1.7 </span></div>\n</div><p></p>\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n<table class=\"standard-table\"> <tbody> <tr> <td><code>void <a href=\"#setUploadStream()\">setUploadStream</a>(in nsIInputStream aStream, in ACString aContentType, in long aContentLength);</code></td> </tr> </tbody>\n</table>\n<h2 id=\"Attributes\" name=\"Attributes\">Attributes</h2>\n<table class=\"standard-table\"> <tbody> <tr> <td class=\"header\">Attribute</td> <td class=\"header\">Type</td> <td class=\"header\">Description</td> </tr> <tr> <td><code>uploadStream</code></td> <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInputStream\" title=\"\">nsIInputStream</a></code></code></td> <td>Get the stream (to be) uploaded by this channel. <strong>Read only.</strong></td> </tr> </tbody>\n</table>\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n<h3 id=\"setUploadStream()\" name=\"setUploadStream()\">setUploadStream()</h3>\n<p>Sets a stream to be uploaded by this channel.</p>\n<p>Most implementations of this interface require that the stream:</p>\n<ol> <li>implement threadsafe addRef and release</li> <li>implement <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIInputStream#readSegments()\">nsIInputStream.readSegments()</a></code></li> <li>implement <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsISeekableStream#seek()\">nsISeekableStream.seek()</a></code>.</li>\n</ol>\n<p>History here is that we need to support both streams that already have headers (for example, Content-Type and Content-Length) information prepended to the stream (by plugins) as well as clients (composer, uploading application) that want to upload data streams without any knowledge of protocol specifications. For this reason, we have a special meaning for the aContentType parameter.</p>\n<pre class=\"eval\">void setUploadStream(\n  in nsIInputStream aStream,\n  in ACString aContentType,\n  in long aContentLength\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aStream</code></dt> <dd>The stream to be uploaded by this channel.</dd> <dt><code>aContentType</code></dt> <dd>If aContentType is empty, the protocol will assume that no content headers are to be added to the uploaded stream and that any required headers are already encoded in the stream. In the case of HTTP, if this parameter is non-empty, then its value will replace any existing Content-Type header on the HTTP request. In the case of FTP and FILE, this parameter is ignored.</dd> <dt><code>aContentLength</code></dt> <dd>A value of -1 indicates that the length of the stream should be determined by calling the stream's <code>available</code> method.</dd>\n</dl>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>",
    "title": "nsIUploadChannel"
}