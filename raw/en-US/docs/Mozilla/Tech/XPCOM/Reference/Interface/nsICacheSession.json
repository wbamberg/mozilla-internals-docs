{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/netwerk/cache/public/nsICacheSession.idl\" rel=\"custom\">netwerk/cache/public/nsICacheSession.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nHandles open synchronous and asynchronous cache entry operations along with evicting cache entries and checking for cache devices instantiation according to the session storage policies.\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 14 (Firefox 14 / Thunderbird 14 / SeaMonkey 2.11)</span></div>\n</div><p></p>\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n<table class=\"standard-table\"> <tbody> <tr> <td><code>void <a href=\"#asyncOpenCacheEntry()\">asyncOpenCacheEntry</a>(in ACString key, in nsCacheAccessMode accessRequested, in nsICacheListener listener, [optional] in boolean noWait);</code></td> </tr> <tr> <td><code>void <a href=\"#evictEntries()\">evictEntries</a>();</code></td> </tr> <tr> <td><code>PRBool <a href=\"#isStorageEnabled()\">isStorageEnabled</a>();</code></td> </tr> <tr> <td><code>nsICacheEntryDescriptor <a href=\"#openCacheEntry()\">openCacheEntry</a>(in ACString key, in nsCacheAccessMode accessRequested, in boolean blockingMode);</code></td> </tr> <tr> <td><code>void <a href=\"#doomEntry()\">doomEntry</a>(in ACString key, in nsICacheListener listener);</code> </td> </tr> </tbody>\n</table>\n<h2 id=\"Attributes\" name=\"Attributes\">Attributes</h2>\n<table class=\"standard-table\"> <tbody> <tr> <td class=\"header\">Attribute</td> <td class=\"header\">Type</td> <td class=\"header\">Description</td> </tr> <tr> <td><code>doomEntriesIfExpired</code></td> <td><code><a href=\"/en/PRBool\" title=\"en/PRBool\">PRBool</a></code></td> <td>Expired entries will be doomed or evicted if this attribute is set to <code>true</code>. If <code>false</code>, expired entries will be returned (useful for offline mode and clients, such as HTTP, that can update the valid lifetime of cached content). This attribute defaults to <code>true</code>.</td> </tr> </tbody>\n</table>\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n<h3 id=\"asyncOpenCacheEntry()\" name=\"asyncOpenCacheEntry()\">asyncOpenCacheEntry()</h3>\n<p>This method gives an asynchronous cache access. Does not block the calling thread. Instead, the listener will be notified when the descriptor is available.</p>\n<pre class=\"eval\">void asyncOpenCacheEntry(\n  in ACString key,\n  in nsCacheAccessMode accessRequested,\n  in nsICacheListener listener,\n  [optional] in boolean noWait\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>key</code></dt> <dd>The key for cache entry.</dd> <dt><code>accessRequested</code></dt> <dd>The requested access.</dd> <dt><code>listener</code></dt> <dd>The cache listener to be notified.</dd> <dt><code>noWait</code></dt> <dd>Do not wait for the cache entry when it is in use and waits for validation.</dd>\n</dl>\n<p></p><h3 id=\"doomEntry()\">doomEntry()</h3><p></p>\n<p>Asynchronously dooms an entry specified by the key.</p>\n<pre class=\"eval\">void doomEntry(\n  in ACString key,\n  in nsICacheListener listener\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>key</code></dt> <dd>The key for cache entry.</dd> <dt><code>listener</code></dt> <dd>The cache listener to be notified (may be <code>null</code>).</dd>\n</dl><h3 id=\"evictEntries()\" name=\"evictEntries()\">evictEntries()</h3>\n<p>This method evicts all entries for this session's clientID according to its <code>storagePolicy</code>.</p>\n<pre class=\"eval\">void evictEntries();\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<p>None.</p>\n<h3 id=\"isStorageEnabled()\" name=\"isStorageEnabled()\">isStorageEnabled()</h3>\n<p>This method checks if the cache devices implied by the session storage policy are currently enabled for instantiation if they don't already exist.</p>\n<pre class=\"eval\">PRBool isStorageEnabled();\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<p>None.</p>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>Returns whether any of the cache devices implied by the session storage policy are currently enabled for instantiation or not, depending on their existence.</p>\n<h3 id=\"openCacheEntry()\" name=\"openCacheEntry()\">openCacheEntry()</h3>\n<p>This method gives a synchronous cache access. It returns a unique descriptor each time it is called, even if the same key is specified. When called by multiple threads for <code>WRITE</code> access, only one writable descriptor will be granted. If <code>blockingMode</code> is set to <code>false</code>, it will return <code>NS_ERROR_CACHE_WAIT_FOR_VALIDATION</code> rather than block when another descriptor has been given <code>WRITE</code> access but hasn't validated the entry yet.</p>\n<div class=\"note\"><strong>Note:</strong> If at all possible, you should use <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsICacheSession#asyncOpenCacheEntry()\">asyncOpenCacheEntry()</a></code> instead of calling <code>openCacheEntry()</code>, in order to avoid blocking on I/O on the calling thread. This will streamline overall application performance.</div>\n<p>A cache session can only give out one descriptor with <code>WRITE</code> access to a given cache entry at a time. Until the client calls <code>MarkValid</code> on its descriptor, other attempts to open the same cache entry will block.</p>\n<pre class=\"eval\">nsICacheEntryDescriptor openCacheEntry(\n  in ACString key,\n  in nsCacheAccessMode accessRequested,\n  in boolean blockingMode\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>key</code></dt> <dd>The key for cache entry.</dd> <dt><code>accessRequested</code></dt> <dd>The requested access.</dd> <dt><code>blockingMode</code></dt> <dd><code>True</code> or <code>False</code> value to turn blocking mode for calling the thread to ON/OFF respectively.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>Returns a unique descriptor each time it is called.</p>\n<h2 id=\"See_also\" name=\"See_also\">See also</h2>\n<ul> <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsICache\" title=\"\">nsICache</a></code></li> <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsICacheEntryDescriptor\" title=\"\">nsICacheEntryDescriptor</a></code></li> <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsICacheListener\" title=\"\">nsICacheListener</a></code></li> <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsICacheService\" title=\"\">nsICacheService</a></code></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/michal.novotny\">michal.novotny</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Arehman4\">Arehman4</a>",
    "title": "nsICacheSession"
}