{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/toolkit/components/places/public/nsIAnnotationService.idl\" rel=\"custom\">toolkit/components/places/public/nsIAnnotationService.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nStores arbitrary data about a web page. Supported for use from trusted code, such as extensions, but not from web content.\n</span>\n\n  <div style=\"height: 42px; position: relative; padding: 2px; width: auto;\">\n\n  <div style=\"top: 22px; font-size: 11px; position: absolute;\">1.0</div>\n  \n  <div style=\"top: 22px; font-size: 11px; position: absolute; left: 0px; text-align: right; float: right; width: 100%;\">66</div>\n  \n  <div style=\"height: 8px; top: 16px; background: #dd0000; left: 0px; position: absolute; width: 8.571428571428571%;\"></div>\n  \n<div style=\"height: 8px; top: 16px; left: 8.571428571428571%; background: #00dd00; position: absolute; width: 91.42857142857143%;\" title=\"Introduced in Gecko 1.9 (Firefox 3)\"></div>\n\n<div style=\"top: 0px; font-size: 11px; position: absolute; left: 8.571428571428571%;\">Introduced</div>\n<div style=\"top: 22px; font-size: 11px; position: absolute; left: 8.571428571428571%;\">Gecko 1.9</div>\n\n    <div style=\"height: 8px; top: 16px; left: 10.928571428571429%; background: #eeee00; position: absolute; width: 1%; border-radius: 4px; -webkit-border-radius: 4px;\" title=\"Last changed in Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)\"></div>\n    \n</div>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)</span></div>\n</div><p></p>\n\n<p>Implemented by: <code>\"@mozilla.org/browser/annotation-service;1\"</code>. To use this service, use:</p>\n\n<pre>var annotationService = Components.classes[\"@mozilla.org/browser/annotation-service;1\"]\n                        .getService(Components.interfaces.nsIAnnotationService);\n</pre>\n\n<div class=\"blockIndicator note\">\n<p><strong>Note:</strong> The annotation service is not thread-safe. You should only use it from the main thread.</p>\n</div>\n\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code>void <a href=\"#setPageAnnotation()\">setPageAnnotation</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> aURI, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName, in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIVariant\" title=\"\">nsIVariant</a></code> aValue, in long aFlags, in unsigned short aExpiration);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setItemAnnotation()\">setItemAnnotation</a>(in long long aItemId, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName, in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIVariant\" title=\"\">nsIVariant</a></code> aValue, in long aFlags, in unsigned short aExpiration);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setPageAnnotationString()\">setPageAnnotationString</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> aURI, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName, in AString aValue, in long aFlags, in unsigned short aExpiration);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#setItemAnnotationString()\">setItemAnnotationString</a>(in long long aItemId, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName, in AString aValue, in long aFlags, in unsigned short aExpiration);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setPageAnnotationInt32()\">setPageAnnotationInt32</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> aURI, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName, in long aValue, in long aFlags, in unsigned short aExpiration);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setItemAnnotationInt32()\">setItemAnnotationInt32</a>(in long long aItemId, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName, in long aValue, in long aFlags, in unsigned short aExpiration);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setPageAnnotationInt64()\">setPageAnnotationInt64</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> aURI, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName, in long long aValue, in long aFlags, in unsigned short aExpiration);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setItemAnnotationInt64()\">setItemAnnotationInt64</a>(in long long aItemId, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName, in long long aValue, in long aFlags, in unsigned short aExpiration);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setPageAnnotationDouble()\">setPageAnnotationDouble</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> aURI, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName, in double aValue, in long aFlags, in unsigned short aExpiration);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setItemAnnotationDouble()\">setItemAnnotationDouble</a>(in long long aItemId, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName, in double aValue, in long aFlags, in unsigned short aExpiration);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setPageAnnotationBinary()\">setPageAnnotationBinary</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> aURI, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName,[const, array, size_is(aDataLen)] in octet aData, in unsigned long aDataLen, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aMimeType, in long aFlags, in unsigned short aExpiration);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setItemAnnotationBinary()\">setItemAnnotationBinary</a>(in long long aItemId, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName,[const, array, size_is(aDataLen)] in octet aData, in unsigned long aDataLen, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aMimeType, in long aFlags, in unsigned short aExpiration);</code></td>\n  </tr>\n  <tr>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIVariant\" title=\"\">nsIVariant</a></code> <a href=\"#getPageAnnotation()\">getPageAnnotation</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> aURI, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName);</code></td>\n  </tr>\n  <tr>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIVariant\" title=\"\">nsIVariant</a></code> <a href=\"#getItemAnnotation()\">getItemAnnotation</a>(in long long aItemId, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName);</code></td>\n  </tr>\n  <tr>\n   <td><code>AString <a href=\"#getPageAnnotationString()\">getPageAnnotationString</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> aURI, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName);</code></td>\n  </tr>\n  <tr>\n   <td><code>AString <a href=\"#getItemAnnotationString()\">getItemAnnotationString</a>(in long long aItemId, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName);</code></td>\n  </tr>\n  <tr>\n   <td><code>long <a href=\"#getPageAnnotationInt32()\">getPageAnnotationInt32</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> aURI, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName);</code></td>\n  </tr>\n  <tr>\n   <td><code>long <a href=\"#getItemAnnotationInt32()\">getItemAnnotationInt32</a>(in long long aItemId, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName);</code></td>\n  </tr>\n  <tr>\n   <td><code>long long <a href=\"#getPageAnnotationInt64()\">getPageAnnotationInt64</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> aURI, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName);</code></td>\n  </tr>\n  <tr>\n   <td><code>long long <a href=\"#getItemAnnotationInt64()\">getItemAnnotationInt64</a>(in long long aItemId, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName);</code></td>\n  </tr>\n  <tr>\n   <td><code>double <a href=\"#getPageAnnotationDouble()\">getPageAnnotationDouble</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> aURI, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName);</code></td>\n  </tr>\n  <tr>\n   <td><code>double <a href=\"#getItemAnnotationDouble()\">getItemAnnotationDouble</a>(in long long aItemId, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#getPageAnnotationBinary()\">getPageAnnotationBinary</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> aURI, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName,[array, size_is(aDataLen)] out octet aData, out unsigned long aDataLen, out <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aMimeType);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#getItemAnnotationBinary()\">getItemAnnotationBinary</a>(in long long aItemId, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName,[array, size_is(aDataLen)] out octet aData, out unsigned long aDataLen, out <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aMimeType);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#getPageAnnotationInfo()\">getPageAnnotationInfo</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> aURI, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName, out PRInt32 aFlags, out unsigned short aExpiration, out <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aMimeType, out unsigned short aType);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#getItemAnnotationInfo()\">getItemAnnotationInfo</a>(in long long aItemId, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName, out long aFlags, out unsigned short aExpiration, out <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aMimeType, out unsigned short aType);</code></td>\n  </tr>\n  <tr>\n   <td><code>PRUint16 <a href=\"#getPageAnnotationType()\">getPageAnnotationType</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> aURI, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName);</code></td>\n  </tr>\n  <tr>\n   <td><code>PRUint16 <a href=\"#getItemAnnotationType()\">getItemAnnotationType</a>(in long long aItemId, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#getPagesWithAnnotation()\">getPagesWithAnnotation</a>(in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> name, [optional] out unsigned long resultCount, [retval, array, size_is(resultCount)] out <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> results);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#getItemsWithAnnotation()\">getItemsWithAnnotation</a>(in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> name, </code><code>[optional] </code><code>out unsigned long resultCount, [retval, array, size_is(resultCount)] out long long results);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#getPageAnnotationNames()\">getPageAnnotationNames</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> aURI, </code><code>[optional] </code><code>out unsigned long count, [retval, array, size_is(count)] out <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIVariant\" title=\"\">nsIVariant</a></code> result);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#getItemAnnotationNames()\">getItemAnnotationNames</a>(in long long aItemId, </code><code>[optional] </code><code>out unsigned long count, [retval, array, size_is(count)] out <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIVariant\" title=\"\">nsIVariant</a></code> result);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#pageHasAnnotation()\">pageHasAnnotation</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> aURI, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#itemHasAnnotation()\">itemHasAnnotation</a>(in long long aItemId, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#removePageAnnotation()\">removePageAnnotation</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> aURI, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#removeItemAnnotation()\">removeItemAnnotation</a>(in long long aItemId, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#removePageAnnotations()\">removePageAnnotations</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> aURI);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#removeItemAnnotations()\">removeItemAnnotations</a>(in long long aItemId);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#copyPageAnnotations()\">copyPageAnnotations</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> aSourceURI, in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> aDestURI, in boolean aOverwriteDest);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#copyItemAnnotations()\">copyItemAnnotations</a>(in long long aSourceItemId, in long long aDestItemId, in boolean aOverwriteDest);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#addObserver()\">addObserver</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationObserver\" title=\"\">nsIAnnotationObserver</a></code> aObserver);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#removeObserver()\">removeObserver</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationObserver\" title=\"\">nsIAnnotationObserver</a></code> aObserver);</code></td>\n  </tr>\n  <tr>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> <a href=\"#getAnnotationURI()\">getAnnotationURI</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> aURI, in <a href=\"/en-US/docs/AUTF8String\" title=\"AUTF8String\">AUTF8String</a> aName);</code></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Constants\" name=\"Constants\">Constants</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Constant</td>\n   <td class=\"header\">Value</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>EXPIRE_SESSION</code></td>\n   <td>0</td>\n   <td>For temporary data that can be discarded when the user exits. Removed at application exit.</td>\n  </tr>\n  <tr>\n   <td><code>EXPIRE_WEEKS</code></td>\n   <td>2</td>\n   <td>For general page settings, things the user is interested in seeing if they come back to this page some time in the near future. Removed at 30 days.</td>\n  </tr>\n  <tr>\n   <td><code>EXPIRE_MONTHS</code></td>\n   <td>3</td>\n   <td>Something that the user will be interested in seeing in their history like <code>favicons</code>. If they haven't visited a page in a couple of months, they probably aren't interested in many other annotations, the positions of things, or other stuff you create, so put that in the weeks policy. Removed at 180 days.</td>\n  </tr>\n  <tr>\n   <td><code>EXPIRE_NEVER</code></td>\n   <td>4</td>\n   <td>For data that should never expire as long as the URI is in the database.</td>\n  </tr>\n  <tr>\n   <td><code>EXPIRE_WITH_HISTORY</code></td>\n   <td>5</td>\n   <td>For annotations that only live as long as the URI is in history (For example, has &gt; 0 visits). This is only valid for page annotations.</td>\n  </tr>\n  <tr>\n   <td><code>EXPIRE_DAYS</code></td>\n   <td>6</td>\n   <td>For short-lived temporary data that you still want to outlast a session. Removed at 7 days.</td>\n  </tr>\n  <tr>\n   <td><code>TYPE_INT32</code></td>\n   <td>1</td>\n   <td><code>INT32</code> type constant.</td>\n  </tr>\n  <tr>\n   <td><code>TYPE_DOUBLE</code></td>\n   <td>2</td>\n   <td><code>DOUBLE</code> type constant.</td>\n  </tr>\n  <tr>\n   <td><code>TYPE_STRING</code></td>\n   <td>3</td>\n   <td><code>STRING</code> type constant.</td>\n  </tr>\n  <tr>\n   <td><code>TYPE_BINARY</code></td>\n   <td>4</td>\n   <td><code>BINARY</code> type constant.</td>\n  </tr>\n  <tr>\n   <td><code>TYPE_INT64</code></td>\n   <td>5</td>\n   <td><code>INT64</code> type constant.</td>\n  </tr>\n </tbody>\n</table>\n\n<div class=\"note\"><strong>Note:</strong> Use of value \"1\" is omitted due to it's temporary use as <code>EXPIRE_NEVER</code> in <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=319455\" title=\"FIXED: Expire annotations\">bug 319455</a>.</div>\n\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n\n<h3 id=\"setPageAnnotation()\" name=\"setPageAnnotation()\">setPageAnnotation()</h3>\n\n<p>This method sets an annotation for given URI, overwriting any previous annotation with the same URL/name. IT IS YOUR JOB TO NAMESPACE YOUR ANNOTATION NAMES. Use the form <code>\"namespace/value\"</code>, so your name would be like <code>\"bills_extension/page_state\"</code> or <code>\"history/thumbnail\"</code>.</p>\n\n<p>Do not use characters that are not valid in URLs such as spaces, <code>\":\"</code>, commas, or most other symbols. You should stick to ASCII letters and numbers plus <code>\"_\"</code>, <code>\"-\"</code>, and <code>\"/\"</code>.</p>\n\n<p>The annotation \"favicon\" is special. Favicons are stored in the favicon service, but are special cased in the protocol handler so they look like annotations. Do not set favicons using this service, it will not work.</p>\n\n<p>Binary annotations should be set using <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#setItemAnnotationBinary()\">setItemAnnotationBinary()</a></code> or <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#setPageAnnotationBinary()\">setPageAnnotationBinary()</a></code>. For other types, only C++ consumers may use the type-specific methods.</p>\n\n<pre>void setPageAnnotation(\n  in nsIURI aURI, \n  in AUTF8String aName,\n  in nsIVariant aValue, \n  in long aFlags,\n  in unsigned short aExpiration\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The URI on which the annotation is to be set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n <dt><code>aValue</code></dt>\n <dd>The annotation value.</dd>\n <dt><code>aFlags</code></dt>\n <dd>Should be <code>\"0\"</code> for now, some flags will be defined in the future.</dd>\n <dt><code>aExpiration</code></dt>\n <dd>One of the <code>EXPIRE_*</code> constant value defined above.</dd>\n</dl>\n\n<div class=\"blockIndicator warning\">\n<p><strong>Note:</strong> <strong>ALL PAGE ANNOTATIONS WILL GET DELETED WHEN THE PAGE IS REMOVED FROM HISTORY IF THE PAGE IS NOT BOOKMARKED.</strong></p>\n\n<p>This means that if you create an annotation on an unvisited URI, it will get deleted when the browser shuts down. Otherwise, URIs can exist in history as annotations but the user has no way of knowing it, potentially violating their privacy expectations about actions such as Clear history. If there is an important annotation that the user or extension wants to keep, you should add a bookmark for the page and use an EXPIRE_NEVER annotation. This will ensure the annotation exists until the item is removed by the user.</p>\n</div>\n\n<h3 id=\"setItemAnnotation()\" name=\"setItemAnnotation()\">setItemAnnotation()</h3>\n\n<p>This method sets an annotation for given item, overwriting any previous annotation with the same URL/name. IT IS YOUR JOB TO NAMESPACE YOUR ANNOTATION NAMES. Use the form <code>\"namespace/value\"</code>, so your name would be like <code>\"bills_extension/page_state\"</code> or <code>\"history/thumbnail\"</code>.</p>\n\n<p>Do not use characters that are not valid in URLs such as spaces, <code>\":\"</code>, commas, or most other symbols. You should stick to ASCII letters and numbers plus <code>\"_\"</code>, <code>\"-\"</code>, and <code>\"/\"</code>.</p>\n\n<p>The annotation \"favicon\" is special. Favicons are stored in the favicon service, but are special cased in the protocol handler so they look like annotations. Do not set favicons using this service, it will not work.</p>\n\n<p>Binary annotations should be set using <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#setItemAnnotationBinary()\">setItemAnnotationBinary()</a></code> or <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#setPageAnnotationBinary()\">setPageAnnotationBinary()</a></code>. For other types, only C++ consumers may use the type-specific methods.</p>\n\n<pre>void setItemAnnotation(\n  in long long aItemId, \n  in AUTF8String aName,\n  in nsIVariant aValue, \n  in long aFlags,\n  in unsigned short aExpiration\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aItemID</code></dt>\n <dd>The item on which the annotation is to be set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n <dt><code>aValue</code></dt>\n <dd>The annotation value.</dd>\n <dt><code>aFlags</code></dt>\n <dd>Should be <code>\"0\"</code> for now, some flags will be defined in the future.</dd>\n <dt><code>aExpiration</code></dt>\n <dd>One of the <code>EXPIRE_*</code> constant value defined above.</dd>\n</dl>\n\n<div class=\"blockIndicator warning\">\n<p><strong>Note:</strong> <strong>ALL ITEM ANNOTATIONS WILL GET DELETED WHEN THE BOOKMARK IS REMOVED.</strong></p>\n</div>\n\n<h3 id=\"setPageAnnotationString()\" name=\"setPageAnnotationString()\">setPageAnnotationString()</h3>\n\n<p>This method sets an annotation for given URI by taking a <code>String</code> as input value, overwriting any previous annotation with the same URL/name. IT IS YOUR JOB TO NAMESPACE YOUR ANNOTATION NAMES. Use the form <code>\"namespace/value\"</code>, so your name would be like <code>\"bills_extension/page_state\"</code> or <code>\"history/thumbnail\"</code>.</p>\n\n<p>Do not use characters that are not valid in URLs such as spaces, <code>\":\"</code>, commas, or most other symbols. You should stick to ASCII letters and numbers plus <code>\"_\"</code>, <code>\"-\"</code>, and <code>\"/\"</code>.</p>\n\n<p>The annotation \"favicon\" is special. Favicons are stored in the favicon service, but are special cased in the protocol handler so they look like annotations. Do not set favicons using this service, it will not work.</p>\n\n<p>Binary annotations should be set using <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#setItemAnnotationBinary()\">setItemAnnotationBinary()</a></code> or <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#setPageAnnotationBinary()\">setPageAnnotationBinary()</a></code>. For other types, only C++ consumers may use the type-specific methods.</p>\n\n<pre>void setPageAnnotationString(\n  in nsIURI aURI, \n  in AUTF8String aName,\n  in AString aValue, \n  in long aFlags,\n  in unsigned short aExpiration\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The URI on which the annotation is to be set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n <dt><code>aValue</code></dt>\n <dd>The annotation value.</dd>\n <dt><code>aFlags</code></dt>\n <dd>Should be <code>\"0\"</code> for now, some flags will be defined in the future.</dd>\n <dt><code>aExpiration</code></dt>\n <dd>One of the <code>EXPIRE_*</code> constant value defined above.</dd>\n</dl>\n\n<div class=\"warning\">\n<p><strong>Note:</strong> <strong>ALL PAGE ANNOTATIONS WILL GET DELETED WHEN THE PAGE IS REMOVED FROM HISTORY IF THE PAGE IS NOT BOOKMARKED.</strong></p>\n\n<p>This means that if you create an annotation on an unvisited URI, it will get deleted when the browser shuts down. Otherwise, URIs can exist in history as annotations but the user has no way of knowing it, potentially violating their privacy expectations about actions such as Clear history. If there is an important annotation that the user or extension wants to keep, you should add a bookmark for the page and use an EXPIRE_NEVER annotation. This will ensure the annotation exists until the item is removed by the user.</p>\n</div>\n\n<h3 id=\"setItemAnnotationString()\" name=\"setItemAnnotationString()\">setItemAnnotationString()</h3>\n\n<p>This method sets an annotation for given item by taking a <code>String</code> as input value, overwriting any previous annotation with the same URL/name. IT IS YOUR JOB TO NAMESPACE YOUR ANNOTATION NAMES. Use the form <code>\"namespace/value\"</code>, so your name would be like <code>\"bills_extension/page_state\"</code> or <code>\"history/thumbnail\"</code>.</p>\n\n<p>Do not use characters that are not valid in URLs such as spaces, <code>\":\"</code>, commas, or most other symbols. You should stick to ASCII letters and numbers plus <code>\"_\"</code>, <code>\"-\"</code>, and <code>\"/\"</code>.</p>\n\n<p>The annotation \"favicon\" is special. Favicons are stored in the favicon service, but are special cased in the protocol handler so they look like annotations. Do not set favicons using this service, it will not work.</p>\n\n<p>Binary annotations should be set using <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#setItemAnnotationBinary()\">setItemAnnotationBinary()</a></code>. For other types, only C++ consumers may use the type-specific methods.</p>\n\n<pre>void setPageAnnotation(\n  in long long aItemId, \n  in AUTF8String aName,\n  in AString aValue, \n  in long aFlags,\n  in unsigned short aExpiration\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aItemID</code></dt>\n <dd>The item on which the annotation is to be set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n <dt><code>aValue</code></dt>\n <dd>The annotation value.</dd>\n <dt><code>aFlags</code></dt>\n <dd>Should be <code>\"0\"</code> for now, some flags will be defined in the future.</dd>\n <dt><code>aExpiration</code></dt>\n <dd>One of the <code>EXPIRE_*</code> constant value defined above.</dd>\n</dl>\n\n<div class=\"blockIndicator warning\">\n<p><strong>Note:</strong> <strong>ALL ITEM ANNOTATIONS WILL GET DELETED WHEN THE BOOKMARK IS REMOVED.</strong></p>\n</div>\n\n<h3 id=\"setPageAnnotationInt32()\" name=\"setPageAnnotationInt32()\">setPageAnnotationInt32()</h3>\n\n<p>This method sets an annotation for given URI, just like <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#setPageAnnotationString()\">setPageAnnotationString()</a></code>, but takes an <code>Int32</code> as an input.</p>\n\n<pre>void setPageAnnotationInt32(\n  in nsIURI aURI, \n  in AUTF8String aName,\n  in long aValue, \n  in long aFlags,\n  in unsigned short aExpiration\n);\n</pre>\n\n<h6 id=\"Parameters_5\" name=\"Parameters_5\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The URI on which the annotation is to be set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n <dt><code>aValue</code></dt>\n <dd>The annotation value.</dd>\n <dt><code>aFlags</code></dt>\n <dd>Should be <code>\"0\"</code> for now, some flags will be defined in the future.</dd>\n <dt><code>aExpiration</code></dt>\n <dd>One of the <code>EXPIRE_*</code> constant value defined above.</dd>\n</dl>\n\n<h3 id=\"setItemAnnotationInt32()\" name=\"setItemAnnotationInt32()\">setItemAnnotationInt32()</h3>\n\n<p>This method sets an annotation for given item, just like <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#setItemAnnotationString()\">setItemAnnotationString()</a></code>, but takes an <code>Int32</code> as an input.</p>\n\n<pre>void setItemAnnotationInt32(\n  in long long aItemId, \n  in AUTF8String aName,\n  in long aValue, \n  in long aFlags,\n  in unsigned short aExpiration\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aItemId</code></dt>\n <dd>The item on which the annotation is to be set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n <dt><code>aValue</code></dt>\n <dd>The annotation value.</dd>\n <dt><code>aFlags</code></dt>\n <dd>Should be <code>\"0\"</code> for now, some flags will be defined in the future.</dd>\n <dt><code>aExpiration</code></dt>\n <dd>One of the <code>EXPIRE_*</code> constant value defined above.</dd>\n</dl>\n\n<h3 id=\"setPageAnnotationInt64()\" name=\"setPageAnnotationInt64()\">setPageAnnotationInt64()</h3>\n\n<p>This method sets an annotation for given URI, just like <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#setPageAnnotationString()\">setPageAnnotationString()</a></code>, but takes an <code>Int64</code> as an input.</p>\n\n<pre>void setPageAnnotationInt64(\n  in nsIURI aURI, \n  in AUTF8String aName,\n  in long long aValue, \n  in long aFlags,\n  in unsigned short aExpiration\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The URI on which the annotation is to be set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n <dt><code>aValue</code></dt>\n <dd>The annotation value.</dd>\n <dt><code>aFlags</code></dt>\n <dd>Should be <code>\"0\"</code> for now, some flags will be defined in the future.</dd>\n <dt><code>aExpiration</code></dt>\n <dd>One of the <code>EXPIRE_*</code> constant value defined above.</dd>\n</dl>\n\n<h3 id=\"setItemAnnotationInt64()\" name=\"setItemAnnotationInt64()\">setItemAnnotationInt64()</h3>\n\n<p>This method sets an annotation for given item, just like <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#setItemAnnotationString()\">setItemAnnotationString()</a></code>, but takes an <code>Int64</code> as an input.</p>\n\n<pre>void setItemAnnotationInt64(\n  in long long aItemId, \n  in AUTF8String aName,\n  in long long aValue, \n  in long aFlags,\n  in unsigned short aExpiration\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aItemId</code></dt>\n <dd>The item on which the annotation is to be set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n <dt><code>aValue</code></dt>\n <dd>The annotation value.</dd>\n <dt><code>aFlags</code></dt>\n <dd>Should be <code>\"0\"</code> for now, some flags will be defined in the future.</dd>\n <dt><code>aExpiration</code></dt>\n <dd>One of the <code>EXPIRE_*</code> constant value defined above.</dd>\n</dl>\n\n<h3 id=\"setPageAnnotationDouble()\" name=\"setPageAnnotationDouble()\">setPageAnnotationDouble()</h3>\n\n<p>This method sets an annotation for given URI, just like <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#setPageAnnotationString()\">setPageAnnotationString()</a></code>, but takes an <code>Double</code> as an input.</p>\n\n<pre> void setPageAnnotationDouble(\n   in nsIURI aURI, \n   in AUTF8String aName,\n   in double aValue, \n   in long aFlags,\n   in unsigned short aExpiration\n );\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The URI on which the annotation is to be set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n <dt><code>aValue</code></dt>\n <dd>The annotation value.</dd>\n <dt><code>aFlags</code></dt>\n <dd>Should be <code>\"0\"</code> for now, some flags will be defined in the future.</dd>\n <dt><code>aExpiration</code></dt>\n <dd>One of the <code>EXPIRE_*</code> constant value defined above.</dd>\n</dl>\n\n<h3 id=\"setItemAnnotationDouble()\" name=\"setItemAnnotationDouble()\">setItemAnnotationDouble()</h3>\n\n<p>This method sets an annotation for given item, just like <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#setItemAnnotationString()\">setItemAnnotationString()</a></code>, but takes an <code>Double</code> as an input.</p>\n\n<pre>void setItemAnnotationDouble(\n  in long long aItemId, \n  in AUTF8String aName,\n  in double aValue, \n  in long aFlags,\n  in unsigned short aExpiration\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aItemId</code></dt>\n <dd>The item on which the annotation is to be set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n <dt><code>aValue</code></dt>\n <dd>The annotation value.</dd>\n <dt><code>aFlags</code></dt>\n <dd>Should be <code>\"0\"</code> for now, some flags will be defined in the future.</dd>\n <dt><code>aExpiration</code></dt>\n <dd>One of the <code>EXPIRE_*</code> constant value defined above.</dd>\n</dl>\n\n<h3 id=\"setPageAnnotationBinary()\" name=\"setPageAnnotationBinary()\">setPageAnnotationBinary()</h3>\n\n<p>This method sets an annotation for given URI, just like <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#setPageAnnotationString()\">setPageAnnotationString()</a></code>, but takes <code>Binary</code> data as an input. You MUST supply a valid <code>MIME</code> type.</p>\n\n<pre>void setPageAnnotationBinary(\n  in nsIURI aURI, \n  in AUTF8String aName,\n  [const,array,size_is(aDataLen)] in octet aData, \n  in unsigned long aDataLen,\n  in AUTF8String aMimeType,\n  in long aFlags,\n  in unsigned short aExpiration\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The URI on which the annotation is to be set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n <dt><code>aData</code></dt>\n <dd>Binary contents of the page to save.</dd>\n <dt><code>aDataLen</code></dt>\n <dd>Length of binary data.</dd>\n <dt><code>aMimeType</code></dt>\n <dd><code>MIME</code> type of the data to store. MUST be supplied.</dd>\n <dt><code>aFlags</code></dt>\n <dd>Should be <code>\"0\"</code> for now, some flags will be defined in the future.</dd>\n <dt><code>aExpiration</code></dt>\n <dd>One of the <code>EXPIRE_*</code> constant value defined above.</dd>\n</dl>\n\n<h3 id=\"setItemAnnotationBinary()\" name=\"setItemAnnotationBinary()\">setItemAnnotationBinary()</h3>\n\n<p>This method sets an annotation for given item, just like <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#setItemAnnotationString()\">setItemAnnotationString()</a></code>, but takes <code>Binary</code> data as an input. You MUST supply a valid <code>MIME</code> type.</p>\n\n<pre>void setItemAnnotationBinary(\n  in long long aItemId, \n  in AUTF8String aName,\n  [const,array,size_is(aDataLen)] in octet aData, \n  in unsigned long aDataLen,\n  in AUTF8String aMimeType,\n  in long aFlags,\n  in unsigned short aExpiration\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aItemId</code></dt>\n <dd>The item on which the annotation is to be set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n <dt><code>aData</code></dt>\n <dd>Binary contents of the item to save.</dd>\n <dt><code>aDataLen</code></dt>\n <dd>Length of binary data.</dd>\n <dt><code>aMimeType</code></dt>\n <dd><code>MIME</code> type of the data to store. MUST be supplied.</dd>\n <dt><code>aFlags</code></dt>\n <dd>Should be <code>\"0\"</code> for now, some flags will be defined in the future.</dd>\n <dt><code>aExpiration</code></dt>\n <dd>One of the <code>EXPIRE_*</code> constant value defined above.</dd>\n</dl>\n\n<h3 id=\"getPageAnnotation()\" name=\"getPageAnnotation()\">getPageAnnotation()</h3>\n\n<p>This method retrieves the value of a given URI annotation. Throws an error if the annotation does not exist. Throws for binary annotations, for which <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getPageAnnotationBinary()\">getPageAnnotationBinary()</a></code> or <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getItemAnnotationBinary()\">getItemAnnotationBinary()</a></code> should be used. C++ consumers may use the type-specific methods. The type-specific methods throw if the given annotation is set in a different type.</p>\n\n<pre>nsIVariant getPageAnnotation(\n  in nsIURI aURI, \n  in AUTF8String aName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The URI on which the annotation is set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns a page annotation.</p>\n\n<h3 id=\"getItemAnnotation()\" name=\"getItemAnnotation()\">getItemAnnotation()</h3>\n\n<p>This method retrieves the value of a given item annotation. Throws an error if the annotation does not exist. Throws for binary annotations, for which <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getPageAnnotationBinary()\">getPageAnnotationBinary()</a></code> or <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getItemAnnotationBinary()\">getItemAnnotationBinary()</a></code> should be used. C++ consumers may use the type-specific methods. The type-specific methods throw if the given annotation is set in a different type.</p>\n\n<pre>nsIVariant getItemAnnotation(\n  in long long aItemId, \n  in AUTF8String aName\n);\n</pre>\n\n<h6 id=\"Parameters_14\" name=\"Parameters_14\">Parameters</h6>\n\n<dl>\n <dt><code>aItemId</code></dt>\n <dd>The item on which the annotation is set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns an item annotation.</p>\n\n<h3 id=\"getPageAnnotationString()\" name=\"getPageAnnotationString()\">getPageAnnotationString()</h3>\n\n<p>This method retrieves the value of a given URI annotation in <code>String</code> format. Throws an error if the annotation does not exist. Throws for binary annotations, for which <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getPageAnnotationBinary()\">getPageAnnotationBinary()</a></code> or <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getItemAnnotationBinary()\">getItemAnnotationBinary()</a></code> should be used. C++ consumers may use the type-specific methods. The type-specific methods throw if the given annotation is set in a different type.</p>\n\n<pre>AString getPageAnnotationString(\n  in nsIURI aURI, \n  in AUTF8String aName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The URI on which the annotation is set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns a <code>String</code> value page annotation.</p>\n\n<h3 id=\"getItemAnnotationString()\" name=\"getItemAnnotationString()\">getItemAnnotationString()</h3>\n\n<p>This method retrieves the value of a given item annotation in <code>String</code> format. Throws an error if the annotation does not exist. Throws for binary annotations, for which <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getPageAnnotationBinary()\">getPageAnnotationBinary()</a></code> or <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getItemAnnotationBinary()\">getItemAnnotationBinary()</a></code> should be used. C++ consumers may use the type-specific methods. The type-specific methods throw if the given annotation is set in a different type.</p>\n\n<pre>AString getItemAnnotationString(\n  in long long aItemId, \n  in AUTF8String aName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aItemId</code></dt>\n <dd>The item on which the annotation is set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns a <code>String</code> value item annotation.</p>\n\n<h3 id=\"getPageAnnotationInt32()\" name=\"getPageAnnotationInt32()\">getPageAnnotationInt32()</h3>\n\n<p>This method retrieves the value of a given URI annotation in a <code>Int32</code> format. Throws an error if the annotation does not exist. Throws for binary annotations, for which <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getPageAnnotationBinary()\">getPageAnnotationBinary()</a></code> or <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getItemAnnotationBinary()\">getItemAnnotationBinary()</a></code> should be used. C++ consumers may use the type-specific methods. The type-specific methods throw if the given annotation is set in a different type.</p>\n\n<pre>long getPageAnnotationInt32(\n  in nsIURI aURI, \n  in AUTF8String aName\n);\n</pre>\n\n<h6 id=\"Parameters_17\" name=\"Parameters_17\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The URI on which the annotation is set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns an <code>Int32</code> value page annotation.</p>\n\n<h3 id=\"getItemAnnotationInt32()\" name=\"getItemAnnotationInt32()\">getItemAnnotationInt32()</h3>\n\n<p>This method retrieves the value of a given item annotation in a <code>Int32</code> format. Throws an error if the annotation does not exist. Throws for binary annotations, for which <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getPageAnnotationBinary()\">getPageAnnotationBinary()</a></code> or <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getItemAnnotationBinary()\">getItemAnnotationBinary()</a></code> should be used. C++ consumers may use the type-specific methods. The type-specific methods throw if the given annotation is set in a different type.</p>\n\n<pre>long getItemAnnotationInt32(\n  in long long aItemId, \n  in AUTF8String aName\n);\n</pre>\n\n<h6 id=\"Parameters_18\" name=\"Parameters_18\">Parameters</h6>\n\n<dl>\n <dt><code>aItemId</code></dt>\n <dd>The item on which the annotation is set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns an <code>Int32</code> value item annotation.</p>\n\n<h3 id=\"getPageAnnotationInt64()\" name=\"getPageAnnotationInt64()\">getPageAnnotationInt64()</h3>\n\n<p>This method retrieves the value of a given URI annotation in a <code>Int64</code> format. Throws an error if the annotation does not exist. Throws for binary annotations, for which <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getPageAnnotationBinary()\">getPageAnnotationBinary()</a></code> or <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getItemAnnotationBinary()\">getItemAnnotationBinary()</a></code> should be used. C++ consumers may use the type-specific methods. The type-specific methods throw if the given annotation is set in a different type.</p>\n\n<pre>long long getPageAnnotationInt64(\n  in nsIURI aURI, \n  in AUTF8String aName\n);\n</pre>\n\n<h6 id=\"Parameters_19\" name=\"Parameters_19\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The URI on which the annotation is set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns an <code>Int64</code> value page annotation.</p>\n\n<h3 id=\"getItemAnnotationInt64()\" name=\"getItemAnnotationInt64()\">getItemAnnotationInt64()</h3>\n\n<p>This method retrieves the value of a given item annotation in a <code>Int64</code> format. Throws an error if the annotation does not exist. Throws for binary annotations, for which <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getPageAnnotationBinary()\">getPageAnnotationBinary()</a></code> or <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getItemAnnotationBinary()\">getItemAnnotationBinary()</a></code> should be used. C++ consumers may use the type-specific methods. The type-specific methods throw if the given annotation is set in a different type.</p>\n\n<pre>long long getItemAnnotationInt64(\n  in long long aItemId, \n  in AUTF8String aName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aItemId</code></dt>\n <dd>The item on which the annotation is set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns an <code>Int64</code> value item annotation.</p>\n\n<h3 id=\"getPageAnnotationDouble()\" name=\"getPageAnnotationDouble()\">getPageAnnotationDouble()</h3>\n\n<p>This method retrieves the value of a given URI annotation in <code>Double</code> format. Throws an error if the annotation does not exist. Throws for binary annotations, for which <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getPageAnnotationBinary()\">getPageAnnotationBinary()</a></code> or <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getItemAnnotationBinary()\">getItemAnnotationBinary()</a></code> should be used. C++ consumers may use the type-specific methods. The type-specific methods throw if the given annotation is set in a different type.</p>\n\n<pre>double getPageAnnotationDouble(\n  in nsIURI aURI, \n  in AUTF8String aName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The URI on which the annotation is set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns a <code>Double</code> value page annotation.</p>\n\n<h3 id=\"getItemAnnotationDouble()\" name=\"getItemAnnotationDouble()\">getItemAnnotationDouble()</h3>\n\n<p>This method retrieves the value of a given item annotation in <code>Double</code> format. Throws an error if the annotation does not exist. Throws for binary annotations, for which <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getPageAnnotationBinary()\">getPageAnnotationBinary()</a></code> or <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getItemAnnotationBinary()\">getItemAnnotationBinary()</a></code> should be used. C++ consumers may use the type-specific methods. The type-specific methods throw if the given annotation is set in a different type.</p>\n\n<pre>double getItemAnnotationDouble(\n  in long long aItemId, \n  in AUTF8String aName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aItemId</code></dt>\n <dd>The item on which the annotation is set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns a <code>Double</code> value item annotation.</p>\n\n<h3 id=\"getPageAnnotationBinary()\" name=\"getPageAnnotationBinary()\">getPageAnnotationBinary()</h3>\n\n<p>This method retrieves the value of a given URI annotation in a <code>Binary</code> format. Throws an error if the annotation does not exist. Throws for binary annotations, for which <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getPageAnnotationBinary()\">getPageAnnotationBinary()</a></code> or <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getItemAnnotationBinary()\">getItemAnnotationBinary()</a></code> should be used. C++ consumers may use the type-specific methods. The type-specific methods throw if the given annotation is set in a different type. This also returns the <code>MIME</code> type.</p>\n\n<pre>void getPageAnnotationBinary(\n  in nsIURI aURI, \n  in AUTF8String aName,\n  [array,size_is(aDataLen)] out octet aData,\n  out unsigned long aDataLen,\n  out AUTF8String aMimeType\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The URI on which the annotation is set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n <dt><code>aData</code></dt>\n <dd>Binary contents of the page to retrieve.</dd>\n <dt><code>aDataLen</code></dt>\n <dd>Length of binary data.</dd>\n <dt><code>aMimeType</code></dt>\n <dd><code>MIME</code> type of the data to be retrieved.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns a <code>Binary</code> value and a <code>MIME</code> type page annotation.</p>\n\n<h3 id=\"getItemAnnotationBinary()\" name=\"getItemAnnotationBinary()\">getItemAnnotationBinary()</h3>\n\n<p>This method retrieves the value of a given item annotation in a <code>Binary</code> format. Throws an error if the annotation does not exist. Throws for binary annotations, for which <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getPageAnnotationBinary()\">getPageAnnotationBinary()</a></code> or <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getItemAnnotationBinary()\">getItemAnnotationBinary()</a></code> should be used. C++ consumers may use the type-specific methods. The type-specific methods throw if the given annotation is set in a different type. This also returns the <code>MIME</code> type.</p>\n\n<pre>void getItemAnnotationBinary(\n  in long long aItemId, \n  in AUTF8String aName,\n  [array,size_is(aDataLen)] out octet aData,\n  out unsigned long aDataLen,\n  out AUTF8String aMimeType\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aItemId</code></dt>\n <dd>The item on which the annotation is set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n <dt><code>aData</code></dt>\n <dd>Binary contents of the item to retrieve.</dd>\n <dt><code>aDataLen</code></dt>\n <dd>Length of binary data.</dd>\n <dt><code>aMimeType</code></dt>\n <dd><code>MIME</code> type of the data to be retrieved.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns a <code>Binary</code> value and a <code>MIME</code> type item annotation.</p>\n\n<h3 id=\"getPageAnnotationInfo()\" name=\"getPageAnnotationInfo()\">getPageAnnotationInfo()</h3>\n\n<p>This method retrieves info about an existing annotation for the given URI.</p>\n\n<pre>void getPageAnnotationInfo(\n  in nsIURI aURI,\n  in AUTF8String aName,\n  out PRInt32 aFlags,\n  out unsigned short aExpiration,\n  out AUTF8String aMimeType,\n  out unsigned short aType\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The URI on which the annotation is set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n <dt><code>aFlags</code></dt>\n <dd>Should be <code>\"0\"</code> for now, some flags will be defined in the future.</dd>\n <dt><code>aExpiration</code></dt>\n <dd>One of the <code>EXPIRE_*</code> constant value defined above.</dd>\n <dt><code>aMimeType</code></dt>\n <dd><code>MIME</code> type of the data to be retrieved. Default to <code>\"0\"</code> if value was not binary data.</dd>\n <dt><code>aType</code></dt>\n <dd>One of <code>TYPE_*</code> constansts defined above.</dd>\n</dl>\n\n<h3 id=\"getItemAnnotationInfo()\" name=\"getItemAnnotationInfo()\">getItemAnnotationInfo()</h3>\n\n<p>This method retrieves info about an existing annotation for the given item.</p>\n\n<pre>void getItemAnnotationInfo(\n  in long long aItemId,\n  in AUTF8String aName,\n  out long aFlags,\n  out unsigned short aExpiration,\n  out AUTF8String aMimeType,\n  out unsigned short aType\n);\n</pre>\n\n<h6 id=\"Parameters_26\" name=\"Parameters_26\">Parameters</h6>\n\n<dl>\n <dt><code>aItemId</code></dt>\n <dd>The item on which the annotation is set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n <dt><code>aFlags</code></dt>\n <dd>Should be <code>\"0\"</code> for now, some flags will be defined in the future.</dd>\n <dt><code>aExpiration</code></dt>\n <dd>One of the <code>EXPIRE_*</code> constant value defined above.</dd>\n <dt><code>aMimeType</code></dt>\n <dd><code>MIME</code> type of the data to be retrieved. Default to <code>\"0\"</code> if value was not binary data.</dd>\n <dt><code>aType</code></dt>\n <dd>One of <code>TYPE_*</code> constansts defined above.</dd>\n</dl>\n\n<h3 id=\"getPageAnnotationType()\" name=\"getPageAnnotationType()\">getPageAnnotationType()</h3>\n\n<p>This method retrieves the type of an existing annotation. Use <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getAnnotationInfo()\">getAnnotationInfo()</a></code> method, if you need this along with the mime-type etc. It throwns an exception if the annotation is not set.</p>\n\n<pre>PRUint16 getPageAnnotationType(\n  in nsIURI aURI, \n  in AUTF8String aName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The URI on which the annotation is set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns one of the <code>TYPE_*</code> constants defined above.</p>\n\n<h3 id=\"getItemAnnotationType()\" name=\"getItemAnnotationType()\">getItemAnnotationType()</h3>\n\n<p>This method retrieves the type of an existing annotation. Use <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#getAnnotationInfo()\">getAnnotationInfo()</a></code> method, if you need this along with the mime-type etc. It throwns an exception if the annotation is not set.</p>\n\n<pre>PRUint16 getPageAnnotationType(\n  in long long aItemId, \n  in AUTF8String aName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The item on which the annotation is set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns one of the <code>TYPE_*</code> constants defined above.</p>\n\n<h3 id=\"getPagesWithAnnotation()\" name=\"getPagesWithAnnotation()\">getPagesWithAnnotation()</h3>\n\n<p>This method returns a list of all URIs having a given annotation.</p>\n\n<pre>void getPagesWithAnnotation(\n  in AUTF8String name,\n  [optional] out unsigned long resultCount,\n  [retval, array, size_is(resultCount)] out nsIURI results\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>name</code></dt>\n <dd>The annotation name.</dd>\n <dt><code>resultCount</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n <dd>Count of URIs.</dd>\n <dt><code>results</code></dt>\n <dd>Returns the list of all URIs.</dd>\n</dl>\n\n<h3 id=\"getItemsWithAnnotation()\" name=\"getItemsWithAnnotation()\">getItemsWithAnnotation()</h3>\n\n<p>This method returns a list of all items having a given annotation.</p>\n\n<pre>void getItemsWithAnnotation(\n  in AUTF8String name,\n  [optional] out unsigned long resultCount,\n  [retval, array, size_is(resultCount)] out long long results\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>name</code></dt>\n <dd>The annotation name.</dd>\n <dt><code>resultCount</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n <dd>Count of items.</dd>\n <dt><code>results</code></dt>\n <dd>Returns the list of all items.</dd>\n</dl>\n\n<h3 id=\"getPageAnnotationNames()\" name=\"getPageAnnotationNames()\">getPageAnnotationNames()</h3>\n\n<p>This method retrieves the names of all annotations for the given URI.</p>\n\n<pre>void getPageAnnotationNames(\n  in nsIURI aURI, \n  [optional] out unsigned long count,\n  [retval, array, size_is(count)] out nsIVariant result\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The URI on which the annotation is set.</dd>\n <dt><code>count</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n <dd>Count of annotation names available.</dd>\n <dt><code>result</code></dt>\n <dd>Returns the name of all annotations.</dd>\n</dl>\n\n<h3 id=\"getItemAnnotationNames()\" name=\"getItemAnnotationNames()\">getItemAnnotationNames()</h3>\n\n<p>This method retrieves the names of all annotations for the given item.</p>\n\n<pre>void getItemAnnotationNames(\n  in long long aItemId, \n  [optional] out unsigned long count,\n  [retval, array, size_is(count)] out nsIVariant result\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aItemId</code></dt>\n <dd>The item on which the annotation is set.</dd>\n <dt><code>count</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n <dd>Count of annotations name available.</dd>\n <dt><code>result</code></dt>\n <dd>Returns the name of all annotations.</dd>\n</dl>\n\n<h3 id=\"pageHasAnnotation()\" name=\"pageHasAnnotation()\">pageHasAnnotation()</h3>\n\n<p>This method tests for annotation existance for given URI.</p>\n\n<pre>boolean pageHasAnnotation(\n  in nsIURI aURI, \n  in AUTF8String aName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The URI on which the annotation is set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns <code>true</code>, if an annotation exists for given URI, otherwise returns <code>false</code>.</p>\n\n<h3 id=\"itemHasAnnotation()\" name=\"itemHasAnnotation()\">itemHasAnnotation()</h3>\n\n<p>This method tests for annotation existance for given item.</p>\n\n<pre>boolean itemHasAnnotation(\n  in long long aItemId, \n  in AUTF8String aName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aItemId</code></dt>\n <dd>The item on which the annotation is set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns <code>true</code>, if an annotation exists for given item, otherwise returns <code>false</code>.</p>\n\n<h3 id=\"removePageAnnotation()\" name=\"removePageAnnotation()\">removePageAnnotation()</h3>\n\n<p>This method removes a specific annotation for given URI. Succeeds even if the annotation is not found.</p>\n\n<pre>void removePageAnnotation(\n  in nsIURI aURI, \n  in AUTF8String aName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The URI on which the annotation is set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n</dl>\n\n<h3 id=\"removeItemAnnotation()\" name=\"removeItemAnnotation()\">removeItemAnnotation()</h3>\n\n<p>This method removes a specific annotation for given item. Succeeds even if the annotation is not found.</p>\n\n<pre>void removeItemAnnotation(\n  in long long aItemId, \n  in AUTF8String aName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aItemId</code></dt>\n <dd>The item on which the annotation is set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n</dl>\n\n<h3 id=\"removePageAnnotations()\" name=\"removePageAnnotations()\">removePageAnnotations()</h3>\n\n<p>This method removes all annotations for the given URI. We may want some other similar functions to get annotations with given flags (once we have flags defined).</p>\n\n<pre>void removePageAnnotations(\n  in nsIURI aURI\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The URI on which the annotation is set.</dd>\n</dl>\n\n<h3 id=\"removeItemAnnotations()\" name=\"removeItemAnnotations()\">removeItemAnnotations()</h3>\n\n<p>This method removes all annotations for the given item. We may want some other similar functions to get annotations with given flags (once we have flags defined).</p>\n\n<pre>void removeItemAnnotations(\n  in long long aItemId\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aItemId</code></dt>\n <dd>The item on which the annotation is set.</dd>\n</dl>\n\n<h3 id=\"copyPageAnnotations()\" name=\"copyPageAnnotations()\">copyPageAnnotations()</h3>\n\n<p>This method copies all annotations from the source to the destination URI. If the destination already has an annotation with the same name as one on the source, it will be overwritten if <code>aOverwriteDest</code> is set. Otherwise, the destination URIs will be preferred.</p>\n\n<p>All the source annotations will stay as-is. If you don't want them any more, use <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#removePageAnnotations()\">removePageAnnotations()</a></code> on that URI.</p>\n\n<pre>void copyPageAnnotations(\n  in nsIURI aSourceURI, \n  in nsIURI aDestURI,\n  in boolean aOverwriteDest\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aSourceItemId</code></dt>\n <dd>Source item.</dd>\n <dt><code>aDestItemId</code></dt>\n <dd>Destination item.</dd>\n <dt><code>aOverwriteDest</code></dt>\n <dd>If you want to overwrite existing annotation, set this parameter to <code>true</code>, or else set it to <code>false</code>.</dd>\n</dl>\n\n<h3 id=\"copyItemAnnotations()\" name=\"copyItemAnnotations()\">copyItemAnnotations()</h3>\n\n<p>This method copies all annotations from the source to the destination item. If the destination already has an annotation with the same name as one on the source, it will be overwritten if <code>aOverwriteDest</code> is set. Otherwise, the destination URIs will be preferred.</p>\n\n<p>All the source annotations will stay as-is. If you don't want them any more, use <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#removePageAnnotations()\">removePageAnnotations()</a></code> on that URI.</p>\n\n<pre>void copyItemAnnotations(\n  in long long aSourceItemId, \n  in long long aDestItemId,\n  in boolean aOverwriteDest\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aSourceItemId</code></dt>\n <dd>Source item.</dd>\n <dt><code>aDestItemId</code></dt>\n <dd>Destination item.</dd>\n <dt><code>aOverwriteDest</code></dt>\n <dd>If you want to overwrite existing annotation, set this parameter to <code>true</code> or else <code>false</code>.</dd>\n</dl>\n\n<h3 id=\"addObserver()\" name=\"addObserver()\">addObserver()</h3>\n\n<p>This method adds an annotation observer. The annotation service will keep an owning reference to the observer object.</p>\n\n<pre>void addObserver(\n  in nsIAnnotationObserver aObserver\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aObserver</code></dt>\n <dd>Annotation observer.</dd>\n</dl>\n\n<h3 id=\"removeObserver()\" name=\"removeObserver()\">removeObserver()</h3>\n\n<p>This method removes an annotaton observer previously registered by <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#addObserver()\">addObserver()</a></code> method.</p>\n\n<pre>void removeObserver(\n  in nsIAnnotationObserver aObserver\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aObserver</code></dt>\n <dd>Annotation observer.</dd>\n</dl>\n\n<h3 id=\"getAnnotationURI()\" name=\"getAnnotationURI()\">getAnnotationURI()</h3>\n\n<p>This method returns a URI that can be used to access the given binary annotation. This method does NOT check that the annotation exists. Also, note that you can only load URIs for annotations that have have a valid <code>MIME</code> type set by <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#setPageAnnotationBinary()\">setPageAnnotationBinary()</a></code> or <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationService#setItemAnnotationBinary()\">setItemAnnotationBinary()</a></code> methods. No non-URI valid chars in name, especially colon, which will mess up parsing.</p>\n\n<pre>nsIURI getAnnotationURI(\n  in nsIURI aURI, \n  in AUTF8String aName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The URI on which the annotation is set.</dd>\n <dt><code>aName</code></dt>\n <dd>The annotation name.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns a URI that can be used to access the given binary annotation.</p>\n\n<h3 id=\"See_also\" name=\"See_also\">See also</h3>\n\n<ul>\n <li><a href=\"/en-US/docs/Places\" title=\"Places\">Places</a></li>\n <li><a href=\"/en-US/docs/Using_the_Places_annotation_service\" title=\"Using_the_Places_annotation_service\">Using the Places annotation service</a></li>\n <li><a href=\"/en-US/docs/Using_the_Places_favicon_service\" title=\"Using_the_Places_favicon_service\">Using the Places favicon service</a></li>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAnnotationObserver\" title=\"\">nsIAnnotationObserver</a></code></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/ExE-Boss\">ExE-Boss</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/ethertank\">ethertank</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/liuche\">liuche</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mak77\">Mak77</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/sdwilsh\">sdwilsh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/WPWoodJr\">WPWoodJr</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Arehman4\">Arehman4</a>",
    "title": "nsIAnnotationService"
}