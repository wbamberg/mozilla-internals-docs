{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/dom/interfaces/base/nsIContentPrefService2.idl\" rel=\"custom\">dom/interfaces/base/nsIContentPrefService2.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nAsynchronous API for Content Preferences\n</span>\n\n  <div style=\"height: 42px; position: relative; padding: 2px; width: auto;\">\n\n  <div style=\"top: 22px; font-size: 11px; position: absolute;\">1.0</div>\n  \n  <div style=\"top: 22px; font-size: 11px; position: absolute; left: 0px; text-align: right; float: right; width: 100%;\">66</div>\n  \n  <div style=\"height: 8px; top: 16px; background: #dd0000; left: 0px; position: absolute; width: 34.285714285714285%;\"></div>\n  \n<div style=\"height: 8px; top: 16px; left: 34.285714285714285%; background: #00dd00; position: absolute; width: 65.71428571428572%;\" title=\"Introduced in Gecko 20.0 (Firefox 20.0 / Thunderbird 20.0 / SeaMonkey 2.17)\"></div>\n\n<div style=\"top: 0px; font-size: 11px; position: absolute; left: 34.285714285714285%;\">Introduced</div>\n<div style=\"top: 22px; font-size: 11px; position: absolute; left: 34.285714285714285%;\">Gecko 20.0</div>\n\n</div>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 20.0 (Firefox 20.0 / Thunderbird 20.0 / SeaMonkey 2.17)</span></div>\n</div><p></p>\n<h2 id=\"Description\">Description</h2>\n<p>Content preferences allow the application to associate arbitrary data, or \"preferences\", with specific domains, or web \"content\". Specifically, a content preference is a structure with three values: a domain with which the preference is associated, a name that identifies the preference within its domain, and a value. (See <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIContentPref\" title=\"\">nsIContentPref</a></code> below.)</p>\n<p>For example, if you want to remember the user's preference for a certain zoom level on www.mozilla.org pages, you might store a preference whose domain is \"www.mozilla.org\", whose name is \"zoomLevel\", and whose value is the numeric zoom level.</p>\n<p>A preference need not have a domain, and in that case the preference is called a \"global\" preference. This interface doesn't impart any special significance to global preferences; they're simply name-value pairs that aren't associated with any particular domain. As a consumer of this interface, you might choose to let a global preference override all non- global preferences of the same name, for example, for whatever definition of \"override\" is appropriate for your use case.</p>\n<h3 id=\"Domain_Parameters\">Domain Parameters</h3>\n<p>Many methods of this interface accept a \"domain\" parameter. Domains may be specified either exactly, like \"example.com\", or as full URLs, like \"http://example.com/foo/bar\". In the latter case the API extracts the full domain from the URL, so if you specify \"http://foo.bar.example.com/baz\", the domain is taken to be \"foo.bar.example.com\", not \"example.com\".</p>\n<h3 id=\"Private-Browsing_Context_Parameters\">Private-Browsing Context Parameters</h3>\n<p>Many methods also accept a \"context\" parameter. This parameter relates to private browsing and determines the kind of storage that a method uses, either the usual permanent storage or temporary storage <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIContentPrefService2#set()\">set()</a></code> aside for private browsing sessions.</p>\n<p>Pass <code>null</code> to unconditionally use permanent storage. Pass an <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsILoadContext\" title=\"\">nsILoadContext</a></code> to use storage appropriate to the context's usePrivateBrowsing attribute: if usePrivateBrowsing is <code>true</code>, temporary private-browsing storage is used, and otherwise permanent storage is used. A context can be obtained from the window or channel whose content pertains to the preferences being modified or retrieved.</p>\n<h3 id=\"Callbacks\">Callbacks</h3>\n<p>The methods of callback objects are always called asynchronously. See <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIContentPrefCallback2\" title=\"\">nsIContentPrefCallback2</a></code> for more information about callbacks.</p>\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n<table class=\"standard-table\">\n  <tbody>\n    <tr>\n      <td><code>void <a href=\"#addObserverForName()\">addObserverForName</a>(in AString name, in nsIContentPrefObserver observer);</code></td>\n    </tr>\n    <tr>\n      <td><code>void <a href=\"#getByDomainAndName()\">getByDomainAndName</a>(in AString domain, in AString name, in nsILoadContext context, in nsIContentPrefCallback2 callback);</code></td>\n    </tr>\n    <tr>\n      <td><code>void <a href=\"#getBySubdomainAndName()\">getBySubdomainAndName</a>(in AString domain, in AString name, in nsILoadContext context, in nsIContentPrefCallback2 callback);</code></td>\n    </tr>\n    <tr>\n      <td><code>nsIContentPref <a href=\"#getCachedByDomainAndName()\">getCachedByDomainAndName</a>(in AString domain, in AString name, in nsILoadContext context);</code></td>\n    </tr>\n    <tr>\n      <td><code>void <a href=\"#getCachedBySubdomainAndName()\">getCachedBySubdomainAndName</a>(in AString domain, in AString name, in nsILoadContext context, out unsigned long len, [retval,array,size_is(len)] out nsIContentPref prefs);</code></td>\n    </tr>\n    <tr>\n      <td><code>nsIContentPref <a href=\"#getCachedGlobal()\">getCachedGlobal</a>(in AString name, in nsILoadContext context);</code></td>\n    </tr>\n    <tr>\n      <td><code>void <a href=\"#getGlobal()\">getGlobal</a>(in AString name, in nsILoadContext context, in nsIContentPrefCallback2 callback);</code></td>\n    </tr>\n    <tr>\n      <td><code>void <a href=\"#removeAllDomains()\">removeAllDomains</a>(in nsILoadContext context, [optional] in nsIContentPrefCallback2 callback);</code></td>\n    </tr>\n    <tr>\n      <td><code>void <a href=\"#removeAllGlobals()\">removeAllGlobals</a>(in nsILoadContext context, [optional] in nsIContentPrefCallback2 callback);</code></td>\n    </tr>\n    <tr>\n      <td><code>void <a href=\"#removeByDomain()\">removeByDomain</a>(in AString domain, in nsILoadContext context, [optional] in nsIContentPrefCallback2 callback);</code></td>\n    </tr>\n    <tr>\n      <td><code>void <a href=\"#removeByDomainAndName()\">removeByDomainAndName</a>(in AString domain, in AString name, in nsILoadContext context, [optional] in nsIContentPrefCallback2 callback);</code></td>\n    </tr>\n    <tr>\n      <td><code>void <a href=\"#removeByName()\">removeByName</a>(in AString name, in nsILoadContext context, [optional] in nsIContentPrefCallback2 callback);</code></td>\n    </tr>\n    <tr>\n      <td><code>void <a href=\"#removeBySubdomain()\">removeBySubdomain</a>(in AString domain, in nsILoadContext context, [optional] in nsIContentPrefCallback2 callback);</code></td>\n    </tr>\n    <tr>\n      <td><code>void <a href=\"#removeBySubdomainAndName()\">removeBySubdomainAndName</a>(in AString domain, in AString name, in nsILoadContext context, [optional] in nsIContentPrefCallback2 callback);</code></td>\n    </tr>\n    <tr>\n      <td><code>void <a href=\"#removeGlobal()\">removeGlobal</a>(in AString name, in nsILoadContext context, [optional] in nsIContentPrefCallback2 callback);</code></td>\n    </tr>\n    <tr>\n      <td><code>void <a href=\"#removeObserverForName()\">removeObserverForName</a>(in AString name, in nsIContentPrefObserver observer);</code></td>\n    </tr>\n    <tr>\n      <td><code>void <a href=\"#set()\">set</a>(in AString domain, in AString name, in nsIVariant value, in nsILoadContext context, [optional] in nsIContentPrefCallback2 callback);</code></td>\n    </tr>\n    <tr>\n      <td><code>void <a href=\"#setGlobal()\">setGlobal</a>(in AString name, in nsIVariant value, in nsILoadContext context, [optional] in nsIContentPrefCallback2 callback);</code></td>\n    </tr>\n  </tbody>\n</table>\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n<h3 id=\"addObserverForName()\" name=\"addObserverForName()\">addObserverForName()</h3>\n<p>Registers an observer that will be notified whenever a preference with the given name is <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIContentPrefService2#set()\">set()</a></code> or removed.</p>\n<p>When a <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIContentPrefService2#set()\">set()</a></code> or remove method is called, observers are notified after the <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIContentPrefService2#set()\">set()</a></code> or removal completes but before method's callback is called.</p>\n<p>The service holds a strong reference to the observer, so the observer must be removed later to avoid leaking it.</p>\n<pre class=\"eval\">void addObserverForName(\n  in AString name,\n  in nsIContentPrefObserver observer\n);\n</pre>\n<h4 id=\"Parameters\" name=\"Parameters\">Parameters</h4>\n<dl>\n  <dt>\n    <code>name</code></dt>\n  <dd>\n    The name of the preferences to observe. Pass <code>null</code> to observe all preference changes regardless of name.</dd>\n  <dt>\n    <code>observer</code></dt>\n  <dd>\n    The observer.</dd>\n</dl>\n<h3 id=\"getByDomainAndName()\" name=\"getByDomainAndName()\">getByDomainAndName()</h3>\n<p>Gets the preference with the given domain and name.</p>\n<pre class=\"eval\">void getByDomainAndName(\n  in AString domain,\n  in AString name,\n  in nsILoadContext context,\n  in nsIContentPrefCallback2 callback\n);\n</pre>\n<h4 id=\"Parameters\" name=\"Parameters\">Parameters</h4>\n<dl>\n  <dt>\n    <code>domain</code></dt>\n  <dd>\n    The preference's domain.</dd>\n  <dt>\n    <code>name</code></dt>\n  <dd>\n    The preference's name.</dd>\n  <dt>\n    <code>context</code></dt>\n  <dd>\n    The private-browsing context, if any.</dd>\n  <dt>\n    <code>callback</code></dt>\n  <dd>\n    HandleResult is called once unless no such preference exists, in which case handleResult is not called at all.</dd>\n</dl>\n<h3 id=\"getBySubdomainAndName()\" name=\"getBySubdomainAndName()\">getBySubdomainAndName()</h3>\n<p>Gets all preferences with the given name whose domains are either the same as or subdomains of the given domain.</p>\n<pre class=\"eval\">void getBySubdomainAndName(\n  in AString domain,\n  in AString name,\n  in nsILoadContext context,\n  in nsIContentPrefCallback2 callback\n);\n</pre>\n<h4 id=\"Parameters\" name=\"Parameters\">Parameters</h4>\n<dl>\n  <dt>\n    <code>domain</code></dt>\n  <dd>\n    The preferences' domain.</dd>\n  <dt>\n    <code>name</code></dt>\n  <dd>\n    The preferences' name.</dd>\n  <dt>\n    <code>context</code></dt>\n  <dd>\n    The private-browsing context, if any.</dd>\n  <dt>\n    <code>callback</code></dt>\n  <dd>\n    HandleResult is called once for each preference. If no such preferences exist, handleResult is not called at all.</dd>\n</dl>\n<h3 id=\"getCachedByDomainAndName()\" name=\"getCachedByDomainAndName()\">getCachedByDomainAndName()</h3>\n<p>Synchronously retrieves from the in-memory cache the preference with the given domain and name.</p>\n<p>In addition to caching preference values, the cache also keeps track of preferences that are known not to exist. If the preference is known not to exist, the value attribute of the returned object will be undefined (<code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIDataType#VTYPE_VOID()\">nsIDataType.VTYPE_VOID()</a></code>).</p>\n<p>If the preference is neither cached nor known not to exist, then <code>null</code> is returned, and get() must be called to determine whether the preference exists.</p>\n<pre class=\"eval\">nsIContentPref getCachedByDomainAndName(\n  in AString domain,\n  in AString name,\n  in nsILoadContext context\n);\n</pre>\n<h4 id=\"Parameters\" name=\"Parameters\">Parameters</h4>\n<dl>\n  <dt>\n    <code>domain</code></dt>\n  <dd>\n    The preference's domain.</dd>\n  <dt>\n    <code>name</code></dt>\n  <dd>\n    The preference's name.</dd>\n  <dt>\n    <code>context</code></dt>\n  <dd>\n    The private-browsing context, if any.</dd>\n</dl>\n<h4 id=\"Return_value\" name=\"Return_value\">Return value</h4>\n<p>The preference, or <code>null</code> if no such preference is known to exist.</p>\n<h3 id=\"getCachedBySubdomainAndName()\" name=\"getCachedBySubdomainAndName()\">getCachedBySubdomainAndName()</h3>\n<p>Synchronously retrieves from the in-memory cache all preferences with the given name whose domains are either the same as or subdomains of the given domain.</p>\n<p>The preferences are returned in an array through the out-parameter. If a preference for a particular subdomain is known not to exist, then an object corresponding to that preference will be present in the array, and, as with <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIContentPrefService2#getCachedByDomainAndName()\">getCachedByDomainAndName()</a></code>, its value attribute will be undefined.</p>\n<pre class=\"eval\">void getCachedBySubdomainAndName(\n  in AString domain,\n  in AString name,\n  in nsILoadContext context,\n  out unsigned long len,\n  [retval,array,size_is(len)] out nsIContentPref prefs\n);\n</pre>\n<h4 id=\"Parameters\" name=\"Parameters\">Parameters</h4>\n<dl>\n  <dt>\n    <code>domain</code></dt>\n  <dd>\n    The preferences' domain.</dd>\n  <dt>\n    <code>name</code></dt>\n  <dd>\n    The preferences' name.</dd>\n  <dt>\n    <code>context</code></dt>\n  <dd>\n    The private-browsing context, if any.</dd>\n  <dt>\n    <code>len</code></dt>\n  <dd>\n    The length of the returned array.</dd>\n  <dt>\n    <code>prefs</code></dt>\n  <dd>\n    The array of preferences.</dd>\n</dl>\n<h3 id=\"getCachedGlobal()\" name=\"getCachedGlobal()\">getCachedGlobal()</h3>\n<p>Synchronously retrieves from the in-memory cache the preference with no domain and the given name.</p>\n<p>As with <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIContentPrefService2#getCachedByDomainAndName()\">getCachedByDomainAndName()</a></code>, if the preference is cached then it is returned; if the preference is known not to exist, then the value attribute of the returned object will be undefined; if the preference is neither cached nor known not to exist, then <code>null</code> is returned.</p>\n<pre class=\"eval\">nsIContentPref getCachedGlobal(\n  in AString name,\n  in nsILoadContext context\n);\n</pre>\n<h4 id=\"Parameters\" name=\"Parameters\">Parameters</h4>\n<dl>\n  <dt>\n    <code>name</code></dt>\n  <dd>\n    The preference's name.</dd>\n  <dt>\n    <code>context</code></dt>\n  <dd>\n    The private-browsing context, if any.</dd>\n</dl>\n<h4 id=\"Return_value\" name=\"Return_value\">Return value</h4>\n<p>The preference, or <code>null</code> if no such preference is known to exist.</p>\n<h3 id=\"getGlobal()\" name=\"getGlobal()\">getGlobal()</h3>\n<p>Gets the preference with no domain and the given name.</p>\n<pre class=\"eval\">void getGlobal(\n  in AString name,\n  in nsILoadContext context,\n  in nsIContentPrefCallback2 callback\n);\n</pre>\n<h4 id=\"Parameters\" name=\"Parameters\">Parameters</h4>\n<dl>\n  <dt>\n    <code>name</code></dt>\n  <dd>\n    The preference's name.</dd>\n  <dt>\n    <code>context</code></dt>\n  <dd>\n    The private-browsing context, if any.</dd>\n  <dt>\n    <code>callback</code></dt>\n  <dd>\n    HandleResult is called once unless no such preference exists, in which case handleResult is not called at all.</dd>\n</dl>\n<h3 id=\"removeAllDomains()\" name=\"removeAllDomains()\">removeAllDomains()</h3>\n<p>Removes all non-global preferences -- in other words, all preferences that have a domain.</p>\n<pre class=\"eval\">void removeAllDomains(\n  in nsILoadContext context,\n  in nsIContentPrefCallback2 callback <span class=\"inlineIndicator optional optionalInline\">Optional</span>\n);\n</pre>\n<h4 id=\"Parameters\" name=\"Parameters\">Parameters</h4>\n<dl>\n  <dt>\n    <code>context</code></dt>\n  <dd>\n    The private-browsing context, if any.</dd>\n  <dt>\n    <code>callback</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n  <dd>\n    HandleCompletion is called when the operation completes.</dd>\n</dl>\n<h3 id=\"removeAllGlobals()\" name=\"removeAllGlobals()\">removeAllGlobals()</h3>\n<p>Removes all global preferences -- in other words, all preferences that have no domain.</p>\n<pre class=\"eval\">void removeAllGlobals(\n  in nsILoadContext context,\n  in nsIContentPrefCallback2 callback <span class=\"inlineIndicator optional optionalInline\">Optional</span>\n);\n</pre>\n<h4 id=\"Parameters\" name=\"Parameters\">Parameters</h4>\n<dl>\n  <dt>\n    <code>context</code></dt>\n  <dd>\n    The private-browsing context, if any.</dd>\n  <dt>\n    <code>callback</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n  <dd>\n    HandleCompletion is called when the operation completes.</dd>\n</dl>\n<h3 id=\"removeByDomain()\" name=\"removeByDomain()\">removeByDomain()</h3>\n<p>Removes all preferences with the given domain.</p>\n<pre class=\"eval\">void removeByDomain(\n  in AString domain,\n  in nsILoadContext context,\n  in nsIContentPrefCallback2 callback <span class=\"inlineIndicator optional optionalInline\">Optional</span>\n);\n</pre>\n<h4 id=\"Parameters\" name=\"Parameters\">Parameters</h4>\n<dl>\n  <dt>\n    <code>domain</code></dt>\n  <dd>\n    The preferences' domain.</dd>\n  <dt>\n    <code>context</code></dt>\n  <dd>\n    The private-browsing context, if any.</dd>\n  <dt>\n    <code>callback</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n  <dd>\n    HandleCompletion is called when the operation completes.</dd>\n</dl>\n<h3 id=\"removeByDomainAndName()\" name=\"removeByDomainAndName()\">removeByDomainAndName()</h3>\n<p>Removes the preference with the given domain and name.</p>\n<pre class=\"eval\">void removeByDomainAndName(\n  in AString domain,\n  in AString name,\n  in nsILoadContext context,\n  in nsIContentPrefCallback2 callback <span class=\"inlineIndicator optional optionalInline\">Optional</span>\n);\n</pre>\n<h4 id=\"Parameters\" name=\"Parameters\">Parameters</h4>\n<dl>\n  <dt>\n    <code>domain</code></dt>\n  <dd>\n    The preference's domain.</dd>\n  <dt>\n    <code>name</code></dt>\n  <dd>\n    The preference's name.</dd>\n  <dt>\n    <code>context</code></dt>\n  <dd>\n    The private-browsing context, if any.</dd>\n  <dt>\n    <code>callback</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n  <dd>\n    HandleCompletion is called when the operation completes.</dd>\n</dl>\n<h3 id=\"removeByName()\" name=\"removeByName()\">removeByName()</h3>\n<p>Removes all preferences with the given name regardless of domain, including global preferences with the given name.</p>\n<pre class=\"eval\">void removeByName(\n  in AString name,\n  in nsILoadContext context,\n  in nsIContentPrefCallback2 callback <span class=\"inlineIndicator optional optionalInline\">Optional</span>\n);\n</pre>\n<h4 id=\"Parameters\" name=\"Parameters\">Parameters</h4>\n<dl>\n  <dt>\n    <code>name</code></dt>\n  <dd>\n    The preferences' name.</dd>\n  <dt>\n    <code>context</code></dt>\n  <dd>\n    The private-browsing context, if any.</dd>\n  <dt>\n    <code>callback</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n  <dd>\n    HandleCompletion is called when the operation completes.</dd>\n</dl>\n<h3 id=\"removeBySubdomain()\" name=\"removeBySubdomain()\">removeBySubdomain()</h3>\n<p>Removes all preferences whose domains are either the same as or subdomains of the given domain.</p>\n<pre class=\"eval\">void removeBySubdomain(\n  in AString domain,\n  in nsILoadContext context,\n  in nsIContentPrefCallback2 callback <span class=\"inlineIndicator optional optionalInline\">Optional</span>\n);\n</pre>\n<h4 id=\"Parameters\" name=\"Parameters\">Parameters</h4>\n<dl>\n  <dt>\n    <code>domain</code></dt>\n  <dd>\n    The preferences' domain.</dd>\n  <dt>\n    <code>context</code></dt>\n  <dd>\n    The private-browsing context, if any.</dd>\n  <dt>\n    <code>callback</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n  <dd>\n    HandleCompletion is called when the operation completes.</dd>\n</dl>\n<h3 id=\"removeBySubdomainAndName()\" name=\"removeBySubdomainAndName()\">removeBySubdomainAndName()</h3>\n<p>Removes all the preferences with the given name whose domains are either the same as or subdomains of the given domain.</p>\n<pre class=\"eval\">void removeBySubdomainAndName(\n  in AString domain,\n  in AString name,\n  in nsILoadContext context,\n  in nsIContentPrefCallback2 callback <span class=\"inlineIndicator optional optionalInline\">Optional</span>\n);\n</pre>\n<h4 id=\"Parameters\" name=\"Parameters\">Parameters</h4>\n<dl>\n  <dt>\n    <code>domain</code></dt>\n  <dd>\n    The preferences' domain.</dd>\n  <dt>\n    <code>name</code></dt>\n  <dd>\n    The preferences' name.</dd>\n  <dt>\n    <code>context</code></dt>\n  <dd>\n    The private-browsing context, if any.</dd>\n  <dt>\n    <code>callback</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n  <dd>\n    HandleCompletion is called when the operation completes.</dd>\n</dl>\n<h3 id=\"removeGlobal()\" name=\"removeGlobal()\">removeGlobal()</h3>\n<p>Removes the preference with no domain and the given name.</p>\n<pre class=\"eval\">void removeGlobal(\n  in AString name,\n  in nsILoadContext context,\n  in nsIContentPrefCallback2 callback <span class=\"inlineIndicator optional optionalInline\">Optional</span>\n);\n</pre>\n<h4 id=\"Parameters\" name=\"Parameters\">Parameters</h4>\n<dl>\n  <dt>\n    <code>name</code></dt>\n  <dd>\n    The preference's name.</dd>\n  <dt>\n    <code>context</code></dt>\n  <dd>\n    The private-browsing context, if any.</dd>\n  <dt>\n    <code>callback</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n  <dd>\n    HandleCompletion is called when the operation completes.</dd>\n</dl>\n<h3 id=\"removeObserverForName()\" name=\"removeObserverForName()\">removeObserverForName()</h3>\n<p>Unregisters an observer for the given name.</p>\n<pre class=\"eval\">void removeObserverForName(\n  in AString name,\n  in nsIContentPrefObserver observer\n);\n</pre>\n<h4 id=\"Parameters\" name=\"Parameters\">Parameters</h4>\n<dl>\n  <dt>\n    <code>name</code></dt>\n  <dd>\n    The name for which the observer was registered. Pass <code>null</code> if the observer was added with a <code>null</code> name.</dd>\n  <dt>\n    <code>observer</code></dt>\n  <dd>\n    The observer.</dd>\n</dl>\n<h3 id=\"set()\" name=\"set()\">set()</h3>\n<p>Sets a preference.</p>\n<pre class=\"eval\">void set(\n  in AString domain,\n  in AString name,\n  in nsIVariant value,\n  in nsILoadContext context,\n  in nsIContentPrefCallback2 callback <span class=\"inlineIndicator optional optionalInline\">Optional</span>\n);\n</pre>\n<h4 id=\"Parameters\" name=\"Parameters\">Parameters</h4>\n<dl>\n  <dt>\n    <code>domain</code></dt>\n  <dd>\n    The preference's domain.</dd>\n  <dt>\n    <code>name</code></dt>\n  <dd>\n    The preference's name.</dd>\n  <dt>\n    <code>value</code></dt>\n  <dd>\n    The preference's value.</dd>\n  <dt>\n    <code>context</code></dt>\n  <dd>\n    The private-browsing context, if any.</dd>\n  <dt>\n    <code>callback</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n  <dd>\n    HandleCompletion is called when the preference has been stored.</dd>\n</dl>\n<h3 id=\"setGlobal()\" name=\"setGlobal()\">setGlobal()</h3>\n<p>Sets a preference with no domain.</p>\n<pre class=\"eval\">void setGlobal(\n  in AString name,\n  in nsIVariant value,\n  in nsILoadContext context,\n  in nsIContentPrefCallback2 callback <span class=\"inlineIndicator optional optionalInline\">Optional</span>\n);\n</pre>\n<h4 id=\"Parameters\" name=\"Parameters\">Parameters</h4>\n<dl>\n  <dt>\n    <code>name</code></dt>\n  <dd>\n    The preference's name.</dd>\n  <dt>\n    <code>value</code></dt>\n  <dd>\n    The preference's value.</dd>\n  <dt>\n    <code>context</code></dt>\n  <dd>\n    The private-browsing context, if any.</dd>\n  <dt>\n    <code>callback</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n  <dd>\n    HandleCompletion is called when the preference has been stored.</dd>\n</dl>\n<h2 id=\"See_also\" name=\"See_also\">See also</h2>\n<ul>\n  <li>Old synchronous API:<code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIContentPrefService\" title=\"\">nsIContentPrefService</a></code></li>\n  <li><a href=\"/en-US/docs/Using_content_preferences\" title=\"/en-US/docs/Using_content_preferences\">Using content preferences</a></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/fscholz\">fscholz</a>",
    "title": "nsIContentPrefService2"
}