{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/netwerk/base/nsIProtocolHandler.idl\" rel=\"custom\">netwerk/base/nsIProtocolHandler.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThis interface is used to implement protocol handlers. If you wish to create a new protocol handler, you need to implement this interface.\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)</span></div>\n</div><p></p>\n\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code>boolean <a href=\"#allowPort()\">allowPort</a>(in long port, in string scheme);</code></td>\n  </tr>\n  <tr>\n   <td><code>nsIChannel <a href=\"#newChannel()\">newChannel</a>(in nsIURI aURI);</code></td>\n  </tr>\n  <tr>\n   <td><code>nsIURI <a href=\"#newURI()\">newURI</a>(in AUTF8String aSpec, in string aOriginCharset, in nsIURI aBaseURI);</code></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Attributes\" name=\"Attributes\">Attributes</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Attribute</td>\n   <td class=\"header\">Type</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>defaultPort</code></td>\n   <td><code><a href=\"/en/long\" title=\"en/long\">long</a></code></td>\n   <td>The default port is the port the protocol uses by default. If the protocol doesn't need a port (for example, the \"about\" protocol), this attribute is -1. <strong>Read only.</strong></td>\n  </tr>\n  <tr>\n   <td><code>protocolFlags</code></td>\n   <td><code><a href=\"/en/unsigned_long\" title=\"en/unsigned long\">unsigned long</a></code></td>\n   <td>Protocol-specific flags. <strong>Read only.</strong>\n    <p></p><div class=\"blockIndicator note\"><strong>Note:</strong>Â Starting with Firefox 3, one of <code>URI_LOADABLE_BY_ANYONE</code>, <code>URI_DANGEROUS_TO_LOAD</code>, <code>URI_IS_UI_RESOURCE</code>, or <code>URI_IS_LOCAL_FILE</code> <strong>must</strong> be set on every protocol handler. Current versions of Firefox assume that the URI has <code>URI_LOADABLE_BY_ANYONE</code> set, but this will not work starting with the Mozilla 2 platform.</div><p></p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>scheme</code></td>\n   <td><code><a href=\"/en/ACString\" title=\"en/ACString\">ACString</a></code></td>\n   <td>The scheme for this protocol (\"file\", \"http\", and so forth). <strong>Read only.</strong></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Constants\" name=\"Constants\">Constants</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Constant</td>\n   <td class=\"header\">Value</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>URI_STD</code></td>\n   <td><code>0</code></td>\n   <td>A standard full URI with authority component and understanding relative URIs; this includes <code>http</code> and <code>ftp</code>, for example.</td>\n  </tr>\n  <tr>\n   <td><code>URI_NORELATIVE</code></td>\n   <td><code>1&lt;&lt;0</code></td>\n   <td>The protocol doesn't support relative URIs (for example, <code>about</code> and <code>javascript</code>).</td>\n  </tr>\n  <tr>\n   <td><code>URI_NOAUTH</code></td>\n   <td><code>1&lt;&lt;1</code></td>\n   <td>The protocol doesn't have an authority component (for example, <code>file</code>).</td>\n  </tr>\n  <tr>\n   <td><code>URI_INHERITS_SECURITY_CONTEXT</code></td>\n   <td><code>1&lt;&lt;4</code></td>\n   <td>URIs for this protocol have no inherent security context, so documents loaded using this protocol should inherit the security context of the document that loads them. </td>\n  </tr>\n  <tr>\n   <td><code>URI_FORBIDS_AUTOMATIC_DOCUMENT_REPLACEMENT</code></td>\n   <td><code>1&lt;&lt;5</code></td>\n   <td>\"Automatic\" loads that would replace the document (such as a meta refresh, certain types of XLinks, and other non-user-triggered loads) are not allowed if the originating URI has this protocol flag. Keep in mind that the decision of what constitutes an automatic load is made externally, by the caller of <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIScriptSecurityManager#CheckLoadURI()\">nsIScriptSecurityManager.CheckLoadURI()</a></code>. Typically, this flag is used by protocols that show highly untrusted content in a viewing area that the user expects to have a lot of control over, such as an email reader. </td>\n  </tr>\n  <tr>\n   <td><code>URI_LOADABLE_BY_ANYONE</code></td>\n   <td><code>1&lt;&lt;6</code></td>\n   <td>Anyone can load the URIs for this protocol; for example, any web site can load a URI for this protocol. Web-safe protocols such as HTTP should use this flag. </td>\n  </tr>\n  <tr>\n   <td><code>URI_DANGEROUS_TO_LOAD</code></td>\n   <td><code>1&lt;&lt;7</code></td>\n   <td>URIs using this protocol are <strong>unsafe</strong> if loaded by untrusted web content and may only be loaded by privileged code (for example, code that has the system principal). Various internal protocols use this flag. </td>\n  </tr>\n  <tr>\n   <td><code>URI_IS_UI_RESOURCE</code></td>\n   <td><code>1&lt;&lt;8</code></td>\n   <td>The URIs for this protocol refer to resources that are part of the application's user interface. There are cases in which such resources may be made accessible to untrusted content such as web pages, so this is less restrictive than <code>URI_DANGEROUS_TO_LOAD</code> but more restrictive than <code>URI_LOADABLE_BY_ANYONE</code>. </td>\n  </tr>\n  <tr>\n   <td><code>URI_IS_LOCAL_FILE</code></td>\n   <td><code>1&lt;&lt;9</code></td>\n   <td>URIs for this protocol from other origins should only be allowed if those origins should have access to the local file system. It's up to the application to decide what origins should have such access. Protocols like <code>file</code> that point to local data should set this flag. </td>\n  </tr>\n  <tr>\n   <td><code>URI_LOADABLE_BY_SUBSUMERS</code></td>\n   <td><code>1&lt;&lt;14</code></td>\n   <td>The URIs for this protocol can be loaded only by callers with a principal that subsumes this uri. For example, privileged code and websites that are same origin as this uri. </td>\n  </tr>\n  <tr>\n   <td><code>URI_NON_PERSISTABLE</code></td>\n   <td><code>1&lt;&lt;10</code></td>\n   <td>Loading channels from this protocol has side-effects that make it unsuitable for saving to a local file. </td>\n  </tr>\n  <tr>\n   <td><code>URI_DOES_NOT_RETURN_DATA</code></td>\n   <td><code>1&lt;&lt;11</code></td>\n   <td>\n    <p>Channels using this protocol never call <code>OnDataAvailable()</code> on the listener passed to <code>AsyncOpen()</code>, and therefore do not return any usable data. </p>\n   </td>\n  </tr>\n  <tr>\n   <td><code>URI_IS_LOCAL_RESOURCE</code></td>\n   <td><code>1&lt;&lt;12</code></td>\n   <td>URIs for this protocol are considered to be local resources. This could be a local file (URI_IS_LOCAL_FILE), a UI resource (URI_IS_UI_RESOURCE), or something else that would not hit the network. </td>\n  </tr>\n  <tr>\n   <td><code>URI_OPENING_EXECUTES_SCRIPT</code></td>\n   <td><code>1&lt;&lt;13</code></td>\n   <td>URIs for this protocol execute script when they are opened. </td>\n  </tr>\n  <tr>\n   <td><code>ALLOWS_PROXY</code></td>\n   <td><code>1&lt;&lt;2</code></td>\n   <td>This protocol handler can be proxied via SOCKS or HTTP (such as IRC, SMTP, and HTTP, for example). If the protocol supports transparent proxying, the handler should implement the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProxiedProtocolHandler\" title=\"\">nsIProxiedProtocolHandler</a></code> interface. If the protocol only supports HTTP proxying, it doesn't need to support <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProxiedProtocolHandler\" title=\"\">nsIProxiedProtocolHandler</a></code>, but should instead set the <code>ALLOWS_PROXY_HTTP</code> flag.</td>\n  </tr>\n  <tr>\n   <td><code>ALLOWS_PROXY_HTTP</code></td>\n   <td><code>1&lt;&lt;3</code></td>\n   <td>The protocol handler can be proxied using an HTTP proxy (for example, HTTP and FTP). <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIIOService#newChannelFromURI()\">nsIIOService.newChannelFromURI()</a></code> will feed URIs from this protocol handler to the HTTP protocol handler instead. This flag is ignored if <code>ALLOWS_PROXY</code> is not set.</td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n\n<h3 id=\"allowPort()\" name=\"allowPort()\">allowPort()</h3>\n\n<p>Lets a protocol override blacklisted ports. This method is called when there's an attempt to connect to a port that is blacklisted. For example, for most protocols, port 25 (Simple Mail Transfer Protocol) is banned. When a URI containing this port number is encountered, this method is called to ask if the protocol handler wants to override the ban.</p>\n\n<pre class=\"eval\">boolean allowPort(\n  in long port,\n  in string scheme\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>port</code></dt>\n <dd>The port for which an override is being requested.</dd>\n <dt><code>scheme</code></dt>\n <dd>The scheme for which an override is being requested.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Return <code>true</code> if the override is approved; otherwise, return <code>false</code>.</p>\n\n<h3 id=\"newChannel()\" name=\"newChannel()\">newChannel()</h3>\n\n<p>Constructs a new channel from the given URI for this protocol handler.</p>\n\n<pre class=\"eval\">nsIChannel newChannel(\n  in nsIURI aURI\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The URI for which to construct a channel.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Return the newly constructed channel.</p>\n\n<h3 id=\"newURI()\" name=\"newURI()\">newURI()</h3>\n\n<p>Makes a URI object that is suitable for loading by this protocol, where the URI string is given as an UTF-8 string. The caller may provide the charset from which the URI string originated, so that the URI string can be translated back to that charset (if necessary) before communicating with, for example, the origin server of the URI string. (Many servers do not support UTF-8 IRIs at the present time, so we must be careful about tracking the native charset of the origin server.)</p>\n\n<pre class=\"eval\">nsIURI newURI(\n  in AUTF8String aSpec,\n  in string aOriginCharset,\n  in nsIURI aBaseURI\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aSpec</code></dt>\n <dd>The URI string in UTF-8 encoding. Depending on the protocol's implementation, Unicode character sequences may or may not be <code>%xx</code> escaped.</dd>\n <dt><code>aOriginCharset</code></dt>\n <dd>The character set of the document from which this URI string originated. This corresponds to the character set that should be used when communicating this URI to an origin server. If this is <code>null</code>, then UTF-8 encoding is assumed and no character transformation is not performed.</dd>\n <dt><code>aBaseURI</code></dt>\n <dd>If <code>null</code>, <code>aSpec</code> must specify an absolute URI. Otherwise, <code>aSpec</code> may be resolved relative to <code>aBaseURI</code>, depending on the protocol. If the protocol has no concept of relative URIs, this parameter is ignored.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>The new URI object suitable for loading using the protocol.</p>\n\n<h2 id=\"See_also\" name=\"See_also\">See also</h2>\n\n<ul>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProxiedProtocolHandler\" title=\"\">nsIProxiedProtocolHandler</a></code></li>\n <li><a class=\"external\" href=\"http://www.nexgenmedia.net/docs/protocol/\">Adding a New Protocol to Mozilla</a></li>\n <li><a href=\"http://mike.kaply.com/2011/01/18/writing-a-firefox-protocol-handler/\" title=\"http://mike.kaply.com/2011/01/18/writing-a-firefox-protocol-handler/\">Writing a Firefox Protocol Handler</a></li>\n <li><a href=\"/en-US/docs/Custom_about%3A_URLs\">Custom about: URLs</a> - Similar to adding new protocol but adding onto the existing <code>about:</code> protocol</li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Noitidart\">Noitidart</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kmike\">kmike</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nmaier\">Nmaier</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/diegocr\">diegocr</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sevenspade\">Sevenspade</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/sdwilsh\">sdwilsh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nickolay\">Nickolay</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Bzbarsky\">Bzbarsky</a>",
    "title": "nsIProtocolHandler"
}