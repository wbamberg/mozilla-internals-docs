{
    "content": "<h2 id=\"Component_nsIPrefBranch\">Component: <em>nsIPrefBranch</em></h2>\n\n<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/modules/libpref/public/nsIPrefBranch.idl\" rel=\"custom\">modules/libpref/public/nsIPrefBranch.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThis interface is used to manipulate the preferences data. This object may be obtained from the preferences service (nsIPrefService) and used to get and set default and/or user preferences across the application.\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 58 (Firefox 58 / Thunderbird 58 / SeaMonkey 2.55)</span></div>\n</div><p></p>\n\n<p>This object is created with a \"root\" value which describes the base point in the preferences \"tree\" from which this \"branch\" stems. Preferences are accessed off of this root by using just the final portion of the preference. For example, if this object is created with the root \"browser.startup.\", the preferences \"browser.startup.page\", \"browser.startup.homepage\", and \"browser.startup.homepage_override\" can be accessed by simply passing \"page\", \"homepage\", or \"homepage_override\" to the various Get/Set methods.</p>\n\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code>void <a href=\"#addObserver()\">addObserver</a>(in string aDomain, in nsIObserver aObserver, in boolean aHoldWeak);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#clearUserPref()\">clearUserPref</a>(in string aPrefName);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#deleteBranch()\">deleteBranch</a>(in string aStartingAt);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#getBoolPref()\">getBoolPref</a>(in string aPrefName, </code><span class=\"inlineIndicator geckoVersionBadge\" title=\"(Firefox 54 / Thunderbird 54 / SeaMonkey 2.51)\"><span class=\"badgeText\">Requires Gecko 54</span></span> <code>[optional] in boolean aDefaultValue);</code></td>\n  </tr>\n  <tr>\n   <td><code>string <a href=\"#getCharPref()\">getCharPref</a>(in string aPrefName,</code><span class=\"inlineIndicator geckoVersionBadge\" title=\"(Firefox 54 / Thunderbird 54 / SeaMonkey 2.51)\"><span class=\"badgeText\">Requires Gecko 54</span></span><code> [optional] in string aDefaultValue);</code></td>\n  </tr>\n  <tr>\n   <td><span class=\"inlineIndicator geckoVersionBadge\" title=\"(Firefox 58 / Thunderbird 58 / SeaMonkey 2.55)\"><span class=\"badgeText\">Requires Gecko 58</span></span> <code>utf8tring <a href=\"#getStringPref()\">getStringPref</a>(in string aPrefName,</code><code> [optional] in utf8string aDefaultValue);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#getChildList()\">getChildList</a>(in string aStartingAt, [optional] out unsigned long aCount, [array, size_is(aCount), retval] out string aChildArray);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#getComplexValue()\">getComplexValue</a>(in string aPrefName, in nsIIDRef aType, [iid_is(aType), retval] out nsQIResult aValue);</code></td>\n  </tr>\n  <tr>\n   <td><code>long <a href=\"#getIntPref()\">getIntPref</a>(in string aPrefName,</code><span class=\"inlineIndicator geckoVersionBadge\" title=\"(Firefox 54 / Thunderbird 54 / SeaMonkey 2.51)\"><span class=\"badgeText\">Requires Gecko 54</span></span><code> [optional] in long aDefaultValue);</code></td>\n  </tr>\n  <tr>\n   <td><code>long <a href=\"#getPrefType()\">getPrefType</a>(in string aPrefName);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#lockPref()\">lockPref</a>(in string aPrefName);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#prefHasUserValue()\">prefHasUserValue</a>(in string aPrefName);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#prefIsLocked()\">prefIsLocked</a>(in string aPrefName);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#removeObserver()\">removeObserver</a>(in string aDomain, in nsIObserver aObserver);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#resetBranch()\">resetBranch</a>(in string aStartingAt);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setBoolPref()\">setBoolPref</a>(in string aPrefName, in long aValue);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setCharPref()\">setCharPref</a>(in string aPrefName, in string aValue);</code></td>\n  </tr>\n  <tr>\n   <td><span class=\"inlineIndicator geckoVersionBadge\" title=\"(Firefox 58 / Thunderbird 58 / SeaMonkey 2.55)\"><span class=\"badgeText\">Requires Gecko 58</span></span> <code>void <a href=\"#setCharPref()\">setStringPref</a>(in string aPrefName, in utf8string aValue);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setComplexValue()\">setComplexValue</a>(in string aPrefName, in nsIIDRef aType, in nsISupports aValue);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setIntPref()\">setIntPref</a>(in string aPrefName, in long aValue);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#unlockPref()\">unlockPref</a>(in string aPrefName);</code></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Attributes\" name=\"Attributes\">Attributes</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Attribute</td>\n   <td class=\"header\">Type</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>root</code></td>\n   <td><code><a href=\"/en-US/docs/string\" title=\"en/string\">string</a></code></td>\n   <td>Called to get the root on which this branch is based, such as \"browser.startup.\" <strong>Read only.</strong></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Constants\" name=\"Constants\">Constants</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Constant</td>\n   <td class=\"header\">Value</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>PREF_INVALID</code></td>\n   <td><code>0</code></td>\n   <td><code>long</code></td>\n  </tr>\n  <tr>\n   <td><code>PREF_STRING</code></td>\n   <td><code>32</code></td>\n   <td><code>long</code> data type.</td>\n  </tr>\n  <tr>\n   <td><code>PREF_INT</code></td>\n   <td><code>64</code></td>\n   <td><code>long</code> data type.</td>\n  </tr>\n  <tr>\n   <td><code>PREF_BOOL</code></td>\n   <td><code>128</code></td>\n   <td><code>long</code> data type.</td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n\n<p></p><h3 id=\"addObserver()\">addObserver()</h3><p></p>\n\n<p>Adds a preference change observer. On preference changes, the following arguments will be passed to <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIObserver#observe()\">nsIObserver.observe()</a></code>:</p>\n\n<p><code>aSubject</code> - The <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIPrefBranch\" title=\"\">nsIPrefBranch</a></code> object (this).</p>\n\n<p><code>aTopic</code> - The string defined by <code>NS_PREFBRANCH_PREFCHANGE_TOPIC_ID</code></p>\n\n<p><code>aData</code> - The name of the preference which has changed, relative to the \"root\" of the <code>aSubject</code> branch.</p>\n\n<p><code>aSubject.get*Pref(aData)</code> will get the new value of the modified preference. For example, if your observer is registered with <code>addObserver(\"bar.\", ...)</code> on a branch with root <code>\"foo.\"</code>, modifying the preference <code>\"foo.bar.baz\"</code> will trigger the observer, and <code>aData</code> parameter will be <code>\"bar.baz\"</code>.</p>\n\n<pre class=\"eval\">void addObserver(\n  in string aDomain, \n  in nsIObserver aObserver, \n  in boolean aHoldWeak\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aDomain</code></dt>\n <dd>The preference on which to listen for changes. This can be the name of an entire branch to observe. For example holding the \"root\" <code>prefbranch</code> and calling <code>addObserver(\"foo.bar.\", ...)</code> will observe changes to <code>foo.bar.baz</code> and <code>foo.bar.bzip</code>.</dd>\n <dt><code>aObserver</code></dt>\n <dd>The object to be notified if the preference changes. The structure of aObserver is any object with an observe function. See <a href=\"/en-US/docs/XPCOM_Interface_Reference/nsIObserver\">nsIObserver </a>and here is a quick snippet:</dd>\n</dl>\n\n<pre class=\"brush: js\" style=\"margin-left: 40px;\">var myObserver = {\n   observe: function(aSubject, aTopic, aData) {\n      //do stuff here\n   }\n}</pre>\n\n<dl>\n <dt><code>aHoldWeak</code></dt>\n <dd><code>true</code> holds a weak reference to <code>aObserver</code>. The object must implement the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupportsWeakReference\" title=\"\">nsISupportsWeakReference</a></code> interface or this will fail. <code>false</code> holds a strong reference to <code>aObserver</code>.</dd>\n</dl>\n\n<h3 id=\"clearUserPref()\" name=\"clearUserPref()\">clearUserPref()</h3>\n\n<p>Called to clear a user set value from a specific preference. This will, in effect, reset the value to the default value. If no default value exists the preference will cease to exist.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> This method does nothing if the prefbranch it is called on is a default branch.</div><p></p>\n\n<pre class=\"eval\">void clearUserPref(\n  in string aPrefName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aPrefName</code></dt>\n <dd>The preference to be cleared.</dd>\n</dl>\n\n<h6 id=\"Remarks_2\">Remarks</h6>\n\n<div class=\"note\">\n<p><strong>Note:</strong> Prior to <span title=\"(Firefox 6.0 / Thunderbird 6.0 / SeaMonkey 2.3)\">Gecko 6.0</span>, this method would throw an exception if there was no user value set for the specified preference. Now, this method never throws. Instead, it simply does nothing.</p>\n</div>\n\n<h3 id=\"deleteBranch()\" name=\"deleteBranch()\">deleteBranch()</h3>\n\n<p>Called to remove all of the preferences referenced by this branch.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> This method can be called on either a default or user branch but, in effect, always operates on both.</div><p></p>\n\n<pre class=\"eval\">void deleteBranch(\n  in string aStartingAt\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aStartingAt</code></dt>\n <dd>The point on the branch at which to start the deleting preferences. Pass in \"\" to remove all preferences referenced by this branch.</dd>\n</dl>\n\n<h3 id=\"getBoolPref()\" name=\"getBoolPref()\">getBoolPref()</h3>\n\n<p>Called to get the state of an individual boolean preference.</p>\n\n<pre class=\"eval\">boolean getBoolPref(\n  in string aPrefName,\n  [optional] in boolean aDefaultValue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aPrefName</code></dt>\n <dd>The boolean preference to get the state of.</dd>\n <dt><code>aDefaultValue</code> <span class=\"inlineIndicator geckoVersionBadge\" title=\"(Firefox 54 / Thunderbird 54 / SeaMonkey 2.51)\"><span class=\"badgeText\">Requires Gecko 54</span></span></dt>\n <dd>Optional - a default value to use if the preference does not exist (instead of throwing an exception).</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>The value of the requested boolean preference.</p>\n\n<h3 id=\"getCharPref()\" name=\"getCharPref()\">getCharPref()</h3>\n\n<p>Called to get the state of an individual string preference.</p>\n\n<pre class=\"eval\">string getCharPref(\n  in string aPrefName,\n  [optional] in string aDefaultValue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aPrefName</code></dt>\n <dd>The string preference to retrieve.</dd>\n <dt><code>aDefaultValue</code> <span class=\"inlineIndicator geckoVersionBadge\" title=\"(Firefox 54 / Thunderbird 54 / SeaMonkey 2.51)\"><span class=\"badgeText\">Requires Gecko 54</span></span></dt>\n <dd>Optional - a default value to use if the preference does not exist (instead of throwing an exception).</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns <code>string</code> - The value of the requested string preference.</p>\n\n<p></p><div class=\"headingWithIndicator\">\n\n    <h3 id=\"getStringPref()\">getStringPref()</h3>\n\n    <span class=\"indicatorInHeadline standardNote standardNoteMethod\">Requires Gecko 58 (Firefox 58 / Thunderbird 58 / SeaMonkey 2.55)</span>\n</div><p></p>\n\n<p id=\"getCharPref()\">Called to get the state of an individual UTF-8 string preference.</p>\n\n<pre class=\"eval\">utf8string getStringPref(\n  in string aPrefName,\n  [optional] in utf8string aDefaultValue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aPrefName</code></dt>\n <dd>The string preference to retrieve.</dd>\n <dt><code>aDefaultValue</code></dt>\n <dd>Optional - a default value to use if the preference does not exist (instead of throwing an exception).</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns <code>utf8tring</code> - The value of the requested string preference.</p>\n\n<h3 id=\"getChildList()\" name=\"getChildList()\">getChildList()</h3>\n\n<p>Returns an array of strings representing the child preferences of the <code>root</code> of this branch.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> This method can be called on either a default or user branch but, in effect, always operates on both.</div><p></p>\n\n<p>(To call from javascript use <code>children = nsIPrefBranch.getChildList(\"\",obj)</code>, which will fill in obj.value with the count and <em>return</em> an array of keys! (It is <em>not</em> void in javascript)</p>\n\n<pre class=\"eval\">void getChildList(\n  in string aStartingAt,\n  out unsigned long aCount,\n  [array, size_is(aCount), retval] out string aChildArray\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aStartingAt</code></dt>\n <dd>The point on the branch at which to start enumerating the child preferences. Pass in \"\" to enumerate all preferences referenced by this branch.</dd>\n <dt><code>aCount</code> <span class=\"inlineIndicator optional optionalInline\">Optional from Gecko 2.0</span></dt>\n <dd>Receives the number of elements in the array.</dd>\n <dt><code>aChildArray</code></dt>\n <dd>Receives the array of child preferences.</dd>\n</dl>\n\n<h3 id=\"getComplexValue()\" name=\"getComplexValue()\">getComplexValue()</h3>\n\n<p>Called to get the state of an individual complex preference. A complex preference is a preference which represents an XPCOM object that can not be easily represented using a standard boolean, integer or string value.</p>\n\n<pre class=\"eval\">void getComplexValue(\n  in string aPrefName,\n  in nsIIDRef aType,\n  [iid_is(aType), retval] out nsQIResult aValue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aPrefName</code></dt>\n <dd>The complex preference to get the value of.</dd>\n <dt><code>aType</code></dt>\n <dd>The XPCOM interface that this complex preference represents. Interfaces currently supported are:\n <ul>\n  <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/NsILocalFile\" title=\"\">NsILocalFile</a></code></li>\n  <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/NsISupportsString\" title=\"\">NsISupportsString</a></code> (UniChar) <em><strong>(removed as of Gecko 58 in favor of getStringPref)</strong></em></li>\n  <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/NsIPrefLocalizedString\" title=\"\">NsIPrefLocalizedString</a></code> (Localized UniChar)</li>\n  <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/NsIFileSpec\" title=\"\">NsIFileSpec</a></code> (deprecated - to be removed eventually)</li>\n </ul>\n </dd>\n <dt><code>aValue</code></dt>\n <dd>The XPCOM object into which to the complex preference value should be retrieved.</dd>\n</dl>\n\n<h3 id=\"getIntPref()\" name=\"getIntPref()\">getIntPref()</h3>\n\n<p>Called to get the state of an individual integer preference.</p>\n\n<pre class=\"eval\">long getIntPref(\n  in string aPrefName,\n  [optional] in long aDefaultValue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aPrefName</code></dt>\n <dd>The integer preference to get the value of.</dd>\n <dt><code>aDefaultValue</code> <span class=\"inlineIndicator geckoVersionBadge\" title=\"(Firefox 54 / Thunderbird 54 / SeaMonkey 2.51)\"><span class=\"badgeText\">Requires Gecko 54</span></span></dt>\n <dd>Optional - a default value to use if the preference does not exist (instead of throwing an exception).</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns <code>long</code> - The value of the requested integer preference.</p>\n\n<h3 id=\"getPrefType()\" name=\"getPrefType()\">getPrefType()</h3>\n\n<p>Called to determine the type of a specific preference.</p>\n\n<pre class=\"eval\">long getPrefType(\n  in string aPrefName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aPrefName</code></dt>\n <dd>The preference to get the type of.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns <code>long</code> - A value representing the type of the preference. This value will be <code>PREF_STRING</code>, <code>PREF_INT, PREF_BOOL,</code> or <code>PREF_INVALID</code>.</p>\n\n<h3 id=\"lockPref()\" name=\"lockPref()\">lockPref()</h3>\n\n<p>Called to lock a specific preference. Locking a preference will cause the preference service to always return the default value regardless of whether there is a user set value or not.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> This method can be called on either a default or user branch but, in effect, always operates on the default branch.</div><p></p>\n\n<pre class=\"eval\">void lockPref(\n  in string aPrefName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aPrefName</code></dt>\n <dd>The preference to be locked.</dd>\n</dl>\n\n<h3 id=\"prefHasUserValue()\" name=\"prefHasUserValue()\">prefHasUserValue()</h3>\n\n<p>Called to check if a specific preference has a user value associated to it.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> This method can be called on either a default or user branch but, in effect, always operates on the user branch.</div><p></p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> If a preference was manually set to a value that equals the default value, then the preference no longer has a user set value, i.e. it is considered reset to its default value. In particular, this method will return <code>false</code> for such a preference and the preference will not be saved to a file by <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIPrefService#savePrefFile()\">nsIPrefService.savePrefFile()</a></code>.</div><p></p>\n\n<pre class=\"eval\">boolean prefHasUserValue(\n  in string aPrefName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aPrefName</code></dt>\n <dd>The preference to be tested.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns <code>boolean</code> - <code>true</code> The preference has a user set value. <code>false</code> The preference only has a default value.</p>\n\n<h3 id=\"prefIsLocked()\" name=\"prefIsLocked()\">prefIsLocked()</h3>\n\n<p>Called to check if a specific preference is locked. If a preference is locked calling its Get method will always return the default value.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> This method can be called on either a default or user branch but, in effect, always operates on the default branch.</div><p></p>\n\n<pre class=\"eval\">boolean prefIsLocked(\n  in string aPrefName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aPrefName</code></dt>\n <dd>The preference to be tested.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns <code>boolean</code> - <code>true</code> The preference is locked. <code>false</code> The preference is not locked.</p>\n\n<p></p><h3 id=\"removeObserver()\">removeObserver()</h3><p></p>\n\n<p>Remove a preference change observer.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> You must call <code>removeObserver</code> method on the same nsIPrefBranch instance on which you called <a href=\"#addObserver()\">addObserver</a> method in order to remove <code>aObserver</code>; otherwise, the observer will not be removed.</div><p></p>\n\n<pre class=\"eval\">  void removeObserver(\n     in string aDomain, \n     in nsIObserver aObserver\n  );\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aDomain</code></dt>\n <dd>The preference which is being observed for changes.</dd>\n <dt><code>aObserver</code></dt>\n <dd>An observer previously registered with <a href=\"#addObserver()\">addObserver</a>.</dd>\n</dl>\n\n<h3 id=\"resetBranch()\" name=\"resetBranch()\">resetBranch()</h3>\n\n<p>Called to reset all of the preferences referenced by this branch to their default values.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> This method can be called on either a default or user branch but, in effect, always operates on the user branch.</div><p></p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> As of Firefox 3.0, this function has not yet been implemented.</div><p></p>\n\n<pre class=\"eval\">void resetBranch(\n  in string aStartingAt\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aStartingAt</code></dt>\n <dd>The point on the branch at which to start the resetting preferences to their default values. Pass in \"\" to reset all preferences referenced by this branch.</dd>\n</dl>\n\n<h3 id=\"setBoolPref()\" name=\"setBoolPref()\">setBoolPref()</h3>\n\n<p>Called to set the state of an individual boolean preference.</p>\n\n<pre class=\"eval\">void setBoolPref(\n  in string aPrefName,\n  in long aValue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aPrefName</code></dt>\n <dd>The boolean preference to set the state of.</dd>\n <dt><code>aValue</code></dt>\n <dd>The boolean value to set the preference to.</dd>\n</dl>\n\n<h3 id=\"setCharPref()\" name=\"setCharPref()\">setCharPref()</h3>\n\n<p>Called to set the state of an individual string preference.</p>\n\n<div class=\"note\"><strong>Note:</strong> The preferences system is not designed to store large amounts of data: all preferences are stored in a single file, which is read at the application startup. If you find yourself wondering what is the maximum amount of data you can store in a string preference, consider storing data separately, for example in a <a href=\"/en-US/docs/Code_snippets/File_I_O\" title=\"en/Code snippets/File I//O\">flat file</a> or an <a href=\"/en-US/docs/Storage\" title=\"en/Storage\">sqlite database</a>.</div>\n\n<pre class=\"eval\">void setCharPref(\n  in string aPrefName,\n  in string aValue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aPrefName</code></dt>\n <dd>The string preference to set.</dd>\n <dt><code>aValue</code></dt>\n <dd>The string value to set the preference to.</dd>\n</dl>\n\n<p></p><div class=\"headingWithIndicator\">\n\n    <h3 id=\"setStringPref()\">setStringPref()</h3>\n\n    <span class=\"indicatorInHeadline standardNote standardNoteMethod\">Requires Gecko 58 (Firefox 58 / Thunderbird 58 / SeaMonkey 2.55)</span>\n</div><p></p>\n\n<p>Called to set the state of an individual UTF-8 string preference.</p>\n\n<div class=\"note\"><strong>Note:</strong> The preferences system is not designed to store large amounts of data: all preferences are stored in a single file, which is read at the application startup. If you find yourself wondering what is the maximum amount of data you can store in a string preference, consider storing data separately, for example in a <a href=\"/en-US/docs/Code_snippets/File_I_O\" title=\"en/Code snippets/File I//O\">flat file</a> or an <a href=\"/en-US/docs/Storage\" title=\"en/Storage\">sqlite database</a>.</div>\n\n<pre class=\"eval\">void setStringPref(\n  in string aPrefName,\n  in utf8string aValue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aPrefName</code></dt>\n <dd>The string preference to set.</dd>\n <dt><code>aValue</code></dt>\n <dd>The UTF-8 string value to set the preference to.</dd>\n</dl>\n\n<h3 id=\"setComplexValue()\" name=\"setComplexValue()\">setComplexValue()</h3>\n\n<p>Called to set the state of an individual complex preference. A complex preference is a preference which represents an XPCOM object that can not be easily represented using a standard boolean, integer or string value.</p>\n\n<pre class=\"eval\">void setComplexValue(\n  in string aPrefName,\n  in nsIIDRef aType,\n  in nsISupports aValue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aPrefName</code></dt>\n <dd>The complex preference to set the value of.</dd>\n <dt><code>aType</code></dt>\n <dd>The XPCOM interface that this complex preference represents. Interfaces currently supported are:\n <ul>\n  <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/NsILocalFile\" title=\"\">NsILocalFile</a></code></li>\n  <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/NsISupportsString\" title=\"\">NsISupportsString</a></code> (UniChar) <em><strong>(removed as of Gecko 58 in favor of setStringPref)</strong></em></li>\n  <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/NsIPrefLocalizedString\" title=\"\">NsIPrefLocalizedString</a></code> (Localized UniChar)</li>\n  <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/NsIFileSpec\" title=\"\">NsIFileSpec</a></code> (deprecated - to be removed eventually)</li>\n </ul>\n </dd>\n <dt><code>aValue</code></dt>\n <dd>The XPCOM object from which to set the complex preference value.</dd>\n</dl>\n\n<h3 id=\"setIntPref()\" name=\"setIntPref()\">setIntPref()</h3>\n\n<p>Called to set the state of an individual integer preference.</p>\n\n<pre class=\"eval\">void setIntPref(\n  in string aPrefName,\n  in long aValue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aPrefName</code></dt>\n <dd>The integer preference to set the value of.</dd>\n <dt><code>aValue</code></dt>\n <dd>The integer value to set the preference to.</dd>\n</dl>\n\n<h3 id=\"unlockPref()\" name=\"unlockPref()\">unlockPref()</h3>\n\n<p>Called to unlock a specific preference. Unlocking a previously locked preference allows the preference service to once again return the user set value of the preference.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> This method can be called on either a default or user branch but, in effect, always operates on the default branch.</div><p></p>\n\n<pre class=\"eval\">void unlockPref(\n  in string aPrefName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aPrefName</code></dt>\n <dd>The preference to be unlocked.</dd>\n</dl>\n\n<h2 id=\"Remarks\" name=\"Remarks\">Remarks</h2>\n\n<p>Registering as a preference observer can open an object to potential cyclical references which will cause memory leaks. These cycles generally occur because an object both registers itself as an observer (causing the branch to hold a reference to the observer) and holds a reference to the branch object for the purpose of getting/setting preference values. There are 3 approaches which have been implemented in an attempt to avoid these situations:</p>\n\n<ol>\n <li>The nsPrefBranch object supports <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupportsWeakReference\" title=\"\">nsISupportsWeakReference</a></code>. Any consumer may hold a weak reference to it instead of a strong one.</li>\n <li>The nsPrefBranch object listens for xpcom-shutdown and frees all of the objects currently in its observer list. This ensures that long lived objects (services for example) will be freed correctly.</li>\n <li>The observer can request to be held as a weak reference when it is registered. This insures that shorter lived objects (say one tied to an open window) will not fall into the cyclical reference trap.</li>\n</ol>\n\n<p>The list of registered observers may be changed during the dispatch of nsPref:changed notification. However, the observers are not guaranteed to be notified in any particular order, so you can't be sure whether the added/removed observer will be called during the notification when it is added/removed. </p>\n\n<p>It is possible to change preferences during the notification.</p>\n\n<p>It is not safe to change observers during this callback in releases before <span title=\"(Firefox 3)\">Gecko 1.9</span>. If you want a safe way to remove a preference observer, please use an <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITimer\" title=\"\">nsITimer</a></code>.</p>\n\n<h2 id=\"See also\" name=\"See also\"><a>See also</a></h2>\n\n<ul>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIPrefService\" title=\"\">nsIPrefService</a></code></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/oyenirat\">oyenirat</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Whimboo\">Whimboo</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/TriMoon\">TriMoon</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/jik\">jik</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/GijsKruitbosch\">GijsKruitbosch</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Noitidart\">Noitidart</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kscarfone\">kscarfone</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mnoorenberghe\">mnoorenberghe</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/darktrojan\">darktrojan</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Dao\">Dao</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nickolay\">Nickolay</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Amertner\">Amertner</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/KampfCaspar\">KampfCaspar</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Johnjbarton\">Johnjbarton</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Kglee\">Kglee</a>",
    "title": "Component; nsIPrefBranch"
}