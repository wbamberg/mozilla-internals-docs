{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/netwerk/base/nsIChannel.idl\" rel=\"custom\">netwerk/base/nsIChannel.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThis interface allows clients to construct 'GET' requests for specific protocols, and manage them in a uniform way.\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIRequest\" title=\"\">nsIRequest</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 19.0 (Firefox 19.0 / Thunderbird 19.0 / SeaMonkey 2.16)</span></div>\n</div><p></p>\n\n<p>Once a channel is created (via <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIIOService#newChannel()\">nsIIOService.newChannel()</a></code>), parameters for that request may be set by using the channel attributes, or by calling QueryInterface() to retrieve a subclass of <code>nsIChannel</code> for protocol-specific parameters. Then, the <code>URI</code> can be fetched by calling <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIChannel#open()\">open()</a></code> or <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIChannel#asyncOpen()\">asyncOpen()</a></code>. After a request has been completed, the channel is still valid for accessing protocol-specific results. For example, QueryInterfacing to <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIHttpChannel\" title=\"\">nsIHttpChannel</a></code> allows response headers to be retrieved for the corresponding http transaction.</p>\n\n<p>This interface must be used only from the XPCOM main thread.</p>\n\n<p>Implemented by <code><a href=\"https://dxr.mozilla.org/mozilla-central/source/netwerk/base/src/nsBaseChannel.cpp\" rel=\"custom\">netwerk/base/src/nsBaseChannel.cpp</a></code> and <code><a href=\"https://dxr.mozilla.org/mozilla-central/source/netwerk/protocol/http/src/nsHttpChannel.cpp\" rel=\"custom\">netwerk/protocol/http/src/nsHttpChannel.cpp</a></code>.</p>\n\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code>void <a href=\"#asyncOpen()\">asyncOpen</a>(in nsIStreamListener aListener, in nsISupports aContext);</code></td>\n  </tr>\n  <tr>\n   <td><code>nsIInputStream <a href=\"#open()\">open</a>();</code></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Attributes\" name=\"Attributes\">Attributes</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Attribute</td>\n   <td class=\"header\">Type</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>contentCharset</code></td>\n   <td><code><a href=\"/en/ACString\" title=\"en/ACString\">ACString</a></code></td>\n   <td>\n    <p>The character set of the channel's content if available and if applicable. This attribute only applies to textual data.</p>\n\n    <p>Setting contentCharset before the channel has been opened provides a hint to the channel on what the charset should be. The behavior is similar to contentType.</p>\n    The value of the contentCharset attribute is a mixed case string.</td>\n  </tr>\n  <tr>\n   <td><code>contentLength</code></td>\n   <td><code>int64_t</code></td>\n   <td>\n    <p>The length of the data associated with the channel if available. A value of -1 indicates that the content length is unknown.</p>\n\n    <div class=\"note\">\n    <p><strong>Note:</strong> As of <span title=\"(Firefox 19.0 / Thunderbird 19.0 / SeaMonkey 2.16)\">Gecko 19.0</span>, this parameter changed from <code>long</code> to <code>int64_t</code>. In earlier versions callers could get the \"content-length\" property as 64-bit value by QueryInterfacing the channel to <code><a class=\"external\" href=\"http://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIPropertyBag2\">nsIPropertyBag2</a></code>, if that interface is exposed by the channel.</p>\n    </div>\n   </td>\n  </tr>\n  <tr>\n   <td><code>contentType</code></td>\n   <td><code><a href=\"/en/ACString\" title=\"en/ACString\">ACString</a></code></td>\n   <td>\n    <p>The MIME type of the channel's content if available.</p>\n\n    <p></p><div class=\"blockIndicator note\"><strong>Note:</strong> The content type can often be wrongly specified (For example wrong file extension, wrong MIME type, wrong document type stored on a server and so on.), and the caller most likely wants to verify with the actual data.</div><p></p>\n\n    <p>Setting contentType before the channel has been opened provides a hint to the channel as to what the MIME type is. The channel may ignore this hint in deciding on the actual MIME type that it will report.</p>\n\n    <p>Setting contentType after onStartRequest has been fired or after <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIChannel#open()\">open()</a></code> is called will override the type determined by the channel.</p>\n\n    <p>Setting contentType between the time that <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIChannel#asyncOpen()\">asyncOpen()</a></code> is called and the time when onStartRequest is fired has undefined behavior at this time.</p>\n\n    <p>The value of the contentType attribute is a lowercase string. A value assigned to this attribute will be parsed and normalized as follows:</p>\n\n    <ol>\n     <li>Any parameters (delimited with a ';') will be stripped.</li>\n     <li>If a charset parameter is given, then its value will replace the the contentCharset attribute of the channel.</li>\n     <li>The stripped contentType will be lowercased. Any implementation of <code>nsIChannel</code> must follow these rules.</li>\n    </ol>\n   </td>\n  </tr>\n  <tr>\n   <td><code>notificationCallbacks</code></td>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInterfaceRequestor\" title=\"\">nsIInterfaceRequestor</a></code></code></td>\n   <td>\n    <p>The notification callbacks for the channel. This is set by clients, who wish to provide a means to receive progress, status and protocol-specific notifications. If this value is <code>null</code>, the channel implementation may use the notification callbacks from its load group. The channel may also query the notification callbacks from its load group if its notification callbacks do not supply the requested interface.</p>\n\n    <p>Interfaces commonly requested include: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProgressEventSink\" title=\"\">nsIProgressEventSink</a></code>, <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIPrompt\" title=\"\">nsIPrompt</a></code>, and <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAuthPrompt\" title=\"\">nsIAuthPrompt</a></code> / <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIAuthPrompt2\" title=\"\">nsIAuthPrompt2</a></code>.</p>\n\n    <p>When the channel is done, it must not continue holding references to this object.</p>\n    <div class=\"blockIndicator note\"><strong>Note:</strong> A channel implementation should take care when \"caching\" an interface pointer queried from its notification callbacks. If the notification callbacks are changed, then a cached interface pointer may become invalid and may therefore need to be re-queried.</div></td>\n  </tr>\n  <tr>\n   <td><code>originalURI</code></td>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code></code></td>\n   <td>\n    <p>The original URI used to construct the channel. This is used in the case of a redirect or URI \"resolution\" (For example resolving a resource: URI to a file: URI) so that the original pre-redirect URI can still be obtained.   This is also used as the RI of the document resulting from the channel, unless the channel has the LOAD_REPLACE flag set.  This is never <code>null</code>. Attempts to set it to <code>null</code> must throw.</p>\n    <div class=\"blockIndicator note\"><strong>Note:</strong> This is distinctly different from the http Referer (referring URI), which is typically the page that contained the original URI (accessible from <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIHttpChannel\" title=\"\">nsIHttpChannel</a></code>.) </div></td>\n  </tr>\n  <tr>\n   <td><code>owner</code></td>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code></code></td>\n   <td>\n    <p>The owner, corresponding to the entity that is responsible for this channel. Used by the security manager to grant or deny privileges to mobile code loaded from this channel.</p>\n    <div class=\"blockIndicator note\"><strong>Note:</strong> This is a strong reference to the owner, so if the owner is also holding a strong reference to the channel, care must be taken to explicitly drop its reference to the channel.</div></td>\n  </tr>\n  <tr>\n   <td><code>securityInfo</code></td>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code></code></td>\n   <td>Transport-level security information (if any, else null) corresponding to the channel, normally presented through the interfaces <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITransportSecurityInfo\" title=\"\">nsITransportSecurityInfo</a></code> and <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISSLStatusProvider\" title=\"\">nsISSLStatusProvider</a></code> <strong>Read only.</strong></td>\n  </tr>\n  <tr>\n   <td><code>URI</code></td>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code></code></td>\n   <td>The URI corresponding to the channel. Its value is immutable. <strong>Read only.</strong></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Constants\" name=\"Constants\">Constants</h2>\n\n<p>Channel specific load flags:</p>\n\n<p>Bits 23-31 are reserved for future use by this interface or one of its derivatives (For an example see <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsICachingChannel\" title=\"\">nsICachingChannel</a></code>).</p>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Constant</td>\n   <td class=\"header\">Value</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>LOAD_DOCUMENT_URI</code></td>\n   <td><code>16</code></td>\n   <td>Set (for example by the docshell) to indicate whether or not the channel corresponds to a document URI.</td>\n  </tr>\n  <tr>\n   <td><code>LOAD_RETARGETED_DOCUMENT_URI</code></td>\n   <td><code>17</code></td>\n   <td>If the end consumer for this load has been retargeted after discovering its content, this flag will be set:</td>\n  </tr>\n  <tr>\n   <td><code>LOAD_REPLACE</code></td>\n   <td><code>18</code></td>\n   <td>\n    <p>This flag is set to indicate that this channel is replacing another channel. This means that:</p>\n\n    <ol>\n     <li>The stream listener this channel will be notifying was initially passed to the <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIChannel#asyncOpen()\">asyncOpen()</a></code> method of some other channel</li>\n     <li>This channel's URI is a better identifier of the resource being accessed than this channel's <code>originalURI</code>.</li>\n    </ol>\n    This flag can be set, for example, for redirects or for cases when a single channel has multiple parts to it (and thus can follow <code>onStopRequest</code> with another <code>onStartRequest</code>/<code>onStopRequest</code> pair, each pair for a different request).</td>\n  </tr>\n  <tr>\n   <td><code>LOAD_INITIAL_DOCUMENT_URI</code></td>\n   <td><code>19</code></td>\n   <td>Set (for example by the docshell) to indicate whether or not the channel corresponds to an initial document URI load (for example link click).</td>\n  </tr>\n  <tr>\n   <td><code>LOAD_TARGETED</code></td>\n   <td><code>20</code></td>\n   <td>Set (For example by the <code>URILoader</code>) to indicate whether or not the end consumer for this load has been determined.</td>\n  </tr>\n  <tr>\n   <td><code>LOAD_CALL_CONTENT_SNIFFERS</code></td>\n   <td><code>21</code></td>\n   <td>\n    <p>If this flag is set, the channel should call the content sniffers as described in <code><a href=\"https://dxr.mozilla.org/mozilla-central/source/netwerk/build/nsNetCID.h\" rel=\"custom\">netwerk/build/nsNetCID.h</a></code> about <code>NS_CONTENT_SNIFFER_CATEGORY</code>.</p>\n\n    <p>See <a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIContentSniffer\">nsIContentSniffer [en-US]</a></p>\n    <div class=\"blockIndicator note\"><strong>Note:</strong> Channels may ignore this flag; however, new channel implementations should only do so with good reason.</div></td>\n  </tr>\n  <tr>\n   <td><code>LOAD_CLASSIFY_URI</code></td>\n   <td><code>22</code></td>\n   <td>This flag tells the channel to use URI classifier service to check the URI when opening the channel. </td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n\n<h3 id=\"asyncOpen()\" name=\"asyncOpen()\">asyncOpen()</h3>\n\n<p>Asynchronously open this channel. Data is fed to the specified stream listener as it becomes available. The stream listener's methods are called on the thread that calls asyncOpen and are not called until after asyncOpen returns. If asyncOpen returns successfully, the channel promises to call at least onStartRequest and onStopRequest.</p>\n\n<p>If the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIRequest\" title=\"\">nsIRequest</a></code> object passed to the stream listener's methods is not this channel, an appropriate onChannelRedirect notification needs to be sent to the notification callbacks before onStartRequest is called. Once onStartRequest is called, all following method calls on aListener will get the request that was passed to onStartRequest.</p>\n\n<p>If the channel's and loadgroup's notification callbacks do not provide an <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIChannelEventSink\" title=\"\">nsIChannelEventSink</a></code> when onChannelRedirect would be called, that's equivalent to having called onChannelRedirect.</p>\n\n<p>If asyncOpen returns successfully, the channel is responsible for keeping itself alive until it has called onStopRequest on aListener or called onChannelRedirect.</p>\n\n<p>Implementations are allowed to synchronously add themselves to the associated load group (if any).</p>\n\n<pre class=\"eval\">void asyncOpen(\n  in nsIStreamListener aListener,\n  in nsISupports aContext\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aListener</code></dt>\n <dd>The <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIStreamListener\" title=\"\">nsIStreamListener</a></code> implementation.</dd>\n <dt><code>aContext</code></dt>\n <dd>An opaque parameter forwarded to aListener's methods.</dd>\n</dl>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>NS_ERROR_ALREADY_OPENED</code></dt>\n <dd>If the channel is reopened</dd>\n <dt><code>NS_ERROR_PORT_ACCESS_NOT_ALLOWED</code></dt>\n <dd>If the specified port is in the <a href=\"http://dxr.mozilla.org/mozilla-central/netwerk/base/src/nsIOService.cpp.html#l76\" title=\"nsIOService forbidden list\"><code>nsIOService</code> forbidden port list</a>.</dd>\n</dl>\n\n<h3 id=\"open()\" name=\"open()\">open()</h3>\n\n<p>Synchronously open the channel.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> Extensions should not call this method, because it tends to fail when a request is redirected, rather than redirecting transparently</div><div class=\"blockIndicator note\"><strong>Note:</strong> <code>nsIChannel</code> implementations are not required to implement this method. Moreover, since this method may block the calling thread, it should not be called on a thread that processes UI events. Like any other <code>nsIChannel</code> method it must not be called on any thread other than the XPCOM main thread.</div><p></p>\n\n<pre class=\"eval\">nsIInputStream open();</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Blocking input stream to the channel's data.</p>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>NS_ERROR_IN_PROGRESS</code></dt>\n <dd>If the channel is reopened.</dd>\n</dl>\n\n<h2 id=\"See_also\" name=\"See_also\">See also</h2>\n\n<ul>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIChannelEventSink\" title=\"\">nsIChannelEventSink</a></code> for <code>onChannelRedirect</code></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/vandy\">vandy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/def00111\">def00111</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kscarfone\">kscarfone</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/evilpie\">evilpie</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mook\">Mook</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/rnewman\">rnewman</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/pde\">pde</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/fscholz\">fscholz</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Bzbarsky\">Bzbarsky</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Torisugari\">Torisugari</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Kennyluck\">Kennyluck</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mook_sb\">Mook_sb</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Wjjohnst\">Wjjohnst</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Varmaa\">Varmaa</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/vladimir.dzhuvinov\">vladimir.dzhuvinov</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Brettz9\">Brettz9</a>",
    "title": "nsIChannel"
}