{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/dom/interfaces/base/nsICompositionStringSynthesizer.idl\" rel=\"custom\">dom/interfaces/base/nsICompositionStringSynthesizer.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThis interface is a composition string synthesizer interface that synthesizes composition string with arbitrary clauses and a caret\n</span>\n\n  <div style=\"height: 42px; position: relative; padding: 2px; width: auto;\">\n\n  <div style=\"top: 22px; font-size: 11px; position: absolute;\">1.0</div>\n  \n  <div style=\"top: 22px; font-size: 11px; position: absolute; left: 0px; text-align: right; float: right; width: 100%;\">66</div>\n  \n  <div style=\"height: 8px; top: 16px; background: #dd0000; left: 0px; position: absolute; width: 42.857142857142854%;\"></div>\n  \n<div style=\"height: 8px; top: 16px; left: 42.857142857142854%; background: #00dd00; position: absolute; width: 17.142857142857146%;\" title=\"Introduced in Gecko 26 (Firefox 26 / Thunderbird 26 / SeaMonkey 2.23 / Firefox OS 1.2)\"></div>\n\n<div style=\"top: 0px; font-size: 11px; position: absolute; left: 0px; text-align: right; float: right; width: 42.857142857142854%;\">Introduced</div>\n<div style=\"top: 22px; font-size: 11px; position: absolute; left: 0px; text-align: right; float: right; width: 42.857142857142854%;\">Gecko 26</div>\n\n    <div style=\"height: 8px; top: 16px; left: 60%; background: #000000; position: absolute; width: 40%;\" title=\"Obsolete in Gecko 38 (Firefox 38 / Thunderbird 38 / SeaMonkey 2.35)\"></div>\n    \n  <div style=\"top: 0px; font-size: 11px; position: absolute; left: 0px; text-align: right; float: right; width: 60%;\">Obsolete</div>\n  \n  <div style=\"top: 22px; font-size: 11px; position: absolute; left: 0px; text-align: right; float: right; width: 60%;\">Gecko 38</div>\n  \n    <div style=\"height: 8px; top: 16px; left: 59.5%; background: #eeee00; position: absolute; width: 1%; border-radius: 4px; -webkit-border-radius: 4px;\" title=\"Last changed in Gecko 38.0 (Firefox 38.0 / Thunderbird 38.0 / SeaMonkey 2.35)\"></div>\n    \n</div>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 38.0 (Firefox 38.0 / Thunderbird 38.0 / SeaMonkey 2.35)</span></div>\n</div><p></p>\n\n<p>This interface is obsoleted in <span title=\"(Firefox 38 / Thunderbird 38 / SeaMonkey 2.35)\">Gecko 38</span>. You need to use <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITextInputProcessor\" title=\"\">nsITextInputProcessor</a></code> instead of this.</p>\n\n<p>Every instance is associated with a DOM window at created by nsIDOMWindowUtils.createCompositionStringSynthesizer(). To create an instance for this:</p>\n\n<pre>var domWindowUtils = window.windowUtils;\nvar compositionStringSynthesizer = domWindowUtils.createCompositionStringSynthesizer();\n</pre>\n\n<p>For example, when you create a composition whose composing string is \"foo-bar-buzz\" and \"bar\" is selected to convert, then, first, you need to start composition:</p>\n\n<pre>domWindowUtils.sendCompositionEvent(\"compositionstart\", \"\", \"\");</pre>\n\n<p>Next, dispatch composition string with crause information and caret information (optional):</p>\n\n<pre>// set new composition string with .setString().\ncompositionStringSynthesizer.setString(\"foo-bar-buzz\");\n// set clause information with .appendClause().\ncompositionStringSynthesizer.appendClause(\"foo-\".length,  compositionStringSynthesizer.ATTR_CONVERTEDTEXT);\ncompositionStringSynthesizer.appendClause(\"bar\".length,   compositionStringSynthesizer.ATTR_SELECTEDCONVERTEDTEXT);\ncompositionStringSynthesizer.appendClause(\"-buzz\".length, compositionStringSynthesizer.ATTR_CONVERTEDTEXT);\n// set caret position in the composition string. (optional)\ncompositionStringSynthesizer.setCaret(\"foo-bar\".length, 0);\n// dispatch DOM events to modify the focused editor\ncompositionStringSynthesizer.dispatchEvent();\n</pre>\n\n<p>When you modify the composing string, you don't need to recreate the instance anymore. The composing string information is cleared by a call of <code>.dispatchEvent()</code>. For example, if the \"bar\" is converted to \"BAR\":</p>\n\n<pre>compositionStringSynthesizer.setString(\"foo-BAR-buzz\");\ncompositionStringSynthesizer.appendClause(\"foo-\".length,  compositionStringSynthesizer.ATTR_CONVERTEDTEXT);\ncompositionStringSynthesizer.appendClause(\"BAR\".length,   compositionStringSynthesizer.ATTR_SELECTEDCONVERTEDTEXT);\ncompositionStringSynthesizer.appendClause(\"-buzz\".length, compositionStringSynthesizer.ATTR_CONVERTEDTEXT);\ncompositionStringSynthesizer.setCaret(\"foo-BAR\".length, 0);\ncompositionStringSynthesizer.dispatchEvent();</pre>\n\n<p>Finally, when you commits composition with the last composition string \"foo-BAR-buzz\":</p>\n\n<pre>// Deprecated in 36, first, dispatch commit string without clause information\ncompositionStringSynthesizer.setString(\"foo-BAR-buzz\");\ncompositionStringSynthesizer.dispatchEvent();\n// Then, dispatch compositionend with the commit string\ndomWindowUtils.sendCompositionEvent(\"compositionend\", \"foo-BAR-buzz\", \"\");\n</pre>\n\n<p> Starting <span title=\"(Firefox 36 / Thunderbird 36 / SeaMonkey 2.33)\">Gecko 36</span>, You can do it simpler:</p>\n\n<pre>domWindowUtils.sendCompositionEvent(\"compositioncommitasis\", \"\", \"\");\n</pre>\n\n<p>If you need to commit composition with different commit string <span title=\"(Firefox 36 / Thunderbird 36 / SeaMonkey 2.33)\">Gecko 36</span> or later, you can use \"compositioncommit\":</p>\n\n<pre>domWindowUtils.sendCompositionEvent(\"compositioncommit\", \"FOO-BAR-BUZZ\", \"\");</pre>\n\n<h2 id=\"Method_overview\">Method overview</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code>void <a href=\"#appendClause()\">appendClause</a>(in unsigned long aLength, in unsigned long aAttribute);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#dispatchEvent()\">dispatchEvent</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setCaret()\">setCaret</a>(in unsigned long aOffset, in unsigned long aLength);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setString()\">setString</a>(in AString aString);</code></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Constants\">Constants</h2>\n\n<table class=\"standard-table\">\n <thead>\n  <tr>\n   <th scope=\"col\">Constant</th>\n   <th scope=\"col\">Value</th>\n   <th scope=\"col\">Description</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td><code>ATTR_RAW_INPUT</code></td>\n   <td><code>0x02</code></td>\n   <td>A clause attribute. This means that the clause is not converted. I.e., raw text of user input.</td>\n  </tr>\n  <tr>\n   <td><code>ATTR_SELECTEDRAWTEXT</code></td>\n   <td><code>0x03</code></td>\n   <td>A clause attribute but this is typically not used. This means that the clause is not converted but selected to convert or modify.</td>\n  </tr>\n  <tr>\n   <td><code>ATTR_CONVERTEDTEXT</code></td>\n   <td><code>0x04</code></td>\n   <td>A clause attribute. This means that the clause is already converted.</td>\n  </tr>\n  <tr>\n   <td><code>ATTR_SELECTEDCONVERTEDTEXT</code></td>\n   <td><code>0x05</code></td>\n   <td>A clause attribute. This means that the clause is already converted and is selected to convert.</td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Methods\">Methods</h2>\n\n<p></p><h3 id=\"appendClause()\">appendClause()</h3><p></p>\n\n<p>Appends a clause to the composition string which is set by <a href=\"#setString()\">setString()</a>. Sum of aLength must be same as the length of <code>aString</code> of <a href=\"#setString()\">setString()</a>.</p>\n\n<pre>void appendClause(in unsigned long aLength,\n                  in unsigned long aAttribute);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt>aLength</dt>\n <dd>The length of appending clause.</dd>\n <dt>aAttribute</dt>\n <dd>The attribute of appending clause. Must be one of <code>ATTR_*</code> constants.</dd>\n</dl>\n\n<p></p><h3 id=\"dispatchEvent()\">dispatchEvent()</h3><p></p>\n\n<p>Dispatches DOM events for setting the composition string which are specified by <a href=\"#setString()\">setString()</a>, <a href=\"#appendClause()\">appendClause()</a> and <a href=\"#setCaret()\">setCaret()</a> to the focused editor.</p>\n\n<p>If <a href=\"#appendClause()\">appendClause()</a> hasn't been called, this dispatches events to set composition string without clause information. In other words, commits composition string.</p>\n\n<p>If <a href=\"#appendClause()\">appendClause()</a> and/or <a href=\"#setCaret()\">setCaret()</a> are not called properly, e.g., sum of aLength of calls of <a href=\"#appendClause()\">appendClause()</a> is not same as composition string set by <a href=\"#setString()\">setString()</a>, this throws an exception.</p>\n\n<p>After a call of this, all stored composition string information is cleared. Therefore, you can reuse the instance for modifying composition string.</p>\n\n<pre>boolean dispatchEvent();</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Return value</h6>\n\n<p>If dispatched event's default is prevented, returns true. However, this must always return false since all dispatching DOM events are not cancelable.</p>\n\n<p></p><h3 id=\"setCaret()\">setCaret()</h3><p></p>\n\n<p>Sets caret position in the composition string set by <a href=\"#setString()\">setString()</a>. This is optional.  I.e., you may not call this before <a href=\"#dispatchEvent()\">dispatchEvent()</a>.</p>\n\n<pre>void setCaret(in unsigned long aOffset,\n              in unsigned long aLength);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt>aOffset</dt>\n <dd>Caret offset in the composition string. This value must be between 0 and the length of aString of <a href=\"#setString()\">setString()</a>.</dd>\n <dt>aLength</dt>\n <dd>If you want wide caret, you can set over 0. However, Gecko doesn't support wide caret yet. (<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=979112\" title=\"Support wide caret whose width is one (or more?) grapheme cluster width\">bug 979112</a>)</dd>\n</dl>\n\n<p></p><h3 id=\"setString()\">setString()</h3><p></p>\n\n<p>Sets new composition string. This must be called before every call of <a href=\"#dispatchEvent()\">dispatchEvent()</a>.</p>\n\n<pre>void setString(in AString aString);</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt>aString</dt>\n <dd>New composition string.</dd>\n</dl>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Bzbarsky\">Bzbarsky</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Potappo\">Potappo</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Masayuki\">Masayuki</a>",
    "title": "nsICompositionStringSynthesizer"
}