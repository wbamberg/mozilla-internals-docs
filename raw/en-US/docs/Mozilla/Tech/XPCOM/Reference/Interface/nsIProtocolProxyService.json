{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/netwerk/base/public/nsIProtocolProxyService.idl\" rel=\"custom\">netwerk/base/public/nsIProtocolProxyService.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThis interface provides methods to access information about various network proxies.\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 1.7 </span></div>\n</div><p></p>\n\n<p>Implemented by: <code>@mozilla.org/network/protocol-proxy-service;1</code>. To access the service use:</p>\n\n<pre class=\"eval\">var pps = Components.classes[\"@mozilla.org/network/protocol-proxy-service;1\"]\n              .getService(Components.interfaces.nsIProtocolProxyService);\n</pre>\n\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code><span class=\"inlineIndicator deprecated deprecatedInline\" title=\"(Firefox 18 / Thunderbird 18 / SeaMonkey 2.15 / Firefox OS 1.0.1 / Firefox OS 1.1)\">Deprecated since Gecko 18</span> <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProxyInfo\" title=\"\">nsIProxyInfo</a></code> <a class=\"internal\" href=\"#resolve()\" title=\"#resolve()\">resolve</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> aURI, in unsigned long aFlags);</code></td>\n  </tr>\n  <tr>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsICancelable\" title=\"\">nsICancelable</a></code> <a class=\"internal\" href=\"#asyncResolve()\">asyncResolve</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> aURI, in unsigned long aFlags,in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProtocolProxyCallback\" title=\"\">nsIProtocolProxyCallback</a></code> aCallback);</code></td>\n  </tr>\n  <tr>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProxyInfo\" title=\"\">nsIProxyInfo</a></code> <a class=\"internal\" href=\"#newProxyInfo()\">newProxyInfo</a>(in ACString aType, in AUTF8String aHost,in long aPort, in unsigned long aFlags, in unsigned long aFailoverTimeout, in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProxyInfo\" title=\"\">nsIProxyInfo</a></code> aFailoverProxy);</code></td>\n  </tr>\n  <tr>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProxyInfo\" title=\"\">nsIProxyInfo</a></code> <a class=\"internal\" href=\"#getFailoverForProxy()\">getFailoverForProxy</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProxyInfo\" title=\"\">nsIProxyInfo</a></code> aProxyInfo, in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> aURI, in nsresult aReason);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a class=\"internal\" href=\"#registerFilter()\">registerFilter</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProtocolProxyFilter\" title=\"\">nsIProtocolProxyFilter</a></code> aFilter, in unsigned long aPosition);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a class=\"internal\" href=\"#unregisterFilter()\">unregisterFilter</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProtocolProxyFilter\" title=\"\">nsIProtocolProxyFilter</a></code> aFilter);</code></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Constants\" name=\"Constants\">Constants</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Constant</td>\n   <td class=\"header\">Value</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>RESOLVE_NON_BLOCKING</code></td>\n   <td>1&lt;&lt;0</td>\n   <td>\n    <p>This flag may be passed to the resolve method to request that it fail instead of block the calling thread. Proxy Auto Config (PAC) may perform a synchronous DNS query, which may not return immediately. So, calling resolve without this flag may result in locking up the calling thread for a lengthy period of time.</p>\n\n    <p>By passing this flag to resolve, one can failover to asyncResolve to avoid locking up the calling thread if a PAC query is required.</p>\n    When this flag is passed to resolve, resolve may throw the exception NS_BASE_STREAM_WOULD_BLOCK to indicate that it failed due to this flag being present.</td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n\n<h3 id=\"resolve()_Deprecated_since_Gecko_18\">resolve() <code><span class=\"inlineIndicator deprecated deprecatedInline\" title=\"(Firefox 18 / Thunderbird 18 / SeaMonkey 2.15 / Firefox OS 1.0.1 / Firefox OS 1.1)\">Deprecated since Gecko 18</span></code></h3>\n\n<p>This method has been <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=769764\" title=\"https://bugzilla.mozilla.org/show_bug.cgi?id=769764\">removed in Firefox 18</a>. Use <code>resolveAsync</code> instead</p>\n\n<h4 id=\"Previous_doc\">Previous doc</h4>\n\n<p>This method returns a <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProxyInfo\" title=\"\">nsIProxyInfo</a></code> instance that identifies a proxy to be used for loading the given URI. Otherwise, this method returns null indicating that a direct connection should be used.</p>\n\n<p>If this proxy is unavailable, <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProtocolProxyService#getFailoverForProxy()\">getFailoverForProxy()</a></code> may be called to determine the correct secondary proxy to be used.<br>\n <br>\n If the protocol handler for the given URI supports <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProxiedProtocolHandler\" title=\"\">nsIProxiedProtocolHandler</a></code>, then the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProxyInfo\" title=\"\">nsIProxyInfo</a></code> instance returned from resolve may be passed to the <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIProxiedProtocolHandler#newProxiedChannel()\">nsIProxiedProtocolHandler.newProxiedChannel()</a></code> method to create a <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIChannel\" title=\"\">nsIChannel</a></code> to the given URI that uses the specified proxy.</p>\n\n<p>However, if the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProxyInfo\" title=\"\">nsIProxyInfo</a></code> type is \"http\", then it means that the given URI should be loaded using the HTTP protocol handler, which also supports <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProxiedProtocolHandler\" title=\"\">nsIProxiedProtocolHandler</a></code>.</p>\n\n<pre class=\"eval\"> nsIProxyInfo resolve(\n   in nsIURI aURI, \n   in unsigned long aFlags\n );\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The URI to test.</dd>\n <dt><code>aFlags</code></dt>\n <dd>A bit-wise combination of the RESOLVE_ flags defined above. Pass 0 to specify the default behavior. Any additional bits that do not correspond to a RESOLVE_ flag are reserved for future use.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>An <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProxyInfo\" title=\"\">nsIProxyInfo</a></code> object or null for a direct connection.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong>Â If PAC is configured, and the PAC file has not yet been loaded, then this method will return a <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProxyInfo\" title=\"\">nsIProxyInfo</a></code> instance with a type of \"unknown\" to indicate to the consumer that asyncResolve should be used to wait for the PAC file to finish loading. Otherwise, the consumer may choose to treat the result as type \"direct\" if desired. See <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIProxiedProtocolHandler#newProxiedChannel()\">nsIProxiedProtocolHandler.newProxiedChannel()</a></code>. </div><p></p>\n\n<h3 id=\"asyncResolve()\">asyncResolve()</h3>\n\n<p>This method is an asychronous version of the resolve method. Unlike resolve, this method is guaranteed not to block the calling thread waiting for DNS queries to complete. This method is intended as a substitute for resolve when the result is not needed immediately.</p>\n\n<pre class=\"eval\"> nsICancelable asyncResolve(\n   in nsIURI aURI, \n   in unsigned long aFlags,\n   in nsIProtocolProxyCallback aCallback\n );\n</pre>\n\n<h6 id=\"Parameters_2\">Parameters</h6>\n\n<dl>\n <dt><code>aURI</code></dt>\n <dd>The URI to test.</dd>\n <dt><code>aFlags</code></dt>\n <dd>A bit-wise combination of the RESOLVE_ flags defined above. Pass 0 to specify the default behavior. Any additional bits that do not correspond to a RESOLVE_ flag are reserved for future use.</dd>\n <dt><code>aCallback</code></dt>\n <dd>The object to be notified when the result is available.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>An <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsICancelableobject\" title=\"\">nsICancelableobject</a></code> that can be used to cancel the asynchronous operation. If canceled, the cancellation status (aReason) will be forwarded to the callback's <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIProtocolProxyCallback#onProxyAvailable()\">nsIProtocolProxyCallback.onProxyAvailable()</a></code> method via the aStatus parameter.</p>\n\n<h3 id=\"newProxyInfo()\">newProxyInfo()</h3>\n\n<p>This method may be called to construct a <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProxyInfo\" title=\"\">nsIProxyInfo</a></code> instance from the given parameters. This method may be useful in conjunction with <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsISocketTransportService#createTransport()\">nsISocketTransportService.createTransport()</a></code> for creating, for example, a SOCKS connection.</p>\n\n<pre class=\"eval\">nsIProxyInfo newProxyInfo(\n  in ACString aType,\n  in AUTF8String aHost,\n  in long aPort,\n  in unsigned long aFlags,\n  in unsigned long aFailoverTimeout,\n  in nsIProxyInfo aFailoverProxy\n);\n</pre>\n\n<h6 id=\"Parameters_3\">Parameters</h6>\n\n<dl>\n <dt><code>aType</code></dt>\n <dd>The proxy type is a string value that identifies the proxy type. Standard values are:\n <ul>\n  <li>\"http\" - specifies a HTTP proxy</li>\n  <li>\"https\" - specifies a HTTPS proxy</li>\n  <li>\"socks\" - specifies a SOCKS version 5 proxy</li>\n  <li>\"socks4\" - specifies a SOCKS version 4 proxy</li>\n  <li>\"direct\" - specifies a direct connection (useful for failover)</li>\n </ul>\n The type name is case-insensitive. Other string values may be possible, and new types may be defined by a future version of this interface.</dd>\n <dt><code>aHost</code></dt>\n <dd>The proxy hostname or IP address.</dd>\n <dt><code>aPort</code></dt>\n <dd>The proxy port.</dd>\n <dt><code>aFlags</code></dt>\n <dd>Flags associated with this connection. See <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProxyInfo\" title=\"\">nsIProxyInfo</a></code> for currently defined flags.</dd>\n <dt><code>aFailoverTimeout</code></dt>\n <dd>Specifies the length of time (in seconds) to ignore this proxy if this proxy fails. Pass PR_UINT32_MAX to specify the default timeout value, causing nsIProxyInfo::failoverTimeout to be assigned the default value.</dd>\n <dt><code>aFailoverProxy</code></dt>\n <dd>Specifies the next proxy to try if this proxy fails. This parameter may be null.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>An <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProxyInfo\" title=\"\">nsIProxyInfo</a></code> object.</p>\n\n<h3 id=\"getFailoverForProxy()\">getFailoverForProxy()</h3>\n\n<p>If the proxy identified by aProxyInfo is unavailable for some reason, this method may be called to access an alternate proxy that may be used instead. As a side-effect, this method may affect future result values from resolve/asyncResolve as well as from getFailoverForProxy.</p>\n\n<pre class=\"eval\">nsIProxyInfo getFailoverForProxy(\n  in nsIProxyInfo aProxyInfo,\n  in nsIURI aURI,\n  in nsresult aReason\n);\n</pre>\n\n<h6 id=\"Parameters_4\">Parameters</h6>\n\n<dl>\n <dt><code>aProxyInfo</code></dt>\n <dd>The proxy that was unavailable.</dd>\n <dt><code>aURI</code></dt>\n <dd>The URI that was originally passed to resolve/asyncResolve.</dd>\n <dt><code>aReason</code></dt>\n <dd>The error code corresponding to the proxy failure. This value may be used to tune the delay before this proxy is used again. The proxy that was unavailable.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>An <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProxyInfo\" title=\"\">nsIProxyInfo</a></code> object or null for a direct connection.</p>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>NS_ERROR_NOT_AVAILABLE</code></dt>\n <dd>If there is no alternate proxy available.</dd>\n</dl>\n\n<h3 id=\"registerFilter()\">registerFilter()</h3>\n\n<p>This method may be used to register a proxy filter instance. Each proxy filter is registered with an associated position that determines the order in which the filters are applied (starting from position 0). When resolve/asyncResolve is called, it generates a list of proxies for the given URI, and then it applies the proxy filters. The filters have the opportunity to modify the list of proxies.</p>\n\n<p>If two filters register for the same position, then the filters will be visited in the order in which they were registered. If the filter is already registered, then its position will be updated.</p>\n\n<p>After filters have been run, any disabled or disallowed proxies will be removed from the list. A proxy is disabled if it had previously failed-over to another proxy (see <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProtocolProxyService#getFailoverForProxy()\">getFailoverForProxy()</a></code>). A proxy is disallowed, for example, if it is a HTTP proxy and the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProtocolHandler\" title=\"\">nsIProtocolHandler</a></code> for the queried URI does not permit proxying via HTTP.</p>\n\n<p>If a <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProtocolHandler\" title=\"\">nsIProtocolHandler</a></code> disallows all proxying, then filters will never have a chance to intercept proxy requests for such URLs.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong>Â It is possible to construct filters that compete with one another in undesirable ways. This API does not attempt to protect against such problems. It is recommended that any extensions that choose to call this method make their position value configurable at runtime (perhaps via the preferences service).</div><p></p>\n\n<pre class=\"eval\">void registerFilter(\n  in nsIProtocolProxyFilter aFilter,\n  in unsigned long aPosition\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aFilter</code></dt>\n <dd>The <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProtocolProxyFilter\" title=\"\">nsIProtocolProxyFilter</a></code> instance to be registered.</dd>\n <dt><code>aPosition</code></dt>\n <dd>The position of the filter.</dd>\n</dl>\n\n<h3 id=\"unregisterFilter()\">unregisterFilter()</h3>\n\n<p>This method may be used to unregister a proxy filter instance. All filters will be automatically unregistered at XPCOM shutdown.</p>\n\n<pre class=\"eval\">void unregisterFilter(\n  in nsIProtocolProxyFilter aFilter\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aFilter</code></dt>\n <dd>The <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProtocolProxyFilter\" title=\"\">nsIProtocolProxyFilter</a></code> instance to be unregistered.</dd>\n</dl>\n\n<h2 id=\"See_also\" name=\"See_also\">See also</h2>\n\n<ul>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProxyInfo\" title=\"\">nsIProxyInfo</a></code></li>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProtocolProxyFilter\" title=\"\">nsIProtocolProxyFilter</a></code></li>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIProxiedProtocolHandler\" title=\"\">nsIProxiedProtocolHandler</a></code></li>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsICancelable\" title=\"\">nsICancelable</a></code></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/grig\">grig</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/dbruant\">dbruant</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/TheBits\">TheBits</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/lovelywcm\">lovelywcm</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Smi\">Smi</a>",
    "title": "nsIProtocolProxyService"
}