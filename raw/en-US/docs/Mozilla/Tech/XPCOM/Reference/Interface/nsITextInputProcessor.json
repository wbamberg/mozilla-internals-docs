{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/dom/interfaces/base/nsITextInputProcessor.idl\" rel=\"custom\">dom/interfaces/base/nsITextInputProcessor.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThis interface is a text input events synthesizer and manages its composition and modifier state\n</span>\n\n  <div style=\"height: 42px; position: relative; padding: 2px; width: auto;\">\n\n  <div style=\"top: 22px; font-size: 11px; position: absolute;\">1.0</div>\n  \n  <div style=\"top: 22px; font-size: 11px; position: absolute; left: 0px; text-align: right; float: right; width: 100%;\">66</div>\n  \n  <div style=\"height: 8px; top: 16px; background: #dd0000; left: 0px; position: absolute; width: 60%;\"></div>\n  \n<div style=\"height: 8px; top: 16px; left: 60%; background: #00dd00; position: absolute; width: 40%;\" title=\"Introduced in Gecko 38 (Firefox 38 / Thunderbird 38 / SeaMonkey 2.35)\"></div>\n\n<div style=\"top: 0px; font-size: 11px; position: absolute; left: 0px; text-align: right; float: right; width: 60%;\">Introduced</div>\n<div style=\"top: 22px; font-size: 11px; position: absolute; left: 0px; text-align: right; float: right; width: 60%;\">Gecko 38</div>\n\n</div>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 38.0 (Firefox 38.0 / Thunderbird 38.0 / SeaMonkey 2.35)</span></div>\n</div><p></p>\n\n<p>The motivation of this interface is to provide better API than nsIDOMWindowUtils to dispatch key events and create, modify, and commit composition in higher level. nsIDOMWindowUtils has provided the methods which dispatched keyboard events and composition events almost directly. Therefore they sometimes caused impossible scenarios in automated tests (what's tested with such events?) and JS-IME and/or JS-Keyboard on Firefox OS or add-ons may dispatch events with wrong rules. For solving that issue, methods of this interface have been designed for performing a key operation or representing a change of composition state.</p>\n\n<p>For example, the implementation of this interface manages modifier state and composition state, initializes DOM events from minimum information, and doesn't dispatch some events if they are not necessary. This means that even when Gecko changes the DOM event behavior, it may not be necessary that the users of this interface need to be updated, i.e., the implementation of this class can be a cushion from the impact of Gecko's change.</p>\n\n<p>You can create an instance of this interface with the following code:</p>\n\n<pre class=\"brush: js\">var TIP = Components.classes[\"@mozilla.org/text-input-processor;1\"].\n            createInstance(Components.interfaces.nsITextInputProcessor);\n</pre>\n\n<p>Next, you need to get the rights to create composition or dispatch keyboard events with <a href=\"#beginInputTransaction()\">beginInputTransaction()</a> or <a href=\"#beginInputTransactionForTests()\">beginInputTransactionForTests()</a>:</p>\n\n<pre class=\"brush: js\">if (!TIP.beginInputTransaction(window, callback)) {\n  return;\n}\n</pre>\n\n<p>If <a href=\"#beginInputTransaction()\">beginInputTransaction()</a> or <a href=\"#beginInputTransactionForTests()\">beginInputTransactionForTests()</a> returns false, it means that another instance of nsITextInputProcessor has composition on the window or is dispatching an event. In this case, other instances cannot create composition nor dispatch keyboard events on the window.</p>\n\n<p>The second argument, callback, should be an object which implements <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITextInputProcessorCallback\" title=\"\">nsITextInputProcessorCallback</a></code> or just a function which is the same as nsITextInputProcessorCallback.onNotify(). See the document of <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITextInputProcessorCallback\" title=\"\">nsITextInputProcessorCallback</a></code> for the detail.</p>\n\n<p>Next, you can set the composition string or dispatch keyboard events.</p>\n\n<p>The following example sets \"foo-bar-buzz\", \"bar\" is selected clause to convert, and caret position is the end of the selected clause:</p>\n\n<pre class=\"brush: js\">// First, sets composition string.\nTIP.setPendingCompositionString(\"foo-bar-buzz\");\n// Next, append clauses.\nTIP.appendClauseToPendingComposition(\"foo-\".length,  TIP.ATTR_CONVERTED_CLAUSE);\nTIP.appendClauseToPendingComposition(\"bar\".length,   TIP.ATTR_SELECTED_CLAUSE);\nTIP.appendClauseToPendingComposition(\"-buzz\".length, TIP.ATTR_CONVERTED_CLAUSE);\n// Then, sets the caret if you need\nTIP.setCaretInPendingComposition(\"foo-bar\".length);\n// Finally, flush the pending composition on the focused editor\nif (!TIP.flushPendingComposition()) {\n  return; // Composition is not started\n}\n</pre>\n\n<p>If there is no composition, <a href=\"#flushPendingComposition()\">flushPendingComposition()</a> starts composition with dispatching <code><a href=\"/en-US/docs/Web/Events/compositionstart\" title=\"/en-US/docs/Web/Events/compositionstart\">compositionstart</a></code> event automatically. However, if the event is consumed by web content, it returns false. In this case, composition isn't created. So, JS-IME shouldn't continue to compose the string.</p>\n\n<p>Finally, when you commit the composition with the last composition string, just do this:</p>\n\n<pre class=\"brush: js\">TIP.commitComposition();\n</pre>\n\n<p>When you commit composition with specific string, specify commit string with its argument:</p>\n\n<pre class=\"brush: js\">TIP.commitCompositionWith(\"foo-BAR-buzz\");</pre>\n\n<p>When you cancel composition, just do this:</p>\n\n<pre class=\"brush: js\">TIP.cancelComposition();</pre>\n\n<p>When you dispatch keydown event (and one or more keypress events), just do this:</p>\n\n<pre class=\"brush: js\">var keyEvent =\n  new KeyboardEvent(\"\",                        // type attribute value should be empty.\n    { key: \"Enter\",                            // Required.\n      code: \"Enter\",                           // Optional.\n      keyCode: KeyboardEvent.DOM_VK_RETURN,    // Required if printable key, but optional if non-printable key.\n      location: KeyboardEvent.DOM_VK_STANDARD, // Optional, may be computed from code attribute value.\n      repeat: false,                           // Optional.\n    });                                        // The other attributes are always ignored.\nvar doDefault = TIP.keydown(keyEvent);\n</pre>\n\n<p>When you dispatch keyup event, just do this:</p>\n\n<pre class=\"brush: js\">var keyEvent =\n  new KeyboardEvent(\"\", { key: \"a\", code: \"KeyA\", keyCode: KeyboardEvent.DOM_VK_A });\nvar doDefault = TIP.keyup(keyEvent);\n</pre>\n\n<p><code>startComposition()</code>, <code>flushPendingComposition()</code>, <code>commitComposition()</code>, <code>commitCompositionWith()</code>, and <code>cancelComposition()</code> can take a KeyboardEvent which causes modifying the composition state.Â  Specifying a keyboard event is strongly recommended if the <code>TextInputProcessor</code> emulates input from keyboard. For example:</p>\n\n<pre class=\"brush: js\">TIP.setPendingCompositionString(\"a\");\nTIP.appendClauseToPendingComposition(\"a\".length, TIP.ATTR_RAW_CLAUSE);\nTIP.setCaretPosition(\"a\".length);\n\n// This means that the first composition character is inputted by a keypress of \"a\" key.\nvar AKeyEvent =\n  new KeyboardEvent(\"\", { key: \"a\", code: \"KeyA\", keyCode: KeyboardEvent.DOM_VK_A });\nTIP.flushPendingComposition(AKeyEvent);\n\n// Pressing shift key for next input.\nvar shiftKeyEvent =\n  new KeyboardEvent(\"\", { key: \"Shift\", code: \"ShiftLeft\", keyCode: KeyboardEvent.DOM_VK_SHIFT });\nTIP.keydown(shiftKeyEvent);\n\nTIP.setPendingCompositionString(\"aB\");\nTIP.appendClauseToPendingComposition(\"aB\".length, TIP.ATTR_RAW_CLAUSE);\nTIP.setCaretPosition(\"aB\".length);\n\n// This means that the second composition character is inputted by a keypress of \"b\" key during left shift key is down.\nvar BKeyEvent = new KeyboardEvent(\"\", { key: \"b\", code: \"KeyB\", keyCode: KeyboardEvent.DOM_VK_B });\nTIP.flushPendingComposition(BKeyEvent);\n\n// Releasing shift key\nTIP.keyup(shiftKeyEvent);\n\nTIP.setPendingCompositionString(\"AB\");\nTIP.appendClauseToPendingComposition(\"AB\".length, TIP.ATTR_SELECTED_CLAUSE);\nTIP.setCaretPosition(\"AB\".length);\n\n// This means that the composition string is converted by a keypress of \"Convert\" key.\nvar convertKeyEvent =\n  new KeyboardEvent(\"\", { key: \"Convert\", code: \"Convert\" });\nTIP.flushPendingComposition(convertKeyEvent);\n\n// This means that the composition is committed by a keypress of \"Enter\" key.\nvar enterKeyEvent =\n  new KeyboardEvent(\"\", { key: \"Enter\", code: \"Enter\" });\nTIP.commitComposition(enterKeyEvent);\n</pre>\n\n<p>Note that specifying keyboard event<em> </em>may <strong>not</strong> be dispatched during composition due to conforming to the specification of DOM Level 3 Events. However, it's the best for every TextInputProcessor user to specify KeyboardEvent every time because when Gecko will change the behavior of keyboard events during composition, TextInputProcessor must not need to change for the new behavior in most cases.</p>\n\n<h2 id=\"Method_overview\">Method overview</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code>void <a href=\"#appendClauseToPendingComposition()\">appendClauseToPendingComposition</a>(in unsigned long aLength, in unsigned long aAttribute);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#beginInputTransaction()\">beginInputTransaction</a>(in nsIDOMWindow aWindow, in nsITextInputProcessorCallback aCallback);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#beginInputTransactionForTests()\">beginInputTransactionForTests</a>(in nsIDOMWindow aWindow, [optional] in nsITextInputProcessorCallback aCallback);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#cancelComposition()\">cancelComposition</a>([optional] in nsIDOMKeyEvent aDOMKeyEvent, [optional] in unsigned long aKeyFlags);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#commitComposition()\">commitComposition</a>([optional] in nsIDOMKeyEvent aDOMKeyEvent, [optional] in unsigned long aKeyFlags);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#commitCompositionWith()\">commitCompositionWith</a>(in DOMString aCommitString, [optional] in nsIDOMKeyEvent aDOMKeyEvent, [optional] in unsigned long aKeyFlags);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#flushPendingComposition()\">flushPendingComposition</a>([optional] in nsIDOMKeyEvent aDOMKeyEvent, [optional] in unsigned long aKeyFlags);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#getModifierState()\">getModifierState</a>(in DOMString aModifierKeyName);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#keydown()\">keydown</a>([optional] in nsIDOMKeyEvent aDOMKeyEvent, [optional] in unsigned long aKeyFlags);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#keyup()\">keyup</a>([optional] in nsIDOMKeyEvent aDOMKeyEvent, [optional] in unsigned long aKeyFlags);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setCaretInPendingComposition()\">setCaretInPendingComposition</a>(in unsigned long aOffset);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setPendingCompositionString()\">setPendingCompositionString</a>(in DOMString aString);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#shareModifierStateOf()\">shareModifierStateOf</a>(in nsITextInputProcessor aOther);</code></td>\n  </tr>\n  <tr>\n   <td>boolean <code><a href=\"#startComposition()\">startComposition</a></code>(<code>[optional] in nsIDOMKeyEvent aDOMKeyEvent, [optional] in unsigned long aKeyFlags</code>);</td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Attributes\">Attributes</h2>\n\n<table class=\"standard-table\">\n <thead>\n  <tr>\n   <th scope=\"col\">Attribute</th>\n   <th scope=\"col\">Type</th>\n   <th scope=\"col\">Description</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td>hasComposition</td>\n   <td>boolean</td>\n   <td>Whether the instance has composition or not. true if it has composition. <strong>Read only</strong>.</td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Constants\">Constants</h2>\n\n<table class=\"standard-table\">\n <thead>\n  <tr>\n   <th scope=\"col\">Constant</th>\n   <th scope=\"col\">Value</th>\n   <th scope=\"col\">Description</th>\n  </tr>\n </thead>\n <tbody>\n  <tr>\n   <td><code>ATTR_RAW_CLAUSE</code></td>\n   <td><code>0x02</code></td>\n   <td>A clause attribute. This means that the clause is not converted, i.e., raw text of user input.</td>\n  </tr>\n  <tr>\n   <td><code>ATTR_RAW_SELECTED_CLAUSE</code></td>\n   <td><code>0x03</code></td>\n   <td>A clause attribute but this is typically not used. This means that the clause is not converted but selected to convert or modify.</td>\n  </tr>\n  <tr>\n   <td><code>ATTR_CONVERTED_CLAUSE</code></td>\n   <td><code>0x04</code></td>\n   <td>A clause attribute. This means that the clause is already converted.</td>\n  </tr>\n  <tr>\n   <td><code>ATTR_SELECTED_CLAUSE</code></td>\n   <td><code>0x05</code></td>\n   <td>A clause attribute. This means that the clause is already converted and is selected to convert.</td>\n  </tr>\n  <tr>\n   <td><code>KEY_DEFAULT_PREVENTED</code></td>\n   <td><code>0x00000001</code></td>\n   <td>One of <code>aKeyFlags</code>. When this is specified, <code>defaultPrevented</code> attribute of dispatching keyboard events true. This is not useful in usual cases. This may be useful for automated tests.</td>\n  </tr>\n  <tr>\n   <td><code>KEY_NON_PRINTABLE_KEY</code></td>\n   <td><code>0x00000002</code></td>\n   <td>One of <code>aKeyFlags</code>. When you attempt to dispatch a non-printable key's events, it's recommented this be specified. If the <code>key</code> attribute value is not a registered key name, this flag causes throwing an exception. Therefore, this can prevent non-printable key events to cause dispatching as printable keyboard events and you can detect the registered key name change from the thrown exception.</td>\n  </tr>\n  <tr>\n   <td><code>KEY_FORCE_PRINTABLE_KEY</code></td>\n   <td><code>0x00000004</code></td>\n   <td>One of <code>aKeyFlags</code>. When you attempt to dispatch a printable key's event whose <code>key</code> attribute value (i.e., inputting string) will match with a registered key name, this flag makes dispatched keyboard events printable keyboard events forcibly.Â  For example, if a key causes inputting \"Enter\" as text, this flag is necessary. If this flag is not specified in such case, non-printable keyboard events will be dispatched.</td>\n  </tr>\n  <tr>\n   <td><code>KEY_KEEP_KEY_LOCATION_STANDARD</code></td>\n   <td><code>0x00000008</code></td>\n   <td>One of <code>aKeyFlags</code>. The <code>location</code> attribute value of dispatching keyboard events is computed automatically if the attribute isn't initialized or initialized with 0. For the latter case, you may not want <code>TextInputProcessor</code> to compute <code>location</code> attribute value. In this case, you can suppress the computation with this flag. If this is specified with non-zero <code>location</code> attribute value, this causes throwing an exception since it doesn't make sense.</td>\n  </tr>\n  <tr>\n   <td><code>KEY_KEEP_KEYCODE_ZERO</code></td>\n   <td><code>0x00000010</code></td>\n   <td>One of <code>aKeyFlags</code>. The <code>keyCode</code> attribute value of dispatching printable keyboard events is computed from key value automatically if the attribute isn't initialized or initialized with 0. For the latter case, you may not want <code>TextInputProcessor</code> to compute <code>keyCode</code> attribute value. In this case, you can suppress the computation with this flag. If this is specified with non-zero <code>keyCode</code> attribute value, this causes throwing an excepction since it doesn't make sense.</td>\n  </tr>\n  <tr>\n   <td><code>KEY_DONT_DISPATCH_MODIFIER_KEY_EVENT</code></td>\n   <td><code>0x00000020</code></td>\n   <td>One of <code>aKeyFlags</code>. <code>TextInputProcessor</code> manages modifier state with every modifier key events. In other words, when you need to specify modifier key state of dispatching keyboard events, you need to dispatch modifier key events before and after that. However, especially for keeping compatibility with legacy API, you may want to modify only the modifier state of a <code>TextInputProcessor</code> instance. In this case, you can suppress <code>TextInputProcessor</code> dispatches modifier key events with this flag. If this is specified for non-modifier key, it causes throwing an exception since it doesn't make sense.</td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Methods\">Methods</h2>\n\n<p></p><h3 id=\"appendClauseToPendingComposition()\">appendClauseToPendingComposition()</h3><p></p>\n\n<p>Appends a clause to the pending composition string which is set by <a href=\"#setPendingCompositionString()\">setPendingCompositionString()</a>. Sum of aLength must be same as the length of <code>aString</code> of <a href=\"#setPendingCompositionString()\">setPendingCompositionString()</a>.</p>\n\n<pre>void appendClauseToPendingComposition(in unsigned long aLength,\n                                      in unsigned long aAttribute);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt>aLength</dt>\n <dd>The length of appending clause.</dd>\n <dt>aAttribute</dt>\n <dd>The attribute of appending clause. Must be one of <code>ATTR_*</code> constants.</dd>\n</dl>\n\n<p></p><h3 id=\"beginInputTransaction()\">beginInputTransaction()</h3><p></p>\n\n<p>This must be called before starting composition every time. This tries to get the rights to create composition on the window. If no other instance is composing on the window, this associates the instance with the window and registers the callback to the instance.</p>\n\n<pre>boolean beginInputTransaction(in nsIDOMWindow aWindow,\n                              in nsITextInputProcessorCallback aCallback);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt>aWindow</dt>\n <dd>The DOM window which has focused editor. This must not be null.</dd>\n <dt>aCallback</dt>\n <dd>The callback object. This must not be null. See the document of <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITextInputProcessorCallback\" title=\"\">nsITextInputProcessorCallback</a></code> for the details.</dd>\n</dl>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Return value</h6>\n\n<p>Returns true if the instance could create composition. Otherwise, false.</p>\n\n<p></p><h3 id=\"beginInputTransactionForTests()\">beginInputTransactionForTests()</h3><p></p>\n\n<p>This must be called before starting composition for automated tests every time. This tries to get the rights to create composition on the window. If no other instance is composing on the window, this associates the instance with the window and registers the callback to the instance if it's specified.</p>\n\n<pre>boolean beginInputTransactionForTests(in nsIDOMWindow aWindow,\n                                      in nsITextInputProcessorCallback aCallback Optional);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt>aWindow</dt>\n <dd>The DOM window which has focused editor. This must not be null.</dd>\n <dt>aCallback</dt>\n <dd>The callback object. If this is not specified, requests to IMEs are handled automatically. See the document of <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITextInputProcessorCallback\" title=\"\">nsITextInputProcessorCallback</a></code> for the details.</dd>\n</dl>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Return value</h6>\n\n<p>Returns true if the instance could create composition. Otherwise, false.</p>\n\n<p></p><h3 id=\"cancelComposition()\">cancelComposition()</h3><p></p>\n\n<p>Cancels the composition which was created by the instance. If you call this when there is no composition, this throws an exception.</p>\n\n<pre>void cancelComposition(in nsIDOMKeyEvent aDOMKeyEvent Optional,\n                       in unsigned long aKeyFlags Optional);</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt>aDOMKeyEvent <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n <dd>When the canceling composition is caused by a key operation, this should be specified. If this is specified, keyboard events <strong>may</strong> be dispatched when Gecko thinks that they should be. See also <a href=\"#How_to_create_KeyboardEvent_instance_for_nsITextInputProcessor\" rel=\"internal\">How to create KeyboardEvent instance for nsITextInputProcessor</a>.</dd>\n <dt>aKeyFlags <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n <dd>See <code>KEY_*</code> constants. If this is not specified, the value is assumed as 0.</dd>\n</dl>\n\n<p></p><h3 id=\"commitComposition()\">commitComposition()</h3><p></p>\n\n<p>Commits the composition with the last composition string.Â If you call this when there is no composition, this throws an exception.</p>\n\n<pre>void commitComposition(in nsIDOMKeyEvent aDOMKeyEvent Optional,\n                       in unsigned long aKeyFlags Optional);</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt>aDOMKeyEvent <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n <dd>When the committing composition is caused by a key operation, this should be specified. If this is specified, keyboard events <strong>may</strong> be dispatched when Gecko thinks that they should be. See also <a href=\"#How_to_create_KeyboardEvent_instance_for_nsITextInputProcessor\" rel=\"internal\">How to create KeyboardEvent instance for nsITextInputProcessor</a>.</dd>\n <dt>aKeyFlags <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n <dd>See <code>KEY_*</code> constants. If this is not specified, the value is assumed as 0.</dd>\n</dl>\n\n<p></p><h3 id=\"commitCompositionWith()\">commitCompositionWith()</h3><p></p>\n\n<p>Commits the composition with the specified string. If you call this when there is no composition, this starts composition automatically and commits the composition with specified string immediately.</p>\n\n<pre>boolean commitCompositionWith(in DOMString aCommitString,\n                              in nsIDOMKeyEvent aDOMKeyEvent Optional,\n                              in unsigned long aKeyFlags aOptional);</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt>aCommitString</dt>\n <dd>The commit string.</dd>\n <dt>aDOMKeyEvent <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n <dd>When the committing composition is caused by a key operation, this should be specified. If this is specified, keyboard events <strong>may</strong> be dispatched when Gecko thinks that they should be. See also <a href=\"#How_to_create_KeyboardEvent_instance_for_nsITextInputProcessor\" rel=\"internal\">How to create KeyboardEvent instance for nsITextInputProcessor</a>.</dd>\n <dt>aKeyFlags <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n <dd>See <code>KEY_*</code> constants. If this is not specified, the value is assumed as 0.</dd>\n</dl>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Return value</h6>\n\n<p>If this couldn't insert the string when there is no composition (e.g., <code><a href=\"/en-US/docs/Web/Events/compositionstart\" title=\"/en-US/docs/Web/Events/compositionstart\">compositionstart</a></code> is consumed by the web contents), it returns false. The other cases return true.</p>\n\n<p></p><h3 id=\"flushPendingComposition()\">flushPendingComposition()</h3><p></p>\n\n<p>Flushes the pending composition which are set by <a href=\"#setPendingCompositionString()\">setPendingCompositionString()</a>, <a href=\"#appendClauseToPendingComposition()\">appendClauseToPendingComposition()</a>, and <a href=\"#setCaretInPendingComposition()\">setCaretInPendingComposition()</a> on the focused editor.</p>\n\n<p>If <a href=\"#appendClauseToPendingComposition()\">appendClauseToPendingComposition()</a> and/or <a href=\"#setCaretInPendingComposition()\">setCaretInPendingComposition()</a> are not called properly, e.g., sum of aLength of calls of <a href=\"#appendClauseToPendingComposition()\">appendClauseToPendingComposition()</a> is not same as composition string set by <a href=\"#setPendingCompositionString()\">setPendingCompositionString()</a>, this throws an exception.</p>\n\n<p>After a call of this, the pending composition string information is cleared. Therefore, you can set new composition string continuously.</p>\n\n<pre>boolean flushPendingComposition(in nsIDOMKeyEvent aDOMKeyEvent Optional,\n                                in unsigned long aKeyFlags Optional);</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt>aDOMKeyEvent <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n <dd>When the modifying composition is caused by a key operation, this should be specified. If this is specified, keyboard events <strong>may</strong> be dispatched when Gecko thinks that they should be. See also <a href=\"#How_to_create_KeyboardEvent_instance_for_nsITextInputProcessor\" rel=\"internal\">How to create KeyboardEvent instance for nsITextInputProcessor</a>.</dd>\n <dt>aKeyFlags <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n <dd>See <code>KEY_*</code> constants. If this is not specified, the value is assumed as 0.</dd>\n</dl>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Return value</h6>\n\n<p>When there is no composition which was created by the instance and if <code><a href=\"/en-US/docs/Web/Events/compositionstart\" title=\"/en-US/docs/Web/Events/compositionstart\">compositionstart</a></code> is consumed by web contents, i.e., failed to start new composition, this returns false. Otherwise, it returns true.</p>\n\n<p></p><h3 id=\"getModifierState()\">getModifierState()</h3><p></p>\n\n<p>Getting modifier state. This is similar to <a href=\"/en-US/docs/Web/API/KeyboardEvent/getModifierState\">KeyboardEvent.getModifierState() [en-US]</a>. The result is the modifier state of managed by the instance.</p>\n\n<pre>boolean getModifierState(in DOMString aModifierKeyName);</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt>aModifierKeyName</dt>\n <dd>A modifier key name which is defined by <a href=\"http://www.w3.org/TR/DOM-Level-3-Events-key/\">DOM Level 3 KeyboardEvents key Values</a>.</dd>\n</dl>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Return value</h6>\n\n<p>true if the modifier state is active. Otherwise, false.</p>\n\n<p></p><h3 id=\"keydown()\">keydown()</h3><p></p>\n\n<p>Dispatches a keydown event and some keypress event when all of or some of them are necessary.</p>\n\n<p>When this dispatches a normal modifier key event, the <code>TextInputProcessor</code> instance activates the modifier state and stores its <code>code</code> attribute value.</p>\n\n<p>When this dispatches a lockable modifier key event, the <code>TextInputProcessor</code> instance activates the modifier state or If the modifier state is activated with the same <code>code</code> attribute value, the lockable modifier state is inactivated.</p>\n\n<pre>boolean keydown(in nsIDOMKeyEvent aDOMKeyEvent,\n                in unsigned long aKeyFlags Optional);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt>aDOMKeyEvent</dt>\n <dd>The KeyboardEvent which is initialized with its constructor. See also <a href=\"#How_to_create_KeyboardEvent_instance_for_nsITextInputProcessor\" rel=\"internal\">How to create KeyboardEvent instance for nsITextInputProcessor</a>.</dd>\n <dt>aKeyFlags <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n <dd>See <code>KEY_*</code> constants. If this is not specified, the value is assumed as 0.</dd>\n</dl>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Return value</h6>\n\n<p>true if neither dispatched keydown event nor keypress events are not consumed by a call of <code>preventDefault()</code>.</p>\n\n<p></p><h3 id=\"keyup()\">keyup()</h3><p></p>\n\n<p>Dispatches a keyup event when it's necessary.</p>\n\n<p>When this dispatches a normal modifier key event, the <code>TextInputProcessor</code> instance inactivates the modifier state if it was activated by same <code>code</code> attribute.</p>\n\n<pre>boolean keyup(in nsIDOMKeyEvent aDOMKeyEvent,\n              in unsigned long aKeyFlags Optional);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt>aDOMKeyEvent</dt>\n <dd>The KeyboardEvent which is initialized with its constructor. See also <a href=\"#How_to_create_KeyboardEvent_instance_for_nsITextInputProcessor\" rel=\"internal\">How to create KeyboardEvent instance for nsITextInputProcessor</a>.</dd>\n <dt>aKeyFlags <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n <dd>See <code>KEY_*</code> constants. If this is not specified, the value is assumed as 0.</dd>\n</dl>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Return value</h6>\n\n<p>true if keyup event isn't consumed by a call of <code>preventDefault()</code>.</p>\n\n<p></p><h3 id=\"setCaretInPendingComposition()\">setCaretInPendingComposition()</h3><p></p>\n\n<p>Sets caret position in the composition string set by <a href=\"#setPendingCompositionString()\">setPendingCompositionString()</a>. This is optional, i.e., you may not call this before <a href=\"#flushPendingComposition()\">flushPendingComposition()</a>.</p>\n\n<pre>void setCaretInPendingComposition(in unsigned long aOffset);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt>aOffset</dt>\n <dd>Caret offset in the composition string. This value must be between 0 and the length of aString of <a href=\"#setPendingCompositionString()\">setPendingCompositionString().</a></dd>\n</dl>\n\n<p></p><h3 id=\"setPendingCompositionString()\">setPendingCompositionString()</h3><p></p>\n\n<p>Sets pending composition string. This must be called before every call of <a href=\"#flushPendingComposition()\">flushPendingComposition()</a>.</p>\n\n<pre>void setPendingCompositionString(in AString aString);</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt>aString</dt>\n <dd>New pending composition string.</dd>\n</dl>\n\n<p></p><h3 id=\"shareModifierStateOf()\">shareModifierStateOf()</h3><p></p>\n\n<p>Shares modifier state of another instance. After sharing modifier state between two or more instances, modifying modifier state on of this affects other instances. Therefore, this is useful if you want to create <code>TextInputProcessor</code> instance in every DOM window or something. See also <a href=\"#Sharing_modifier_state_during_multiple_instances\" rel=\"internal\">Sharing modifier state during multiple instances</a>.</p>\n\n<pre>void shareModifierStateOf(in nsITextInputProcessor aOther);</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt>aOther</dt>\n <dd>Another instance. If this is <code>null</code>, the instance stops sharing modifier state with other instances and clears all modifier state.</dd>\n</dl>\n\n<p></p><h3 id=\"startComposition()\">startComposition()</h3><p></p>\n\n<p>This starts composition explicitly. This is useful if your IME doesn't generate composing string but provides some UI to select commit string.</p>\n\n<p>If the instance has a composition already, this throws an exception.</p>\n\n<pre>boolean startComposition(in nsIDOMKeyEvent aDOMKeyEvent Optional,\n                         in unsigned long aKeyFlags Optional);</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt>aDOMKeyEvent <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n <dd>When the starting composition is caused by a key operation, this should be specified. If this is specified, keyboard events <strong>may</strong> be dispatched when Gecko thinks that they should be. See also <a href=\"#How_to_create_KeyboardEvent_instance_for_nsITextInputProcessor\" rel=\"internal\">How to create KeyboardEvent instance for nsITextInputProcessor</a>.</dd>\n <dt>aKeyFlags <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n <dd>See <code>KEY_*</code> constants. If this is not specified, the value is assumed as 0.</dd>\n</dl>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Return value</h6>\n\n<p>When there is no composition which was created by the instance and if <code><a href=\"/en-US/docs/Web/Events/compositionstart\" title=\"/en-US/docs/Web/Events/compositionstart\">compositionstart</a></code> is consumed by web contents, i.e., failed to start new composition, this returns false. Otherwise, returns true.</p>\n\n<h2 id=\"How_to_create_KeyboardEvent_instance_for_nsITextInputProcessor\">How to create KeyboardEvent instance for nsITextInputProcessor</h2>\n\n<p>This section describes how to create <code>KeyboardEvent</code> for arguments of some methods of <code>nsITextInputProcessor</code>.</p>\n\n<p>You should/can specify following attribute values at creating a <code>KeyboardEvent</code> instance. Other attributes are always ignored. Especially, please note that modifier key states such as <code>shiftKey</code> are also ignored because each instance of <code>nsITextInputProcessor</code> manages modifier state which is modified when <code>keydown()</code> or <code>keyup()</code> is called with modifier key event.</p>\n\n<dl>\n <dt><code>type</code></dt>\n <dd>When you use the KeyboardEvent instance for a call of either keydown() or keyup(), this value should be empty string.</dd>\n <dd>Otherwise, when you use the KeyboardEvent instance for a call of <code>startComposition()</code>, <code>flushPendingComposition()</code>, <code>commitComposition()</code>, <code>commitCompositionWith()</code>, or <code>cancelComposition()</code>, you can specify <code>\"keydown\"</code> or empty string. If <code>\"keydown\"</code> is specified, the methods don't dispatch the <code>\"keyup\"</code> event.</dd>\n <dt><code>key</code></dt>\n <dd><strong>Required</strong>.</dd>\n <dd>When you dispatch printable key events, this value should be the text to be inputted. Even if the key event shouldn't cause text input actually, e.g., <kbd>Ctrl</kbd> key is pressed, this value should be the text when such modifiers causing suppressing text input are not pressed. For example, <kbd>Ctrl</kbd>+<kbd>C</kbd> should be <code>\"c\"</code>, <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>C</kbd>should be <code>\"C\"</code>, <kbd>AltGr</kbd>+<kbd>C</kbd> may be <code>\"Â©\"</code> and then, <kbd>Ctrl</kbd>+<kbd>AltGr</kbd>+<kbd>C</kbd> should be <code>\"Â©\"</code>.</dd>\n <dd>When you dispatch non-printable key events, this value should be one of the key names defined by <a href=\"http://www.w3.org/TR/DOM-Level-3-Events-key/\">DOM Level 3 KeyboardEvent key Values</a> or <a href=\"http://mxr.mozilla.org/mozilla-central/source/dom/events/KeyNameList.h#28\">registered by Gecko with \"Moz\" prefix</a>.</dd>\n <dt><code>code</code></dt>\n <dd><strong>Optional</strong>, but should be specified when you emulate PC keyboard operation.</dd>\n <dd>The value should be one of the physical key names defined by <a href=\"http://www.w3.org/TR/DOM-Level-3-Events-code/\">DOM Level 3 KeyboardEvent code Values</a>.</dd>\n <dt><code>keyCode</code></dt>\n <dd><strong>Optional</strong>, but should be specified when you dispatch printable key events.</dd>\n <dd>When you emulate PC keyboard, deciding the value may be complicated. Although the rules to decide the <code>keyCode</code> value are different on each web browser, you should use same rules as Gecko because your events are dispatched on Gecko. Basically, Gecko decides a <code>keyCode</code> value for a printable key from ASCII character which is inputted with a far simpler modifier state. See <a href=\"/en-US/docs/Web/API/KeyboardEvent/keyCode#Printable_keys_in_standard_position\">\"Printable keys in standard position\" section of KeyboardEvent.keyCode</a> for the strict rules of Gecko.</dd>\n <dd>When you dispatch non-printable key events, preferred <code>keyCode</code> value is computed from <code>key</code> value automatically if you don't initialize this value. But the computation doesn't emulate the mapping of native key event handling completely because it has some special cases depending on platform or selected keyboard layout. Therefore, if you need to emulate PC keyboard on specific platform, you may need to specify this explicitly.</dd>\n <dt><code>location</code></dt>\n <dd><strong>Optional</strong>. It's not recommended to specify this explicitly since this value should be linked with <code>code</code> attribute value. The automatic computation can compute the best value for this.</dd>\n <dt><code>repeat</code></dt>\n <dd><strong>Optional</strong>. When you emulate auto-repeat caused by long keypress, you can specify this true.</dd>\n</dl>\n\n<h2 id=\"Modifier_state_management\">Modifier state management</h2>\n\n<p>This section describes how to manage modifier state.</p>\n\n<p>Each <code>nsITextInputProcessor</code> instance manages modifier state internally and uses the state when it initializes a <code>KeyboardEvent</code> instance before dispatching it.</p>\n\n<h3 id=\"Activating_normal_modifier_state\">Activating normal modifier state</h3>\n\n<p>When <code>keydown()</code> is called with normal modifier key (i.e., not lockable like <kbd>CapsLock</kbd>) event, the instance stores the modifier <code>key</code> and <code>code</code> values. Stored modifier key information means that the modifier is active.</p>\n\n<h3 id=\"Inactivating_normal_modifier_state\">Inactivating normal modifier state</h3>\n\n<p>When <code>keyup()</code> is called with normal modifier key event, the instance checks if there is a stored modifier key whose <code>key</code> attribute and <code>code</code> attribute are the same as the event. If the same modifier key is stored, the instance forgets the key. This means that the modifier is inactivated.</p>\n\n<h3 id=\"Toggling_lockable_modifier_state\">Toggling lockable modifier state</h3>\n\n<p>When <code>keydown()</code> is called with lockable modifier key event, the instance checks if there is a stored modifier key whose <code>key</code> attribute and <code>code</code> attribute are the same as the event. If it's not stored, i.e., the modifier state is inactive, the instance stores the modifier key, otherwise forgets the key.</p>\n\n<h3 id=\"Examples_of_modifier_state_management\">Examples of modifier state management</h3>\n\n<pre class=\"brush: js\">var leftShiftKey =\n  new KeyboardEvent(\"\", { key: \"Shift\", code: \"ShiftLeft\" });\nvar rightShiftKey =\n  new KeyboardEvent(\"\", { key: \"Shift\", code: \"ShiftRight\" });\nvar shiftKeyOnVirtualKeyboard =\n  new KeyboardEvent(\"\", { key: \"Shift\", code: \"\" });\n\nTIP.keydown(leftShiftKey); // This activates Shift state.\nTIP.keydown(rightShiftKey); // This looks like not modifying Shift state.\n\nTIP.keyup(leftShiftKey); // This does NOT inactivate Shift state becaue right shift key is still pressed.\nTIP.keyup(rightShiftKey); // This inactivates Shift state.\n\nTIP.keydown(shiftKeyOnVirtualKeyboard); // This activates Shift state.\nTIP.keydown(leftShiftKey);\n\nTIP.keyup(shiftKeyOnVirtualKeyboard); // This also doesn't inactivate Shift state.\nTIP.keyup(leftShiftKey); // This inactivates Shift state.\n</pre>\n\n<h3 id=\"Examples_of_lockable_modifier_state_management\">Examples of lockable modifier state management</h3>\n\n<pre class=\"brush: js\">var capsLockKey =\n  new KeyboardEvent(\"\", { key: \"CapsLock\", code: \"CapsLock\" });\nvar capsLockKeyOnVirtualKeyboard =\n  new KeyboardEvent(\"\", { key: \"CapsLock\", code: \"\" });\n\nTIP.keydown(capsLockKey); // This activates CapsLock state.\n\nTIP.keyup(capsLockKey); // This doesn't inactivate CapsLock state.\n\nTIP.keyup(capsLockKeyOnVirtualKeyboard); // This also doesn't inactivate CapsLock state.\n\nTIP.keydown(capsLockKey); // This inactivates CapsLock state.\n\nTIP.keyup(capsLockKey); // This doesn't modify CapsLock state.\n</pre>\n\n<h3 id=\"Sharing_modifier_state_during_multiple_instances\">Sharing modifier state during multiple instances</h3>\n\n<p><code>shareModifierStateOf()</code> allows to share modifier state between multiple instances:</p>\n\n<pre class=\"brush: js\">var shiftKey =\n  new KeyboardEvent(\"\", { key: \"Shift\", code: \"ShiftLeft\" });\nvar ctrlKey =\n  new KeyboardEvent(\"\", { key: \"Control\", code: \"ControlLeft\" });\nvar altKey =\n  new KeyboardEvent(\"\", { key: \"Alt\", code: \"AltLeft\" });\n\nTIP1.keydown(shiftKey); // TIP1's Shift state becomes active.\nTIP1.keyup(shiftKey);\n\nTIP2.keydown(ctrlKey); // TIP2's Control state becomes active.\nTIP2.keyup(ctrlKey);\n\nTIP3.shareModifierStateOf(TIP1); // TIP3 shares modifier state of TIP1. Therefore, TIP3's Shift state is active.\n\nTIP3.keydown(altKey); // TIP1 and TIP3's Alt state becomes active.\nTIP3.keyup(altKey);\n\nTIP3.shareModifierStateOf(TIP2); // TIP3 shares modifier state of TIP2. Therefore, only Control state is active.\n                                 // Shift and Alt state are still active in TIP1.\n\nTIP3.shareModifierStateOf(null); // All TIP3's modifier state becomes deactive.\n                                 // But TIP2's Control state is still active.\n</pre>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/JorisW\">JorisW</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kscarfone\">kscarfone</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Masayuki\">Masayuki</a>",
    "title": "nsITextInputProcessor"
}