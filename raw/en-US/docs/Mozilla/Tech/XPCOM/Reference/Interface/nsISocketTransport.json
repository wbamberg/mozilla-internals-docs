{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/netwerk/base/public/nsISocketTransport.idl\" rel=\"custom\">netwerk/base/public/nsISocketTransport.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThis interface specializes <code>nsITransport</code> for communication over network sockets. It provides methods to open blocking or non-blocking, buffered or unbuffered streams between two end-point in a IP based network.\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITransport\" title=\"\">nsITransport</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 6.0 (Firefox 6.0 / Thunderbird 6.0 / SeaMonkey 2.3)</span></div>\n</div><p></p>\n<div class=\"note\">\n  <strong>Note:</strong> Connection setup is triggered by opening an input or output stream, it does not start on its own. Completion of the connection setup is indicated by a <code>STATUS_CONNECTED_TO</code> notification to the event sink (if set).</div>\n<p>To create an instance, call <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsISocketTransportService#createTransport()\">nsISocketTransportService.createTransport()</a></code></p>\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n<table class=\"standard-table\">\n  <tbody>\n    <tr>\n      <td><code>PRNetAddr <a href=\"#getPeerAddr()\">getPeerAddr</a>();</code> <span class=\"inlineIndicator noscript noscriptInline\" title=\"This method may only be called from C++; don't use it from JavaScript.\">Native code only!</span></td>\n    </tr>\n    <tr>\n      <td><code>PRNetAddr <a href=\"#getSelfAddr()\">getSelfAddr</a>();</code> <span class=\"inlineIndicator noscript noscriptInline\" title=\"This method may only be called from C++; don't use it from JavaScript.\">Native code only!</span></td>\n    </tr>\n    <tr>\n      <td><code>unsigned long <a href=\"#getTimeout()\">getTimeout</a>(in unsigned long aType);</code> </td>\n    </tr>\n    <tr>\n      <td><code>boolean <a href=\"#isAlive()\">isAlive</a>();</code></td>\n    </tr>\n    <tr>\n      <td><code>void <a href=\"#setTimeout()\">setTimeout</a>(in unsigned long aType, in unsigned long aValue);</code> </td>\n    </tr>\n  </tbody>\n</table>\n<h2 id=\"Attributes\" name=\"Attributes\">Attributes</h2>\n<table class=\"standard-table\">\n  <tbody>\n    <tr>\n      <td class=\"header\">Attribute</td>\n      <td class=\"header\">Type</td>\n      <td class=\"header\">Description</td>\n    </tr>\n    <tr>\n      <td><code>connectionFlags</code></td>\n      <td><code><a href=\"/en/unsigned_long\" title=\"en/unsigned long\">unsigned long</a></code></td>\n      <td>A bitmask that can be used to modify underlying behavior of the socket connection. See Connection Flag Constants for more details. </td>\n    </tr>\n    <tr>\n      <td><code>host</code></td>\n      <td><code><a href=\"/en/AUTF8String\" title=\"en/AUTF8String\">AUTF8String</a></code></td>\n      <td>Get the host for the underlying socket connection. <strong>Read only.</strong></td>\n    </tr>\n    <tr>\n      <td><code>port</code></td>\n      <td><code><a href=\"/en/long\" title=\"en/long\">long</a></code></td>\n      <td>Get the port for the underlying socket connection. <strong>Read only.</strong></td>\n    </tr>\n    <tr>\n      <td><code>securityCallbacks</code></td>\n      <td><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInterfaceRequestor\" title=\"\">nsIInterfaceRequestor</a></code></td>\n      <td>\n        <p>Security notification callbacks passed to the secure socket provider via <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISSLSocketControl\" title=\"\">nsISSLSocketControl</a></code> at socket creation time. This object supports <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIBadCertListener2\" title=\"\">nsIBadCertListener2</a></code> and <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISSLErrorListener\" title=\"\">nsISSLErrorListener</a></code> for SSL connections, and possibly other interfaces.</p>\n        <div class=\"blockIndicator note\"><strong>Note:</strong> This attribute cannot be changed once a stream has been opened.</div></td>\n    </tr>\n    <tr>\n      <td><code>securityInfo</code></td>\n      <td><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code></td>\n      <td>\n        <p>Security info object returned from the secure socket provider. This object supports <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISSLSocketControl\" title=\"\">nsISSLSocketControl</a></code>, <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITransportSecurityInfo\" title=\"\">nsITransportSecurityInfo</a></code>, and possibly other interfaces.</p>\n        This attribute is only available once the socket is connected. <strong>Read only.</strong></td>\n    </tr>\n  </tbody>\n</table>\n<h2 id=\"Constants\" name=\"Constants\">Constants</h2>\n<h3 id=\"Timeout_type\" name=\"Timeout_type\">Timeout type</h3>\n<p>This constants are used by <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISocketTransport#getTransport()\">getTransport()</a></code> and <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISocketTransport#setTransport()\">setTransport()</a></code> to specify socket timeouts</p>\n<table class=\"standard-table\">\n  <tbody>\n    <tr>\n      <td class=\"header\">Constant</td>\n      <td class=\"header\">Value</td>\n      <td class=\"header\">Description</td>\n    </tr>\n    <tr>\n      <td><code>TIMEOUT_CONNECT</code></td>\n      <td><code>0</code></td>\n      <td>Connecting timeout. </td>\n    </tr>\n    <tr>\n      <td><code>TIMEOUT_READ_WRITE</code></td>\n      <td><code>1</code></td>\n      <td>Read and write timeouts. </td>\n    </tr>\n  </tbody>\n</table>\n<h3 id=\"InterfacensITransportEventSink_status_codes.\" name=\"InterfacensITransportEventSink_status_codes.\"><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITransportEventSink\" title=\"\">nsITransportEventSink</a></code> status codes</h3>\n<div class=\"note\">\n  <strong>Note:</strong> Although these constants look like XPCOM error codes and are passed in an nsresult variable, they are <strong>not</strong> error codes. They <strong>do</strong> overlap with existing error codes in Necko, these status codes are confined within a very limited context where no error codes may appear, so there is no ambiguity. The values of these status codes must never change.</div>\n<p>The status codes appear in near-chronological order (not in numeric order). <code>STATUS_RESOLVING</code> may be skipped if the host does not need to be resolved. <code>STATUS_WAITING_FOR</code> is an optional status code, which the implementation of this interface may choose not to generate.</p>\n<table class=\"standard-table\">\n  <tbody>\n    <tr>\n      <td class=\"header\">Constant</td>\n      <td class=\"header\">Value</td>\n      <td class=\"header\">Description</td>\n    </tr>\n    <tr>\n      <td><code>STATUS_RESOLVING</code></td>\n      <td><code>0x804b0003</code></td>\n      <td>Transport is resolving the host. Usually a DNS lookup.</td>\n    </tr>\n    <tr>\n      <td><code>STATUS_RESOLVED</code></td>\n      <td><code>0x804b000b</code></td>\n      <td>Transport has resolved the host. </td>\n    </tr>\n    <tr>\n      <td><code>STATUS_CONNECTING_TO</code></td>\n      <td><code>0x804b0007</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>STATUS_CONNECTED_TO</code></td>\n      <td><code>0x804b0004</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>STATUS_SENDING_TO</code></td>\n      <td><code>0x804b0005</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>STATUS_WAITING_FOR</code></td>\n      <td><code>0x804b000a</code></td>\n      <td> </td>\n    </tr>\n    <tr>\n      <td><code>STATUS_RECEIVING_FROM</code></td>\n      <td><code>0x804b0006</code></td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n<h3 id=\"Timeout_type\" name=\"Timeout_type\">Connection flags</h3>\n<p>Values for the <code>connectionFlags</code> attribute</p>\n<table class=\"standard-table\">\n  <tbody>\n    <tr>\n      <td class=\"header\">Constant</td>\n      <td class=\"header\">Value</td>\n      <td class=\"header\">Description</td>\n    </tr>\n    <tr>\n      <td><code>BYPASS_CACHE</code></td>\n      <td><code>0</code></td>\n      <td>When making a new connection <code>BYPASS_CACHE</code> will force the Necko DNS cache entry to be refreshed with a new call to NSPR if it is set before opening the new stream. </td>\n    </tr>\n    <tr>\n      <td><code>ANONYMOUS_CONNECT</code></td>\n      <td><code>1</code></td>\n      <td>When this flag is set, the socket will not apply any credentials when establishing a connection. For example, an SSL connection would not send any client-certificates if this flag is set. </td>\n    </tr>\n    <tr>\n      <td><code>DISABLE_IPV6</code></td>\n      <td><code>2</code></td>\n      <td>When this flag is set, the socket will ignore any IPv6 addresses the host may offer and will only attempt to connect to IPv4 addresses. </td>\n    </tr>\n  </tbody>\n</table>\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n<p></p><div><span class=\"indicatorInHeadline noscript noscriptMethod\" title=\"This method may only be called from C++; don't use it from JavaScript.\">Native code only!</span><h3 id=\"getPeerAddr\">getPeerAddr</h3></div><p></p>\n<p>Returns the IP address of the socket connection peer. This attribute is defined only once a connection has been established.</p>\n<pre class=\"eval\">PRNetAddr getPeerAddr();\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<p>None.</p>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>An <code><a href=\"/en/PRNetAddr\" title=\"en/PRNetAddr\">PRNetAddr</a></code> containing the resolved IP address.</p>\n<p></p><div><span class=\"indicatorInHeadline noscript noscriptMethod\" title=\"This method may only be called from C++; don't use it from JavaScript.\">Native code only!</span><h3 id=\"getSelfAddr\">getSelfAddr</h3></div><p></p>\n<p>Returns the IP address of the initiating end. This attribute is defined only once a connection has been established.</p>\n<pre class=\"eval\">PRNetAddr getSelfAddr();\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<p>None.</p>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>An <code><a href=\"/en/PRNetAddr\" title=\"en/PRNetAddr\">PRNetAddr</a></code> containing the resolved IP address.</p>\n<p></p><h3 id=\"getTimeout()\">getTimeout()</h3><p></p>\n<p>Retrieves a Socket timeout.</p>\n<pre class=\"eval\">unsigned long getTimeout(\n  in unsigned long aType\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl>\n  <dt>\n    <code>aType</code></dt>\n  <dd>\n    The timeout type, who's associated value should be retrieved. Can be one of the constants <code>TIMEOUT_CONNECT</code> or <code>TIMEOUT_READ_WRITE</code>.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>Returns the timeout in seconds for the given Type. A value of <code><a href=\"/en/PR_UINT32_MAX\" title=\"en/PR_UINT32_MAX\">PR_UINT32_MAX</a></code> is equivalent to no timeout.</p>\n<h3 id=\"isAlive()\" name=\"isAlive()\">isAlive()</h3>\n<p>Test if this socket transport is (still) connected.</p>\n<pre class=\"eval\"> boolean isAlive();\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<p>None.</p>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>Returns <code>true</code> if the socket is connected. Otherwise <code>false</code>.</p>\n<p></p><h3 id=\"setTimeout()\">setTimeout()</h3><p></p>\n<p>Sets a Socket timeout.</p>\n<pre class=\"eval\">void setTimeout(\n  in unsigned long aType,\n  in unsigned long aValue\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl>\n  <dt>\n    <code>aType</code></dt>\n  <dd>\n    The timeout type which should be set to <code>aValue</code>. Can be one of the constants <code>TIMEOUT_CONNECT</code> or <code>TIMEOUT_READ_WRITE</code>.</dd>\n  <dt>\n    <code>aValue</code></dt>\n  <dd>\n    Defines the timeout in seconds, pass <code><a href=\"/en/PR_UINT32_MAX\" title=\"en/PR_UINT32_MAX\">PR_UINT32_MAX</a></code> to specify no timeout. The implementation may truncate timeout values to a smaller range of values (for example, 0 to 0xFFFF).</dd>\n</dl>\n<h2 id=\"Remarks\" name=\"Remarks\">Remarks</h2>\n<p>This is a free-threaded interface, meaning that the methods on this interface may be called from any thread.</p>\n<h2 id=\"See_also\" name=\"See_also\">See also</h2>\n<ul>\n  <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsITransport\" title=\"\">nsITransport</a></code></li>\n  <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISocketTransportService\" title=\"\">nsISocketTransportService</a></code></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kmaglione\">kmaglione</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/cbakgly\">cbakgly</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Smi\">Smi</a>",
    "title": "nsISocketTransport"
}