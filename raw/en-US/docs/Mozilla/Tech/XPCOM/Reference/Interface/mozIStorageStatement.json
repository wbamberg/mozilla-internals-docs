{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/storage/public/mozIStorageStatement.idl\" rel=\"custom\">storage/public/mozIStorageStatement.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThis interface lets you create and execute SQL statements on a mozIStorageConnection.\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageValueArray\" title=\"\">mozIStorageValueArray</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 1.9.2 (Firefox 3.6 / Thunderbird 3.1 / Fennec 1.0)</span></div>\n</div><p></p>\n\n<p>For an introduction on how to use this interface, see the <a href=\"/en/Storage\" title=\"eStorage\">Storage overview document</a>.</p>\n\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code>void <a href=\"#initialize()\">initialize</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageConnection\" title=\"\">mozIStorageConnection</a></code> aDBConnection, in AUTF8String aSQLStatement);</code> <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 3.5 / Thunderbird 3.0 / SeaMonkey 2.0)\">Obsolete since Gecko 1.9.1</span></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#finalize()\">finalize</a>(); </code></td>\n  </tr>\n  <tr>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageStatement\" title=\"\">mozIStorageStatement</a></code> <a href=\"#clone()\">clone</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>AUTF8String <a href=\"#getParameterName()\">getParameterName</a>(in unsigned long aParamIndex);</code></td>\n  </tr>\n  <tr>\n   <td><code>unsigned long <a href=\"#getParameterIndex()\">getParameterIndex</a>(in AUTF8String aName);</code></td>\n  </tr>\n  <tr>\n   <td><code>AUTF8String <a href=\"#getColumnName()\">getColumnName</a>(in unsigned long aColumnIndex);</code></td>\n  </tr>\n  <tr>\n   <td><code>unsigned long <a href=\"#getColumnIndex()\">getColumnIndex</a>(in AUTF8String aName);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#reset()\">reset</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>AString <a href=\"#escapeStringForLIKE()\">escapeStringForLIKE</a>(in AString aValue, in wchar aEscapeChar);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#bindParameters()\">bindParameters</a>(in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageBindingParamsArray\" title=\"\">mozIStorageBindingParamsArray</a></code> aParameters);</code> </td>\n  </tr>\n  <tr>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageBindingParamsArray\" title=\"\">mozIStorageBindingParamsArray</a></code> <a href=\"#newBindingParamsArray()\">newBindingParamsArray</a>();</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#bindUTF8StringParameter()\">bindUTF8StringParameter</a>(in unsigned long aParamIndex, in AUTF8String aValue);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#bindStringParameter()\">bindStringParameter</a>(in unsigned long aParamIndex, in AString aValue);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#bindDoubleParameter()\">bindDoubleParameter</a>(in unsigned long aParamIndex, in double aValue);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#bindInt32Parameter()\">bindInt32Parameter</a>(in unsigned long aParamIndex, in long aValue);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#bindInt64Parameter()\">bindInt64Parameter</a>(in unsigned long aParamIndex, in long long aValue);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#bindNullParameter()\">bindNullParameter</a>(in unsigned long aParamIndex);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#bindBlobParameter()\">bindBlobParameter</a>(in unsigned long aParamIndex, [array,const,size_is(aValueSize)] in octet aValue, in unsigned long aValueSize);</code></td>\n  </tr>\n  <tr>\n   <td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStoragePendingStatement\" title=\"\">mozIStoragePendingStatement</a></code> <a href=\"#executeAsync()\">executeAsync</a>(<code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageStatementCallback\" title=\"\">mozIStorageStatementCallback</a></code> aCallback);</code> </td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#executeStep()\">executeStep</a>();</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#step()\">step</a>();</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#execute()\">execute</a>();</code></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Attributes\">Attributes</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Attribute</td>\n   <td class=\"header\">Type</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>columnCount</code></td>\n   <td><code>unsigned long</code></td>\n   <td>Number of columns returned. <strong>Read only.</strong></td>\n  </tr>\n  <tr>\n   <td><code>parameterCount</code></td>\n   <td><code>unsigned long</code></td>\n   <td>Number of parameters. <strong>Read only.</strong></td>\n  </tr>\n  <tr>\n   <td><code>params</code></td>\n   <td><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageStatementParams\" title=\"\">mozIStorageStatementParams</a></code></td>\n   <td>The current list of named parameters, which may be set. Only available to JavaScript code. <strong>Read only.</strong> </td>\n  </tr>\n  <tr>\n   <td><code>row</code></td>\n   <td><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageStatementRow\" title=\"\">mozIStorageStatementRow</a></code></td>\n   <td>The current row, with access to all data members by name. Available only to JavaScript code. <strong>Read only.</strong> </td>\n  </tr>\n  <tr>\n   <td><code>state</code></td>\n   <td><code>long</code></td>\n   <td>The current state defined by <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIStorageStatement#MOZ_STORAGE_STATEMENT_INVALID\">mozIStorageStatement.MOZ_STORAGE_STATEMENT_INVALID</a></code>, <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIStorageStatement#MOZ_STORAGE_STATEMENT_READY\">mozIStorageStatement.MOZ_STORAGE_STATEMENT_READY</a></code>, or <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIStorageStatement#MOZ_STORAGE_STATEMENT_EXECUTING\">mozIStorageStatement.MOZ_STORAGE_STATEMENT_EXECUTING</a></code>. <strong>Read only.</strong></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Statement_status_constants\">Statement status constants</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Constant</td>\n   <td class=\"header\">Value</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>MOZ_STORAGE_STATEMENT_INVALID</code></td>\n   <td>0</td>\n   <td>The SQL statement is Invalid.</td>\n  </tr>\n  <tr>\n   <td><code>MOZ_STORAGE_STATEMENT_READY</code></td>\n   <td>1</td>\n   <td>The SQL statement is ready to be executed.</td>\n  </tr>\n  <tr>\n   <td><code>MOZ_STORAGE_STATEMENT_EXECUTING</code></td>\n   <td>2</td>\n   <td>The SQL statement is executing at the moment.</td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n\n<p id=\"initialize()\"></p><div class=\"headingWithIndicator\">\n        <h3 id=\"initialize()_2\">initialize()</h3>\n        <span class=\"indicatorInHeadline obsolete obsoleteMethod\">Obsolete since Gecko 1.9.1 (Firefox 3.5 / Thunderbird 3.0 / SeaMonkey 2.0)</span>\n        </div><p></p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> This method has been removed for Gecko 1.9.1. To initialize a statement, consumers should call <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIStorageConnection#createStatement()\">mozIStorageConnection.createStatement()</a></code>. This method exists back to Gecko 1.8.0.</div><p></p>\n\n<p>Initialize this query with the given SQL statement.</p>\n\n<pre class=\"eval\">void initialize(\n  in mozIStorageConnection aDBConnection, \n  in AUTF8String aSQLStatement\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aDBConnection</code></dt>\n <dd>A <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageConnection\" title=\"\">mozIStorageConnection</a></code> database connection.</dd>\n <dt><code>aSQLStatement</code></dt>\n <dd>String key representing the SQL statement.</dd>\n</dl>\n\n<h3 id=\"finalize()\" name=\"finalize()\">finalize()</h3>\n\n<p>Finalizes a statement which releases all resources that were allocated for it. You must call this method on every active statement before you try to call <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIStorageConnection#close()\">mozIStorageConnection.close()</a></code>.</p>\n\n<pre class=\"eval\">void finalize();\n</pre>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> This method does not need to be used from native callers because you have to release the statement in order to not leak. Finalize will be called for you when the reference count on the statement goes to zero.</div><p></p>\n\n<h3 id=\"clone()\" name=\"clone()\">clone()</h3>\n\n<p>Creates a copy of the statement whose state will be <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIStorageStatement#MOZ_STORAGE_STATEMENT_READY\">mozIStorageStatement.MOZ_STORAGE_STATEMENT_READY</a></code>.</p>\n\n<pre class=\"eval\">mozIStorageStatement clone();</pre>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>A <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageStatement\" title=\"\">mozIStorageStatement</a></code> that is a copy of the current statement.</p>\n\n<h3 id=\"getParameterName()\" name=\"getParameterName()\">getParameterName()</h3>\n\n<p>Obtains the name of the parameter for the specified index.</p>\n\n<pre class=\"eval\">AUTF8String getParameterName(\n  in unsigned long aParamIndex\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aParamIndex</code></dt>\n <dd>\n <p>The zero-based numerical index for the parameter to be bound. This will be one less than the number used in the SQL (&lt;code&gt;?1&lt;/code&gt; maps to &lt;code&gt;0&lt;/code&gt;, and so on).</p>\n </dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>An <code><a href=\"/en/AUTF8String\" title=\"en/AUTF8String\">AUTF8String</a></code> representing the parameter name for the specified index.</p>\n\n<h3 id=\"getParameterIndex()\" name=\"getParameterIndex()\">getParameterIndex()</h3>\n\n<p>Obtains the index of the parameter with the specified name. This method was added in 1.9.0. In 1.8.1 you had to use <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageStatement#getParameterIndexes()\">getParameterIndexes()</a></code>. See <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=388048\" title=\"FIXED: mozIStorageStatement::getParameterIndexes is useless\">bug 388048</a> for details.</p>\n\n<pre class=\"eval\">unsigned long getParameterIndex(\n  in AUTF8String aName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aName</code></dt>\n <dd>Name of the parameter to get the index for. For parameter 'foo', name's format is ':foo' in 1.9.0 and 1.9.1. In 1.9.2 the ':' was dropped and name's value should be just 'foo'. See <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=528166\" title=\"mozIStorageStatement getParameterIndex causes NS_ERROR_ILLEGAL_VALUE\">bug 528166</a> for details.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>The zero-based numerical index for the parameter to be bound. This will be one less than the number used in the SQL (&lt;code&gt;?1&lt;/code&gt; maps to &lt;code&gt;0&lt;/code&gt;, and so on).</p>\n\n<h3 id=\"getColumnName()\" name=\"getColumnName()\">getColumnName()</h3>\n\n<p>Obtains the name of the column for the specified index.</p>\n\n<pre class=\"eval\">AUTF8String getColumnName(\n  in unsigned long aColumnIndex\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aColumnIndex</code></dt>\n <dd>\n <p>The zero-based numerical index for the column to get data from.</p>\n </dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>An <code><a href=\"/en/AUTF8String\" title=\"en/AUTF8String\">AUTF8String</a></code> with the of the column name for the specified index.</p>\n\n<h3 id=\"getColumnIndex()\" name=\"getColumnIndex()\">getColumnIndex()</h3>\n\n<p>Obtains the index of the column with the specified name.</p>\n\n<pre class=\"eval\">unsigned long getColumnIndex(\n  in AUTF8String aName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aName</code></dt>\n <dd>Name of the column.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>The zero-based numerical index for the column to get data from.</p>\n\n<h3 id=\"reset()\" name=\"reset()\">reset()</h3>\n\n<p>Resets the bound parameters and statement execution state. This <strong>must</strong> be called before reusing the statement.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> JavaScript callers should always wrap their execution in a try block, and have a reset statement in a finally block.</div><p></p>\n\n<p>See the <a class=\"internal\" href=\"/en/Storage#Resetting_a_Statement\" title=\"Resetting a Statement\">overview document on storage</a> for more details.</p>\n\n<pre class=\"eval\">void reset()\n</pre>\n\n<h3 id=\"escapeStringForLIKE()\" name=\"escapeStringForLIKE()\">escapeStringForLIKE()</h3>\n\n<p>Escapes a string for SQL LIKE search.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> Consumers will have to use same escape char when doing statements such as: <code>...LIKE '?1' ESCAPE '/'...</code>. See the sample code for more details.</div><p></p>\n\n<pre class=\"eval\">AString escapeStringForLIKE(\n  in AString aValue, \n  in wchar aEscapeChar\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aValue</code></dt>\n <dd>String to escape for SQL LIKE.</dd>\n <dt><code>aEscapeChar</code></dt>\n <dd>The escape character to use. Generally, <code>/</code> will be sufficient.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>An UTF-16 encoded string that has characters that have special meaning escaped from <code>aValue</code>.</p>\n\n<h6 id=\"Sample_Code\">Sample Code</h6>\n\n<pre class=\"brush: js\">var statement = dbConn.createStatement(\n  \"SELECT * \" +\n  \"FROM table_name \" +\n  \"WHERE column_name LIKE :userInput ESCAPE '/'\"\n);\nstatement.params.userInput = statement.escapeStringForLIKE(someUserInput, \"/\");</pre>\n\n<h2 id=\"Binding_functions\" name=\"Binding_functions\">Binding Functions</h2>\n\n<p>These functions are discussed in more detail with sample code in the <a class=\"internal\" href=\"/en/Storage#Binding_Parameters\" title=\"Binding Parameters\">overview document</a>.</p>\n\n<p id=\"newBindingParamsArray()\"></p><h3 id=\"newBindingParamsArray()_2\">newBindingParamsArray()</h3><p></p>\n\n<p>Creates and returns a new <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageBindingParamsArray\" title=\"\">mozIStorageBindingParamsArray</a></code> object that can be used to bind multiple values to parameters in preparation for calling <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageStatement#executeAsync()\">executeAsync()</a></code>.</p>\n\n<pre>mozIStorageBindingParamsArray newBindingParamsArray();\n</pre>\n\n<h6 id=\"Parameters_2\">Parameters</h6>\n\n<p>None.</p>\n\n<p id=\"bindParameters()\"></p><h3 id=\"bindParameters()_2\">bindParameters()</h3><p></p>\n\n<p>Binds all the parameters in the specified array to the statement in preparation for calling <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageStatement#executeAsync()\">executeAsync()</a></code>.</p>\n\n<div class=\"note\"><strong>Note:</strong> Starting in <span title=\"(Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)\">Gecko 2.0</span>, this method returns <code>NS_ERROR_UNEXPECTED</code> if the specified <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageBindingParamsArray\" title=\"\">mozIStorageBindingParamsArray</a></code> is empty.</div>\n\n<pre>void bindParameters(\n  in mozIStorageBindingParamsArray aParameters\n); \n</pre>\n\n<h6 id=\"Parameters_3\">Parameters</h6>\n\n<dl>\n <dt>aParameters</dt>\n <dd>The <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageBindingParamsArray\" title=\"\">mozIStorageBindingParamsArray</a></code> object containing one or more <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageBindingParams\" title=\"\">mozIStorageBindingParams</a></code> objects with the parameters to be bound to the statement prior to execution.</dd>\n</dl>\n\n<h3 id=\"bindUTF8StringParameter()\" name=\"bindUTF8StringParameter()\">bindUTF8StringParameter()</h3>\n\n<p>Binds a UTF8String to the specified index.</p>\n\n<pre class=\"eval\">void bindUTF8StringParameter(\n  in unsigned long aParamIndex, \n  in AUTF8String aValue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aParamIndex</code></dt>\n <dd>The zero-based numerical index for the parameter to be bound. This will be one less than the number used in the SQL (&lt;code&gt;?1&lt;/code&gt; maps to &lt;code&gt;0&lt;/code&gt;, and so on).</dd>\n <dt><code>aValue</code></dt>\n <dd>to be bound to the specified index.</dd>\n</dl>\n\n<h3 id=\"bindStringParameter()\" name=\"bindStringParameter()\">bindStringParameter()</h3>\n\n<p>Binds a string parameter to the specified index.</p>\n\n<pre class=\"eval\">void bindStringParameter(\n  in unsigned long aParamIndex, \n  in AString aValue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aParamIndex</code></dt>\n <dd>The zero-based numerical index for the parameter to be bound. This will be one less than the number used in the SQL (&lt;code&gt;?1&lt;/code&gt; maps to &lt;code&gt;0&lt;/code&gt;, and so on).</dd>\n <dt><code>aValue</code></dt>\n <dd>to be bound to the specified index.</dd>\n</dl>\n\n<h3 id=\"bindDoubleParameter()\" name=\"bindDoubleParameter()\">bindDoubleParameter()</h3>\n\n<p>Binds a double parameter to the specified index.</p>\n\n<pre class=\"eval\">void bindDoubleParameter(\n  in unsigned long aParamIndex, \n  in double aValue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aParamIndex</code></dt>\n <dd>The zero-based numerical index for the parameter to be bound. This will be one less than the number used in the SQL (&lt;code&gt;?1&lt;/code&gt; maps to &lt;code&gt;0&lt;/code&gt;, and so on).</dd>\n <dt><code>aValue</code></dt>\n <dd>to be bound to the specified index.</dd>\n</dl>\n\n<h3 id=\"bindInt32Parameter()\" name=\"bindInt32Parameter()\">bindInt32Parameter()</h3>\n\n<p>Binds an Int32 parameter to the specified index.</p>\n\n<pre class=\"eval\">void bindInt32Parameter(\n  in unsigned long aParamIndex, \n  in long aValue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aParamIndex</code></dt>\n <dd>The zero-based numerical index for the parameter to be bound. This will be one less than the number used in the SQL (&lt;code&gt;?1&lt;/code&gt; maps to &lt;code&gt;0&lt;/code&gt;, and so on).</dd>\n <dt><code>aValue</code></dt>\n <dd>to be bound to the specified index.</dd>\n</dl>\n\n<h3 id=\"bindInt64Parameter()\" name=\"bindInt64Parameter()\">bindInt64Parameter()</h3>\n\n<p>Binds an Int64 parameter to the specified index.</p>\n\n<pre class=\"eval\">void bindInt64Parameter(\n  in unsigned long aParamIndex, \n  in long long aValue\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aParamIndex</code></dt>\n <dd>The zero-based numerical index for the parameter to be bound. This will be one less than the number used in the SQL (&lt;code&gt;?1&lt;/code&gt; maps to &lt;code&gt;0&lt;/code&gt;, and so on).</dd>\n <dt><code>aValue</code></dt>\n <dd>to be bound to the specified index.</dd>\n</dl>\n\n<h3 id=\"bindNullParameter()\" name=\"bindNullParameter()\">bindNullParameter()</h3>\n\n<p>Binds a null parameter to the specified index.</p>\n\n<pre class=\"eval\">void bindNullParameter(\n  in unsigned long aParamIndex\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aParamIndex</code></dt>\n <dd>The zero-based numerical index for the parameter to be bound. This will be one less than the number used in the SQL (&lt;code&gt;?1&lt;/code&gt; maps to &lt;code&gt;0&lt;/code&gt;, and so on).</dd>\n</dl>\n\n<h3 id=\"bindBlobParameter()\" name=\"bindBlobParameter()\">bindBlobParameter()</h3>\n\n<p>Binds a blob parameter to the specified index.</p>\n\n<pre class=\"eval\">void bindBlobParameter(\n  in unsigned long aParamIndex, \n  [array,const,size_is(aValueSize)] in octet aValue, \n  in unsigned long aValueSize\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aParamIndex</code></dt>\n <dd>The zero-based numerical index for the parameter to be bound. This will be one less than the number used in the SQL (&lt;code&gt;?1&lt;/code&gt; maps to &lt;code&gt;0&lt;/code&gt;, and so on).</dd>\n <dt><code>aValue</code></dt>\n <dd>to be bound to the specified index.</dd>\n <dt><code>aValueSize</code></dt>\n <dd>Size of <code>aValue</code>.</dd>\n</dl>\n\n<h2 id=\"Execution_Functions\">Execution Functions</h2>\n\n<p>These functions are discussed in more detail with sample code in the <a class=\"internal\" href=\"/en/Storage#Executing_a_Statement\" title=\"Executing a Statement\">overview document</a>.</p>\n\n<p id=\"executeAsync()\"></p><h3 id=\"executeAsync()_2\">executeAsync()</h3><p></p>\n\n<p>Starts the execution of a query asynchronously using the currently bound parameters. The optional callback routine receives notifications about the progress of the query. For sample code and more details, see the <a class=\"internal\" href=\"/en/Storage#Asynchronously\" title=\"Asynchronous Statement Execution\">overview document</a>.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> The statement does not have to be reset before being reused.</div><p></p>\n\n<pre>mozIStoragePendingStatement executeAsync(\n  [optional] mozIStorageStatementCallback aCallback\n);\n</pre>\n\n<h6 id=\"Parameters_4\">Parameters</h6>\n\n<dl>\n <dt><code>aCallback</code></dt>\n <dd>A callback object that will be notified of progress, errors, and query completion. This parameter is optional.</dd>\n</dl>\n\n<h6 id=\"Return_value_2\">Return value</h6>\n\n<p>A <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStoragePendingStatement\" title=\"\">mozIStoragePendingStatement</a></code> object that can be used to cancel the execution of the statement.</p>\n\n<h3 id=\"executeStep()\">executeStep()</h3>\n\n<p>Executes a query with the currently bound parameters, and steps through the results one row at a time. For sample code and more details, see the <a class=\"internal\" href=\"/en/Storage#Synchronously\" title=\"Executing a Statement Synchronously\">overview document</a>.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> The statement must be reset before being reused.</div><p></p>\n\n<pre class=\"eval\">boolean executeStep();\n</pre>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns a <code>boolean</code> indicating whether there are more rows or not. Row data may be accessed using <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageValueArray\" title=\"\">mozIStorageValueArray</a></code> methods on the statement.</p>\n\n<p id=\"step()\"></p><h3 id=\"step()_2\">step()</h3><p></p>\n\n<p>Identical to calling <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageStatement#executeStep()\">executeStep()</a></code>, and then calling <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageStatement#reset()\">reset()</a></code> when no more rows are returned.</p>\n\n<div class=\"note\"><strong>Note:</strong> This method may only be called from JavaScript code.</div>\n\n<pre>boolean step()</pre>\n\n<h6 id=\"Return_value_3\">Return value</h6>\n\n<p><code>true</code> if there are more rows left in the results, otherwise <code>false</code>.</p>\n\n<h3 id=\"execute()\">execute()</h3>\n\n<p>Execute the query, ignoring any results. This is accomplished by calling <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageStatement#executeStep()\">executeStep()</a></code>, and then calling <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageStatement#reset()\">reset()</a></code>.</p>\n\n<pre class=\"eval\"> void execute();\n</pre>\n\n<h2 id=\"See_also\" name=\"See_also\">See also</h2>\n\n<ul>\n <li><a href=\"/en/Storage\" title=\"en/Storage\">Storage</a> introduction and how-to article</li>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageConnection\" title=\"\">mozIStorageConnection</a></code> Database connection to a specific file or in-memory data storage</li>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageValueArray\" title=\"\">mozIStorageValueArray</a></code> Wraps an array of SQL values, such as a result row.</li>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageFunction\" title=\"\">mozIStorageFunction</a></code> Create a new SQLite function.</li>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageAggregateFunction\" title=\"\">mozIStorageAggregateFunction</a></code> Create a new SQLite aggregate function.</li>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageProgressHandler\" title=\"\">mozIStorageProgressHandler</a></code> Monitor progress during the execution of a statement.</li>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageAsyncStatement\" title=\"\">mozIStorageAsyncStatement</a></code></li>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageStatementWrapper\" title=\"\">mozIStorageStatementWrapper</a></code> Storage statement wrapper</li>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageBindingParams\" title=\"\">mozIStorageBindingParams</a></code></li>\n <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageBindingParamsArray\" title=\"\">mozIStorageBindingParamsArray</a></code></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/fscholz\">fscholz</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Zorbing\">Zorbing</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kscarfone\">kscarfone</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/jswisher\">jswisher</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/darktrojan\">darktrojan</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/atte\">atte</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/stoyanster\">stoyanster</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/sathi\">sathi</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/sdwilsh\">sdwilsh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Brettz9\">Brettz9</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/MarcDiethelm\">MarcDiethelm</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Arehman4\">Arehman4</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Waldo\">Waldo</a>",
    "title": "mozIStorageStatement"
}