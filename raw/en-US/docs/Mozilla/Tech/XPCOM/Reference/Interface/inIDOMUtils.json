{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/layout/inspector/inIDOMUtils.idl\" rel=\"custom\">layout/inspector/inIDOMUtils.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nDOM utility functions.\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 22.0 (Firefox 22.0 / Thunderbird 22.0 / SeaMonkey 2.19)</span></div>\n</div><p></p>\n\n<p>Implemented by: <code>@mozilla.org/inspector/dom-utils;1</code> as a service:</p>\n\n<pre class=\"eval\">var inIDOMUtils = Components.classes[\"@mozilla.org/inspector/dom-utils;1\"]\n                  .getService(Components.interfaces.inIDOMUtils);\n</pre>\n\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code>void <a href=\"#addPseudoClassLock()\">addPseudoClassLock</a>(in nsIDOMElement aElement, in DOMString aPseudoClass);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#clearPseudoClassLocks()\">clearPseudoClassLocks</a>(in nsIDOMElement aElement);</code></td>\n  </tr>\n  <tr>\n   <td><code>[implicit_jscontext] jsval <a href=\"#colorNameToRGB()\">colorNameToRGB</a>(in DOMString aColorName);</code></td>\n  </tr>\n  <tr>\n   <td><code>nsIArray <a href=\"#getBindingURLs()\">getBindingURLs</a>(in nsIDOMElement aElement);</code></td>\n  </tr>\n  <tr>\n   <td><code>nsIDOMNodeList <a href=\"#getChildrenForNode()\">getChildrenForNode</a>(in nsIDOMNode aNode, in boolean aShowingAnonymousContent);</code> </td>\n  </tr>\n  <tr>\n   <td><code>unsigned long long <a href=\"#getContentState()\">getContentState</a>(in nsIDOMElement aElement);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#getCSSPropertyNames()\">getCSSPropertyNames</a>([optional] in unsigned long aFlags, [optional] out unsigned long aCount, [retval, array, size_is(aCount)] out wstring aProps);</code> </td>\n  </tr>\n  <tr>\n   <td><code>nsISupportsArray <a href=\"#getCSSStyleRules()\">getCSSStyleRules</a>(in nsIDOMElement aElement, [optional] in DOMString aPseudo);</code></td>\n  </tr>\n  <tr>\n   <td><code>nsIDOMNode <a href=\"#getParentForNode()\">getParentForNode</a>(in nsIDOMNode aNode, in boolean aShowingAnonymousContent);</code></td>\n  </tr>\n  <tr>\n   <td><code>unsigned long <a href=\"#getRuleLine()\">getRuleLine</a>(in nsIDOMCSSStyleRule aRule);</code></td>\n  </tr>\n  <tr>\n   <td><code>unsigned long <a href=\"#getRuleColumn()\">getRuleColumn</a>(in nsIDOMCSSStyleRule aRule);</code></td>\n  </tr>\n  <tr>\n   <td><code>unsigned long <a href=\"#getSelectorCount()\">getSelectorCount</a>(in nsIDOMCSSStyleRule aRule);</code></td>\n  </tr>\n  <tr>\n   <td><code>AString <a href=\"#getSelectorText()\">getSelectorText</a>(in nsIDOMCSSStyleRule aRule, in unsigned long aSelectorIndex);</code></td>\n  </tr>\n  <tr>\n   <td><code>unsigned long long <a href=\"#getSpecificity()\">getSpecificity</a>(in nsIDOMCSSStyleRule aRule, in unsigned long aSelectorIndex);</code></td>\n  </tr>\n  <tr>\n   <td><code>nsIDOMFontFaceList <a href=\"#getUsedFontFaces()\">getUsedFontFaces</a>(in nsIDOMRange aRange);</code> </td>\n  </tr>\n  <tr>\n   <td><code>bool <a href=\"#hasPseudoClassLock()\">hasPseudoClassLock</a>(in nsIDOMElement aElement, in DOMString aPseudoClass);</code></td>\n  </tr>\n  <tr>\n   <td><code>boolean <a href=\"#isIgnorableWhitespace()\">isIgnorableWhitespace</a>(in nsIDOMCharacterData aDataNode);</code></td>\n  </tr>\n  <tr>\n   <td><code>bool <a href=\"#isInheritedProperty()\">isInheritedProperty</a>(in AString aPropertyName);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#parseStyleSheet()\">parseStyleSheet</a>(in nsIDOMCSSStyleSheet aSheet, in DOMString aInput);</code> </td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#removePseudoClassLock()\">removePseudoClassLock</a>(in nsIDOMElement aElement, in DOMString aPseudoClass);</code></td>\n  </tr>\n  <tr>\n   <td><code>AString <a href=\"#rgbToColorName()\">rgbToColorName</a>(in octet aR, in octet aG, in octet aB);</code></td>\n  </tr>\n  <tr>\n   <td><code>bool <a href=\"#selectorMatchesElement()\">selectorMatchesElement</a>(in nsIDOMElement aElement, in nsIDOMCSSStyleRule aRule, in unsigned long aSelectorIndex, [optional] in DOMString aPseudo);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#setContentState()\">setContentState</a>(in nsIDOMElement aElement, in unsigned long long aState);</code></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Constants\" name=\"Constants\">Constants</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Constant</td>\n   <td class=\"header\">Value</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>EXCLUDE_SHORTHANDS</code></td>\n   <td><code>(1&lt;&lt;0)</code></td>\n   <td></td>\n  </tr>\n  <tr>\n   <td><code>INCLUDE_ALIASES</code></td>\n   <td><code>(1&lt;&lt;1)</code></td>\n   <td></td>\n  </tr>\n </tbody>\n</table>\n\n<h3 id=\"Content_state_flags\">Content state flags</h3>\n\n<p>The content state flags are used in a bitmask.</p>\n\n<table class=\"standard-table\" style=\"width: auto;\">\n <tbody>\n  <tr>\n   <td class=\"header\">Value</td>\n   <td class=\"header\">State</td>\n  </tr>\n  <tr>\n   <td>1</td>\n   <td><a href=\"/en-US/docs/Web/CSS/:active\" title=\"The :active CSS pseudo-class represents an element (such as a button) that is being activated by the user.\"><code>:active</code></a></td>\n  </tr>\n  <tr>\n   <td>2</td>\n   <td><a href=\"/en-US/docs/Web/CSS/:focus\" title=\"The :focus CSS pseudo-class represents an element (such as a form input) that has received focus. It is generally triggered when the user clicks or taps on an element or selects it with the keyboard's &quot;tab&quot; key.\"><code>:focus</code></a></td>\n  </tr>\n  <tr>\n   <td>4</td>\n   <td><a href=\"/en-US/docs/Web/CSS/:hover\" title=\"The :hover CSS pseudo-class matches when the user interacts with an element with a pointing device, but does not necessarily activate it. It is generally triggered when the user hovers over an element with the cursor (mouse pointer).\"><code>:hover</code></a></td>\n  </tr>\n  <tr>\n   <td>8</td>\n   <td><a href=\"/en-US/docs/Web/CSS/:-moz-drag-over\" title=\"The :-moz-drag-over CSS pseudo-class is a Mozilla extension that matches an element when a dragover event is called on it.\"><code>:-moz-drag-over</code></a></td>\n  </tr>\n  <tr>\n   <td>16</td>\n   <td><a href=\"/en-US/docs/Web/CSS/:target\" title=\"The :target CSS pseudo-class represents a unique element (the target element) with an id matching the URL's fragment.\"><code>:target</code></a></td>\n  </tr>\n  <tr>\n   <td>1&lt;&lt;29</td>\n   <td><a href=\"/en-US/docs/Web/CSS/:-moz-focusring\" title=\"The :-moz-focusring CSS pseudo-class is a Mozilla extension that is similar to the :focus pseudo-class, but it only matches an element if it's currently focused and a focus ring or other indicator should be drawn around it.\"><code>:-moz-focusring</code></a></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n\n<h3 id=\"getBindingURLs()\" name=\"getBindingURLs()\">getBindingURLs()</h3>\n\n<p>Returns an array of <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> objects representing the current XML binding for the specified element.</p>\n\n<pre class=\"eval\">nsIArray getBindingURLs(\n  in nsIDOMElement aElement\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aElement</code></dt>\n <dd>A DOM Element to retrieve the bindings of.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>An array of <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIURI\" title=\"\">nsIURI</a></code> objects representing the current XBL binding (if any) for the element and its hierarchy of base bindings.</p>\n\n<p></p><h3 id=\"getChildrenForNode()\">getChildrenForNode()</h3><p></p>\n\n<p>Returns a list of DOM nodes that are children of the specified node.</p>\n\n<pre class=\"eval\">nsIDOMNodeList getChildrenForNode(\n  in nsIDOMNode aNode,\n  in boolean aShowingAnonymousContent\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aNode</code></dt>\n <dd>A DOM <a href=\"/en-US/docs/Web/API/Node\" title=\"Node is an interface from which a number of DOM API object types inherit. It allows those types to be treated similarly; for example, inheriting the same set of methods, or being tested in the same way.\"><code>Node</code></a> for which to retrieve the style nodes.</dd>\n <dt><code>aShowingAnonymousContent</code></dt>\n <dd>Whether you are interested in the XBL flattened tree.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>A DOM <a href=\"/en-US/docs/Web/API/NodeList\" title=\"NodeList objects are collections of nodes, usually returned by properties such as Node.childNodes and methods such as document.querySelectorAll().\"><code>NodeList</code></a> of the child nodes. If you have requested anonymous content, then if the element has an XBL binding then this will be the binding's anonymous nodes, otherwise if the element is itself an anonymous node containing an insertion point then this will be a list combining the element's explicit children from its binding parent's anonymous nodes and any children inserted as a result of the insertion point.</p>\n\n<h3 id=\"getContentState()\" name=\"getContentState()\">getContentState()</h3>\n\n<p>A bit mask of the supported content state flags, which are listed in <a href=\"#Content_state_flags\">Content state flags</a>.</p>\n\n<pre class=\"eval\">unsigned long long getContentState(\n  in nsIDOMElement aElement\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aElement</code></dt>\n <dd>A DOM Element to retrieve the content states of.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>A bitmask of one of the 6 supported content state flags specified in <a href=\"#Content_state_flags\">Content state flags</a>.</p>\n\n<p></p><h3 id=\"getCSSPropertyNames()\">getCSSPropertyNames()</h3><p></p>\n\n<p>Get a list of all our supported property names</p>\n\n<pre class=\"eval\">void getCSSPropertyNames(\n  in unsigned long aFlags, <span class=\"inlineIndicator optional optionalInline\">Optional</span>\n  out unsigned long aCount, <span class=\"inlineIndicator optional optionalInline\">Optional</span>\n  [retval, array, size_is(aCount)] out wstring aProps\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aFlags</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n <dd>Shorthands can be excluded or property aliases included. See <a href=\"#Constants\" title=\"#Constants\">constants</a>.</dd>\n <dt><code>aCount</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n <dd>Count</dd>\n <dt><code>aProps</code></dt>\n <dd>Properties</dd>\n</dl>\n\n<h3 id=\"getCSSStyleRules()\" name=\"getCSSStyleRules()\">getCSSStyleRules()</h3>\n\n<p>Returns an array of the CSS style rules on the specified <a href=\"/en-US/docs/Web/API/Element\" title=\"Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.\"><code>element</code></a>.</p>\n\n<pre class=\"eval\">nsISupportsArray getCSSStyleRules(\n  in nsIDOMElement aElement,\n  in DOMString aPseudo <span class=\"inlineIndicator optional optionalInline\">Optional</span>\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aElement</code></dt>\n <dd>A DOM <a href=\"/en-US/docs/Web/API/Element\" title=\"Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.\"><code>element</code></a> to retrieve the style rules of.</dd>\n <dt><code>aPseudo</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span> </dt>\n <dd>A pseudo element, such as <a href=\"/en-US/docs/Web/CSS/before\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>before</code></a>.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>An <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupportsArray\" title=\"\">nsISupportsArray</a></code> containing all the style rules that currently apply to the element, in ascending order of weight.</p>\n\n<h3 id=\"getParentForNode()\" name=\"getParentForNode()\">getParentForNode()</h3>\n\n<p>Returns the parent of the specified <a href=\"/en-US/docs/Web/API/Node\" title=\"Node is an interface from which a number of DOM API object types inherit. It allows those types to be treated similarly; for example, inheriting the same set of methods, or being tested in the same way.\"><code>node</code></a>.</p>\n\n<pre class=\"eval\">nsIDOMNode getParentForNode(\n  in nsIDOMNode aNode,\n  in boolean aShowingAnonymousContent\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aNode</code></dt>\n <dd>The node to return the parent of.</dd>\n <dt><code>aShowingAnonymousContent</code></dt>\n <dd>Whether you are interested in the XBL flattened tree.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns the parent of a node. The parent of a document node is the frame/iframe containing that document. If you have requested anonymous content and the element's parent has an XBL binding then the element containing the insertion point is returned instead.</p>\n\n<h3 id=\"getRuleLine()\" name=\"getRuleLine()\">getRuleLine()</h3>\n\n<p>Returns the line number of the specified CSS style rule in its source file.</p>\n\n<pre class=\"eval\">unsigned long getRuleLine(\n  in nsIDOMCSSStyleRule aRule\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aRule</code></dt>\n <dd>The style rule to retrieve the line number of.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>The line number of the style rule; the URL of the rule can be obtained from its parent style sheet object.</p>\n\n<h3 id=\"getRuleColumn()\" name=\"getRuleColumn()\">getRuleColumn()</h3>\n\n<p>Returns the column number of the specified CSS style rule in its source file.</p>\n\n<pre class=\"eval\">unsigned long getRuleColumn(\n  in nsIDOMCSSStyleRule aRule\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aRule</code></dt>\n <dd>The style rule to retrieve the column number of.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>The column number of the style rule; the URL of the rule can be obtained from its parent style sheet object.</p>\n\n<p></p><h3 id=\"getUsedFontFaces()\">getUsedFontFaces()</h3><p></p>\n\n<p>Returns a list of the fonts specified using <a href=\"/en-US/docs/Web/CSS/@font-face\" title=\"The @font-face CSS at-rule specifies a custom font with which to display text; the font can be loaded from either a remote server or the user's own computer.\"><code>@font-face</code></a> in the specified portion of the document.</p>\n\n<pre class=\"eval\">nsIDOMFontFaceList getUsedFontFaces(\n  in nsIDOMRange aRange\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aRange</code></dt>\n <dd>The DOM <a href=\"/en-US/docs/Web/API/Range\" title=\"The Range interface represents a fragment of a document that can contain nodes and parts of text nodes.\"><code>range</code></a> to retrieve the font faces of.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>An <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIDOMFontFaceList\" title=\"\">nsIDOMFontFaceList</a></code> object listing all the font faces used by the text in the range.</p>\n\n<h3 id=\"isIgnorableWhitespace()\" name=\"isIgnorableWhitespace()\">isIgnorableWhitespace()</h3>\n\n<p>Determines if the specified text node contains only ignorable whitespace characters.</p>\n\n<pre class=\"eval\">boolean isIgnorableWhitespace(\n  in nsIDOMCharacterData aDataNode\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aDataNode</code></dt>\n <dd>A DOM <a href=\"/en-US/docs/Web/API/CharacterData\" title=\"The CharacterData abstract interface represents a Node object that contains characters. This is an abstract interface, meaning there aren't any object of type CharacterData: it is implemented by other interfaces, like Text, '. In XML, the character sequence '--' cannot be used within a comment.&quot;>Comment, or ProcessingInstruction which aren't abstract.\"><code>CharacterData</code></a> node; that is, a text node.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p><code>true</code> if the node only contains insignificant whitespace. In particular, this will be <code>false</code> if certain CSS white-space styles are in effect.</p>\n\n<h3 id=\"isInheritedProperty()\" name=\"isInheritedProperty()\">isInheritedProperty()</h3>\n\n<p>Determines if the specified string names a CSS property that is inherited by default.</p>\n\n<pre class=\"eval\">boolean isInheritedProperty(\n  in AString aPropertyName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aPropertyName</code></dt>\n <dd>The name of the CSS property.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p><code>true</code> if the property is inherited, otherwise <code>false</code>.</p>\n\n<p></p><h3 id=\"parseStyleSheet()\">parseStyleSheet()</h3><p></p>\n\n<p>Parse CSS and update the style sheet in place.</p>\n\n<pre class=\"eval\">void parseStyleSheet(\n  in nsIDOMCSSStyleSheet aSheet,\n  in DOMString aInput\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aSheet</code></dt>\n <dd>A <a href=\"/en-US/docs/Web/API/DOMCSSStyleSheet\" title=\"The documentation about this has not yet been written; please consider contributing!\"><code>DOMCSSStyleSheet</code></a>.</dd>\n <dt><code>aInput</code></dt>\n <dd>A <a href=\"/en-US/docs/Web/API/DOMString\" title=\"DOMString is a UTF-16 String. As JavaScript already uses such strings, DOMString is mapped directly to a String.\"><code>DOMString</code></a>. The new source string for the style sheet.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>void</p>\n\n<h3 id=\"setContentState()\" name=\"setContentState()\">setContentState()</h3>\n\n<p>Sets the given <a href=\"/en-US/docs/Web/API/Element\" title=\"Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.\"><code>element</code></a> as the current owner of the specified state, and removes that state from the previous owner.</p>\n\n<pre class=\"eval\">void setContentState(\n  in nsIDOMElement aElement,\n  in unsigned long long aState\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aElement</code></dt>\n <dd>The element to set the content state of.</dd>\n <dt><code>aState</code></dt>\n <dd>The content state to set. This must be one (and only one) of the values listed in <a href=\"#Content_state_flags\">Content state flags</a>.</dd>\n</dl>\n\n<h3 id=\"selectorMatchesElement()\" name=\"selectorMatchesElement()\">selectorMatchesElement()</h3>\n\n<p>Checks if a given selector from a style rule matches an <a href=\"/en-US/docs/Web/API/Element\" title=\"Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.\"><code>element</code></a>.</p>\n\n<pre class=\"eval\">bool selectorMatchesElement (\n  in nsIDOMElement aElement,\n  in nsIDOMCSSStyleRule aRule,\n  in unsigned long aSelectorIndex,\n  in DOMString aPseudo <span class=\"inlineIndicator optional optionalInline\">Optional</span>\n)\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aElement</code></dt>\n <dd>The element to check the selector against.</dd>\n <dt><code>aRule</code></dt>\n <dd>The style rule containing the selector.</dd>\n <dt><code>aSelectorIndex</code></dt>\n <dd>The index of the selector.</dd>\n <dt><code>aPseudo</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span> </dt>\n <dd>A string specifying the pseudo-element to match. May be omitted when checking the regular elements.</dd>\n</dl>\n\n<h3 id=\"addPseudoClassLock()\" name=\"addPseudoClassLock()\">addPseudoClassLock()</h3>\n\n<p>Makes the <a href=\"/en-US/docs/Web/API/Element\" title=\"Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.\"><code>element</code></a> take on style properties that would apply if the element had the given <a href=\"/en-US/docs/Web/CSS/Pseudo-classes\" title=\"A CSS pseudo-class is a keyword added to a selector that specifies a special state of the selected element(s).\"><code>pseudo-classes</code></a>.</p>\n\n<pre class=\"eval\">void addPseudoClassLock(\n  in nsIDOMElement aElement,\n  in DOMString aPseudoClass\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aElement</code></dt>\n <dd>The element to set the pseudo-class lock on.</dd>\n <dt><code>aPseudoClass</code></dt>\n <dd>The pseudo-class to set. e.g. \":hover\".</dd>\n</dl>\n\n<h3 id=\"removePseudoClassLock()\" name=\"removePseudoClassLock()\">removePseudoClassLock()</h3>\n\n<p>Removes a pseudo-class lock from the <a href=\"/en-US/docs/Web/API/Element\" title=\"Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.\"><code>element</code></a>.</p>\n\n<pre class=\"eval\">void removePseudoClassLock(\n  in nsIDOMElement aElement,\n  in DOMString aPseudoClass\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aElement</code></dt>\n <dd>The element to remove the pseudo-class lock from.</dd>\n <dt><code>aPseudoClass</code></dt>\n <dd>The pseudo-class to remove the lock of. e.g. \":hover\".</dd>\n</dl>\n\n<h3 id=\"hasPseudoClassLock()\" name=\"hasPseudoClassLock()\">hasPseudoClassLock()</h3>\n\n<p>Checks whether the <a href=\"/en-US/docs/Web/API/Element\" title=\"Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.\"><code>element</code></a> element has a particular pseudo-class lock applied.</p>\n\n<pre class=\"eval\">boolean hasPseudoClassLock(\n  in nsIDOMElement aElement,\n  in DOMString aPseudoClass\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aElement</code></dt>\n <dd>The element to test.</dd>\n <dt><code>aPseudoClass</code></dt>\n <dd>The pseudo-class lock to test for existence, e.g. \":hover\".</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>true if lock exists, false otherwise</p>\n\n<h3 id=\"clearPseudoClassLocks()\" name=\"clearPseudoClassLocks()\">clearPseudoClassLocks()</h3>\n\n<p>Removes any pseudo-class locks from the <a href=\"/en-US/docs/Web/API/Element\" title=\"Element is the most general base class from which all objects in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.\"><code>element</code></a>.</p>\n\n<pre class=\"eval\">void clearPseudoClassLocks(\n  in nsIDOMElement aElement\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aElement</code></dt>\n <dd>The element to remove the pseudo-class locks from.</dd>\n</dl>\n\n<h2 id=\"See_also\">See also</h2>\n\n<ul>\n <li><a href=\"/en/DOM\" title=\"DOM\">DOM</a></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sebastianz\">Sebastianz</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/bgrins\">bgrins</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kscarfone\">kscarfone</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/fscholz\">fscholz</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/harth\">harth</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Neil\">Neil</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>",
    "title": "inIDOMUtils"
}