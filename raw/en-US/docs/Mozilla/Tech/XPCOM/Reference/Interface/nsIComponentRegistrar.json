{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/xpcom/components/nsIComponentRegistrar.idl\" rel=\"custom\">xpcom/components/nsIComponentRegistrar.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThis interface provides methods to access and modify the XPCOM component registry.\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 1.0 </span></div>\n</div><p></p>\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n<table class=\"standard-table\"> <tbody> <tr> <td><code>void <a href=\"#autoRegister()\">autoRegister</a>(in nsIFile aSpec);</code></td> </tr> <tr> <td><code>void <a href=\"#autoUnregister()\">autoUnregister</a>(in nsIFile aSpec);</code></td> </tr> <tr> <td><code>string <a href=\"#CIDToContractID()\">CIDToContractID</a>(in nsCIDRef aClass);</code></td> </tr> <tr> <td><code>nsCIDPtr <a href=\"#contractIDToCID()\">contractIDToCID</a>(in string aContractID);</code></td> </tr> <tr> <td><code>nsISimpleEnumerator <a href=\"#enumerateCIDs()\">enumerateCIDs</a>();</code></td> </tr> <tr> <td><code>nsISimpleEnumerator <a href=\"#enumerateContractIDs()\">enumerateContractIDs</a>();</code></td> </tr> <tr> <td><code>boolean <a href=\"#isCIDRegistered()\">isCIDRegistered</a>(in nsCIDRef aClass);</code></td> </tr> <tr> <td><code>boolean <a href=\"#isContractIDRegistered()\">isContractIDRegistered</a>(in string aContractID);</code></td> </tr> <tr> <td><code>void <a href=\"#registerFactory()\">registerFactory</a>(in nsCIDRef aClass, in string aClassName, in string aContractID, in nsIFactory aFactory);</code></td> </tr> <tr> <td><code>void <a href=\"#registerFactoryLocation()\">registerFactoryLocation</a>(in nsCIDRef aClass, in string aClassName, in string aContractID, in nsIFile aFile, in string aLoaderStr, in string aType);</code></td> </tr> <tr> <td><code>void <a href=\"#unregisterFactory()\">unregisterFactory</a>(in nsCIDRef aClass, in nsIFactory aFactory);</code></td> </tr> <tr> <td><code>void <a href=\"#unregisterFactoryLocation()\">unregisterFactoryLocation</a>(in nsCIDRef aClass, in nsIFile aFile);</code></td> </tr> </tbody>\n</table>\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n<h3 id=\"autoRegister()\" name=\"autoRegister()\">autoRegister()</h3>\n<p>Register a component (.manifest) file or all component files in a directory. Registration lasts for this run only, and is not cached.</p>\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong>Â Formerly this method would register component files directly. This is no longer supported.</div><p></p>\n<p>Component files must have an associated loader and export the required symbols which this loader defines. For example, if the given file is a native library, it must export the symbol <code><a href=\"/en/NSGetModule\" title=\"en/NSGetModule\">NSGetModule</a></code>. Other loaders may have different semantics.</p>\n<p>This method may only be called from the main thread.</p>\n<pre class=\"eval\">void autoRegister(\n  in nsIFile aSpec\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aSpec</code></dt> <dd> <p>This parameter indicates either a component file to be registered or a directory containing component files to be registered.</p> <p>XPCOM &lt;= 1.8: If <var>aSpec</var> is null, then the application component's directory as defined by <code>NS_XPCOM_COMPONENT_DIR</code> will be registered. See <code><a href=\"/en/nsDirectoryService\" title=\"en/nsDirectoryService\">nsDirectoryService</a></code>.</p> XPCOM &gt;= 1.9: If <var>aSpec</var> is null, static components, GRE components, and the the application's component directories will be registered. See <code>NS_GRE_DIR</code>, <code>NS_XPCOM_COMPONENT_DIR</code>, and <code>NS_XPCOM_COMPONENT_DIR_LIST</code> in <code><a href=\"/en/nsDirectoryService\" title=\"en/nsDirectoryService\">nsDirectoryService</a></code>.</dd>\n</dl>\n<h3 id=\"autoUnregister()\" name=\"autoUnregister()\">autoUnregister()</h3>\n<p>Unregister a component file or all component files in a directory.</p>\n<p>This method may only be called from the main thread.</p>\n<pre class=\"eval\">void autoUnregister(\n  in nsIFile aSpec\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aSpec</code></dt> <dd>This parameter indicates either a component file to be unregistered or a directory containing component files to be unregistered. If <var>aSpec</var> is null, then the application component's directory as defined by <code>NS_XPCOM_COMPONENT_DIR</code> will be unregistered. See <code><a href=\"/en/nsDirectoryService\" title=\"en/nsDirectoryService\">nsDirectoryService</a></code>.</dd>\n</dl>\n<h3 id=\"CIDToContractID()\" name=\"CIDToContractID()\">CIDToContractID()</h3>\n<p>This method returns the ContractID corresponding to a given ClassID.</p>\n<pre class=\"eval\">string CIDToContractID(\n  in nsCIDRef aClass\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aClass</code></dt> <dd>The ClassID to be queried.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>The ContractID corresponding to aClassID if one exists and is registered.</p>\n<h3 id=\"contractIDToCID()\" name=\"contractIDToCID()\">contractIDToCID()</h3>\n<p>Returns the ClassID for a given ContractID, if one exists and is registered.</p>\n<pre class=\"eval\">nsCIDPtr contractIDToCID(\n  in string aContractID\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aContractID</code></dt> <dd>The ContractID to be queried.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>The ClassID corresponding to aContractID if one exists and is registered.</p>\n<h3 id=\"enumerateCIDs()\" name=\"enumerateCIDs()\">enumerateCIDs()</h3>\n<p>This method returns an enumerator over the list of registered ClassIDs.</p>\n<p>Elements of the enumeration can be QueryInterfaced for the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupportsID\" title=\"\">nsISupportsID</a></code> interface. From the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupportsID\" title=\"\">nsISupportsID</a></code>, you can obtain the actual ClassID.</p>\n<pre class=\"eval\">nsISimpleEnumerator enumerateCIDs();\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<p>None.</p>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>An <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISimpleEnumerator\" title=\"\">nsISimpleEnumerator</a></code> over the list of registered classes. Elements of the enumerator implement <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupportsID\" title=\"\">nsISupportsID</a></code>.</p>\n<h3 id=\"enumerateContractIDs()\" name=\"enumerateContractIDs()\">enumerateContractIDs()</h3>\n<p>This method returns an enumerator over the list of registered ContractIDs.</p>\n<p>Elements of the enumeration can be QueryInterfaced for the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupportsCString\" title=\"\">nsISupportsCString</a></code> interface. From the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupportsCString\" title=\"\">nsISupportsCString</a></code> interface, you can obtain the actual ContractID string.</p>\n<pre class=\"eval\">nsISimpleEnumerator enumerateContractIDs();\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<p>None.</p>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p>An <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISimpleEnumerator\" title=\"\">nsISimpleEnumerator</a></code> over the list of registered classes. Elements of the enumerator implement <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupportsCString\" title=\"\">nsISupportsCString</a></code>.</p>\n<h3 id=\"isCIDRegistered()\" name=\"isCIDRegistered()\">isCIDRegistered()</h3>\n<p>This method is used to test for the existence of a specific ClassID.</p>\n<pre class=\"eval\">boolean isCIDRegistered(\n  in nsCIDRef aClass\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aClass</code></dt> <dd>The ClassID to be queried.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p><code>true</code> if a factory is registered for the ClassID, <code>false</code> otherwise.</p>\n<h3 id=\"isContractIDRegistered()\" name=\"isContractIDRegistered()\">isContractIDRegistered()</h3>\n<p>This method is used to test for the existence of a class implementing a specific ContractID.</p>\n<pre class=\"eval\">boolean isContractIDRegistered(\n  in string aContractID\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aContractID</code></dt> <dd>The ContractID to be queried.</dd>\n</dl>\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n<p><code>true</code> if a factory is registered for the ContractID, <code>false</code> otherwise.</p>\n<h3 id=\"registerFactory()\" name=\"registerFactory()\">registerFactory()</h3>\n<p>Registers a factory to be used to instantiate a particular class identified by ClassID, and creates an association of class name and ContractID with the class.</p>\n<pre class=\"eval\">void registerFactory(\n  in nsCIDRef aClass,\n  in string aClassName,\n  in string aContractID,\n  in nsIFactory aFactory\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aClass</code></dt> <dd>The ClassID of the class being registered.</dd> <dt><code>aClassName</code></dt> <dd>The name of the class being registered. This value is intended as a human-readable name for the class and need not be globally unique. (unused)</dd> <dt><code>aContractID</code></dt> <dd>The ContractID of the class being registered. May be <code>null</code> if no ContractID is needed.</dd> <dt><code>aFactory</code></dt> <dd>The <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFactory\" title=\"\">nsIFactory</a></code> instance of the class being registered. If aFactory is <code>null</code>, the contract will be associated with a previously registered ClassID.</dd>\n</dl>\n<h3 id=\"registerFactoryLocation()\" name=\"registerFactoryLocation()\">registerFactoryLocation()</h3>\n<p>Registers a factory to be used to instantiate a particular class identified by ClassID, and creates an association of class name and ContractID with the class. However, unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIComponentRegistrar#registerFactory()\">registerFactory()</a></code>, the location of the component containing the factory implementation is specified instead of the factory instance.</p>\n<pre class=\"eval\">void registerFactoryLocation(\n  in nsCIDRef aClass,\n  in string aClassName,\n  in string aContractID,\n  in nsIFile aFile,\n  in string aLoaderStr,\n  in string aType\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aClass</code></dt> <dd>The ClassID of the class being registered.</dd> <dt><code>aClassName</code></dt> <dd>The name of the class being registered. This value is intended as a human-readable name for the class and need not be globally unique.</dd> <dt><code>aContractID</code></dt> <dd>The ContractID of the class being registered.</dd> <dt><code>aFile</code></dt> <dd>A component file. This file must have an associated loader and export the required symbols, which the loader specifies.</dd> <dt><code>aLoaderStr</code></dt> <dd>Opaque loader specific string. This value is passed into the <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIModule#registerSelf()\">nsIModule.registerSelf()</a></code> callback and must be forwarded unmodified when registering factories via their location.</dd> <dt><code>aType</code></dt> <dd>Component Type of aClass. This value is passed into the<code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIModule#registerSelf()\">nsIModule.registerSelf()</a></code> callback and must be forwarded unmodified when registering factories via their location.</dd>\n</dl>\n<h3 id=\"unregisterFactory()\" name=\"unregisterFactory()\">unregisterFactory()</h3>\n<p>Unregister a factory associated with a particular class identified by ClassID.</p>\n<pre class=\"eval\">void unregisterFactory(\n  in nsCIDRef aClass,\n  in nsIFactory aFactory\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aClass</code></dt> <dd>The ClassID of the class being unregistered.</dd> <dt><code>aFactory</code></dt> <dd>The <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFactory\" title=\"\">nsIFactory</a></code> instance of the class being unregistered.</dd>\n</dl>\n<h3 id=\"unregisterFactoryLocation()\" name=\"unregisterFactoryLocation()\">unregisterFactoryLocation()</h3>\n<p>Unregisters the factory associated with a given ClassID and component file location.</p>\n<pre class=\"eval\">void unregisterFactoryLocation(\n  in nsCIDRef aClass,\n  in nsIFile aFile\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aClass</code></dt> <dd>The ClassID that was previously registered.</dd> <dt><code>aFile</code></dt> <dd>The component file that was previously registered.</dd>\n</dl>\n<h2 id=\"Remarks\" name=\"Remarks\">Remarks</h2>\n<p>This interface was finalized (frozen) for <span title=\"\">GeckoÂ 1.0</span>. See <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=115853\" title=\"FIXED: nsIComponentRegistrar need to be frozen\">bugÂ 115853</a> for details. From <span title=\"(Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)\">GeckoÂ 2.0</span> interfaces are no longer frozen.</p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ted_Mielczarek\">Ted_Mielczarek</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/DarinFisher\">DarinFisher</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nickolay\">Nickolay</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Dria\">Dria</a>",
    "title": "nsIComponentRegistrar"
}