{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/xpcom/io/nsIBinaryOutputStream.idl\" rel=\"custom\">xpcom/io/nsIBinaryOutputStream.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThis interface allows writing of primitive data types (integers, floating-point values, booleans, and so on.) to a stream in a binary, untagged, fixed-endianness format. This might be used, for example, to implement network protocols or to produce architecture-neutral binary disk files, that is ones that can be read and written by both big-endian and little-endian platforms. Output is written in big-endian order (high-order byte first), as this is traditional network order.\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIOutputStream\" title=\"\">nsIOutputStream</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 1.7 </span></div>\n</div><p></p>\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n<table class=\"standard-table\"> <tbody> <tr> <td><code>void <a href=\"#setOutputStream()\">setOutputStream</a>(in nsIOutputStream aOutputStream);</code></td> </tr> <tr> <td><code>void <a href=\"#write8()\">write8</a>(in PRUint8 aByte);</code></td> </tr> <tr> <td><code>void <a href=\"#write16()\">write16</a>(in PRUint16 a16);</code></td> </tr> <tr> <td><code>void <a href=\"#write32()\">write32</a>(in PRUint32 a32);</code></td> </tr> <tr> <td><code>void <a href=\"#write64()\">write64</a>(in PRUint64 a64);</code></td> </tr> <tr> <td><code>void <a href=\"#writeBoolean()\">writeBoolean</a>(in PRBool aBoolean);</code></td> </tr> <tr> <td><code>void <a href=\"#writeByteArray()\">writeByteArray</a>([array, size_is(aLength)] in PRUint8 aBytes, in PRUint32 aLength);</code></td> </tr> <tr> <td><code>void <a href=\"#writeBytes()\">writeBytes</a>(aLength)] in string aString, in PRUint32 aLength);</code></td> </tr> <tr> <td><code>void <a href=\"#writeDouble()\">writeDouble</a>(in double aDouble);</code></td> </tr> <tr> <td><code>void <a href=\"#writeFloat()\">writeFloat</a>(in float aFloat);</code></td> </tr> <tr> <td><code>void <a href=\"#writeStringZ()\">writeStringZ</a>(in string aString);</code></td> </tr> <tr> <td><code>void <a href=\"#writeUtf8Z()\">writeUtf8Z</a>(in wstring aString);</code></td> </tr> <tr> <td><code>void <a href=\"#writeWStringZ()\">writeWStringZ</a>(in wstring aString);</code></td> </tr> </tbody>\n</table>\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n<h3 id=\"setOutputStream()\" name=\"setOutputStream()\">setOutputStream()</h3>\n<p>Sets the stream to which output is directed.</p>\n<pre class=\"eval\">void setOutputStream(\n  in nsIOutputStream aOutputStream\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aOutputStream</code></dt> <dd>Instance of the <code>nsIOutputStream</code> object to which output should be directed.</dd>\n</dl>\n<h3 id=\"write8()\" name=\"write8()\">write8()</h3>\n<p>Writes an 8-bit integer to the stream.</p>\n<pre class=\"eval\">void write8(\n  in PRUint8 aByte\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aByte</code></dt> <dd>The byte to write to the stream.</dd>\n</dl>\n<h3 id=\"write16()\" name=\"write16()\">write16()</h3>\n<p>Writes a 16-bit integer to the stream.</p>\n<pre class=\"eval\">void write16(\n  in PRUint16 a16\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>a16</code></dt> <dd>The 16-bit integer to write to the stream.</dd>\n</dl>\n<h3 id=\"write32()\" name=\"write32()\">write32()</h3>\n<p>Writes a 32-bit integer to the stream.</p>\n<pre class=\"eval\">void write32(\n  in PRUint32 a32\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>a32</code></dt> <dd>The 32-bit integer to write to the stream.</dd>\n</dl>\n<h3 id=\"write64()\" name=\"write64()\">write64()</h3>\n<p>Writes a 64-bit integer to the stream.</p>\n<pre class=\"eval\">void write64(\n  in PRUint64 a64\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>a64</code></dt> <dd>The 64-bit integer to write to the stream.</dd>\n</dl>\n<h3 id=\"writeBoolean()\" name=\"writeBoolean()\">writeBoolean()</h3>\n<p>Writes a boolean value (as a byte) to the stream.</p>\n<pre class=\"eval\">void writeBoolean(\n  in PRBool aBoolean\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aBoolean</code></dt> <dd>The Boolean value to write to the stream; the value will consist of one byte in the output stream.</dd>\n</dl>\n<h3 id=\"writeByteArray()\" name=\"writeByteArray()\">writeByteArray()</h3>\n<p>Writes an opaque byte array to the stream.</p>\n<pre class=\"eval\">void writeByteArray(\n  [array, size_is(aLength)] in PRUint8 aBytes,\n  in PRUint32 aLength\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aBytes</code></dt> <dd>The bytes to write to the stream.</dd> <dt><code>aLength</code></dt> <dd>The number of bytes to write to the stream.</dd>\n</dl>\n<h3 id=\"writeBytes()\" name=\"writeBytes()\">writeBytes()</h3>\n<p>Writes an opaque byte array to the stream.</p>\n<pre class=\"eval\">void writeBytes(\n  [size_is(aLength)] in string aString,\n  in PRUint32 aLength\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aString</code></dt> <dd>The byte array to write to the stream.</dd> <dt><code>aLength</code></dt> <dd>The number of bytes to write to the stream.</dd>\n</dl>\n<h3 id=\"writeDouble()\" name=\"writeDouble()\">writeDouble()</h3>\n<p>Writes a double precision floating point number to the stream.</p>\n<pre class=\"eval\">void writeDouble(\n  in double aDouble\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aDouble</code></dt> <dd>The <code>double</code> to write to the stream.</dd>\n</dl>\n<h3 id=\"writeFloat()\" name=\"writeFloat()\">writeFloat()</h3>\n<p>Writes a floating point number to the stream.</p>\n<pre class=\"eval\">void writeFloat(\n  in float aFloat\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aFloat</code></dt> <dd>The floating point value to write to the stream.</dd>\n</dl>\n<h3 id=\"writeStringZ()\" name=\"writeStringZ()\">writeStringZ()</h3>\n<p>Writes an 8-bit pascal style string to the stream. The output data consists of a 32-bit length field, followed by that many 8-bit characters.</p>\n<pre class=\"eval\">void writeStringZ(\n  in string aString\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aString</code></dt> <dd>The string to write to the stream.</dd>\n</dl>\n<h3 id=\"writeUtf8Z()\" name=\"writeUtf8Z()\">writeUtf8Z()</h3>\n<p>Writes an 8-bit pascal style string (UTF8-encoded) to the stream. The output data consists of a 32-bit length field, followed by that many 8-bit characters.</p>\n<pre class=\"eval\">void writeUtf8Z(\n  in wstring aString\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aString</code></dt> <dd>The string to write to the stream.</dd>\n</dl>\n<h3 id=\"writeWStringZ()\" name=\"writeWStringZ()\">writeWStringZ()</h3>\n<p>Writes a 16-bit pascal style string to the stream. The output data consists of a 32-bit length field, followed by that many <code>PRUnichar</code>s.</p>\n<pre class=\"eval\">void writeWStringZ(\n  in wstring aString\n);\n</pre>\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n<dl> <dt><code>aString</code></dt> <dd>The string to write to the stream.</dd>\n</dl>\n<h2 id=\"See_also\" name=\"See_also\">See also</h2>\n<ul> <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIBinaryInputStream\" title=\"\">nsIBinaryInputStream</a></code></li> <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIOutputStream\" title=\"\">nsIOutputStream</a></code></li> <li><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInputStream\" title=\"\">nsIInputStream</a></code></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mossop\">Mossop</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Kglee\">Kglee</a>",
    "title": "nsIBinaryOutputStream"
}