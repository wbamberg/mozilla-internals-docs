{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/netwerk/base/public/nsICryptoHash.idl\" rel=\"custom\">netwerk/base/public/nsICryptoHash.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThis interface can be used to compute a cryptographic hash function of some data. You can, for example, calculate the <code>SHA256</code> hash of a file to determine if it contains the data you think it does. The hash algorithms supported are MD2, MD5, SHA-1, SHA-256, SHA-384, and SHA-512.\n</span>\n\n  <div style=\"height: 42px; position: relative; padding: 2px; width: auto;\">\n\n  <div style=\"top: 22px; font-size: 11px; position: absolute;\">1.0</div>\n  \n  <div style=\"top: 22px; font-size: 11px; position: absolute; left: 0px; text-align: right; float: right; width: 100%;\">66</div>\n  \n  <div style=\"height: 8px; top: 16px; background: #dd0000; left: 0px; position: absolute; width: 5.714285714285714%;\"></div>\n  \n<div style=\"height: 8px; top: 16px; left: 5.714285714285714%; background: #00dd00; position: absolute; width: 94.28571428571429%;\" title=\"Introduced in Gecko 1.8 (Firefox 1.5 / Thunderbird 1.5 / SeaMonkey 1.0)\"></div>\n\n<div style=\"top: 0px; font-size: 11px; position: absolute; left: 5.714285714285714%;\">Introduced</div>\n<div style=\"top: 22px; font-size: 11px; position: absolute; left: 5.714285714285714%;\">Gecko 1.8</div>\n\n</div>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 1.8 (Firefox 1.5 / Thunderbird 1.5 / SeaMonkey 1.0)</span></div>\n</div><p></p>\n\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td><code>ACString <a href=\"#finish()\">finish</a>(in PRBool aASCII);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#init()\">init</a>(in unsigned long aAlgorithm);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#initWithString()\">initWithString</a>(in ACString aAlgorithm);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#update()\">update</a>([const, array, size_is(aLen)] in octet aData, in unsigned long aLen);</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#updateFromStream()\">updateFromStream</a>(in nsIInputStream aStream, in unsigned long aLen);</code></td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Constants\" name=\"Constants\">Constants</h2>\n\n<h4 id=\"Hash_Algorithms\" name=\"Hash_Algorithms\">Hash algorithms</h4>\n\n<p>These constants are used by the <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsICryptoHash#init()\">init()</a></code> method to indicate which hashing function to use. The values map directly onto the values defined in mozilla/security/nss/lib/cryptohi/hasht.h.</p>\n\n<table class=\"standard-table\">\n <tbody>\n  <tr>\n   <td class=\"header\">Constant</td>\n   <td class=\"header\">Value</td>\n   <td class=\"header\">Description</td>\n  </tr>\n  <tr>\n   <td><code>MD2</code></td>\n   <td><code>1</code></td>\n   <td>Message Digest Algorithm 2</td>\n  </tr>\n  <tr>\n   <td><code>MD5</code></td>\n   <td><code>2</code></td>\n   <td>Message-Digest algorithm 5</td>\n  </tr>\n  <tr>\n   <td><code>SHA1</code></td>\n   <td><code>3</code></td>\n   <td>Secure Hash Algorithm 1</td>\n  </tr>\n  <tr>\n   <td><code>SHA256</code></td>\n   <td><code>4</code></td>\n   <td>Secure Hash Algorithm 256</td>\n  </tr>\n  <tr>\n   <td><code>SHA384</code></td>\n   <td><code>5</code></td>\n   <td>Secure Hash Algorithm 384</td>\n  </tr>\n  <tr>\n   <td><code>SHA512</code></td>\n   <td><code>6</code></td>\n   <td>Secure Hash Algorithm 512</td>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n\n<h3 id=\"finish()\" name=\"finish()\">finish()</h3>\n\n<p>Completes the hash object and produces the actual hash data.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> This method may be called any time after \" .. manch(\"init\") .. \" is called. This call resets the object.</div><p></p>\n\n<pre class=\"eval\">ACString finish(\n  in PRBool aASCII\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aASCII</code></dt>\n <dd>If <code>true</code> then the returned value is a base-64 encoded string. If <code>false</code>, then the returned value is binary data.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>This method returns a hash of the data that was read by this object. This can be either binary data or a base-64 encoded string.</p>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>NS_ERROR_NOT_INITIALIZED</code></dt>\n <dd>Indicates that <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsICryptoHash#init()\">init()</a></code> or <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsICryptoHash#initWithString()\">initWithString()</a></code> has not been called.</dd>\n</dl>\n\n<h3 id=\"init()\" name=\"init()\">init()</h3>\n\n<p>Initialize the hashing object. This method may be called multiple times with different algorithm types.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> This method or \" .. manch(\"initWithString\") .. \" must be called before any other method on this interface is called.</div><p></p>\n\n<pre class=\"eval\">void init(\n  in unsigned long aAlgorithm\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aAlgorithm</code></dt>\n <dd>The hash algorithm to use. Must be one of the <a href=\"#Hash_algorithms\">Hash Algorithms</a>.</dd>\n</dl>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>NS_ERROR_INVALID_ARG</code></dt>\n <dd>Indicates that an unsupported algorithm type was passed</dd>\n</dl>\n\n<h3 id=\"initWithString()\" name=\"initWithString()\">initWithString()</h3>\n\n<p>Initialize the hashing object. This method may be called multiple times with different algorithm types.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> This method or \" .. manch(\"init\") .. \" must be called before any other method on this interface is called.</div><p></p>\n\n<pre class=\"eval\">void initWithString(\n  in ACString aAlgorithm\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aAlgorithm</code></dt>\n <dd>The hash algorithm type to be used as a string, such as <code>\"SHA256\"</code>.</dd>\n</dl>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>NS_ERROR_INVALID_ARG</code></dt>\n <dd>Indicates that an unsupported algorithm type was passed</dd>\n</dl>\n\n<h3 id=\"update()\" name=\"update()\">update()</h3>\n\n<p>Adds an array of data to be hashed to the object. See <a href=\"#Computing_the_Hash_of_a_String\">Computing the Hash of a String</a> for an example of using this method.</p>\n\n<pre class=\"eval\">void update(\n  [const, array, size_is(aLen)] in octet aData,\n  in unsigned long aLen\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aData</code></dt>\n <dd>A buffer to calculate the hash over.</dd>\n <dt><code>aLen</code></dt>\n <dd>The length of the buffer <code>aData</code>.</dd>\n</dl>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>NS_ERROR_NOT_INITIALIZED</code></dt>\n <dd>Indicates that <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsICryptoHash#init()\">init()</a></code> or <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsICryptoHash#initWithString()\">initWithString()</a></code> has not been called.</dd>\n</dl>\n\n<h3 id=\"updateFromStream()\" name=\"updateFromStream()\">updateFromStream()</h3>\n\n<p>Calculates and updates a new hash based on a given data stream (<code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIInputStream\" title=\"\">nsIInputStream</a></code>). See <a href=\"#Computing_the_Hash_of_a_File\">Computing the Hash of a File</a> for an example of using this method.</p>\n\n<pre class=\"eval\">void updateFromStream(\n  in nsIInputStream aStream,\n  in unsigned long aLen\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>aStream</code></dt>\n <dd>An input stream to read from.</dd>\n <dt><code>aLen</code></dt>\n <dd>How much to read from the given <code>aStream</code>. Passing <code>PR_UINT32_MAX</code> indicates that all data available will be used to update the hash.</dd>\n</dl>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n <dt><code>NS_ERROR_NOT_AVAILABLE</code></dt>\n <dd>Indicates that the requested amount of data to be calculated into the hash is not available.</dd>\n <dt><code>NS_ERROR_NOT_INITIALIZED</code></dt>\n <dd>Indicates that <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsICryptoHash#init()\">init()</a></code> or <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsICryptoHash#initWithString()\">initWithString()</a></code> has not been called.</dd>\n</dl>\n\n<h2 id=\"Example\" name=\"Example\">Example</h2>\n\n<h3 id=\"Computing_the_Hash_of_a_File\">Computing the Hash of a File</h3>\n\n<p>You can easily compute the hash of a file using <code>nsICryptoHash</code>. You will need to create an instance of <code>nsICryptoHash</code>, open an input stream from a file, and then update the hash with the file. The following example shows how to compute the <code>SHA256</code> hash of a file:</p>\n\n<pre class=\"brush: js\">// hardcoded here for convenience\nvar path = \"c:\\\\windows\\\\notepad.exe\";\nvar f = Components.classes[\"@mozilla.org/file/local;1\"]\n                  .createInstance(Components.interfaces.nsILocalFile);\nf.initWithPath(path);\nvar istream = Components.classes[\"@mozilla.org/network/file-input-stream;1\"]           \n                        .createInstance(Components.interfaces.nsIFileInputStream);\n// open for reading\nistream.init(f, 0x01, 0444, 0);\nvar ch = Components.classes[\"@mozilla.org/security/hash;1\"]\n                   .createInstance(Components.interfaces.nsICryptoHash);\n// we want to use the <code>SHA256</code> algorithm\nch.init(ch.<code>SHA256</code>);\n// this tells updateFromStream to read the entire file\nconst PR_UINT32_MAX = 0xffffffff;\nch.updateFromStream(istream, PR_UINT32_MAX);\n// pass false here to get binary data back\nvar hash = ch.finish(false);\n\n// return the two-digit hexadecimal code for a byte\nfunction toHexString(charCode)\n{\n  return (\"0\" + charCode.toString(16)).slice(-2);\n}\n\n// convert the binary hash data to a hex string.\nvar s = Array.from(hash, (c, i) =&gt; toHexString(hash.charCodeAt(i))).join(\"\");\n// s now contains your hash in hex\n</pre>\n\n<p>This gives <code>5eb63bbbe01eeed093cb22bb8f5acdc3</code> for the hash value. This example, while simple, shows most of the functionality of the interface.</p>\n\n<p>The first thing to note is that when you call the <code><a href=\"#init\">init()</a></code> method you must specify the hash algorithm to use. All of the available algorithms are specified as <a href=\"#Constants\">constants</a> on the interface.</p>\n\n<p>Also note that when you call the <code><a href=\"#updateFromStream\">updateFromStream()</a></code> method, the second parameter is the number of bytes to read. Passing <code>PR_UINT32_MAX</code> here indicates that you want the entire file read.</p>\n\n<p>Finally, note that calling the <code><a href=\"#finish\">finish()</a></code> method produces the hash value. The single parameter to this method is <code>false</code> in this example to return binary data. Passing <code>true</code> returns the hash as a base 64 encoded string. In this example we take the binary data and produce a hexadecimal string of the result, as is commonly output by hashing programs.</p>\n\n<h3 id=\"Computing_the_Hash_of_a_String\">Computing the Hash of a String</h3>\n\n<p>Another common operation is computing the hash value of a string. Since hash functions are computed over bytes, you will first need to convert the string to a series of bytes using <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIScriptableUnicodeConverter\" title=\"\">nsIScriptableUnicodeConverter</a></code> and a Unicode encoding that you specify.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> Different encodings will produce different hash values! You should always use the same encoding if you intend to compare results.</div><p></p>\n\n<p>The example below shows how to convert a string to bytes in the UTF-8 encoding, and then compute the <code>SHA256</code> hash of it. The result is computed as a hex string as in the previous example.</p>\n\n<p>In this example, we use the <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsICryptoHash#update()\">update()</a></code> method to pass an array of bytes to be hashed. As in the previous example, we convert the binary result to a hex string.</p>\n\n<pre class=\"brush: js\">var str = \"hello world\";\nvar converter =\n  Components.classes[\"@mozilla.org/intl/scriptableunicodeconverter\"].\n    createInstance(Components.interfaces.nsIScriptableUnicodeConverter);\n\n// we use UTF-8 here, you can choose other encodings.\nconverter.charset = \"UTF-8\";\n// result is an out parameter,\n// result.value will contain the array length\nvar result = {};\n// data is an array of bytes\nvar data = converter.convertToByteArray(str, result);\nvar ch = Components.classes[\"@mozilla.org/security/hash;1\"]\n                   .createInstance(Components.interfaces.nsICryptoHash);\nch.init(ch.<code>SHA256</code>);\nch.update(data, data.length);\nvar hash = ch.finish(false);\n\n// return the two-digit hexadecimal code for a byte\nfunction toHexString(charCode)\n{\n  return (\"0\" + charCode.toString(16)).slice(-2);\n}\n\n// convert the binary hash data to a hex string.\nvar s = Array.from(hash, (c, i) =&gt; toHexString(hash.charCodeAt(i))).join(\"\");\n// s now contains your hash in hex: should be\n// 5eb63bbbe01eeed093cb22bb8f5acdc3\n</pre>\n\n<h2 id=\"See_also\" name=\"See_also\">See also</h2>\n\n<ul>\n <li><a href=\"/en/Firefox_1.5_for_developers\" title=\"en/Firefox_1.5_for_developers\">Firefox 1.5</a></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/SphinxKnight\">SphinxKnight</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/fkiefer\">fkiefer</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/One\">One</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/arai\">arai</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sebastianz\">Sebastianz</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Smi\">Smi</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Taken\">Taken</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Johnjbarton\">Johnjbarton</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/CN\">CN</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/bsmedberg\">bsmedberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Erdogduemlak\">Erdogduemlak</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ted_Mielczarek\">Ted_Mielczarek</a>",
    "title": "nsICryptoHash"
}