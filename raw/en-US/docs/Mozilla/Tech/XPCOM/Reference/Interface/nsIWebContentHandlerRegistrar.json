{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/xpfe/appshell/public/nsIWebContentHandlerRegistrar.idl\" rel=\"custom\">xpfe/appshell/public/nsIWebContentHandlerRegistrar.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nApplications wishing to use web content handlers need to implement this interface. Typically they will prompt the user to confirm adding an entry to the local list.\n</span>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 8.0 (Firefox 8.0 / Thunderbird 8.0 / SeaMonkey 2.5)</span></div>\n</div><p></p>\n\n<p>Implemented by <code>@mozilla.org/embeddor.implemented/web-content-handler-registrar;1</code> as a service:</p>\n\n<pre class=\"eval\"><code><span class=\"kwd\">var</span><span class=\"pln\"> nsiwchr </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"typ\">Cc</span><span class=\"pun\">[</span><span class=\"str\">\"@mozilla.org/embeddor.implemented/web-content-handler-registrar;1\"</span><span class=\"pun\">]\n                .</span><span class=\"pln\">getService</span><span class=\"pun\">(</span><span class=\"typ\">Ci</span><span class=\"pun\">.</span><span class=\"pln\">nsIWebContentHandlerRegistrar</span><span class=\"pun\">);</span></code>\n</pre>\n\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n\n<table class=\"standard-table\" style=\"height: 59px; width: 966px;\">\n <tbody>\n  <tr>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#\">registerContentHandler</a>(in DOMString mimeType, in DOMString uri, in DOMString title, in nsIDOMWindow contentWindow)</code></td>\n  </tr>\n  <tr>\n   <td><code>void <a href=\"#\">registerProtocolHandler</a>(in DOMString protocol,in DOMString uri, in DOMString title, in nsIDOMWindow contentWindow)</code></td>\n  </tr>\n  <tr>\n  </tr>\n  <tr>\n  </tr>\n  <tr>\n  </tr>\n  <tr>\n  </tr>\n  <tr>\n  </tr>\n  <tr>\n  </tr>\n  <tr>\n  </tr>\n  <tr>\n  </tr>\n  <tr>\n  </tr>\n  <tr>\n  </tr>\n  <tr>\n  </tr>\n  <tr>\n  </tr>\n </tbody>\n</table>\n\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n\n<h3 id=\"addListener()\" name=\"addListener()\">registerContentHandler</h3>\n\n<p>Summary of registerContentHandler</p>\n\n<pre class=\"eval\">void registerContentHandler(\n  in DOMString mimeType,\n  in DOMString uri,\n  in DOMString title,\n  in nsIDOMWindow contentWindow\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>mimeType</code></dt>\n <dd>The desired MIME type as a string</dd>\n <dt><code>uri</code></dt>\n <dd>The URI to the handler as a string.</dd>\n <dt><code>title</code></dt>\n <dd>The title of the handler presented to the user as a string.</dd>\n <dt><code>contentWindow</code></dt>\n <dd>The DOM content window from which the method has been called.</dd>\n</dl>\n\n<h3 id=\"addListener()\" name=\"addListener()\">registerProtocolHandler</h3>\n\n<p>Summary of registerProtocolHandler</p>\n\n<pre class=\"eval\">void registerProtocolHandler(\n  in DOMString protocol,\n  in DOMString uri,\n  in DOMString title,\n  in nsIDOMWindow contentWindow\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n <dt><code>protocol</code></dt>\n <dd>The protocol the site wishes to handle, specified as a string.</dd>\n <dt><code>uri</code></dt>\n <dd>The URI to the handler as a string. You must include \"<code>%s</code>\" to indicate where to insert the escaped URI of the document to be handled. Otherwise NS_ERROR_DOM_SYNTAX_ERR will be thrown. This string must also be of either the <code>http </code>or <code>https </code>schemes.</dd>\n <dt><code>title</code></dt>\n <dd>The title of the handler presented to the user as a string.</dd>\n <dt><code>contentWindow</code></dt>\n <dd>The DOM content window from which the method has been called.</dd>\n</dl>\n\n<div class=\"note\">\n<p>Note: Script must execute from same domain as uri or else it will throw permission error. Can bypass this by opening<code> about:config</code> and setting preference of <code>gecko.handlerService.allowRegisterFromDifferentHost</code> to <code>true</code>.</p>\n</div>\n\n<h2 id=\"Examples\" name=\"Examples\">Examples</h2>\n\n<h3 id=\"Getting_most_recent_window\" name=\"Getting_most_recent_window\">Register a webmail service as <code>mailto</code> handler</h3>\n\n<p>The following code aims to add \"Outlook.com Live Mail\" to list of webservice handlers. In the image below \"Gmail\" and \"Yahoo! Mail\" already exist as webservice handlers.</p>\n\n<p><img alt='\"Gmail\" and \"Yahoo! Mail\" exist as webservice handlers. This example aims to add \"Outlook.com Live Mail\" to the list.' src=\"https://mdn.mozillademos.org/files/8237/how20to20use20hotmail_zpsb12baf06[1].png\" style=\"height: 438px; width: 488px;\"></p>\n\n<pre class=\"brush: js\">Cu.import('resource://gre/modules/Services.jsm');\n\nvar nsiwchr = Cc[\"@mozilla.org/embeddor.implemented/web-content-handler-registrar;1\"]\n                .getService(Ci.nsIWebContentHandlerRegistrar);\n\nvar htmlContentWindow = undefined;\nvar registerUri = 'http://mail.live.com/secure/start?action=compose&amp;to=%s';\nvar myURIHostName = Services.io.newURI(registerUri, null, null).host;\n\n// this section here is long and daunting, but its just finding a suitable contentWindow\nvar DOMWindows = Services.wm.getEnumerator(null);\nwhile (DOMWindows.hasMoreElements()) {\n    var aDOMWindow = DOMWindows.getNext();\n    if (aDOMWindow.gBrowser) {\n        if (aDOMWindow.gBrowser.tabContainer) {\n            //aDOMWindow has tabs\n            var tabs = aDOMWindow.gBrowser.tabContainer.childNodes;\n            for (var i = 0; i &lt; tabs.length; i++) {\n                console.log(tabs[i].linkedBrowser.contentWindow.location);\n                if (tabs[i].linkedBrowser.contentWindow.location.hostname == myURIHostName) {\n                    htmlContentWindow = tabs[i].linkedBrowser.contentWindow;\n                    break; //break for loop\n                }\n            }\n            if (htmlContentWindow) {\n                break; //break while loop\n            }\n        } else {\n            //aDOMWindow doest have any tabs\n            if (aDOMWindow.gBrowser.contentWindow.location.hostname == myURIHostName) {\n                htmlContentWindow = aDOMWindow.contentWindow;\n                break;\n            }\n        }\n    } else {\n        //aDOMWindow is a popup window\n        if (aDOMWindow.location.hostname == myURIHostName) {\n            htmlContentWindow = aDOMWindow;\n            break;\n        }\n    }\n}\n// this section here is long and daunting, but its just finding a suitable contentWindow\n\nif (!htmlContentWindow) {\n    throw new Error('No suitable content window found, will not reigsterProtocolHandler. Must have a content window to pass to registerProtocolHandler as it prompts the user for permission');\n}\n\nnsiwchr.registerProtocolHandler(\"mailto\", registerUri, \"Outlook.com Live Mail\", htmlContentWindow);\n</pre>\n\n<p>In this example the <code>Services.wm.getEnumerator </code>was used to find a window that had the same host name (<code>contentWindow.location.hostname</code>) as the <code>uri </code>(<code>uri.host</code>) we are trying to add. If it does not find anything with host name of <code>mail.live.com</code> then it aborts. If the host names do not match, this error will be thrown in the Error Console.</p>\n\n<pre>Permission denied to add http://mail.live.com/secure/start?action=compose&amp;to=%s as a content or protocol handler'Permission denied to add http://mail.live.com/secure/start?action=compose&amp;to=%s as a content or protocol handler' when calling method: [nsIWebContentHandlerRegistrar::registerProtocolHandler]\n</pre>\n\n<p>If the host names do match then a confirmation like this will be seen:</p>\n\n<p><img alt='Confirmation message seen when contentWindow test passes for registerProtocolHandler. The location of the contentWindow is \"http://mail.live.com/mail/postmaster.aspx\" which matches that of \"http://mail.live.com/secure/start?action=compose&amp;amp;amp;amp;to=%s\" which is the 2nd argument passed to registerProtocolHandler.' src=\"https://mdn.mozillademos.org/files/8239/confirmation%20box%20for%20registerProtocolHandler%20from%20right%20contentWindow.png\" style=\"height: 117px; width: 1115px;\"></p>\n\n<p>This domain check can be bypassed by setting the preference of <code>gecko.handlerService.allowRegisterFromDifferentHost </code>to <code>true </code>as in this code here:</p>\n\n<pre class=\"brush: js\">var {classes: Cc, interfaces: Ci, utils: Cu} = Components;\nCu.import(\"resource://gre/modules/Services.jsm\");\nvar nsiwchr = Cc[\"@mozilla.org/embeddor.implemented/web-content-handler-registrar;1\"]\n                .getService(Ci.nsIWebContentHandlerRegistrar);\n\nvar allowRegisterFromDifferentHost = Services.prefs.getBoolPref('gecko.handlerService.allowRegisterFromDifferentHost');\nif (!allowRegisterFromDifferentHost) {\n  Services.prefs.setBoolPref('gecko.handlerService.allowRegisterFromDifferentHost', true);\n}\n\nvar htmlContentWindow = Services.wm.getMostRecentWindow('navigator:browser'); //because we set the preference to true above, we need any window that has a browser, just pass the DOMWindow and the registerProtocolHandler will get the contentWindow from it\n\nnsiwchr.registerProtocolHandler(\"mailto\", \"http://mail.live.com/secure/start?action=compose&amp;to=%s\", \"Outlook.com Live Mail\", htmlContentWindow);\n\nif (!allowRegisterFromDifferentHost) {\n  //it this variable is false, than we had set the pref to true obviously. so lets restore it back to false, which is the default value\n  Services.prefs.clearUserPref('gecko.handlerService.allowRegisterFromDifferentHost');\n}</pre>\n\n<h3 id=\"Getting_most_recent_window\" name=\"Getting_most_recent_window\">Register a webmail service as <code>mailto</code> handler without contentWindow</h3>\n\n<p>Under construction. To take from:  http://mxr.mozilla.org/mozilla-release/source/browser/components/feeds/src/WebContentConverter.js#372 AND http://stackoverflow.com/questions/24900655/use-registerprotocolhandler-without-contentwindow</p>\n\n<pre class=\"brush: js\">place holder\n</pre>\n\n<h2 id=\"See_also\" name=\"See_also\">See also</h2>\n\n<ul>\n <li>nsIWebContentSonverterService (under construction: page doesnt exist yet)</li>\n <li><a href=\"/en-US/docs/Web/API/navigator.registerProtocolHandler$edit\">registerProtocolHandler from Non-Privelaged Scope</a></li>\n <li><a href=\"/en-US/docs/Web/API/Navigator.registerContentHandler\">Web API Interfaces &gt; Navigator.registerContentHandler()</a></li>\n <li><a href=\"/en-US/docs/Web/API/navigator.registerProtocolHandler\">Web API Interfaces &gt; Navigator.registerProtocolHandler()</a></li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/wiwang\">wiwang</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Noitidart\">Noitidart</a>",
    "title": "nsIWebContentHandlerRegistrar"
}