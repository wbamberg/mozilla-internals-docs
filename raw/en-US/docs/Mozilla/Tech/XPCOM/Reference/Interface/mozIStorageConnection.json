{
    "content": "<p></p><div style=\"border: solid #ddd 2px; margin-bottom: 12px;\">\n<div style=\"background: #eee; padding: 2px;\"><code><a href=\"https://dxr.mozilla.org/mozilla-central/source/storage/public/mozIStorageConnection.idl\" rel=\"custom\">storage/public/mozIStorageConnection.idl</a></code><span style=\"text-align: right; float: right;\"><a href=\"/en-US/docs/Interfaces/About_Scriptable_Interfaces\" style=\"color: #00cc00; font-weight: 700;\">Scriptable</a></span></div>\n<span style=\"padding: 4px 2px;\">\n\nThis interface represents a database connection attached to a specific file or an in-memory database. It is the primary interface for interacting with a database, including creating prepared statements, executing SQL, and examining database errors.\n</span>\n\n  <div style=\"height: 42px; position: relative; padding: 2px; width: auto;\">\n\n  <div style=\"top: 22px; font-size: 11px; position: absolute;\">1.0</div>\n  \n  <div style=\"top: 22px; font-size: 11px; position: absolute; left: 0px; text-align: right; float: right; width: 100%;\">68</div>\n  \n  <div style=\"height: 8px; top: 16px; background: #dd0000; left: 0px; position: absolute; width: 5.555555555555555%;\"></div>\n  \n<div style=\"height: 8px; top: 16px; left: 5.555555555555555%; background: #00dd00; position: absolute; width: 94.44444444444444%;\" title=\"Introduced in Gecko 1.8 (Firefox 1.5 / Thunderbird 1.5 / SeaMonkey 1.0)\"></div>\n\n<div style=\"top: 0px; font-size: 11px; position: absolute; left: 5.555555555555555%;\">Introduced</div>\n<div style=\"top: 22px; font-size: 11px; position: absolute; left: 5.555555555555555%;\">Gecko 1.8</div>\n\n    <div style=\"height: 8px; top: 16px; left: 10.61111111111111%; background: #eeee00; position: absolute; width: 1%; border-radius: 4px; -webkit-border-radius: 4px;\" title=\"Last changed in Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)\"></div>\n    \n</div>\n\n<div style=\"background: #eee; padding: 2px;\">\nInherits from: <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsISupports\" title=\"\">nsISupports</a></code>\n<span style=\"text-align: right; float: right;\">Last changed in Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)</span></div>\n</div><p></p>\n\n<p>For a general overview on how to use this interface, see <a href=\"/en/Storage\" title=\"en/Storage\">Storage</a>.</p>\n\n<h2 id=\"Method_overview\" name=\"Method_overview\">Method overview</h2>\n\n<table class=\"standard-table\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td><code>void <a href=\"#asyncClose()\">asyncClose</a>([optional] in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageCompletionCallback\" title=\"\">mozIStorageCompletionCallback</a></code> aCallback);</code> </td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>void <a href=\"#beginTransaction()\">beginTransaction</a>();</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>void <a href=\"#beginTransactionAs()\">beginTransactionAs</a>(in PRInt32 transactionType);</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageStatement\" title=\"\">mozIStorageStatement</a></code> <a href=\"#clone()\">clone</a>([optional] in boolean aReadOnly);</code> </td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>void <a href=\"#close()\">close</a>();</code> </td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>void <a href=\"#commitTransaction()\">commitTransaction</a>();</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>void <a href=\"#createAggregateFunction()\">createAggregateFunction</a>(in AUTF8String aFunctionName, in long aNumArguments, in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageAggregateFunction\" title=\"\">mozIStorageAggregateFunction</a></code> aFunction);</code> </td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageAsyncStatement\" title=\"\">mozIStorageAsyncStatement</a></code> <a href=\"#createAsyncStatement()\">createAsyncStatement</a>(in AUTF8String aSQLStatement);</code> </td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>void <a href=\"#createFunction()\">createFunction</a>(in AUTF8String aFunctionName, in long aNumArguments, in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageFunction\" title=\"\">mozIStorageFunction</a></code> aFunction);</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageStatement\" title=\"\">mozIStorageStatement</a></code> <a href=\"#createStatement()\">createStatement</a>(in AUTF8String aSQLStatement);</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>void <a href=\"#createTable()\">createTable</a>(in string aTableName, in string aTableSchema);</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStoragePendingStatement\" title=\"\">mozIStoragePendingStatement</a></code> <a href=\"#executeAsync()\">executeAsync</a>([array, size_is(aNumStatements)] in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageBaseStatement\" title=\"\">mozIStorageBaseStatement</a></code> aStatements, in unsigned long aNumStatements, [optional] in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageStatementCallback\" title=\"\">mozIStorageStatementCallback</a></code> aCallback );</code> </td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>void <a href=\"#executeSimpleSQL()\">executeSimpleSQL</a>(in AUTF8String aSQLStatement);</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>boolean <a href=\"#indexExists()\">indexExists</a>(in AUTF8String aIndexName);</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>void <a href=\"#preload()\">preload</a>();</code> <span class=\"inlineIndicator obsolete obsoleteInline\" title=\"(Firefox 3)\">Obsolete since Gecko 1.9</span></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>void <a href=\"#removeFunction()\">removeFunction</a>(in AUTF8String aFunctionName);</code> </td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageProgressHandler\" title=\"\">mozIStorageProgressHandler</a></code> <a href=\"#removeProgressHandler()\">removeProgressHandler</a>();</code> </td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>void <a href=\"#rollbackTransaction()\">rollbackTransaction</a>();</code></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>void <a href=\"#setGrowthIncrement()\">setGrowthIncrement</a>(in PRInt32 aIncrement, in AUTF8String aDatabaseName);</code> </td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageProgressHandler\" title=\"\">mozIStorageProgressHandler</a></code> <a href=\"#setProgressHandler()\">setProgressHandler</a>(in PRInt32 aGranularity, in <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageProgressHandler\" title=\"\">mozIStorageProgressHandler</a></code> aHandler);</code> </td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>boolean <a href=\"#tableExists()\">tableExists</a>(in AUTF8String aTableName);</code></td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2 id=\"Attributes\" name=\"Attributes\">Attributes</h2>\n\n<table class=\"standard-table\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td class=\"header\">Attribute</td>\n\t\t\t<td class=\"header\">Type</td>\n\t\t\t<td class=\"header\">Description</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>connectionReady</code></td>\n\t\t\t<td><code><a href=\"/en/boolean\" title=\"en/boolean\">boolean</a></code></td>\n\t\t\t<td>Indicates if the connection is open and ready to use. This will be <code>false</code> if the connection failed to open, or it has been closed. <strong>Read only.</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>databaseFile</code></td>\n\t\t\t<td><code><code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFile\" title=\"\">nsIFile</a></code></code></td>\n\t\t\t<td>The current database <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFile\" title=\"\">nsIFile</a></code>. <code>null</code> if the database connection refers to an in-memory database. <strong>Read only.</strong></td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>lastError</code></td>\n\t\t\t<td><code><a href=\"/en/long\" title=\"en/long\">long</a></code></td>\n\t\t\t<td>The last SQLite error code that occurred. <strong>Read only.</strong>\n\t\t\t<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> This is not reliable if you are using asynchronous statements or if you are using the connection on multiple threads.</div><p></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>lastErrorString</code></td>\n\t\t\t<td><code><a href=\"/en/AUTF8String\" title=\"en/AUTF8String\">AUTF8String</a></code></td>\n\t\t\t<td>The English error string reported by the SQLite library for the last SQLite operation. <strong>Read only.</strong>\n\t\t\t<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> This is not reliable if you are using asynchronous statements or if you are using the connection on multiple threads.</div><p></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>lastInsertRowID</code></td>\n\t\t\t<td><code><a href=\"/en/long_long\" title=\"en/long long\">long long</a></code></td>\n\t\t\t<td>The row ID from the last SQL <code>INSERT</code> operation. <strong>Read only.</strong>\n\t\t\t<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> This is not reliable if you are using asynchronous statements or if you are using the connection on multiple threads.</div><p></p>\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>schemaVersion</code></td>\n\t\t\t<td><code><a href=\"/en/long\" title=\"en/long\">long</a></code></td>\n\t\t\t<td>The schema version of the database. This should not be used until the database is ready. The version will be reported as 0 if it is not set. </td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>transactionInProgress</code></td>\n\t\t\t<td><code><a href=\"/en/boolean\" title=\"en/boolean\">boolean</a></code></td>\n\t\t\t<td>Returns <code>true</code> if there is a transaction in progress on the database. Otherwise returns <code>false</code>. <strong>Read only.</strong></td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2 id=\"Constants\" name=\"Constants\">Constants</h2>\n\n<h3 id=\"Transaction_execution_time_constants.\">Transaction execution time constants.</h3>\n\n<table class=\"standard-table\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td class=\"header\">Constant</td>\n\t\t\t<td class=\"header\">Value</td>\n\t\t\t<td class=\"header\">Description</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>TRANSACTION_DEFERRED</code></td>\n\t\t\t<td><code>0</code></td>\n\t\t\t<td>No database lock is obtained until the first statement is run.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>TRANSACTION_IMMEDIATE</code></td>\n\t\t\t<td><code>1</code></td>\n\t\t\t<td>A <a class=\"external\" href=\"http://sqlite.org/lockingv3.html#reserved_lock\" title=\"http://sqlite.org/lockingv3.html#reserved_lock\">reserved lock</a> is obtained on the database.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>TRANSACTION_EXCLUSIVE</code></td>\n\t\t\t<td><code>2</code></td>\n\t\t\t<td>An <a class=\"external\" href=\"http://sqlite.org/lockingv3.html#exclusive_lock\" title=\"http://sqlite.org/lockingv3.html#exclusive_lock\">exclusive lock</a> is obtained on the database.</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h3 id=\"SQLite_database_page_size_constant\">SQLite database page size constant</h3>\n\n<table class=\"standard-table\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td class=\"header\">Constant</td>\n\t\t\t<td class=\"header\">Value</td>\n\t\t\t<td class=\"header\">Description</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td><code>DEFAULT_PAGE_SIZE</code></td>\n\t\t\t<td><code>32768</code></td>\n\t\t\t<td>The default size for SQLite database pages. This is used by the Storage API when creating new databases, and must match the <code>SQLITE_DEFAULT_PAGE_SIZE</code> configured in <code><a href=\"https://dxr.mozilla.org/mozilla-central/source/db/sqlite3/src/Makefile.in\" rel=\"custom\">db/sqlite3/src/Makefile.in</a></code>. </td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<h2 id=\"Methods\" name=\"Methods\">Methods</h2>\n\n<p></p><h3 id=\"asyncClose()\">asyncClose()</h3><p></p>\n\n<p>Asynchronously closes a database connection, allowing all pending asynchronous statements to complete first.</p>\n\n<pre class=\"eval\">void asyncClose(\n  in mozIStorageCompletionCallback aCallback <span class=\"inlineIndicator optional optionalInline\">Optional</span>\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n\t<dt><code>aCallback</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n\t<dd>An optional callback handler to be executed when the connection is successfully closed. That object's <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIStorageCompletionCallback#complete()\">mozIStorageCompletionCallback.complete()</a></code> routine will be called once the connection is closed.</dd>\n</dl>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n\t<dt><code>NS_ERROR_UNEXPECTED</code></dt>\n\t<dd>Thrown if the method was called on a thread other than the one that opened the connection.</dd>\n</dl>\n\n<h3 id=\"beginTransaction()\" name=\"beginTransaction()\">beginTransaction()</h3>\n\n<p>Starts a new transaction DEFERRED transaction. This is the same as calling <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageConnection\" title=\"\">mozIStorageConnection</a></code> with <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIStorageConnection#TRANSACTION_DEFERRED\">mozIStorageConnection.TRANSACTION_DEFERRED.</a></code></p>\n\n<pre class=\"eval\"> void beginTransaction();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h3 id=\"beginTransactionAs()\" name=\"beginTransactionAs()\">beginTransactionAs()</h3>\n\n<p>This method starts a new transaction of the given transaction type. See the <a class=\"external\" href=\"http://sqlite.org/lang_transaction.html\" title=\"http://sqlite.org/lang_transaction.html\">SQLite documentation on transactions</a> for more details.</p>\n\n<p>In JavaScript, managing transactions can be difficult when you are using the same connection on different threads, or are using a combination of asynchronous and synchronous statement execution. The best way to deal with this is to only execute your statements asynchronously using <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIStorageConnection#executeAsync()\">mozIStorageConnection.executeAsync()</a></code>. This method will manage the transactions for you, so you don't have to worry about them.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> The database engine does not support nested transactions, so attempting to start a transaction when one is already active will throw an exception.</div><p></p>\n\n<pre class=\"eval\"> void beginTransactionAs(\n   in PRInt32 transactionType\n );\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n\t<dt><code>transactionType</code></dt>\n\t<dd>One of the transaction constants (<code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIStorageConnection#TRANSACTION_DEFERRED\">mozIStorageConnection.TRANSACTION_DEFERRED</a></code>, <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIStorageConnection#TRANSACTION_IMMEDIATE\">mozIStorageConnection.TRANSACTION_IMMEDIATE</a></code>, <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIStorageConnection#TRANSACTION_EXCLUSIVE\">mozIStorageConnection.TRANSACTION_EXCLUSIVE</a></code>)</dd>\n</dl>\n\n<p></p><h3 id=\"clone()\">clone()</h3><p></p>\n\n<p>Clones a database connection, optionally making the new connection read only.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> If your connection is already read-only, you will get a read-only clone.</div><p></p>\n\n<div class=\"note\"><strong>Note:</strong> Due to a bug in SQLite, if you use the shared cache (by calling <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIStorageService#openDatabase()\">mozIStorageService.openDatabase()</a></code>), the cloned connection's access privileges will be the same as the original connection, regardless of the value you specify for the <code>aReadOnly</code> parameter.</div>\n\n<pre class=\"eval\">mozIStorageConnection clone(\n  in boolean aReadOnly <span class=\"inlineIndicator optional optionalInline\">Optional</span>\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n\t<dt><code>aReadOnly</code></dt>\n\t<dd>If <code>true</code>, the returned database connection is in read only mode. This is <code>false</code> by default.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>A new <code>mozIStorageConnection</code> object representing the cloned connection.</p>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n\t<dt><code>NS_ERROR_UNEXPECTED</code></dt>\n\t<dd>The connection is to a memory database.</dd>\n</dl>\n\n<p></p><h3 id=\"close()\">close()</h3><p></p>\n\n<p>Closes a database connection. Before closing the connection, you need to finalize all statements created for the connection.</p>\n\n<div class=\"note\"><strong>Note:</strong> You must not call this method if any asynchronous statements have been executed on the connection. Instead, you should call <code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageConnection#asyncClose()\">asyncClose()</a></code>.</div>\n\n<pre class=\"eval\">void close();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n\t<dt><code>NS_ERROR_UNEXPECTED</code></dt>\n\t<dd>Thrown if any statement has been executed asynchronously on the connection, or if the method was called on a thread other than the one that opened the connection.</dd>\n</dl>\n\n<h3 id=\"commitTransaction()\" name=\"commitTransaction()\">commitTransaction()</h3>\n\n<p>This method commits the current transaction.</p>\n\n<pre class=\"eval\"> void commitTransaction();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<p></p><h3 id=\"createAggregateFunction()\">createAggregateFunction()</h3><p></p>\n\n<p>This method creates a new aggregate function that can be used in SQL. See <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageAggregateFunction\" title=\"\">mozIStorageAggregateFunction</a></code> for sample code and more details.</p>\n\n<p>If you use your connection on multiple threads, your function needs to be threadsafe, or it should only be called on one thread.</p>\n\n<pre class=\"eval\"> void createAggregateFunction(\n   in AUTF8String aFunctionName,\n   in long aNumArguments,\n   in mozIStorageAggregateFunction aFunction\n );\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n\t<dt><code>aFunctionName</code></dt>\n\t<dd>The name of the aggregate function to create, as seen in SQL.</dd>\n\t<dt><code>aNumArguments</code></dt>\n\t<dd>The number of arguments the function takes. Pass <code>-1</code> for variable-argument functions.</dd>\n\t<dt><code>aFunction</code></dt>\n\t<dd>The instance of <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageAggregateFunction\" title=\"\">mozIStorageAggregateFunction</a></code> that implements the function.</dd>\n</dl>\n\n<p></p><h3 id=\"createAsyncStatement()\">createAsyncStatement()</h3><p></p>\n\n<p>Creates a <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageAsyncStatement\" title=\"\">mozIStorageAsyncStatement</a></code> for the given SQL expression. An asynchronous statement can only be used to dispatch asynchronous requests to the asynchronous execution thread and cannot be used to take any synchronous actions on the database.</p>\n\n<p>The expression may use <code>\"?#\"</code> to indicate sequentially numbered parameters (?1, ?2, etc) or <code>\":name\"</code> to indicate named parameters. JavaScript callers should use named parameters.</p>\n\n<pre class=\"eval\">mozIStorageAsyncStatement createAsyncStatement(\n   in AUTF8String aSQLStatement\n );\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n\t<dt><code>aSQLStatement</code></dt>\n\t<dd>The SQL statement to execute.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns a new <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageAsyncStatement\" title=\"\">mozIStorageAsyncStatement</a></code> to be used to execute the specified statement.</p>\n\n<h3 id=\"createFunction()\" name=\"createFunction()\">createFunction()</h3>\n\n<p>Creates a new function that can be used in SQL. See <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageFunction\" title=\"\">mozIStorageFunction</a></code> for sample code and more details.</p>\n\n<p>If you use your connection on multiple threads, your function needs to be threadsafe, or it should only be called on one thread.</p>\n\n<pre class=\"eval\"> void createFunction(\n   in AUTF8String aFunctionName,\n   in long aNumArguments,\n   in mozIStorageFunction aFunction\n );\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n\t<dt><code>aFunctionName</code></dt>\n\t<dd>The name of function to create, as seen in SQL.</dd>\n\t<dt><code>aNumArguments</code></dt>\n\t<dd>The number of arguments the function takes. Pass <code>-1</code> for variable-argument functions.</dd>\n\t<dt><code>aFunction</code></dt>\n\t<dd>The instance of <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageFunction\" title=\"\">mozIStorageFunction</a></code> that implements the function.</dd>\n</dl>\n\n<h3 id=\"createStatement()\" name=\"createStatement()\">createStatement()</h3>\n\n<p>Creates a <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageStatement\" title=\"\">mozIStorageStatement</a></code> for the given SQL expression. The expression may use <code>\"?#\"</code> to indicate sequentially numbered parameters (?1, ?2, etc) or <code>\":name\"</code> to indicate named parameters. JavaScript callers should use named parameters.</p>\n\n<pre class=\"eval\"> mozIStorageStatement createStatement(\n   in AUTF8String aSQLStatement\n );\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n\t<dt><code>aSQLStatement</code></dt>\n\t<dd>The SQL statement to execute.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns a new <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageStatement\" title=\"\">mozIStorageStatement</a></code> to be used to execute the specified statement.</p>\n\n<div class=\"note\">\n<p><strong>Note</strong></p>\n\n<p>If the statement is meant to be executed asynchronously, you should rather create it with <a href=\"#createAsyncStatement()\" title=\"#createAsyncStatement()\">createAsyncStatement</a>. The resulting statement will be faster to execute. Additionally, the system will be able to inform you if you erroneously attempt to execute it synchronously.</p>\n</div>\n\n<h3 id=\"createTable()\" name=\"createTable()\">createTable()</h3>\n\n<p>This method creates a table with the given table name and schema.</p>\n\n<pre class=\"eval\"> void createTable(\n   in string aTableName,\n   in string aTableSchema\n );\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n\t<dt><code>aTableName</code></dt>\n\t<dd>The name of the table to create; table names may consist of the letters A-Z in either upper or lower case, the underscore, and the digits 0-9. The first character must be a letter.</dd>\n\t<dt><code>aTableSchema</code></dt>\n\t<dd>The table's schema. This should be specified using the same syntax the <code>CREATE TABLE</code> statement uses. For example: <code>\"foo INTEGER, bar STRING\"</code>.</dd>\n</dl>\n\n<h6 id=\"Exceptions_thrown\" name=\"Exceptions_thrown\">Exceptions thrown</h6>\n\n<dl>\n\t<dt><code>NS_ERROR_FAILURE</code></dt>\n\t<dd>Table already exists or the requested table couldn't be created.</dd>\n</dl>\n\n<p></p><h3 id=\"executeAsync()\">executeAsync()</h3><p></p>\n\n<p>Asynchronously executes an array of queries created with this connection, using any currently bound parameters. The statements are run wrapped in a transaction.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> The statements may be reused immediately, and the statements do not need to be reset individually.</div><p></p>\n\n<pre class=\"eval\">mozIStoragePendingStatement executeAsync(\n  [array, size_is(aNumStatements)] in mozIStorageBaseStatement aStatements,\n  in unsigned long aNumStatements,\n  in mozIStorageStatementCallback aCallback <span class=\"inlineIndicator optional optionalInline\">Optional</span>\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n\t<dt><code>aStatements</code></dt>\n\t<dd>The array of statements to execute asynchronously. They will be executed sequentially, in the order in which they appear in the array. Prior to <span title=\"(Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)\">Gecko 2.0</span> this was type <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageStatement\" title=\"\">mozIStorageStatement</a></code>.</dd>\n\t<dt><code>aNumStatements</code></dt>\n\t<dd>The number of statements in aStatements.</dd>\n\t<dt><code>aCallback</code> <span class=\"inlineIndicator optional optionalInline\">Optional</span></dt>\n\t<dd>A <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageStatementCallback\" title=\"\">mozIStorageStatementCallback</a></code> object to receive progress, error, and completion notifications.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>A <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStoragePendingStatement\" title=\"\">mozIStoragePendingStatement</a></code> object that can be used to cancel the statements' execution.</p>\n\n<h3 id=\"executeSimpleSQL()\" name=\"executeSimpleSQL()\">executeSimpleSQL()</h3>\n\n<p>Executes an SQL expression that has no bound parameters.</p>\n\n<p></p><div class=\"blockIndicator warning\">\n    <p><strong>Warning:</strong> Performing synchronous IO on the main thread can cause serious performance problems. As a result, this method of modifying the database is <strong>strongly</strong> discouraged!</p>\n</div><p></p>\n\n<pre class=\"eval\"> void executeSimpleSQL(\n   in AUTF8String aSQLStatement\n );\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n\t<dt><code>aSQLStatement</code></dt>\n\t<dd>The SQL statement to execute.</dd>\n</dl>\n\n<h3 id=\"indexExists()\" name=\"indexExists()\">indexExists()</h3>\n\n<p>This method determines whether or not the given index exists.</p>\n\n<pre class=\"eval\"> boolean indexExists(\n   in AUTF8String aIndexName\n );\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n\t<dt><code>aIndexName</code></dt>\n\t<dd>The index to check.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p><code>true</code> if the index exists, <code>false</code> otherwise.</p>\n\n<p></p><div class=\"headingWithIndicator\">\n        <h3 id=\"preload()\">preload()</h3>\n        <span class=\"indicatorInHeadline obsolete obsoleteMethod\">Obsolete since Gecko 1.9 (Firefox 3)</span>\n        </div><p></p>\n\n<p>This is used to <code>preload</code> the database cache. It loads pages from the start of the database file until the memory cache (specified by \"PRAGMA cache_size=\") is full or the entire file is read.</p>\n\n<p>The cache MUST be active on the database for this to work. This means that you must have a transaction open on the connection, or have a transaction open on another connection that shares the same pager cache. This cached data will go away when the transaction is closed.</p>\n\n<p>This <code>preload</code> operation can dramatically speed up read operations because the data is loaded as one large block. Normally, pages are read in on demand, which can cause many disk seeks.</p>\n\n<pre class=\"eval\">void preload();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<p></p><h3 id=\"removeFunction()\">removeFunction()</h3><p></p>\n\n<p>Deletes a custom SQL function that was created with either <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIStorageConnection#createFunction()\">mozIStorageConnection.createFunction()</a></code> or <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIStorageConnection#createAggregateFunction()\">mozIStorageConnection.createAggregateFunction()</a></code>.</p>\n\n<pre class=\"eval\"> void removeFunction(\n   in AUTF8String aFunctionName\n );\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n\t<dt><code>aFunctionName</code></dt>\n\t<dd>The name of the function to remove.</dd>\n</dl>\n\n<p></p><h3 id=\"removeProgressHandler()\">removeProgressHandler()</h3><p></p>\n\n<p>Removes the progress handler that was registered with <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/mozIStorageConnection#registerProgressHandler()\">mozIStorageConnection.registerProgressHandler()</a></code>.</p>\n\n<pre class=\"eval\"> mozIStorageProgressHandler removeProgressHandler();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns the previous registered handler.</p>\n\n<h3 id=\"rollbackTransaction()\" name=\"rollbackTransaction()\">rollbackTransaction()</h3>\n\n<p>This method rolls back the current transaction. This is essentially an \"undo,\" and returns the database to the state it was in before the transaction began.</p>\n\n<pre class=\"eval\"> void rollbackTransaction();\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<p>None.</p>\n\n<p></p><h3 id=\"setGrowthIncrement()\">setGrowthIncrement()</h3><p></p>\n\n<p>Lets you set the amount by which the SQLite database file is grown or shrunk when resizing is necessary. This helps avoid disk fragmentation by letting you help SQLite make intelligent decisions about resizing of the file.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> This works by adjusting the <code>SQLITE_FCNTL_CHUNK_SIZE</code> setting in SQLite.</div><p></p>\n\n<pre class=\"eval\">void setGrowthIncrement(\n  in PRInt32 aIncrement,\n  in AUTF8String aDatabaseName\n);\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n\t<dt><code>aIncrement</code></dt>\n\t<dd>The number of bytes at a time the database file should grow by.</dd>\n\t<dt><code>aDatabaseName</code></dt>\n\t<dd>The database file for which to adjust the increment size. If you specify an empty string, the main database file is used. See <a class=\"external\" href=\"http://sqlite.org/c3ref/file_control.html\">file_control</a> for more details.</dd>\n</dl>\n\n<p></p><h3 id=\"setProgressHandler()\">setProgressHandler()</h3><p></p>\n\n<p>This method sets a progress handler. Only one handler can be registered at a time, so if you need more than one, you will have to chain them.</p>\n\n<p></p><div class=\"blockIndicator note\"><strong>Note:</strong> If you use the asynchronous storage APIs or use your database on multiple threads, the progress handler you register must be threadsafe</div><p></p>\n\n<pre class=\"eval\"> mozIStorageProgressHandler setProgressHandler(\n   in PRInt32 aGranularity,\n   in mozIStorageProgressHandler aHandler\n );\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n\t<dt><code>aGranularity</code></dt>\n\t<dd>The number of SQL virtual machine steps between progress handler callbacks.</dd>\n\t<dt><code>aHandler</code></dt>\n\t<dd>The <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/mozIStorageProgressHandler\" title=\"\">mozIStorageProgressHandler</a></code> instance that is being registered.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns the previous registered handler, or <code>null</code> if none was previously registered.</p>\n\n<h3 id=\"tableExists()\" name=\"tableExists()\">tableExists()</h3>\n\n<p>Determines if there exists a table with the given name.</p>\n\n<pre class=\"eval\"> boolean tableExists(\n   in AUTF8String aTableName\n );\n</pre>\n\n<h6 id=\"Parameters\" name=\"Parameters\">Parameters</h6>\n\n<dl>\n\t<dt><code>aTableName</code></dt>\n\t<dd>The SQL table whose existence should be checked.</dd>\n</dl>\n\n<h6 id=\"Return_value\" name=\"Return_value\">Return value</h6>\n\n<p>Returns <code>true</code> if the table exists, <code>false</code> otherwise.</p>\n\n<h2 id=\"See_also\" name=\"See_also\">See also</h2>\n\n<ul>\n\t<li><a href=\"/en/Storage\" title=\"en/Storage\">Storage</a> mozStorage introduction and how-to article</li>\n\t<li><a href=\"/en/mozIStorageStatement\" title=\"en/mozIStorageStatement\">mozIStorageStatement</a> Create and execute SQL statements on a SQLite database.</li>\n\t<li><a href=\"/en/mozIStorageValueArray\" title=\"en/mozIStorageValueArray\">mozIStorageValueArray</a> Wraps an array of SQL values, such as a result row.</li>\n\t<li><a href=\"/en/mozIStorageFunction\" title=\"en/mozIStorageFunction\">mozIStorageFunction</a> Create a new SQLite function.</li>\n\t<li><a href=\"/En/MozIStorageAggregateFunction\" title=\"en/MozIStorageAggregateFunction\">mozIStorageAggregateFunction</a> Create a new SQLite aggregate function.</li>\n\t<li><a href=\"/en/mozIStorageProgressHandler\" title=\"en/mozIStorageProgressHandler\">mozIStorageProgressHandler</a> Monitor progress during the execution of a statement.</li>\n\t<li><a href=\"/en/mozIStorageStatementWrapper\" title=\"en/mozIStorageStatementWrapper\">mozIStorageStatementWrapper</a> Storage statement wrapper</li>\n</ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/fscholz\">fscholz</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/jswisher\">jswisher</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Yoric\">Yoric</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/wesj\">wesj</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/unfocused\">unfocused</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/flx\">flx</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/madarche\">madarche</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/philikon\">philikon</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ancestor\">Ancestor</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/sathi\">sathi</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/sdwilsh\">sdwilsh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/MarcDiethelm\">MarcDiethelm</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Arehman4\">Arehman4</a>",
    "title": "mozIStorageConnection"
}