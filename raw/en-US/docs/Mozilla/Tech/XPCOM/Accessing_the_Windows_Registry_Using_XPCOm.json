{
    "content": "<h3 id=\"Introduction\" name=\"Introduction\">Introduction</h3>\n\n<p>When implementing Windows-specific functionality, it is often useful to access the Windows registry for information about the environment or other installed programs. To this end, there exist <a href=\"/en/XPCOM\" title=\"en/XPCOM\">XPCOM</a> interfaces to read and write registry data. This article will show you how to use the available interfaces in several Mozilla products.</p>\n\n<p>The examples in this document are all written in <a href=\"/en/JavaScript\" title=\"en/JavaScript\">JavaScript</a> using <a href=\"/en/XPCOM\" title=\"en/XPCOM\">XPCOM</a>.</p>\n\n<h3 id=\"Support_in_Firefox_1.5_or_newer\" name=\"Support_in_Firefox_1.5_or_newer\">Support in Firefox 1.5 or newer</h3>\n\n<p>In <a href=\"/en/Firefox_1.5_for_developers\" title=\"en/Firefox_1.5_for_developers\">Firefox 1.5</a>, a new API was added, <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIWindowsRegKey\" title=\"\">nsIWindowsRegKey</a></code>, which provides extensive registry functionality. The interface follows the Windows API fairly closely, but with many of the low-level details taken care of for you. If you are writing an extension that only needs to support Firefox 1.5 or newer, then you only need to read this section.</p>\n\n<h4 id=\"A_simple_example\" name=\"A_simple_example\">A simple example</h4>\n\n<p>Here's a simple example showing how to read your Windows ProductId:</p>\n\n<pre class=\"brush: js\">var wrk = Components.classes[\"@mozilla.org/windows-registry-key;1\"]\n                    .createInstance(Components.interfaces.nsIWindowsRegKey);\nwrk.open(wrk.ROOT_KEY_LOCAL_MACHINE,\n         \"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\",\n         wrk.ACCESS_READ);\nvar id = wrk.readStringValue(\"ProductId\");\nwrk.close();\n</pre>\n\n<p>This example, while simple, shows several important things about using the interface. First, you must use <code>createInstance()</code> to get an object implementing this interface, not <code>getService()</code>. Second, you must call <code>open()</code> on the key before attempting to read a value.</p>\n\n<p>Notice in the <code>open()</code> call that the root key to use is specified using the named constants available on the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIWindowsRegKey\" title=\"\">nsIWindowsRegKey</a></code> interface, in this case <code>ROOT_KEY_LOCAL_MACHINE</code>, which corresponds to <code>HKEY_LOCAL_MACHINE</code> in the Windows registry. Also notice that the path to the key has backslashes escaped, a necessity in JavaScript and C++ string constants.</p>\n\n<p>The desired access rights are specified using a named constant from the interface, in this example <code>ACCESS_READ</code>. This can be very important when dealing with non-Administrator accounts with restricted privileges.</p>\n\n<p>The value is read using <code>readStringValue()</code>. You have to specify what type of data you expect to read, which we will expand on later. Finally, note that you should close the key when you are done to avoid wasting system resources.</p>\n\n<h4 id=\"Opening_Registry_Keys\" name=\"Opening_Registry_Keys\">Opening Registry Keys</h4>\n\n<p>Before doing anything with a registry key you must first open the key you are interested in. The example above demonstates this using the <code>open()</code> method. If you want to create a new key, you can use the <code>create()</code> method, which takes the same parameters as <code>open()</code>. Note that it is not an error to call <code>create()</code> on an existing key, and doing so has the same result as calling <code>open()</code>.</p>\n\n<p>Both of these methods take a root key as the first parameter. From JavaScript, you will want to use the named constants on the interface for this parameter. They are:</p>\n\n<ul>\n <li><code>ROOT_KEY_CLASSES_ROOT</code> — Corresponds to <code>HKEY_CLASSES_ROOT</code></li>\n <li><code>ROOT_KEY_CURRENT_USER</code> — Corresponds to <code>HKEY_CURRENT_USER</code></li>\n <li><code>ROOT_KEY_LOCAL_MACHINE</code> — Corresponds to <code>HKEY_LOCAL_MACHINE</code></li>\n</ul>\n\n<p>The second parameter for <code>open()</code> and <code>create()</code> is the path to the key. As noted in the example above, you will need to escape backslashes within the string.</p>\n\n<p>The third parameter for <code>open()</code> and <code>create()</code> is the access mode. It is specified as a bitwise combination of flags defined on the interface. You can read the interface documentation for a full explanation, but we will show only the three most commonly used modes here:</p>\n\n<ul>\n <li><code>ACCESS_READ</code> — For reading values, enumerating keys, and receiving notifications</li>\n <li><code>ACCESS_WRITE</code> — For setting values and creating sub keys</li>\n <li><code>ACCESS_ALL</code> — Access for all operations</li>\n</ul>\n\n<p>In addition to <code>open()</code> and <code>create()</code>, there are the <code>openChild()</code> and <code>createChild()</code> methods. You can call these methods on an already-opened registry key to open a child key. Both methods take a relative path and access mode as parameters and return a new object implementing <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIWindowsRegKey\" title=\"\">nsIWindowsRegKey</a></code>. Here's the simple example again, but using <code>openChild()</code>:</p>\n\n<pre class=\"brush: js\">var wrk = Components.classes[\"@mozilla.org/windows-registry-key;1\"]\n                    .createInstance(Components.interfaces.nsIWindowsRegKey);\nwrk.open(wrk.ROOT_KEY_LOCAL_MACHINE,\n         \"SOFTWARE\\\\Microsoft\",\n         wrk.ACCESS_READ);\nvar subkey = wrk.openChild(\"Windows\\\\CurrentVersion\", wrk.ACCESS_READ);\nvar id = subkey.readStringValue(\"ProductId\");\nsubkey.close();\nwrk.close();\n</pre>\n\n<p>Once you've opened a registry key, you can begin to make use of it.</p>\n\n<h4 id=\"Reading_Registry_Values\" name=\"Reading_Registry_Values\">Reading Registry Values</h4>\n\n<p>Probably the most common action associated with the Windows registry is reading values. The simple example above shows how to read an existing string value. However, Windows registry values can have several data types, so you need to ensure that you read the correct type. You can check the type of a value using the method <code>getValueType()</code>. This method returns an integer indicating the data type of the value. The data types supported by this interface are defined as named constants on the interface as follows:</p>\n\n<ul>\n <li><code>TYPE_NONE</code> — Probably not useful</li>\n <li><code>TYPE_STRING</code> — A Unicode string value</li>\n <li><code>TYPE_BINARY</code> — Binary data</li>\n <li><code>TYPE_INT</code> — A 32 bit integer</li>\n <li><code>TYPE_INT64</code> — A 64 bit integer</li>\n</ul>\n\n<p>Each of these types (except <code>TYPE_NONE</code>) has a corresponding method to read the value data:</p>\n\n<ul>\n <li><code>readStringValue()</code></li>\n <li><code>readBinaryValue()</code></li>\n <li><code>readIntValue()</code></li>\n <li><code>readInt64Value()</code></li>\n</ul>\n\n<p>Since JavaScript is a dynamically-typed language, you may wish to use the following code to handle all types of data. In this function, <code>wrk</code> is expected to be an already opened <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIWindowsRegKey\" title=\"\">nsIWindowsRegKey</a></code>.</p>\n\n<pre class=\"brush: js\">function readRegistryValue(wrk, value) {\n  switch (wrk.getValueType(value)) {\n    case wrk.TYPE_STRING:\n      return wrk.readStringValue(value);\n    case wrk.TYPE_BINARY:\n      return wrk.readBinaryValue(value);\n    case wrk.TYPE_INT:\n      return wrk.readIntValue(value);\n    case wrk.TYPE_INT64:\n      return wrk.readInt64Value(value);\n  }\n  // unknown type\n  return null;\n}\n</pre>\n\n<h4 id=\"Writing_Registry_Values\" name=\"Writing_Registry_Values\">Writing Registry Values</h4>\n\n<p>Writing registry values is quite similar to reading. For each supported data type, there is a <code>write*Value()</code> method complementary to the <code>read*Value()</code> method. Don't forget that if you are writing a new value, you may need to <code>create()</code> the parent key first. This example demonstrates writing a new string value:</p>\n\n<pre class=\"brush: js\">var wrk = Components.classes[\"@mozilla.org/windows-registry-key;1\"]\n                    .createInstance(Components.interfaces.nsIWindowsRegKey);\nwrk.create(wrk.ROOT_KEY_CURRENT_USER,\n           \"SOFTWARE\\\\MDC\\\\Test\",\n           wrk.ACCESS_WRITE);\nwrk.writeStringValue(\"TestValue\", \"Hello World!\");\nwrk.close();\n</pre>\n\n<h4 id=\"Checking_the_Existence_of_Keys_and_Values\" name=\"Checking_the_Existence_of_Keys_and_Values\">Checking the Existence of Keys and Values</h4>\n\n<p>Before you attempt to read a value or open a child key, you should check to see whether it exists first. The <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIWindowsRegKey\" title=\"\">nsIWindowsRegKey</a></code> interface provides methods for both of these—<code>hasValue()</code> and <code>hasChild()</code>—as demonstrated in this example:</p>\n\n<pre class=\"brush: js\">var wrk = Components.classes[\"@mozilla.org/windows-registry-key;1\"]\n                    .createInstance(Components.interfaces.nsIWindowsRegKey);\nwrk.open(wrk.ROOT_KEY_LOCAL_MACHINE,\n           \"SOFTWARE\\\\Microsoft\",\n           wrk.ACCESS_READ);\nif (wrk.hasChild(\"Windows\")) {\n  var subkey = wrk.openChild(\"Windows\\\\CurrentVersion\", wrk.ACCESS_READ);\n  var id;\n  if (subkey.hasValue(\"ProductId\"))\n    id = subkey.readStringValue(\"ProductId\");\n  subkey.close();\n}\nwrk.close();\n</pre>\n\n<h4 id=\"Enumerating_Registry_Keys_and_Values\" name=\"Enumerating_Registry_Keys_and_Values\">Enumerating Registry Keys and Values</h4>\n\n<p>In some situations, you may want to enumerate a number of keys or values whose names you do not know. The <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIWindowsRegKey\" title=\"\">nsIWindowsRegKey</a></code> interface provides the <code>childCount</code>, <code>getChildName()</code>, <code>valueCount</code>, and <code>getValueName()</code> properties and methods for enumerating keys and values respectively. You can use these methods to read a list of values or recursively access a branch of the registry. This example reads all the startup programs in one key of the registry.</p>\n\n<pre class=\"brush: js\">var wrk = Components.classes[\"@mozilla.org/windows-registry-key;1\"]\n                    .createInstance(Components.interfaces.nsIWindowsRegKey);\nwrk.open(wrk.ROOT_KEY_LOCAL_MACHINE,\n         \"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\",\n         wrk.ACCESS_READ);\nfor (var i=0; i&lt;wrk.valueCount; i++) {\n  var name  = wrk.getValueName(i);\n  var value = readRegistryValue(wrk, name);\n  // do something interesting here...\n}\nwrk.close();\n</pre>\n\n<p>For simplicity, this example assumes the existence of the <code>readRegistryValue()</code> function defined above.</p>\n\n<h4 id=\"Removing_Registry_Keys_and_Values\" name=\"Removing_Registry_Keys_and_Values\">Removing Registry Keys and Values</h4>\n\n<p>To remove child keys and values from the registry, you can use the <code>removeChild()</code> and <code>removeValue()</code> methods. <code>removeChild()</code> removes a child key and all of its values, but will fail if the key has any child keys of its own. In that case you must manually enumerate the children and remove them individually. This example shows how to recursively delete a registry key and all of its children. Use with caution!</p>\n\n<pre class=\"brush: js\">function removeChildrenRecursive(wrk) {\n  // we count backwards because we're removing them as we go\n  for (var i = wrk.childCount - 1; i &gt;= 0; i--) {\n    var name   = wrk.getChildName(i);\n    var subkey = wrk.openChild(name, wrk.ACCESS_ALL);\n    removeChildrenRecursive(subkey);\n    subkey.close();\n    wrk.removeChild(name);\n  }\n}\n\nvar wrk = Components.classes[\"@mozilla.org/windows-registry-key;1\"]\n                    .createInstance(Components.interfaces.nsIWindowsRegKey);\nwrk.open(wrk.ROOT_KEY_CURRENT_USER,\n         \"SOFTWARE\\\\MDC\\\\Test\",\n         wrk.ACCESS_ALL);\nremoveChildrenRecursive(wrk);\nwrk.close();\n</pre>\n\n<h4 id=\"Monitoring_Registry_Keys\" name=\"Monitoring_Registry_Keys\">Monitoring Registry Keys</h4>\n\n<p>If you would like to know whether a registry key has changed since you last checked it, you can use the <code>startWatching()</code>, <code>stopWatching()</code>, and <code>hasChanged()</code> methods. You must call <code>startWatching()</code> for the key to be monitored. The method takes one parameter, a boolean indicating whether child keys should be watched. After that, you can call <code>hasChanged()</code> to determine whether or not you need to reread the value. Calling <code>hasChanged()</code> automatically resets the watch, so you can be sure that if it returns <code>true</code> there are changes. This example demonstrates a trivial registry value cache for one key:</p>\n\n<pre class=\"brush: js\">var cache = {};\n\nfunction readRegistryValueNoCache(wrk, value) {\n  switch (wrk.getValueType(value)) {\n    case wrk.TYPE_STRING:\n      return wrk.readStringValue(value);\n    case wrk.TYPE_BINARY:\n      return wrk.readBinaryValue(value);\n    case wrk.TYPE_INT:\n      return wrk.readIntValue(value);\n    case wrk.TYPE_INT64:\n      return wrk.readInt64Value(value);\n  }\n  // unknown type\n  return null;\n}\n\nfunction readRegistryValue(wrk, value) {\n  if (wrk.hasChanged()) {\n    // wipe out the cache\n    cache = {};\n  }\n\n  if (value in cache) {\n    return cache[value];\n  }\n  \n  cache[value] = readRegistryValueNoCache(wrk, value);\n  return cache[value];\n}\n\nvar wrk = Components.classes[\"@mozilla.org/windows-registry-key;1\"]\n                    .createInstance(Components.interfaces.nsIWindowsRegKey);\nwrk.open(wrk.ROOT_KEY_LOCAL_MACHINE,\n         \"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\",\n         wrk.ACCESS_READ);\nwrk.startWatching(false); // only watch the values on this key, not child keys\nvar id = readRegistryValue(wrk, \"ProductId\");\n/* later you can read this again,\n   and it should come from the cache unless\n   there have been changes to the registry.\n   Remember to call wrk.close() when you\n   are finished!\n*/\n</pre>\n\n<h3 id=\"Support_in_Firefox_1.0\" name=\"Support_in_Firefox_1.0\">Support in Firefox 1.0</h3>\n\n<p>Firefox 1.0 includes a much simpler interface to the Windows registry, without most of the functionality supported in newer versions. The functionality is exposed in the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIWindowsShellService\" title=\"\">nsIWindowsShellService</a></code> interface. It consists of only one method, <code>getRegistryEntry()</code>, and a set of named constants to specify the root key. You can use it as shown in the following example:</p>\n\n<pre class=\"brush: js\">var wss = Components.classes[\"@mozilla.org/browser/shell-service;1\"]\n                    .getService(Components.interfaces.nsIWindowsShellService);\nvar id = wss.getRegistryEntry(wss.HKLM,\n                              \"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\",\n                              \"ProductId\");\n</pre>\n\n<div class=\"note\"><strong>Note:</strong> There's no way to set a registry value using this interface.</div>\n\n<h3 id=\"Support_in_SeaMonkey_and_Other_Non-toolkit_Applications\" name=\"Support_in_SeaMonkey_and_Other_Non-toolkit_Applications\">Support in SeaMonkey and Other Non-toolkit Applications</h3>\n\n<p>In older versions of SeaMonkey and other non-toolkit-based applications, an interface existed called nsIWindowsRegistry, containing the same method and named constants as the methods described above for Firefox 1.0. It can be used as follows:</p>\n\n<pre class=\"brush: js\">var wss = Components.classes[\"@mozilla.org/winhooks;1\"]\n                    .getService(Components.interfaces.nsIWindowsRegistry);\nvar id = wss.getRegistryEntry(wss.HKLM,\n                              \"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\",\n                              \"ProductId\");\n</pre>\n\n<h3 id=\"Backwards_Compatibility\" name=\"Backwards_Compatibility\">Backwards Compatibility</h3>\n\n<p>If you need to support Firefox 1.0 and other older browser versions, you should check to see which interfaces are available. The following skeleton code will allow you to determine which interface to use:</p>\n\n<pre class=\"brush: js\">if (\"@mozilla.org/windows-registry-key;1\" in Components.classes) {\n  // Firefox 1.5 or newer\n}\nelse if (\"@mozilla.org/winhooks;1\" in Components.classes) {\n  // SeaMonkey or other older non-toolkit application\n}\nelse if (\"@mozilla.org/browser/shell-service;1\" in Components.classes) {\n  var wss = Components.classes[\"@mozilla.org/browser/shell-service;1\"]\n                      .getService(Components.interfaces.nsIWindowsShellService);\n  if (\"getRegistryEntry\" in wss) {\n    // Firefox 1.0\n  }\n  else {\n    // nothing supported\n  }\n}\nelse {\n  // nothing supported\n}\n</pre>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/SphinxKnight\">SphinxKnight</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/teoli\">teoli</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Brettz9\">Brettz9</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mgjbot\">Mgjbot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ptak82\">Ptak82</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/LwjCxg\">LwjCxg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Chbok\">Chbok</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nickolay\">Nickolay</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ted_Mielczarek\">Ted_Mielczarek</a>",
    "title": "Accessing the Windows Registry Using XPCOM"
}