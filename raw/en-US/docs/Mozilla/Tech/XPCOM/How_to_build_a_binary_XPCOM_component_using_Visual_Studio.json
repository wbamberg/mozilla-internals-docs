{
    "content": "<p>This is a simple tutorial for building XPCOM objects in C++ using Visual Studio. XPCOM is Mozilla’s cross platform component object model, similar to Microsoft’s COM technology. XPCOM components can be implemented in C, C++, and JavaScript, and can be used from C, C++, and JavaScript. That means you can call JavaScript methods from C++ and vice versa. For more information on the workings of XPCOM look <a href=\"en/XPCOM\">elsewhere</a>.\n</p><p><br>\n</p>\n<h2 id=\"Development_Setup\"> Development Setup </h2>\n<p>The simplest way to get an XPCOM component built is to use the Gecko SDK. On Windows, the SDK is built using a Microsoft compiler, so you need to use one too. This tutorial uses Microsoft’s free <a class=\"external\" href=\"http://msdn.microsoft.com/vstudio/express/visualc/\">Visual C++ Express</a> and the sample project in the next paragraph. You could try to use a different vendor's compiler, but you are going to need to build the SDK from source code. Not the simplest thing to do and it may be incompatible with production releases of Firefox, Thunderbird, and XULRunner from Mozilla.\n</p><p>For example, <a class=\"external\" href=\"http://releases.mozilla.org/pub/mozilla.org/xulrunner/releases/1.8.0.4/win32/en-US/xulrunner-1.8.0.4.en-US.win32.zip\">XULRunner 1.8.0.4</a> which has a pre-built SDK at <a class=\"external\" href=\"http://releases.mozilla.org/pub/mozilla.org/xulrunner/releases/1.8.0.4/sdk/gecko-sdk-win32-msvc-1.8.0.4.zip\">gecko-sdk-win32-msvc-1.8.0.4.zip</a>. Extract the SDK to a folder. The tutorial assumes the folder is called xulrunner-1.8.0.4, but you can call yours whatever you want.\n</p><p>You also need a couple of pre-built libraries (glib-1.2.dll &amp; libIDL-0.6.dll) from the <a class=\"external\" href=\"http://ftp.mozilla.org/pub/mozilla.org/mozilla/source/wintools.zip\">wintools.zip</a> archive. Copy glib-1.2.dll &amp; libIDL-0.6.dll into the bin subfolder of gecko-sdk.\n</p>\n<div class=\"note\">Note: wintools.zip seems old and lots of newer MDC documentation refers to <a class=\"external\" href=\"http://ftp.mozilla.org/pub/mozilla.org/mozilla/libraries/win32/historic/vc8/vc8-moztools.zip\">moztools.zip</a> archive, but the version of xpidl.exe that comes with the gecko-sdk crashes with the DLL’s from moztools.</div>\n<p>Recap:\n</p>\n<ul><li> Use the right Gecko SDK for your XULRunner release\n</li><li> Use a Microsoft compiler\n</li><li> Use pre-built glib-1.2.dll &amp; libIDL-0.6.dll libraries from wintools.zip\n</li><li> Download the sample project\n</li></ul>\n<p>Here is what the folder structure looks like:\n</p><p><img alt=\"Image:xpcom-folders.png\">\n</p>\n<h2 id=\"Create_a_VC_Project\"> Create a VC++ Project </h2>\n<p>Visual Studio project and file templates (or wizards) for creating XPCOM modules and components do not currently exist. For now, you can use the included XPCOM project that contains a simple XPCOM component. You can use the project as a starting point and modify the component files to add your own functionality.\n</p><p>To make the project, you start with a standard multi-thread DLL project. Then make the following tweaks:\n</p>\n<ul><li> Add \"..\\gecko-sdk\\include\" to Additional Include Directories\n</li><li> Add \"..\\gecko-sdk\\lib\" to Additional Library Directories\n</li><li> Add \"nspr4.lib xpcom.lib xpcomglue_s.lib\" to Additional Dependencies\n</li><li> Add \"XP_WIN;XP_WIN32″ to Preprocessor Definitions\n</li><li> Turn off precompiled headers (just to keep it simple)\n</li><li> Use a custom build step for the XPCOM IDL file (spawns xpidl-build.bat to process the IDL with Mozilla toolset, not MIDL)\n</li></ul>\n<p>VC++ Express Project: <a class=\"external\" href=\"/samples/xpcom/xpcom-test.zip\">xpcom-test.zip</a>\n</p>\n<div class=\"note\">Note: The project uses <a href=\"en/XPCOM_Glue\">xpcom_glue</a>. It also uses frozen linkage (dependent on XPCOM). I am not defining XPCOM_GLUE and I am linking against xpcomglue_s.lib</div>\n<h2 id=\"Create_an_XPCOM_Component\"> Create an XPCOM Component </h2>\n<p>A full tutorial of XPCOM is beyond the scope of this posting. Check out the resources at the end of the tutorial for more information on the world of XPCOM. Ok then, on with the basic, oversimplified example. Your XPCOM component is made up of 3 parts:\n</p>\n<ul><li> Component interface described using IDL. The interface defines the methods, including arguments and return types, of the component.\n</li><li> Component implementation using C++. The implementation is where the methods actually do the work.\n</li><li> Component factory module, also in C++. The factory is in charge of creating instances of the implementations.\n</li></ul>\n<p>Let’s specify a simple interface:\n</p>\n<pre>#include \"nsISupports.idl\"\n\n[scriptable, uuid(263ed1ba-5cc1-11db-9673-00e08161165f)]\ninterface ISpecialThing : nsISupports\n{\n  attribute AString name;\n\n  long add(in long a, in long b);\n};\n</pre>\n<p>Remember to generate your own GUID. The next step is to compile the IDL into a type-library (*.XPT) and a C++ header file (*.H), which we can use to define our implementation object. The blank VC++ project has a BAT file that will create the XPT and the H files. The command executes XPIDL.EXE twice, like this:\n</p>\n<pre>{path_to_geckosdk}\\bin\\xpidl.exe -m header -I..\\gecko-sdk\\idl {your_idl_file}\n{path_to_geckosdk}\\bin\\xpidl.exe -m typelib -I..\\gecko-sdk\\idl {your_idl_file}\n</pre>\n<p>The generated H file actually has a skeleton implementation (commented out). You can take the code and create implementation H and CPP files. They could look like this:\n</p><p>H file:\n</p>\n<pre>#ifndef __SPECIALTHING_IMPL_H__\n#define __SPECIALTHING_IMPL_H__\n\n#include \"comp.h\"\n#include \"nsStringAPI.h\"\n\n#define SPECIALTHING_CONTRACTID \"@starkravingfinkle.org/specialthing;1\"\n#define SPECIALTHING_CLASSNAME \"SpecialThing\"\n#define SPECIALTHING_CID { 0x245626, 0x5cc1, 0x11db, { 0x96, 0x73, 0x0, 0xe0, 0x81, 0x61, 0x16, 0x5f } }\n\nclass CSpecialThing : public ISpecialThing\n{\npublic:\n\tNS_DECL_ISUPPORTS\n\tNS_DECL_ISPECIALTHING\n\n\tCSpecialThing();\n\nprivate:\n\t~CSpecialThing();\n\nprotected:\n\t/* additional members */\n\tnsString mName;\n};\n\n#endif\n</pre>\n<p>CPP file:\n</p>\n<pre>#include \"comp-impl.h\"\n\nNS_IMPL_ISUPPORTS1(CSpecialThing, ISpecialThing)\n\nCSpecialThing::CSpecialThing()\n{\n\t/* member initializers and constructor code */\n\tmName.Assign(L\"Default Name\");\n}\n\nCSpecialThing::~CSpecialThing()\n{\n\t/* destructor code */\n}\n\n/* attribute AString name; */\nNS_IMETHODIMP CSpecialThing::GetName(nsAString &amp; aName)\n{\n\taName.Assign(mName);\n\treturn NS_OK;\n}\nNS_IMETHODIMP CSpecialThing::SetName(const nsAString &amp; aName)\n{\n\tmName.Assign(aName);\n\treturn NS_OK;\n}\n\n/* long add (in long a, in long b); */\nNS_IMETHODIMP CSpecialThing::Add(PRInt32 a, PRInt32 b, PRInt32 *_retval)\n{\n\t*_retval = a + b;\n\treturn NS_OK;\n}\n</pre>\n<p>Lastly, we need to create the module implementation. I put this together from some samples I found on the MDC site:\n</p>\n<pre>#include \"nsIGenericFactory.h\"\n#include \"comp-impl.h\"\n\nNS_GENERIC_FACTORY_CONSTRUCTOR(CSpecialThing)\n\nstatic nsModuleComponentInfo components[] =\n{\n    {\n       SPECIALTHING_CLASSNAME, \n       SPECIALTHING_CID,\n       SPECIALTHING_CONTRACTID,\n       CSpecialThingConstructor,\n    }\n};\n\nNS_IMPL_NSGETMODULE(\"SpecialThingsModule\", components) \n</pre>\n<p>Assuming you have the right SDK and setup the include and LIB folders correctly, the project should build your XPCOM component.\n</p>\n<h3 id=\"Test_Component_in_a_XULRunner_Application\"> Test Component in a XULRunner Application </h3>\n<p>In order to test your component in a XULRunner application, you need to “install” the component, “clear” the component registry, and use the component from JavaScript.\n</p>\n<ol><li> Install Component: Copy your XPT and DLL files to the {app}/components folder. You should not put your component in the xulrunner/components folder.\n</li><li> Clear Registry: Increment the BuildID in your {app}/application.ini.\n</li><li> Use in JavaScript: </li></ol>\n<pre>function doXPCOM() {\n  try {\n    const cid = \"@starkravingfinkle.org/specialthing;1\";\n    var obj = Components.classes[cid].createInstance();\n    obj = obj.QueryInterface(Components.interfaces.ISpecialThing);\n  }\n  catch (err) {\n    alert(err);\n    return;\n  }\n\n  var res = obj.add(3, 4);\n  alert('3+4 = ' + res);\n\n  var name = obj.name;\n  alert('Name = ' + name);\n\n  obj.name = 'New Name';\n  name = obj.name;\n  alert('Name = ' + name);\n}\n</pre>\n<h2 id=\"Other_resources\"> Other resources </h2>\n<ul><li> <a href=\"en/Creating_XPCOM_Components\"> Creating XPCOM Components</a> - Mozilla\n</li><li> <a href=\"en/How_to_Build_an_XPCOM_Component_in_Javascript\"> How to Build an XPCOM Component in Javascript</a> - Mozilla\n</li><li> <a class=\"external\" href=\"http://www-128.ibm.com/developerworks/webservices/library/co-xpcom.html\">An Introduction to XPCOM</a> - IBM\n</li><li> <a class=\"external\" href=\"http://www.mozilla.org/projects/xpcom/\">XPCOM Project Page</a> - Mozilla\n</li></ul>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/teoli\">teoli</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Hippietrail\">Hippietrail</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/flyonok\">flyonok</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Garyvdm\">Garyvdm</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Coderguru\">Coderguru</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Waldo\">Waldo</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/MarkFinkle\">MarkFinkle</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>",
    "title": "How to build a binary XPCOM component using Visual Studio"
}