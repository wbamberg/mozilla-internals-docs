{
    "content": "<p><a href=\"en/Firefox_2\">Firefox 2</a> and Thunderbird 2 introduce a series of interfaces that make it easy for extension authors to access RSS and Atom feeds.</p>\n<h2 id=\"Feed_interfaces\" name=\"Feed_interfaces\">Feed interfaces</h2>\n<dl>\n  <dt>\n    <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFeed\" title=\"\">nsIFeed</a></code></dt>\n  <dd>\n    Represents an RSS or Atom feed.</dd>\n  <dt>\n    <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFeedContainer\" title=\"\">nsIFeedContainer</a></code></dt>\n  <dd>\n    A base class subclassed by several of the feed-related interfaces.</dd>\n  <dt>\n    <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFeedElementBase\" title=\"\">nsIFeedElementBase</a></code></dt>\n  <dd>\n    A base class subclassed by several of the other feed-related interfaces.</dd>\n  <dt>\n    <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFeedEntry\" title=\"\">nsIFeedEntry</a></code></dt>\n  <dd>\n    Represents a single entry in an RSS or Atom feed.</dd>\n  <dt>\n    <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFeedGenerator\" title=\"\">nsIFeedGenerator</a></code></dt>\n  <dd>\n    Describes the software that generated an RSS or atom feed.</dd>\n  <dt>\n    <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFeedPerson\" title=\"\">nsIFeedPerson</a></code></dt>\n  <dd>\n    Represents a person. Contains the person's name, email address, and their home page address.</dd>\n  <dt>\n    <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFeedProcessor\" title=\"\">nsIFeedProcessor</a></code></dt>\n  <dd>\n    Parses RSS and Atom feeds.</dd>\n  <dt>\n    <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFeedProgressListener\" title=\"\">nsIFeedProgressListener</a></code></dt>\n  <dd>\n    Implemented by the program that wants to parse an RSS or Atom feed to receive messages during the parsing process.</dd>\n  <dt>\n    <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFeedResult\" title=\"\">nsIFeedResult</a></code></dt>\n  <dd>\n    Describes the result of parsing a feed.</dd>\n  <dt>\n    <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFeedResultListener\" title=\"\">nsIFeedResultListener</a></code></dt>\n  <dd>\n    Implemented by the program that wants to parse an RSS or Atom feed to receive notification when parsing is complete.</dd>\n  <dt>\n    <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFeedTextConstruct\" title=\"\">nsIFeedTextConstruct</a></code></dt>\n  <dd>\n    Represents text values in a feed; includes functions that let you fetch the text as plain text or HTML.</dd>\n  <dt>\n    <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIScriptableUnescapeHTML\" title=\"\">nsIScriptableUnescapeHTML</a></code></dt>\n  <dd>\n    A utility class that unescapes HTML strings.</dd>\n</dl>\n<h2 id=\"Example:_Reading_a_feed_from_the_Web\" name=\"Example:_Reading_a_feed_from_the_Web\">Example: Reading a feed from the Web</h2>\n<p>It's actually quite easy to read and parse a feed. Use an <code><a href=\"en/XMLHttpRequest\">XMLHttpRequest</a></code> to load the feed, then pass its string to an <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFeedProcessor\" title=\"\">nsIFeedProcessor</a></code> to parse the feed.</p>\n<p>Loading the feed and sending it to the parser is done using code similar to this:</p>\n<pre>  fetch: function(feedUrl)\n  {\n    var httpRequest = null;\n    \n    function infoReceived() {\n      var data = httpRequest.responseText;\n      \n      var ioService = Components.classes['@mozilla.org/network/io-service;1']\n                                         .getService(Components.interfaces.nsIIOService);\n      var uri = ioService.newURI(feedUrl, null, null);\n      \n      if (data.length) {\n        var parser = Components.classes[\"@mozilla.org/feed-processor;1\"]\n                                        .createInstance(Components.interfaces.nsIFeedProcessor);\n        var listener = new FeedTestResultListener();\n        try {\n          parser.listener = listener;\n          parser.parseFromString(data, uri);\n        }\n        catch(e) {\n          alert(\"Error parsing feed.\");\n        }\n      }\n    }\n    \n    httpRequest = new XMLHttpRequest();\n    \n    httpRequest.open(\"GET\", feedUrl, true);\n    try {\n      httpRequest.onload = infoReceived;\n      httpRequest.send(null);\n    }\n    catch(e) {\n      alert(e);\n    }\n  }\n</pre>\n<p>The <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFeedProcessor\" title=\"\">nsIFeedProcessor</a></code> interface lets you parse the feed data from several possible sources; in this case, we're loading a document into a string, then parsing that string using its <code>parseFromString()</code> method. However, you could also parse it from a file using <code>parseFromStream()</code>, or directly from an URL using <code>parseAsync()</code>.</p>\n<p>The actual processing of the parsed feed is done by a method called <code>handleResult()</code> on the <code>FeedTestResultListener</code> object. That code looks like this:</p>\n<pre>    FeedTestResultListener.prototype = {\n      handleResult: function(result) {\n        var feed = result.doc;\n        \n        feed.QueryInterface(Components.interfaces.nsIFeed);\n    \n        // Open a new window\n    \n        var win = window.open(\"\", \"FeedTest_Window\");\n        var doc = win.document.wrappedJSObject;\n    \n        doc.open();\n        \n        // Write the HTML header and page title\n        \n        doc.write(\"&lt;html&gt;&lt;head&gt;&lt;title&gt;Feed: \" + feed.title.text + \"&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\");\n        doc.write(\"&lt;h1&gt;\" + feed.title.text + \"&lt;/h1&gt;&lt;p&gt;\");\n          \n        var itemArray = feed.items;\n        var numItems = itemArray.length;\n        \n        // Write the article information\n        \n        if (!numItems) {\n          doc.write(\"&lt;i&gt;No news is good news!&lt;/i&gt;\");\n        }\n        else {\n          var i;\n          var theEntry;\n          var theUrl;\n          var info;\n          \n          for (i=0; i&lt;numItems; i++) {\n            theEntry = itemArray.queryElementAt(i, Components.interfaces.nsIFeedEntry);\n            \n            if (theEntry) {\n              theUrl = \n              doc.write('&lt;b&gt;&lt;a href=\"' + theEntry.link.resolve(\"\") + '\"&gt;' + theEntry.title.text + '&lt;/a&gt;&lt;/b&gt;&lt;br&gt;');\n              if (theEntry.summary) {\n                info = theEntry.summary.text + \"&lt;p&gt;&lt;hr&gt;&lt;p&gt;\";\n              }\n              else {\n                info = theEntry.content.text + \"&lt;p&gt;&lt;hr&gt;&lt;p&gt;\";\n              }\n              doc.write(\"&lt;blockquote&gt;\" + info);\n              doc.write(\"&lt;/blockquote&gt;&lt;p&gt;\");\n            }\n          }\n        }\n        \n        // Close the document; we're done!\n        \n        doc.write(\"&lt;/body&gt;&lt;/html&gt;\");\n        doc.close();\n      }\n    }\n</pre>\n<p>The <code>handleResult()</code> function receives as its argument an <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFeedResult\" title=\"\">nsIFeedResult</a></code> that describes a feed; its <code>doc</code> property is an <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFeed\" title=\"\">nsIFeed</a></code> that contains all the feed data.</p>\n<p>To get the title of the feed, you look at the <code>feed.title</code> property. The title is an <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFeedTextConstruct\" title=\"\">nsIFeedTextConstruct</a></code> that can represent the text in various formats; we get its <code>text</code> property to fetch the feed's title as HTML-encoded text. We could, alternatively, use its <code>plainText()</code> method to get a copy of the title translated into plain text.</p>\n<p>We then scan the array of items in the feed by looking at the <code>feed.items</code> <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIArray\" title=\"\">nsIArray</a></code>. This array contains <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFeedEntry\" title=\"\">nsIFeedEntry</a></code> objects that describe each feed item.</p>\n<p>We build the contents of the document by looking at the title, link, summary, and content properties for each item. The full URL of the link is retrieved using the link's <code>resolve()</code> method.</p>\n<p>To initialize a fetch of the feed, we simply call <code>fetch(<i>url</i>)</code>. This opens a new window containing the feed contents, with each item's title a clickable link that takes you to the article itself.</p>\n<p>For details on each of the feed access interfaces, visit their respective reference pages.</p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/teoli\">teoli</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/MarkFinkle\">MarkFinkle</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ptak82\">Ptak82</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mgjbot\">Mgjbot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Chbok\">Chbok</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nukeador\">Nukeador</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nickolay\">Nickolay</a>",
    "title": "Feed content access API"
}