{
    "content": "<p> </p>\n\n<h2 id=\"notes.html\" name=\"notes.html\">notes.html</h2>\n\n<p>All parts are made and commented by VK [schools_ring@yahoo.com]. All rights are given to the world.</p>\n\n<p><a class=\"external\" href=\"http://www.cogjam.com/external/xbl/notes.html\">View this example</a></p>\n\n<pre>&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n \"http://www.w3.org/TR/html401/strict.dtd\"&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;XBL Demo : Sticky Notes&lt;/title&gt;\n&lt;meta http-equiv=\"Content-Type\"\n content=\"text/html; charset=iso-8859-1\"&gt;\n&lt;style type=\"text/css\"&gt;\nbody {\n background-color: #FFFFFF;\n color: #000000;\n font: 1em Verdana, sans-serif;\n}\nh1 {\n font-size: 1.5em;\n}\n/* Binding: */\n.sticker {\n -moz-binding: url(notes.xml#default);\n}\n&lt;/style&gt; \n&lt;/head&gt;\n\n&lt;body&gt;\n\n&lt;h1&gt;&lt;a href=\"http://developer.mozilla.org/en/docs/XBL:XBL_1.0_Reference\"&gt;XBL&lt;/a&gt; Demo :\n    Sticky Notes&lt;/h1&gt;\n\n\n&lt;div class=\"sticker\"&gt;&lt;p&gt;ACME,&amp;nbsp;Inc. fax - respond today.&lt;/p&gt;&lt;/div&gt;\n\n&lt;div class=\"sticker\"&gt;&lt;p&gt;Don't forget the eggs!&lt;/p&gt;&lt;/div&gt;\n\n&lt;div class=\"sticker\"&gt;&lt;p&gt;The new project - who's on charge?&lt;/p&gt;&lt;/div&gt;\n\n&lt;div class=\"sticker\"&gt;&lt;p&gt;Learn more about XBL.&lt;/p&gt;&lt;/div&gt;\n\n\n&lt;p style=\"clear: left\"&gt;&lt;a \n  href=\"http://validator.w3.org/check?uri=referer\"&gt;&lt;img \n  src=\"http://www.w3.org/Icons/valid-html401\"\n  width=\"88\" height=\"31\"\n  alt=\"Valid HTML 4.01\"\n  style=\"border: 1px none\"&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n\n<h2 id=\"notes.xml\" name=\"notes.xml\">notes.xml</h2>\n\n<pre>&lt;?xml version=\"1.0\"?&gt;\n\n&lt;bindings\n xmlns=\"http://www.mozilla.org/xbl\"\n xmlns:xul=\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\"\n xmlns:svg=\"http://www.w3.org/2000/svg\"\n xmlns:xlink=\"http://www.w3.org/1999/xlink\"&gt;\n\n&lt;!--\n In above only XBL namespace declaration is mandatory.\n The others are only needed if you plan to handle\n XUL (XML User Interface Language) or/and\n SVG (Scalable Vector Graphics) in your bindings;\n xlink in XML also may come useful sometimes.\n All namespaces above are supported by default and they\n do not require any additional downloads or initializations.\n--&gt;\n\n\n\n&lt;binding id=\"default\"&gt;\n&lt;!--\n A separate binding. You add a binding file using -moz-binding\n style rule and you address a particular binding by its ID:\n    -moz-binding: url(notes.xml#default)\n This ID is local within the binding file (not visible in the\n target document DOM tree).\n--&gt;\n\n\n&lt;resources&gt;\n&lt;!--\n Obtaining the stylesheet we'll use\n to (re)style the bound element.\n--&gt;\n &lt;stylesheet src=\"notes.css\"/&gt;\n&lt;/resources&gt;\n\n\n\n&lt;content&gt;\n&lt;!--\n This SVG graphics will be added automatically around each bound element.\n The position of the original content is indicated by &lt;children/&gt; tag.\n--&gt;\n &lt;svg:svg width=\"60px\" height=\"60px\"&gt;\n  &lt;svg:g fill-opacity=\"0.6\" stroke=\"#FFFFFF\" stroke-width=\"1px\"&gt;\n   &lt;svg:circle cx=\"25px\" cy=\"12px\" r=\"12\" fill=\"#FF0000\" transform=\"translate(0,0)\"/&gt;\n   &lt;svg:circle cx=\"25px\" cy=\"12px\" r=\"12\" fill=\"#00FF00\" transform=\"translate(7,12)\"/&gt;\n   &lt;svg:circle cx=\"25px\" cy=\"12px\" r=\"12\" fill=\"#0000FF\" transform=\"translate(-7,12)\"/&gt;\n  &lt;/svg:g&gt;\n &lt;/svg:svg&gt;\n &lt;children/&gt;\n&lt;/content&gt;\n\n\n\n&lt;implementation&gt;\n&lt;!--\n Here and futher CDATA wrappers around JavaScript code\n are not mandatory but recommended. This way you protect\n yourselve from &lt; and &gt; signs breaking your XML layout.\n It also speeds up the parsing as the engine doesn't go\n through CDATA sections but simply skip on them.\n--&gt;\n\n\n\n&lt;constructor&gt;&lt;![CDATA[\n/**\n * The code below will be called one time only after\n * the binding is successfully prepared and bound.\n * \"this\" in this context refers to the bound element.\n */\n\n // your code goes here\n\n]]&gt;&lt;/constructor&gt;\n\n\n\n&lt;destructor&gt;&lt;![CDATA[\n/**\n * The code below will be called one time only before\n * binding is unbound. You cannot cancel this event,\n * but you may accomplish some last minute clean up.\n * \"this\" in this context refers to the bound element.\n */\n\n // your code goes here\n\n]]&gt;&lt;/destructor&gt;\n\n\n\n&lt;field name=\"priority\"&gt;&lt;![CDATA[\n/**\n * New \"real\" property for the bound element.\n * Within this block the content is interpreted\n * as JavaScript code. The result of this code\n * evaluation (if any) will be used as initial value.\n */\n\n \"normal\";\n\n]]&gt;&lt;/field&gt;\n\n\n\n&lt;property name=\"innerText\"&gt;\n&lt;!--\n New \"virtual\" property for the bound element.\n Unlike &lt;field&gt; these are really two functions\n (getter and setter). Within the virtual properties\n you cannot set or get the named property itself.\n Say an attempt to assign this.innerText='something'\n will lead to circular setter call and stack overflow.\n--&gt;\n\n&lt;getter&gt;&lt;![CDATA[\n var st = this.innerHTML || '';\n if (st != '') {\n  var re = /&lt;\\/?[^&gt;]+&gt;/gi;\n  return st.replace(re,'');\n }\n else {\n  return '';\n }\n]]&gt;&lt;/getter&gt;\n\n&lt;setter&gt;&lt;![CDATA[\n // \"val\" in setter contains the assignment value.\n // Here we simply echoing it back:\n return val;\n]]&gt;&lt;/setter&gt;\n\n&lt;/property&gt;\n\n\n\n&lt;method name=\"setBorder\"&gt;\n&lt;!--\n New method for the bound element.\n Unlike virtual property it is called in\n function context: this.setBorder(arg)\n You also may define any amount of named arguments\n using &lt;parameter name=\"argumentName\"/&gt;\n--&gt;\n &lt;parameter name=\"arg\"/&gt;\n &lt;body&gt;&lt;![CDATA[\n\n this.style.border = arg;\n\n ]]&gt;&lt;/body&gt;\n&lt;/method&gt;\n\n\n\n&lt;/implementation&gt;\n\n\n\n&lt;handlers&gt;\n&lt;!--\n Event handlers.\n Mouse events sent to bindings are refactored, so\n event.target / event.relatedTarget always points\n to the bound element, even if it was originated\n to/from a child.\n--&gt;\n\n\n\n&lt;handler event=\"click\"&gt;&lt;![CDATA[\n if (this.priority == 'normal') {\n  this.priority = 'high';\n  this.setBorder('2px solid red');\n }\n else {\n  this.priority = 'normal';\n  this.setBorder('2px solid blue');\n }\n var str = this.innerText + '\\n\\n';\n str+= ('On ' + event.type + ' priority set to: ' + this.priority);\n window.alert(str);\n]]&gt;&lt;/handler&gt;\n\n\n\n&lt;handler event=\"mouseover\"&gt;&lt;![CDATA[\n this.$bg = this.style.backgroundColor || '#FFFF00';\n this.style.backgroundColor = '#FFCC00';\n]]&gt;&lt;/handler&gt;\n\n\n\n&lt;handler event=\"mouseout\"&gt;&lt;![CDATA[\n this.style.backgroundColor = this.$bg;\n]]&gt;&lt;/handler&gt;\n\n\n&lt;/handlers&gt;\n\n\n\n &lt;/binding&gt;\n&lt;/bindings&gt;\n</pre>\n\n<h2 id=\"notes.css\" name=\"notes.css\">notes.css</h2>\n\n<pre>.sticker {\n position: relative;\n left: 0px;\n right: 0px;\n float: left;\n clear: none;\n width: 10em;\n height: 10em;\n overflow: visible;\n margin: 1em 1em;\n padding: 0.5em 0.5em;\n border: 2px solid blue;\n background-color: yellow;\n font: 1em normal \"Times New Roman\",serif;\n font-style: italic;\n cursor: default;\n}\n</pre>\n\n<p><a class=\"external\" href=\"http://www.cogjam.com/external/xbl/notes.html\">View this example</a></p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>",
    "title": "Example Sticky Notes"
}