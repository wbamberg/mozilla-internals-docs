{
    "content": "<p></p><p><strong><a href=\"/en-US/docs/FileGuide/IO\" title=\"FileGuide/IO\">File and Stream Guide</a>:</strong> <strong>[</strong> <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIScriptableIO\" title=\"\">nsIScriptableIO</a></code> | <a href=\"/en-US/docs/FileGuide/Accessing_Files\" title=\"FileGuide/Accessing_Files\">Accessing Files</a> | <a href=\"/en-US/docs/FileGuide/FileInfo\" title=\"FileGuide/FileInfo\">Getting File Information</a> | <a href=\"/en-US/docs/FileGuide/FileReading\" title=\"FileGuide/FileReading\">Reading from Files</a> | <a href=\"/en-US/docs/FileGuide/FileWriting\" title=\"FileGuide/FileWriting\">Writing to Files</a> | <a href=\"/en-US/docs/FileGuide/MoveCopyDelete\" title=\"FileGuide/MoveCopyDelete\">Moving, Copying and Deleting Files</a> | <a href=\"/en-US/docs/FileGuide/FileUpDown\" title=\"FileGuide/FileUpDown\">Uploading and Downloading Files</a> | <a href=\"/en-US/docs/FileGuide/Directories\" title=\"FileGuide/Directories\">Working With Directories</a> <strong>]</strong></p>\n\n<div class=\"warning\">\n  <strong>Important note:</strong> The pages from the <em>File and Stream Guide</em> use the <code>IO</code> object (<code>nsIScriptableIO</code>), which was not available in any released version of the platform (pending <a class=\"link-https\" href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=396051\" title=\"https://bugzilla.mozilla.org/show_bug.cgi?id=396051\">some fixes</a>). There are alternative XPCOM APIs you can use, your help in updating this pages to use the supported API is very much welcome!</div>\n<p>Other documentation on files and I/O not using the unavailable nsIScriptableIO APIs: <a href=\"/en-US/docs/Code_snippets/File_I_O\">Code snippets: File I/O</a>, <a href=\"/en-US/docs/XUL_Tutorial/Open_and_Save_Dialogs\">Open and Save Dialogs</a>, <a href=\"/en-US/docs/Reading_textual_data\">Reading textual data</a>, <a href=\"/en-US/docs/Writing_textual_data\">Writing textual data</a>, <a href=\"/en-US/docs/Table_Of_Errors#File_Errors\">List of file-related error codes</a>.</p><p></p>\n\n<p>The <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFile\" title=\"\">nsIFile</a></code> object has a number of useful attributes which may be used to retrieve information about a file. Two useful attributes <code>fileSize</code> and <code>lastModifiedTime</code> (<a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIFile#Attributes\">nsIFile.Attributes</a>) provide a means of retrieving the size of a file and the time when the file was last changed.</p>\n\n<h4 id=\"File_Size\" name=\"File_Size\">File Size</h4>\n\n<p>The <code>fileSize</code> (<a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIFile#Attributes\">nsIFile.Attributes</a>) attribute holds the size of a file in bytes. If the file does not exist, a 'file not found' exception will occur. You can catch this exception with a try-catch block, but it is better to use <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIFile#exists()\">nsIFile.exists()</a></code> to check first. This example will check if a file on the Desktop exists and set the variable 'filesize' to the size of the file. If the file is not present, the 'filesize' variable will not be changed from the default value of 0.</p>\n\n<pre class=\"brush: js\">var filesize = 0;\nvar file = IO.getFile(\"Desktop\", \"Saved File\");\nif (file.exists())\n  filesize = file.fileSize;\n</pre>\n\n<p>It is also possible to modify the size of a file by setting the <code>fileSize</code> (<a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIFile#Attributes\">nsIFile.Attributes</a>) attribute to a value. This may be useful to truncate a file, however, setting the file size will also increase the size of a file if the value is larger than the current size of the file. In this case, the new part of the file will be filled with empty data. For instance, the following line will set the length of a file to 5000 bytes.</p>\n\n<pre class=\"brush: js\">file.fileSize = 5000;\n</pre>\n\n<h4 id=\"Modified_Time\" name=\"Modified_Time\">Modified Time</h4>\n\n<p>The time that a file was last changed may be retrieved using the <code>lastModifiedTime</code> (<a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIFile#Attributes\">nsIFile.Attributes</a>) attribute. This attribute holds a value measured in milliseconds since January 1, 1970. It is convenient to pass the returned time to the Date constructor.</p>\n\n<pre class=\"brush: js\">var lastmod = new Date(file.lastModifiedTime);\n</pre>\n\n<p>In this example, a <a href=\"/en/JavaScript/Reference/Global_Objects/Date\" title=\"en/JavaScript/Reference/Global_Objects/Date\">Date</a> object is created using the modification time of a file.</p>\n\n<p>You can change the modification time of a file by setting the <code>lastModifiedTime</code> (<a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIFile#Attributes\">nsIFile.Attributes</a>) attribute, or you can just write to the file, in which case the value will be adjusted automatically.</p>\n\n<h4 id=\"File_Permissions\" name=\"File_Permissions\">File Permissions</h4>\n\n<p>Several methods may be used to check for file permissions. The following four methods return true or false:</p>\n\n<ul>\n <li><code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIFile#isReadable()\">nsIFile.isReadable()</a></code> - returns true if the file can be read from.</li>\n <li><code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIFile#isWritable()\">nsIFile.isWritable()</a></code> - returns true if the file can be written to.</li>\n <li><code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIFile#isExecutable()\">nsIFile.isExecutable()</a></code> - returns true if the file can be executed.</li>\n <li><code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIFile#isHidden()\">nsIFile.isHidden()</a></code> - returns true if the file is hidden.</li>\n</ul>\n\n<p>In this example, an exeception will occur if the file cannot be written to.</p>\n\n<pre class=\"brush: js\">if (!file.isWritable())\n  throw \"File cannot be modified\";\n</pre>\n\n<p>If you aren't sure whether a file can be modified, for example, you may wish to check using <code><a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIFile#isWritable()\">nsIFile.isWritable()</a></code> first. Otherwise, an attempt to write to the file will generate an error.</p>\n\n<p>The four methods above are usually sufficient for most purposes. However, you can also use the <code>permissions</code> (<a href=\"https://developer.mozilla.org/en-US/docs/XPCOM_Interface_Reference/nsIFile#Attributes\">nsIFile.Attributes</a>) attribute to get the UNIX-style permission flags for a file. This attribute is also necessary if you need to modify the permissions.</p>\n\n<pre class=\"brush: js\">file.permissions = 0640;\n</pre>\n\n<p>It is common to use an octal number (a number in base 8 beginning with 0) for permissions as it can make the value easier to read. In this case, the first digit is the permissions for the owner of the file, the second digit is the permissions for the group of the file and the third digit is the permissions for everyone else. The value is a sum of three values, 4 for readable, 2 for writable and 1 for executable.</p>\n\n<p>The default permissions for files when created through an output stream is 0644, which means that the file is readable and writable by the owner of the file and read only for others.</p>\n\n<p>Some of the permissions may not be supported on some platforms.</p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>",
    "title": "Getting File Information"
}