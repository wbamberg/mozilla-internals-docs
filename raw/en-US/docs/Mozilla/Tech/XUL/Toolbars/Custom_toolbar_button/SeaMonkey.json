{
    "content": "<p>This page tells you step-by-step how to make a custom toolbar button in SeaMonkey 1.x. (For SeaMonkey 2, Firefox, Thunderbird and Sunbird, see the page: <a href=\"/en/Custom_Toolbar_Button\" title=\"en/Custom_Toolbar_Button\">Custom Toolbar Button</a>)</p>\n<p>You do not need any special technical skills or tools, and almost all the information you need is on this page.</p>\n<h3 id=\"Introduction\" name=\"Introduction\">Introduction</h3>\n<p>The technique described here does not involve any hacking. Instead, you make your custom button as a self-contained extension.</p>\n<p>You can use the sample code provided here to make buttons that do various useful things. If you know how to program in JavaScript, then you can write your own code that does other things.</p>\n<p>You can use this page if all you really want is a button for some special purpose.</p>\n<p>You can also use this page to learn about extensions, and as a starting point if you plan to write a more complex extension. Note that this extension is very simplified. Use other tutorials and articles to find out more—the main <a href=\"/en/Extensions\" title=\"en/Extensions\">Extensions</a> page here is a good starting point. In particular, the articles <a href=\"/en/Creating_toolbar_buttons\" title=\"en/Creating_toolbar_buttons\">Creating toolbar buttons</a> and <a href=\"/en/Building_an_Extension\" title=\"en/Building_an_Extension\">Building an Extension</a> explain the process in more detail.</p>\n<h4 id=\"Supported_applications\" name=\"Supported_applications\">Supported applications</h4>\n<p>You can use the steps on this page only with SeaMonkey 1.x versions. SeaMonkey 2 is being reworked to support the same process as Firefox, Thunderbird and others.</p>\n<p>This tutorial adds a customizable button to all SeaMonkey's toolbars. It adds a menu choice to ChatZilla's menu bar (because ChatZilla has no toolbar).</p>\n<div class=\"note\">\n  <p><strong>Note: </strong> For a similar tutorial that applies to SeaMonkey 2, Firefox, Thunderbird and Sunbird, see: <a href=\"/en/Custom_Toolbar_Button\" title=\"en/Custom_Toolbar_Button\">Custom Toolbar Button</a></p>\n  <p>Earlier versions and other Mozilla applications also support extensions, but some parts of this tutorial are not appropriate for them.</p>\n</div>\n<h4 id=\"Required_tools\" name=\"Required_tools\">Required tools</h4>\n<p>You will need two tools. Your operating system normally provides them:</p>\n<ul>\n  <li>A way to create and work with files and directories</li>\n  <li>A text editor for plain text files</li>\n</ul>\n<h5 id=\"Character_encoding\" name=\"Character_encoding\">Character encoding</h5>\n<p>Some text editors have a setting for character encoding.</p>\n<p>If your language uses only plain Latin (ASCII) characters, set your text editor to use any encoding except Unicode.</p>\n<p>If your language uses accents or other non-Latin characters, set your text editor to save files using the UTF-8 encoding.</p>\n<p>To check your text editor, create a plain text file named <code>test.txt</code>. In the file, type some of the special characters that your language uses. Save the file.</p>\n<p>Open the file in SeaMonkey (for example, by dragging it and dropping it in the Navigator window, or by choosing File – Open File... from SeaMonkey's menu bar).</p>\n<p>From SeaMonkey's menu bar, choose View – Character Encoding – Unicode (UTF-8). Check that the text you typed looks OK with this setting.</p>\n<p>If your text editor does not support UTF-8, search the Internet for a better one that you can download.</p>\n<h4 id=\"Optional_tools\" name=\"Optional_tools\">Optional tools</h4>\n<p>You can optionally use any image editor to customize the images.</p>\n<p>You can optionally use a jar tool or zip tool to package your button as a cross-platform installable (XPI) for other people to install and use.</p>\n<h3 id=\"Making_a_button\" name=\"Making_a_button\">Making a button</h3>\n<p>There are nine easy steps.</p>\n<p>When you have completed all the steps, you will have a structure like this in the directory where you installed SeaMonkey:</p>\n<dl>\n  <dd>\n    <img alt=\"Directory and file structure\" class=\"internal\" src=\"/@api/deki/files/632/=Custom-button-structure-sm.png\"></dd>\n</dl>\n<div style=\"margin-left: 4ex;\">\n  <div style=\"margin-left: -4ex; width: 4ex; float: left;\">\n    1.</div>\n  Go to the directory where you installed SeaMonkey, then go to the <code>chrome</code> directory there.\n  <p><strong>Note: </strong> For information about how to find the directory where you installed SeaMonkey, see: <a class=\"external\" href=\"http://kb.mozillazine.org/Installation_directory\">Installation directory</a></p>\n  <p>If you cannot easily find the directory, you can use the following method to find it. From SeaMonkey's menu bar, choose Tools – Web Development – JavaScript Console. Copy the following code. It is one very long line ending in <code>path</code>—make sure that you get all of it:</p>\n  <pre>Components.classes[\"@mozilla.org/file/directory_service;1\"].getService( Components.interfaces.nsIProperties).get(\"AChrom\", Components.interfaces.nsIFile).path</pre>\n  <p>In the JavaScript Console window, paste the code in the field near the top. Presss the Return or Enter key, or the Evaluate button. The console displays the location of SeaMonkey's <code>chrome</code> directory.</p>\n  <p><em>Explanation: </em> The <code>chrome</code> directory contains program files that are part of SeaMonkey itself, together with other files that are provided by extensions. Your toolbar button will be an extension.</p>\n  <div style=\"margin-left: -4ex; width: 4ex; float: left;\">\n    2.</div>\n  Delete these two files:\n  <dl>\n    <dd>\n      <code>chrome.rdf</code><br>\n      <code>overlays.rdf</code></dd>\n  </dl>\n  <p><em>Explanation: </em> SeaMonkey automatically rebuilds these files the next time it starts. When it rebuilds them, it will include your new extension.</p>\n  <div style=\"margin-left: -4ex; width: 4ex; float: left;\">\n    3.</div>\n  Edit the file: <code>installed-chrome.txt</code>\n  <p>At the end of the file, add the following line. Copy and paste the line from here, to avoid typing errors:</p>\n  <dl>\n    <dd>\n      <code>content,install,url,resource:/chrome/custombutton/</code></dd>\n  </dl>\n  <p><em>Explanation: </em> This line registers your custom toolbar button extension, linking it into SeaMonkey.</p>\n  <div style=\"margin-left: -4ex; width: 4ex; float: left;\">\n    4.</div>\n  Create a new directory named:\n  <dl>\n    <dd>\n      <code>custombutton</code></dd>\n  </dl>\n  <p>Perform the following steps in this new directory, creating five files there.</p>\n  <p><em>Explanation: </em> The name is a unique identifier for your extension, and the directory will contain all your extension's files.</p>\n  <div style=\"margin-left: -4ex; width: 4ex; float: left;\">\n    5.</div>\n  Create a plain text file named <code>contents.rdf</code>.\n  <p>Copy the following content, making sure that you scroll to get all of it. Paste it into the new file:</p>\n  <div style=\"overflow: auto; height: 12em;\">\n    <pre>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n\n&lt;!DOCTYPE RDF:RDF&gt;\n\n&lt;RDF:RDF xmlns:RDF=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n         xmlns:chrome=\"http://www.mozilla.org/rdf/chrome#\"&gt;\n\n  &lt;RDF:Seq RDF:about=\"urn:mozilla:package:root\"&gt;\n      &lt;RDF:li RDF:resource=\"urn:mozilla:package:custombutton\"/&gt;\n  &lt;/RDF:Seq&gt;\n\n  &lt;RDF:Description RDF:about=\"urn:mozilla:package:custombutton\"\n\n    chrome:displayName=\"Custom Button\"\n    chrome:description=\"My custom toolbar button\"\n    chrome:author=\"My name\"\n\n    chrome:name=\"custombutton\"\n    chrome:localeVersion=\"1.8\"\n    chrome:skinVersion=\"1.5\"\n    chrome:extension=\"true\"/&gt;\n\n  &lt;RDF:Seq about=\"urn:mozilla:overlays\"&gt;\n\n    &lt;!-- browser --&gt;\n    &lt;RDF:li&gt;\n      &lt;RDF:Seq about=\"chrome://navigator/content/navigator.xul\"&gt;\n        &lt;RDF:li&gt;chrome://custombutton/content/button.xul&lt;/RDF:li&gt;\n      &lt;/RDF:Seq&gt;\n    &lt;/RDF:li&gt;\n\n    &lt;!-- address book --&gt;\n    &lt;RDF:li&gt;\n      &lt;RDF:Seq about=\"chrome://messenger/content/addressbook/addressbook.xul\"&gt;\n        &lt;RDF:li&gt;chrome://custombutton/content/button.xul&lt;/RDF:li&gt;\n      &lt;/RDF:Seq&gt;\n    &lt;/RDF:li&gt;\n\n    &lt;!-- message --&gt;\n    &lt;RDF:li&gt;\n      &lt;RDF:Seq about=\"chrome://messenger/content/messageWindow.xul\"&gt;\n        &lt;RDF:li&gt;chrome://custombutton/content/button.xul&lt;/RDF:li&gt;\n      &lt;/RDF:Seq&gt;\n    &lt;/RDF:li&gt;\n\n    &lt;!-- message compose --&gt;\n    &lt;RDF:li&gt;\n      &lt;RDF:Seq about=\"chrome://messenger/content/messengercompose/messengercompose.xul\"&gt;\n        &lt;RDF:li&gt;chrome://custombutton/content/button.xul&lt;/RDF:li&gt;\n      &lt;/RDF:Seq&gt;\n    &lt;/RDF:li&gt;\n\n    &lt;!-- mail --&gt;\n    &lt;RDF:li&gt;\n      &lt;RDF:Seq about=\"chrome://messenger/content/messenger.xul\"&gt;\n        &lt;RDF:li&gt;chrome://custombutton/content/button.xul&lt;/RDF:li&gt;\n      &lt;/RDF:Seq&gt;\n    &lt;/RDF:li&gt;\n\n    &lt;!-- composer --&gt;\n    &lt;RDF:li&gt;\n      &lt;RDF:Seq about=\"chrome://editor/content/editor.xul\"&gt;\n        &lt;RDF:li&gt;chrome://custombutton/content/button.xul&lt;/RDF:li&gt;\n      &lt;/RDF:Seq&gt;\n    &lt;/RDF:li&gt;\n\n    &lt;!-- chat --&gt;\n    &lt;RDF:li&gt;\n      &lt;RDF:Seq about=\"chrome://chatzilla/content/chatzilla.xul\"&gt;\n        &lt;RDF:li&gt;chrome://custombutton/content/button.xul&lt;/RDF:li&gt;\n      &lt;/RDF:Seq&gt;\n    &lt;/RDF:li&gt;\n\n    &lt;!-- calendar --&gt;\n    &lt;RDF:li&gt;\n      &lt;RDF:Seq about=\"chrome://calendar/content/calendar.xul\"&gt;\n        &lt;RDF:li&gt;chrome://custombutton/content/button.xul&lt;/RDF:li&gt;\n      &lt;/RDF:Seq&gt;\n    &lt;/RDF:li&gt;\n\n  &lt;/RDF:Seq&gt;\n&lt;/RDF:RDF&gt;\n</pre>\n  </div>\n  <p>Optionally customize the file by changing the <code>displayName</code>, <code>description</code> and <code>author</code> attributes. Change the text between double-quote characters on those three lines.</p>\n  <p>Optionally remove the sections for toolbars where you do not want your button.</p>\n  <p>Save the file.</p>\n  <p><em>Explanation: </em> This file contains details of your extension, and specifies how it modifies SeaMonkey.</p>\n  <div style=\"margin-left: -4ex; width: 4ex; float: left;\">\n    6.</div>\n  Create a plain text file named <code>button.xul</code>.\n  <p>Copy the following content, making sure that you scroll to get all of it. Paste it into the new file:</p>\n  <div style=\"overflow: auto; height: 12em;\">\n    <pre>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;?xml-stylesheet type=\"text/css\"\n  href=\"chrome://custombutton/content/button.css\"?&gt;\n\n&lt;!DOCTYPE overlay &gt;\n&lt;overlay id=\"custombutton-overlay\"\n  xmlns=\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\"&gt;\n\n&lt;script type=\"application/javascript\"\n  src=\"chrome://custombutton/content/button.js\"/&gt;\n\n&lt;!-- browser --&gt;\n&lt;toolbar id=\"nav-bar\"&gt;\n  &lt;hbox id=\"nav-bar-buttons\"&gt;\n    &lt;toolbarbutton id=\"custom-button-1\"/&gt;\n    &lt;/hbox&gt;\n  &lt;/toolbar&gt;\n\n&lt;!-- address book --&gt;\n&lt;toolbar id=\"abToolbar\"&gt;\n  &lt;hbox id=\"toolbar_button_box\"&gt;\n    &lt;toolbarbutton id=\"custom-button-1\" position=\"8\"/&gt;\n    &lt;/hbox&gt;\n  &lt;/toolbar&gt;\n\n&lt;!-- message compose --&gt;\n&lt;toolbar id=\"composeToolbar\"&gt;\n  &lt;hbox id=\"toolbar_button_box\"&gt;\n    &lt;toolbarbutton id=\"custom-button-1\" position=\"8\"/&gt;\n    &lt;/hbox&gt;\n  &lt;/toolbar&gt;\n\n&lt;!-- mail, message --&gt;\n&lt;hbox id=\"toolbar_button_box\"&gt;\n  &lt;toolbarbutton id=\"custom-button-1\" position=\"15\"/&gt;\n  &lt;/hbox&gt;\n\n&lt;!-- composer --&gt;\n&lt;toolbar id=\"EditToolbar\"&gt;\n  &lt;toolbarbutton id=\"custom-button-1\" position=\"18\"/&gt;\n  &lt;/toolbar&gt;\n\n&lt;!-- chat --&gt;\n&lt;menubar id=\"mainmenu\"&gt;\n  &lt;menu id=\"custom-menu\" position=\"4\" label=\"Custom\" accesskey=\"C\"&gt;\n    &lt;menupopup&gt;\n      &lt;menuitem id=\"custom-item-1\"\n        label=\"Custom Item 1\"\n        accesskey=\"1\"\n        tooltiptext=\"My custom menu item\"\n        oncommand=\"CustomButton[1]()\"\n        /&gt;\n      &lt;/menupopup&gt;\n    &lt;/menu&gt;\n  &lt;/menubar&gt;\n\n&lt;!-- calendar --&gt;\n&lt;toolbar id=\"calendar-bar\"&gt;\n  &lt;toolbarbutton id=\"custom-button-1\" position=\"10\"/&gt;\n  &lt;/toolbar&gt;\n\n&lt;!-- button details --&gt;\n&lt;toolbarbutton id=\"custom-button-1\"\n  label=\"Custom\"\n  tooltiptext=\"My custom toolbar button\"\n  oncommand=\"CustomButton[1]()\"\n  class=\"toolbarbutton-1 custombutton\"\n  /&gt;\n\n&lt;/overlay&gt;\n</pre>\n  </div>\n  <p>Optionally customize the file by changing the <code>label</code>, <code>accesskey</code> and <code>tooltiptext</code> attributes. Change the text between double-quote characters on those lines.</p>\n  <p>Optionally remove the sections for toolbars that you do not need.</p>\n  <p>Save the file.</p>\n  <p><em>Explanation: </em> This <a href=\"/en/XUL\" title=\"en/XUL\">XUL</a> file adds the button to the toolbars. It also links to the stylesheet and JavaScript code that the button uses. The last section specifies details of the button.</p>\n  <div style=\"margin-left: -4ex; width: 4ex; float: left;\">\n    7.</div>\n  Create a plain text file named <code>button.css</code>.\n  <p>Copy the following content, making sure that you scroll to get all of it. Paste it into the new file:</p>\n  <div style=\"overflow: auto; height: 12em;\">\n    <pre>#custom-button-1\n  {list-style-image: url(\"chrome://custombutton/content/button-1s.png\");}\n\n/* common style for all custom buttons - modern */\n#nav-bar .custombutton\n  {-moz-image-region: rect( 0px  41px 39px  0px);}\n#nav-bar .custombutton:hover\n  {-moz-image-region: rect( 0px  83px 39px 42px);}\n#nav-bar .custombutton:active\n  {-moz-image-region: rect( 0px 125px 39px 84px);}\n\n.custombutton\n  {-moz-image-region: rect(39px  49px 72px  0px);}\n.custombutton:hover\n  {-moz-image-region: rect(39px  98px 72px 49px);}\n.custombutton:active\n  {-moz-image-region: rect(39px 147px 72px 98px);}\n\n/* common style for all custom buttons - classic */\n.custombutton            \n  {-moz-image-region: rect( 0px 145px 20px 126px);}\n.custombutton:hover\n  {-moz-image-region: rect( 0px 164px 20px 145px);}\n.custombutton:active\n  {-moz-image-region: rect( 0px 183px 20px 164px);}\n</pre>\n  </div>\n  <p>Remove one of the <code>common style</code> sections, leaving the section for the theme that you use in SeaMonkey. (If you leave both sections in the file, then your button's appearance will match the classic theme.)</p>\n  <p>Save the file.</p>\n  <p><em>Explanation: </em> This <a href=\"/en/CSS\" title=\"en/CSS\">CSS</a> stylesheet specifies how the button is diaplayed. It links to the button image, specifying the dimensions of the six parts of the image.</p>\n  <div style=\"margin-left: -4ex; width: 4ex; float: left;\">\n    8.</div>\n  Create a plain text file named <code>button.js</code>.\n  <p>Copy the following content, and paste it into the new file:</p>\n  <div style=\"width: 40em;\">\n    <pre>CustomButton = {\n\n1: function () {\n  alert(\"Just testing\")\t\n  },\n\n}\n</pre>\n  </div>\n  <p>There is nothing to customize for now. Save the file.</p>\n  <p>The next section in this tutorial contains examples of code that you can use to make your button do something useful.</p>\n  <p><em>Explanation: </em> This file specifies what happens when you press the button. It uses the <a href=\"/en/JavaScript\" title=\"en/JavaScript\">JavaScript</a> programming language, together with features provided by the application.</p>\n  <div style=\"margin-left: -4ex; width: 4ex; float: left;\">\n    9.</div>\n  Download the button image.\n  <p>Get a context menu for the image that you see here (for example, by right-clicking it). Choose Save Image As... from the context menu, and save it in the same <code>custombutton</code> directory as the files you have just created. Ensure that the name of the saved file is: <code>button-1s.png</code></p>\n  <div style=\"border: 6px solid rgb(221, 221, 221); margin: 0pt 0pt 1em 4ex; float: left;\">\n    <img alt=\"button-1s.png\" class=\"internal\" src=\"/@api/deki/files/578/=Button-1s.png\"></div>\n  <p style=\"\"><em>Explanation: </em> The image is in nine parts. The six parts at the left are for SeaMonkey's modern theme, and the three parts at the right are for its classic theme. Lighter images are used when the mouse pointer is over the button. Darker images are used when the button is pressed.</p>\n</div>\n<h4 id=\"Testing_your_new_button\" name=\"Testing_your_new_button\">Testing your new button</h4>\n<p>Restart SeaMonkey.</p>\n<p>Click the button to test it. You should see the pop-up message.</p>\n<h3 id=\"Further_development\" name=\"Further_development\">Further development</h3>\n<p>This section describes how you can develop your button further.</p>\n<h4 id=\"Uninstalling_the_button\" name=\"Uninstalling_the_button\">Uninstalling the button</h4>\n<p>If you ever want to uninstall the button, delete the files <code>chrome.rdf</code> and <code>overlays.rdf</code> again, just as you did in step 2.</p>\n<p>Remove the line that you added to <code>installed-chrome.txt</code> in step 3.</p>\n<p>Delete the <code>custombutton</code> directory that you created in step 4.</p>\n<p>Restart SeaMonkey.</p>\n<h4 id=\"Troubleshooting\" name=\"Troubleshooting\">Troubleshooting</h4>\n<p>If the button does not appear, or if you find some other problem, check that you have followed all the steps exactly.</p>\n<p>If necessary, uninstall the button and start again, this time without making any changes to the files.</p>\n<p>After you get the button working, customize the files carefully.</p>\n<p>To see the effect of any change that you make, restart SeaMonkey.</p>\n<h5 id=\"Advanced_troubleshooting\" name=\"Advanced_troubleshooting\">Advanced troubleshooting</h5>\n<p>If you have some technical knowledge, then you can use the SeaMonkey's JavaScript console to see error messages. However, you might see messages that are unhelpful or confusing, or that come from other parts of the application.</p>\n<p>To open the JavaScript console, choose Tools – Web Development – JavaScript Console.</p>\n<p>Messages in the JavaScript console can provide information about JavaScript, XUL or CSS files.</p>\n<div class=\"note\">\n  <strong>Note</strong>: The preference setting <a class=\"external\" href=\"http://kb.mozillazine.org/Javascript.options.strict\">javascript.options.strict</a> imposes restrictions that are not appropriate for the simple scripts in this tutorial. If you choose to use this setting, either ignore the warnings that it generates, or change the coding style to keep it quiet.</div>\n<h4 id=\"Programming_the_button\" name=\"Programming_the_button\">Programming the button</h4>\n<p>To make your button do something useful, edit the file <code>button.js</code> that you created in step 8.</p>\n<p>Remove the line: <code>alert(\"Just testing\")</code> and replace it with JavaScript code that does whatever you want to do.</p>\n<p>For a selection of code samples that you can copy and paste, and customize without any knowledge of programming, see this page: <a href=\"/en/Custom_Toolbar_Button/Code_Samples\" title=\"en/Custom_Toolbar_Button/Code_Samples\">Code Samples</a></p>\n<p>Your changes take effect when you restart the application.</p>\n<h4 id=\"Adding_more_buttons\" name=\"Adding_more_buttons\">Adding more buttons</h4>\n<p>To add another button, edit <code>button.xul</code>. For each toolbar, duplicate the line that specifies <code>custom-button-1</code>, change the new line to specify <code>custom-button-2</code>, and change its <code>position</code> attribute to position the new button in the toolbar.</p>\n<p>Duplicate the last section. In the <code>id</code> and <code>oncommand</code> attributes, change 1 to 2. Change the <code>label</code>, <code>accesskey</code> and <code>tooltiptext</code> attributes to whatever you want. Do <strong>not</strong> change the <code>class</code> attribute.</p>\n<p>Now edit <code>button.css</code>. Duplicate the first two lines, changing the new lines to specify <code>button-2</code>.</p>\n<p>Edit <code>button.js</code> and add JavaScript code for the new button. Be sure to add the extra code <strong>before</strong> the curly brace on the last line of the file. For example, you could add this code for testing:</p>\n<pre class=\"eval\">2: function () {\n  alert(\"Just testing again\")\n  },\n</pre>\n<p>Create an image for the new button, naming the file <code>button-2s.png</code>. The images supplied here have a 256-colour palette and a transparent background. They are in PNG format. Some other formats will also work.</p>\n<p>Here are some more images that you can download and use:</p>\n<div style=\"border: 6px solid rgb(221, 221, 221); margin: 0pt 0pt 1em 4ex; float: left;\">\n  <img alt=\"button-2s.png\" class=\"internal\" src=\"/@api/deki/files/581/=Button-2s.png\"></div>\n<div style=\"border: 6px solid rgb(221, 221, 221); margin: 0pt 0pt 1em 4ex; float: left;\">\n  <img alt=\"button-3s.png\" class=\"internal\" src=\"/@api/deki/files/584/=Button-3s.png\"></div>\n<div style=\"border: 6px solid rgb(221, 221, 221); margin: 0pt 0pt 1em 4ex; float: left;\">\n  <img alt=\"button-4s.png\" class=\"internal\" src=\"/@api/deki/files/587/=Button-4s.png\"></div>\n<div style=\"border: 6px solid rgb(221, 221, 221); margin: 0pt 0pt 1em 4ex; float: left;\">\n  <img alt=\"button-5s.png\" class=\"internal\" src=\"/@api/deki/files/590/=Button-5s.png\"></div>\n<p style=\"\">Restart the application to find the new button.</p>\n<p>You can repeat these steps to add as many buttons as you need.</p>\n<h4 id=\"Positioning_buttons\" name=\"Positioning_buttons\">Positioning buttons</h4>\n<p>To position your buttons on each toolbar, you can use their <code>position</code> attributes in <code>button.xul</code>. You might have to use trial and error to find values that work well, and you might find that not all positions are possible using this technique.</p>\n<p>This simplfied tutorial handles all the toolbars in a single file, <code>button.xul</code>. This is not always satisfactory.</p>\n<p>If you find that settings for different toolbars interfere with each other, make a separate XUL file for each toolbar by copying <code>button.xul</code> and removing that parts that you do not need.</p>\n<p>Change <code>contents.rdf</code>, replacing each occurrence of <code>button.xul</code> with the name of one of your new XUL files. After changing <code>contents.rdf</code>, delete the files <code>chrome.rdf</code> and <code>overlays.rdf</code> so that SeaMonkey registers the change the next time it starts.</p>\n<h3 id=\"Distributing_your_button_to_other_users\" name=\"Distributing_your_button_to_other_users\">Distributing your button to other users</h3>\n<p>If you want to distribute your button or buttons to other users, you must first make some changes to avoid conflicts when they install your extension. You will need a jar tool or zip tool to package your extension.</p>\n<p>There are six steps.</p>\n<div style=\"margin-left: 4ex;\">\n  <div style=\"margin-left: -4ex; width: 4ex; float: left;\">\n    1.</div>\n  Choose a unique name for your extension.\n  <p>Use this name to replace the text <code>custombutton</code>, <code>custom-button</code> and <code>CustomButton</code> in all four text files:</p>\n  <dl>\n    <dd>\n      <code>button.css<br>\n      button.js<br>\n      button.xul<br>\n      contents.rdf</code></dd>\n  </dl>\n  <p>In <code>contents.rdf</code>, also change the <code>displayName</code>, <code>description</code> and <code>author</code> attributes.</p>\n  <div style=\"margin-left: -4ex; width: 4ex; float: left;\">\n    2.</div>\n  Create a working directory somewhere on your computer.\n  <p>Use any name that you like for this directory.</p>\n  <div style=\"margin-left: -4ex; width: 4ex; float: left;\">\n    3.</div>\n  In your working directory, create a plain text file named: <code>install.js</code>\n  <p>Copy the following content, and paste it into the new file:</p>\n  <pre>const title = \"Custom Toolbar Button\"\nconst name = \"custombutton\"\nconst version = \"1.0\"\n\nr = initInstall(title, name, version)\n  || addDirectory(null, \"content\", getFolder(\"Chrome\"), name)\n  || registerChrome(CONTENT + DELAYED_CHROME, getFolder(\"Chrome\", name), \"\")\n\nif (r) cancelInstall(r)\nelse performInstall(), alert(\"Now restart SeaMonkey\")\n</pre>\n  <p>Customize the <code>title</code>, <code>name</code> and (optionally) <code>version</code> definitions, changing the text between double-quote characters on those three lines. The name must match the change that you made in step 1.</p>\n  <div style=\"margin-left: -4ex; width: 4ex; float: left;\">\n    4.</div>\n  In your working directory, create a new directory named <code>content</code>.\n  <p>Move all the files from your original <code>custombutton</code> directory into your new <code>content</code> directory.</p>\n  <div style=\"margin-left: -4ex; width: 4ex; float: left;\">\n    5.</div>\n  Remove your extension from SeaMonkey.\n  <p>(For instructions, see the section <a href=\"#Uninstalling_the_button\">Uninstalling the button</a>, above.)</p>\n  <div style=\"margin-left: -4ex; width: 4ex; float: left;\">\n    6.</div>\n  Use a jar tool or zip tool to package everything in your working directory.\n  <p>Name the package file with the <code>.xpi</code> extension. (Some zip tools require you to use the <code>.zip</code> extension first, then rename the file to change the extension.)</p>\n  <p>Ensure that the package does not contain your working directory itself, but only <code>install.js</code>, <code>content</code> and all the files in <code>content</code>.</p>\n</div>\n<p>To install the packaged extension, open the XPI file in SeaMonkey. (For example, drag the file's icon and drop it in SeaMonkey, or choose File – Open File... from the menu bar.)</p>\n<p>Distribute the XPI file to other users.</p>\n<p> </p>\n<p>Alternate \"Quick and Dirty\" method for hooking up a single preexisting XUL file to display in SeaMonkey:</p>\n<p>As described above, find the SeaMonkey\\chrome folder. Create a subfolder (eg. SeaMonkey\\chrome\\myapp) and open it, placing your XUL file within. Now open a new text document in the same folder, pasting the following text within:</p>\n<p>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;<br>\n  <br>\n  &lt;!DOCTYPE RDF:RDF&gt;<br>\n  <br>\n  &lt;RDF:RDF xmlns:RDF=\"<a class=\"external\" href=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" rel=\"freelink\">http://www.w3.org/1999/02/22-rdf-syntax-ns#</a>\"<br>\n           xmlns:chrome=\"<a class=\"external\" href=\"http://www.mozilla.org/rdf/chrome#\" rel=\"freelink\">http://www.mozilla.org/rdf/chrome#</a>\"&gt;<br>\n  <br>\n    &lt;RDF:Seq RDF:about=\"urn:mozilla:package:root\"&gt;<br>\n        &lt;RDF:li RDF:resource=\"urn:mozilla:package:<strong>myapp</strong>\"/&gt;<br>\n    &lt;/RDF:Seq&gt;<br>\n  <br>\n    &lt;RDF:Description RDF:about=\"urn:mozilla:package:<strong>myapp</strong>\"<br>\n  <br>\n      chrome:displayName=\"MyApp\"<br>\n      chrome:description=\"My first XUL App\"<br>\n      chrome:author=\"Yours Truly\"<br>\n  <br>\n      chrome:name=\"MyApp\"<br>\n      chrome:localeVersion=\"1.8\"<br>\n      chrome:skinVersion=\"1.5\"<br>\n      chrome:extension=\"true\"/&gt;<br>\n  &lt;/RDF:RDF&gt;</p>\n<p>Replace the fields in bold with your XUL file name and change the displayName, description, and author attributes as suits you.</p>\n<p>Save the file as <span style=\"font-family: Courier New;\">contents.rdf</span> and navigate to SeaMonkey\\chrome again, following steps 2 and 3 as listed above. Restart SeaMonkey and type the chrome url: <a class=\"external\" rel=\"freelink\">chrome://myapp/content/myapp.xul</a>, the browser should show you the content of the XUL file. Note: You may have to restart the <em>machine</em>, as SeaMonkey often is configured to keep portions of code in memory.</p>\n<p>This may not be the most relevant spot for this addition, I posted this here because the above approach proved successful after hours of unsuccessful tinkering with methods that proved to be obsolete or broken for various reasons.</p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/KLAPEK\">KLAPEK</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/KaiRo\">KaiRo</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/marcuspbell\">marcuspbell</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Rod%20Whiteley\">Rod Whiteley</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/NickolayBot\">NickolayBot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Callek\">Callek</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Andreas%20Wuest\">Andreas Wuest</a>",
    "title": "SeaMonkey - making custom toolbar (SM ver. 1.x)"
}