{
    "content": "<p></p><div class=\"prevnext\" style=\"text-align: right;\">\n    <p><a href=\"/en-US/docs/XUL/Template_Guide/Actions\" style=\"float: left;\">« Previous</a><a href=\"/en-US/docs/XUL/Template_Guide/Simple_Example\">Next  »</a></p>\n</div> In the previous example, the template builder generated an extra set of two buttons for the second row. However, the labels on the second set of buttons are different than the first set. If you look at the <a href=\"/files/394/Media_Gallery/Template-guide-p2.png\">graph</a> again, you might begin to see why. In the graph, item C has a relatedItem arrow pointing out of it to item D. This extra arrow which neither B or D have causes an extra set of buttons to be created.<p></p>\n<p>After generating content, the template builder always repeats the generation for inner levels as far as it can go. Thus, the builder can be said to generate content from the graph recursively. After generating a result's content, the builder starts again using a new parent and starting point. Naturally, the parent will be the new result's content, rather than the outer containing element, and the starting point will be the endpoint of the previous iteration. For the top level generation the parent insertion point is the element with the datasources attribute, in this example a &lt;vbox&gt;. For nested results, the insertion point is the generated element. Here is the content that was generated after one iteration:</p>\n<pre>&lt;vbox datasources=\"http://www.xulplanet.com/ds/sample.rdf\"\n      ref=\"http://www.xulplanet.com/rdf/A\"&gt;\n  &lt;template&gt;\n    &lt;query&gt;\n      &lt;content uri=\"?start\"/&gt;\n      &lt;triple subject=\"?start\"\n              predicate=\"http://www.xulplanet.com/rdf/relatedItem\"\n              object=\"?relateditem\"/&gt;\n    &lt;/query&gt;\n    &lt;action&gt;\n      &lt;hbox uri=\"?relateditem\"&gt;\n        &lt;button label=\"?start\"/&gt;\n        &lt;button label=\"?relateditem\"/&gt;\n      &lt;/hbox&gt;\n    &lt;/action&gt;\n  &lt;/template&gt;\n  &lt;hbox id=\"http://www.xulplanet.com/rdf/B\"&gt;\n    &lt;button label=\"http://www.xulplanet.com/rdf/A\"/&gt;\n    &lt;button label=\"http://www.xulplanet.com/rdf/B\"/&gt;\n  &lt;/hbox&gt;\n  &lt;hbox id=\"http://www.xulplanet.com/rdf/C\"&gt;\n    &lt;button label=\"http://www.xulplanet.com/rdf/A\"/&gt;\n    &lt;button label=\"http://www.xulplanet.com/rdf/C\"/&gt;\n  &lt;/hbox&gt;\n  &lt;hbox id=\"http://www.xulplanet.com/rdf/D\"&gt;\n    &lt;button label=\"http://www.xulplanet.com/rdf/A\"/&gt;\n    &lt;button label=\"http://www.xulplanet.com/rdf/D\"/&gt;\n  &lt;/hbox&gt;\n&lt;/vbox&gt;\n</pre>\n<p>For the next iteration, the insertion point will be the three &lt;hbox&gt; elements. However, since C is the only element that will end up having any additional content, only the second &lt;hbox&gt; element will have additional children added to it.</p>\n<p>For a nested item, the builder processes the query in the same way as usual, however instead of using the ref attribute as the seed starting point, the end point or member is used instead. This will correspond to the id on the appropriate element in the generated content above. To begin, B is evaluated and seeded with the right value:</p>\n<pre>(?start = http://www.xulplanet.com/rdf/B)\n</pre>\n<p>The &lt;triple&gt; statement is then examined, however, item B doesn't have a relatedItem arc out of it, so the result is rejected. Since there are no potential results, the builder doesn't generate anything. A similar situation will occur for item D. However, for item C, the triple does match an item, so the data will be added to the potential result:</p>\n<pre>(?start = http://www.xulplanet.com/rdf/C, ?relateditem = http://www.xulplanet.com/rdf/D)\n</pre>\n<p><img alt=\"Image:Template-guide-p9.png\" src=\"/files/398/Media_Gallery/Template-guide-p9.png\"></p>\n<p>A match has occured, so the content within the action body will be created and added inside item C. Since the ?start variable points to item C and the ?relateditem variable points to D, the buttons will be created with these labels. If you look at the image of the example again, you will see that the buttons do have these labels. The resulting content for row C will look like this:</p>\n<pre>&lt;hbox id=\"http://www.xulplanet.com/rdf/C\"&gt;\n  &lt;button label=\"http://www.xulplanet.com/rdf/A\"/&gt;\n  &lt;button label=\"http://www.xulplanet.com/rdf/C\"/&gt;\n  &lt;hbox id=\"http://www.xulplanet.com/rdf/D\"&gt;\n    &lt;button label=\"http://www.xulplanet.com/rdf/C\"/&gt;\n    &lt;button label=\"http://www.xulplanet.com/rdf/D\"/&gt;\n  &lt;/hbox&gt;\n&lt;/hbox&gt;\n</pre>\n<p>The recursive nature of templates has useful applications in menus and trees so that sets of iterative content can be generated automatically. We'll look more at recursive templates later, but next, let's look at a more practical example.</p>\n<p></p><div class=\"prevnext\" style=\"text-align: right;\">\n    <p><a href=\"/en-US/docs/XUL/Template_Guide/Actions\" style=\"float: left;\">« Previous</a><a href=\"/en-US/docs/XUL/Template_Guide/Simple_Example\">Next  »</a></p>\n</div><p></p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Brettz9\">Brettz9</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Bektur\">Bektur</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Enn\">Enn</a>",
    "title": "Recursive Generation"
}