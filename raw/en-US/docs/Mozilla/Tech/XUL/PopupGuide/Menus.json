{
    "content": "<h3 id=\"Menus\" name=\"Menus\">Menus</h3>\n\n<p>A menu provides a list of commands that the user can carry out.</p>\n\n<h4 id=\"Menu_Types\" name=\"Menu_Types\">Menu Types</h4>\n\n<p>A menu is created using the <code>menupopup</code> tag. It is normally attached to a menubar or to a button. When the menu or button is clicked the menu is opened, listing the commands that are available. The user may select a command to invoke it, or may cancel the operation by pressing Escape or clicking outside the menu.</p>\n\n<p>XUL provides a number of tags for creating menus. These tags can be used to create menus which sit on a menubar or are attached to buttons. Submenus may be created by nesting one menu inside of another. No special code needs to be written to open or close a menu or submenu, and, in addition, the menus are placed on screen in the appropriate locations automatically.</p>\n\n<p>There are four elements that a menupopup can be attached to. In each case, the menupopup element is placed as a direct child of the element. The following is a brief summary of these elements, examples of each will be provided later.</p>\n\n<dl>\n <dt>menu</dt>\n <dd>The menu tag is used when placing menus on a menu bar. For example, the File and Edit menus along the top of an application window (or the menubar on the top of screen). This type of menu is usually used for commands that apply to the entire application. Commands that don't apply at a given time should be disabled. However, the actual top level menus do not generally change for a given window.</dd>\n <dt>button</dt>\n <dd>A menu may be attached to a button by setting the <code id=\"a-type\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/type\">type</a></code> attribute of the button to 'menu'. Instead of creating a standard button, this will create a button with a small arrow or other indicator. Clicking the button will display the menu, allowing a command to be selected. This type of menu would be used when you want to have a set of commands yet don't want to use a menu bar, for example in a dialog box. See <a href=\"/en/XUL/PopupGuide/MenuButtons\" title=\"en/XUL/PopupGuide/MenuButtons\">Menu Buttons</a> for more information.</dd>\n <dt>toolbarbutton</dt>\n <dd>Toolbar buttons can also support menus. This works just like it does for other buttons. See <a href=\"/en/XUL/PopupGuide/MenuButtons\" title=\"en/XUL/PopupGuide/MenuButtons\">Menu Buttons</a> for more information.</dd>\n <dt>menulist</dt>\n <dd>A menulist is used when you wish the user to select from a list of items. For this type of menu, one of the items within it is selected. When another item is selected, the label of the item is set as the label of the menulist. Other user interfaces call this type of widget a combobox.</dd>\n</dl>\n\n<p>You may also see a popup tag used in place of the menupopup tag. The popup tag is deprecated but is equivalent to the menupopup tag.</p>\n\n<h4 id=\"Menu_Tag_Overview\" name=\"Menu_Tag_Overview\">Menu Tag Overview</h4>\n\n<p>The following shows a simple menu example, containing a menubar with a single menu labeled 'File'.</p>\n\n<p><img alt=\"Image:Popupguide-menubar.png\" class=\"internal\" src=\"/@api/deki/files/299/=Popupguide-menubar.png\"></p>\n\n<pre>&lt;menubar id=\"sample-menubar\"&gt;\n  &lt;menu id=\"file-menu\" label=\"File\"&gt;\n    &lt;menupopup id=\"file-popup\"&gt;\n      &lt;menuitem label=\"New\"/&gt;\n      &lt;menuitem label=\"Open\"/&gt;\n      &lt;menuitem label=\"Save\"/&gt;\n      &lt;menuseparator/&gt;\n      &lt;menuitem label=\"Exit\"/&gt;\n    &lt;/menupopup&gt;\n  &lt;/menu&gt;\n&lt;/menubar&gt;\n</pre>\n\n<p>There are five tags used in this example, described briefly here:</p>\n\n<dl>\n <dt>menubar</dt>\n <dd>A row of menus that appears along the top of the window or screen. It should contain menu elements.</dd>\n</dl>\n\n<dl>\n <dt>menu</dt>\n <dd>A label of a menu on a menubar, for instance 'File' or 'Tools'. A menu can also be used as the label of a submenu.</dd>\n</dl>\n\n<dl>\n <dt>menupopup</dt>\n <dd>A popup containing items to appear on a menu. The menupopup in the example above is a child of the 'File' menu and will appear when the menu label is clicked.</dd>\n</dl>\n\n<dl>\n <dt>menuitem</dt>\n <dd>A single item to appear on a menu. When the user moves the mouse over a menuitem, it will highlight the item. The cursor keys can also be used to adjust which menuitem is the current item. A menuitem is associated with a command to carry out.</dd>\n</dl>\n\n<dl>\n <dt>menuseparator</dt>\n <dd>A separator between items in a menu.</dd>\n</dl>\n\n<p>In the example above, the 'File' menu has four menuitems and one menuseparator on it. The menu and each menuitem has a label indicating its purpose.</p>\n\n<p>Other types of tags should not appear on a menupopup. If you want to create a general purpose popup that isn't a menu, use a panel instead. For this, see <a href=\"/en/XUL/PopupGuide/Panels\" title=\"en/XUL/PopupGuide/Panels\">Panels</a>.</p>\n\n<h5 id=\"The_menubar_element\" name=\"The_menubar_element\">The menubar element</h5>\n\n<p>A menu bar is created by using the XUL menubar tag. Usually, the main window for an application will have a menubar across the top of the window. On the Macintosh, the menubar is placed along the top of the screen. You do not have to do anything to handle this difference. The first menubar encountered when parsing the XUL window will be used as the main menu bar for the window, and on the Macintosh, will be hidden from the main window and transformed into a native menu bar at the top of the screen. For this reason, a window should only have one menu bar, however, each window can have a different menu bar.</p>\n\n<p>The menubar should have menu elements within it, one for each menu. The example below shows a menubar with three menus.</p>\n\n<pre>&lt;menubar id=\"sample-menubar\"&gt;\n  &lt;menu id=\"file-menu\" label=\"File\"&gt;\n    ...\n  &lt;/menu&gt;\n  &lt;menu id=\"tools-menu\" label=\"Tools\"&gt;\n    ...\n  &lt;/menu&gt;\n  &lt;menu id=\"help-menu\" label=\"Help\"&gt;\n    ...\n  &lt;/menu&gt;\n&lt;/menubar&gt;\n</pre>\n\n<p>It's possible to place other elements on a menubar, but remember that they will not appear on a Macintosh. So you should ensure that the functionality of these elements is avialable elsewhere. Or, you could write code that handles multiple platforms in different ways. If you do place other elements on a menubar, you may wish to align them on the far side rather than next to the other menus. You can do this by adding a flexible spacer.</p>\n\n<pre>&lt;menubar id=\"sample-menubar\"&gt;\n  &lt;menu id=\"file-menu\" label=\"File\"&gt;\n    ...\n  &lt;/menu&gt;\n  &lt;spacer flex=\"1\"/&gt;\n  &lt;image src=\"logo.png\"/&gt;\n&lt;/menubar&gt;\n</pre>\n\n<p>In this example, a logo image is placed on the end of a menubar.</p>\n\n<h5 id=\"The_menupopup_element\" name=\"The_menupopup_element\">The menupopup element</h5>\n\n<p>The menupopup element is the popup that displays the menu items. When used for menus on a menubar, the menupopup should be a child of the menu element. The following shows a simple Help menu.</p>\n\n<pre>&lt;menu label=\"Help\"&gt;\n  &lt;menupopup&gt;\n    &lt;menuitem label=\"Contents\"/&gt;\n    &lt;menuitem label=\"Search Help\"/&gt;\n  &lt;/menupopup&gt;\n&lt;/menu&gt;\n</pre>\n\n<p>Normally, a menupopup is hidden. When the 'Help' label is pressed, the menupopup is displayed over top of the window, aligned along the bottom of the Help menu label. When a menu command is selected or the menu is cancelled, the menupopup disappears from the screen again.</p>\n\n<h5 id=\"The_menu_element\" name=\"The_menu_element\">The menu element</h5>\n\n<p>The menu element is used for the labels on a menubar and for the labels of submenus. For information about submenus, see <a href=\"/en/XUL/PopupGuide/Menus#Submenus\" title=\"en/XUL/PopupGuide/Menus#Submenus\">Submenus</a> below.</p>\n\n<p>The label for the menu element is specified using the <code id=\"a-label\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/label\">label</a></code> attribute. In the example below, the menu has the label 'View'.</p>\n\n<pre>&lt;menu label=\"View\"&gt;\n  &lt;menupopup&gt;\n    &lt;menuitem label=\"Toolbar\"/&gt;\n    &lt;menuitem label=\"Status Bar\"/&gt;\n  &lt;/menupopup&gt;\n&lt;/menu&gt;\n</pre>\n\n<p>When the menu is clicked, it opens the menupopup contained within it. For this reason, a menupopup should be placed as a direct child of the menu.</p>\n\n<p>The menu can also be opened by using the keyboard. The user can press a key to highlight the menu labels and navigate with the cursor keys. The key is different for each platform; on Windows F10 can be used. Another way is to add shortcut keys called access keys for each menu element to make it easier to access the menu commands. On some platforms, adding an access key will underline a letter in the menu label indicating the key to press. For this reason, the access key should always correspond to a character that appears in the menu label.</p>\n\n<p>To set an access key for a menu, use the <code id=\"a-accesskey\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/accesskey\">accesskey</a></code> attribute, as in the example below.</p>\n\n<pre>&lt;menu label=\"File\" accesskey=\"F\"/&gt;\n</pre>\n\n<p>This menu can then be opened by pressing the access key (typically in combination with the Alt key).</p>\n\n<p>Naturally, the access keys should be unique on a menubar. So if you wanted to have a menu with the label Find, you would need to set a different access key.</p>\n\n<pre>&lt;menubar&gt;\n  &lt;menu label=\"File\" accesskey=\"F\"/&gt;\n  &lt;menu label=\"Find\" accesskey=\"d\"/&gt;\n&lt;/menubar&gt;\n</pre>\n\n<p>Here, the 'File' menu has the 'F' access key, and the 'Find' menu has the 'd' access key. Although the access keys are not case sensitive, the underlined letter will always be the one with matching case if available. For instance, an access key of 'W' will match the first letter in a menu label of 'Window', but the access key of 'w' will match the last letter. It is good practise to always use the same case when setting access keys.</p>\n\n<h5 id=\"The_menuitem_element\" name=\"The_menuitem_element\">The menuitem element</h5>\n\n<p>The menuitem element is used for each item that appears on a menu popup. As with the menu element, the <code id=\"a-label\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/label\">label</a></code> and <code id=\"a-accesskey\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/accesskey\">accesskey</a></code> attributes may be used to set the label and an access key for the item.</p>\n\n<pre>&lt;menuitem label=\"Open\" accesskey=\"O\"/&gt;\n</pre>\n\n<p><img alt=\"Image:Popupguide-menuaccesskey.png\" class=\"internal\" src=\"/@api/deki/files/298/=Popupguide-menuaccesskey.png\"></p>\n\n<p>The access key will only function while the menu it is contained within is open, so access keys only need to be unique within that menu.</p>\n\n<p>When the item is clicked with the mouse or the access key is pressed while the menu is open, the command event is fired at the menuitem. This is the manner in which an action can be associated with the menuitem. For instance, the action associated with a Open menuitem might be to open a file picker to select a file to open. In this example, a command event listener is attached to the item using the <code id=\"a-oncommand\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/oncommand\">oncommand</a></code> attribute. Here, it just displays an alert message.</p>\n\n<pre>&lt;menuitem label=\"Open\" accesskey=\"O\" oncommand=\"alert('Open a File!');\"/&gt;\n</pre>\n\n<p>Another way to associate an action with a menu item is to use a command element. The example below has the same effect as the previous example, however it uses a command element instead of listening to the command event directly.</p>\n\n<pre>&lt;command id=\"cmd_open\" oncommand=\"alert('Open a File!');\"/&gt;\n...\n&lt;menuitem label=\"Open\" accesskey=\"O\" command=\"cmd_open\"/&gt;\n</pre>\n\n<p>The <code id=\"a-command\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/command\">command</a></code> attribute should be set to the id of a command element within the same document, in this case 'cmd_open'. The command event will be fired on the command element instead of the menuitem. This is useful when you wish to have several elements performing the same action, for example a menuitem on a menubar, a context menu, and a toolbar button, because you can place the code to execute only once on the command and hook each element up to the command.</p>\n\n<p>Menuitems also support displaying shortcuts associated with the menuitem, as well as icons beside the label. For details about adding shortcut keys to menus, see <a href=\"/en/XUL/PopupGuide/MenuItems#Adding_Shortcut_Keys_to_Menu_Items\" title=\"en/XUL/PopupGuide/MenuItems#Adding_Shortcut_Keys_to_Menu_Items\">Adding Shortcut Keys to Menu Items</a>. For details about adding icons to menus, see <a href=\"/en/XUL/PopupGuide/MenuItems#Adding_Icons_to_Menu_Items\" title=\"en/XUL/PopupGuide/MenuItems#Adding_Icons_to_Menu_Items\">Adding Icons to Menu Items</a>.</p>\n\n<p>For details about creating checkbox menu items or radio menu items see <a href=\"/en/XUL/PopupGuide/MenuItems#Checkbox_Menu_Items\" title=\"en/XUL/PopupGuide/MenuItems#Checkbox_Menu_Items\">Checkbox Menu Items</a> or <a href=\"/en/XUL/PopupGuide/MenuItems#Radio_Menu_Items\" title=\"en/XUL/PopupGuide/MenuItems#Radio_Menu_Items\">Radio Menu Items</a>.</p>\n\n<p>Menu items can be disabled by setting the <code id=\"a-disabled\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/disabled\">disabled</a></code> attribute to true. For an example, see <a href=\"/en/XUL/PopupGuide/MenuItems#Disabling_a_Menuitem\" title=\"en/XUL/PopupGuide/MenuItems#Disabling_a_Menuitem\">Disabling a Menuitem</a>.</p>\n\n<h5 id=\"The_menuseparator_element\" name=\"The_menuseparator_element\">The menuseparator element</h5>\n\n<p>The menuseparator element may be used to create a separator between menus. It is a good idea to group related commands together on a menu and use separators between different groups. This ensures that the items on the menu are easier to distinguish. There are no special attributes that would be used on a separator.</p>\n\n<pre>&lt;menuseparator/&gt;\n</pre>\n\n<h4 id=\"Submenus\" name=\"Submenus\">Submenus</h4>\n\n<p>Sometimes, you will want an item on a menu to have additional commands tucked away on a second menu that is opened only when the item is selected. A submenu is created by nesting a menu element inside another menupopup. When the mouse is moved over the submenu label, or the cursor keys move the current item to the submenu, that menu's popup appears. It will close when the mouse is moved away or the current item is changed.</p>\n\n<pre>&lt;menubar id=\"sample-menubar\"&gt;\n  &lt;menu id=\"view-menu\" label=\"View\"&gt;\n    &lt;menupopup&gt;\n      &lt;menuitem label=\"Toolbar\"/&gt;\n      &lt;menuitem label=\"Status Bar\"/&gt;\n      &lt;menuseparator/&gt;\n      &lt;menu label=\"Sort\" accesskey=\"S\"&gt;\n        &lt;menupopup&gt;\n          &lt;menuitem label=\"By Name\"/&gt;\n          &lt;menuitem label=\"By Date\"/&gt;\n        &lt;/menupopup&gt;\n      &lt;/menu&gt;\n    &lt;/menupopup&gt;\n  &lt;/menu&gt;\n&lt;/menubar&gt;\n</pre>\n\n<p><img alt=\"Image:Popupguide-submenus.png\" class=\"internal\" src=\"/@api/deki/files/315/=Popupguide-submenus.png\"></p>\n\n<p>In this example, a top level 'View' menu has two child menuitems, a separator and a submenu created with the menu tag. The menu has the label 'Sort' and an access key of 'S'. This menu has a child menupopup with two items. The syntax for this menupopup is the same as the outer menupopup.</p>\n\n<p>You could further add a third level of menus by using another menu element as one of the items inside the 'Sort' menupopup. However, this tends to become more difficult for the user to use, so you should avoid adding too many levels of submenus.</p>\n\n<h4 id=\"Sharing_Menus_Between_Windows\" name=\"Sharing_Menus_Between_Windows\">Sharing Menus Between Windows</h4>\n\n<p>If you wish to have several windows that share the same menu bar, a common technique is to place the menubar in an overlay and apply it to all of the windows. This allows the menu bar to be shared between each window without having to duplicate code. This technique may be used for individual menus or for an entire menu bar. For example, to have a Tools menu that is shared between all windows, just create a menu in the overlay, and include it in each window with a single line:</p>\n\n<pre>&lt;menu id=\"menu-tools\"/&gt;\n</pre>\n\n<p>The overlay should have a <code>menu</code> with the same id 'menu-tools' containing the complete definition of the menu.</p>\n\n<p>If you wish to have slight differences between each window, one possibility is to show or hide menu items in a load event listener. For example, to have an item initially hidden in a window:</p>\n\n<pre>function initMenus()\n{\n  var item = document.getElementById(\"menu-file-open\");\n  item.hidden = true;\n}\n</pre>\n\n<p>The <code><span><a href=\"https://developer.mozilla.org/en-US/docs/XUL/Property/hidden\">hidden</a></span></code> property is set to true to hide the menu with the id 'menu-fileOpen'. This function may be called from within an <code id=\"a-onload\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/onload\">onload</a></code> attribute on the window.</p>\n\n<div class=\"noinclude\">\n<h4 id=\"Sharing_Menus_Between_Windows\" name=\"Sharing_Menus_Between_Windows\">Accessing and Setting the Active Item</h4>\n\n<p>In a menu, there will usually be an item that is considered \"active\".  This item will be highlighted, and will do certain functions depending on the kind of item it is, and the way in which it has been activated, whether via the keyboard or mouse.  For example, if it is a menu element and has been activated via a mouseover, then the menu will open.  If it has been activated via navigation with the up or down arrow on the keyboard, then pressing the return key or right arrow key will open the menu.  If it were a menuitem, then pressing the return key would have launched the command associated with it.</p>\n\n<p>There may be occasion to access or set this programatically with a script.  If the menu has been created using a menulist, this is easily accomplished using the <code><span><a href=\"https://developer.mozilla.org/en-US/docs/XUL/Property/selectedItem\">selectedItem</a></span></code> or <code><span><a href=\"https://developer.mozilla.org/en-US/docs/XUL/Property/selectedIndex\">selectedIndex</a></span></code> properties.  However, it is not possible to use these properties for menus whose popup is the child of menu, button, or toolbarbutton.  However, there is a way to access the active item using the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIMenuBoxObject\" title=\"\">nsIMenuBoxObject</a></code> interface:</p>\n\n<pre><code>activeItem = xulMenu.boxObject.QueryInterface(Components.interfaces.nsIMenuBoxObject).activeChild;</code>\n</pre>\n\n<p>where xulMenu is the menu, button, or toolbarbutton object.</p>\n\n<p>You can set the active item thusly so:</p>\n\n<pre><code>xulMenu.boxObject.QueryInterface(Components.interfaces.nsIMenuBoxObject).activeChild = item;</code>\n</pre>\n\n<p>When the active item is set this way, keyboard navigation will now continue from this point.  Setting activeChild to null will deactivate all items, and keyboard navigation will start from the top of the menu.</p>\n\n<p>It should be noted that setting the active item in this way will not affect the <code><span><a href=\"https://developer.mozilla.org/en-US/docs/XUL/Property/selected\">selected</a></span></code> property or <code id=\"a-selected\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/selected\">selected</a></code> attribute of the previously and newly activated item.  You must unset/set those explicity for each item affected, if you want them to be.  For menulists, however, setting the <code><span><a href=\"https://developer.mozilla.org/en-US/docs/XUL/Property/selectedItem\">selectedItem</a></span></code> or <code><span><a href=\"https://developer.mozilla.org/en-US/docs/XUL/Property/selectedIndex\">selectedIndex</a></span></code> properties on the menu will automatically take care of that for you.</p>\n</div>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/SphinxKnight\">SphinxKnight</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Allasso\">Allasso</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/SylvainPasche\">SylvainPasche</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Shoot\">Shoot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mgjbot\">Mgjbot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Enn\">Enn</a>",
    "title": "Menus"
}