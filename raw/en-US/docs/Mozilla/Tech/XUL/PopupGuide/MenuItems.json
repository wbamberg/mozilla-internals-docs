{
    "content": "<h3 id=\"Features_of_the_menuitem_Element\" name=\"Features_of_the_menuitem_Element\">Features of the menuitem Element</h3>\n\n<p>The <code><a href=\"/en-US/docs/Mozilla/Tech/XUL/menuitem\" title=\"menuitem\">menuitem</a></code> element has a number of features beyond just being a label for a menu command.</p>\n\n<h4 id=\"Adding_Shortcut_Keys_to_Menu_Items\" name=\"Adding_Shortcut_Keys_to_Menu_Items\">Adding shortcut keys to menu items</h4>\n\n<p>A shortcut key may be associated with a menu item. Unlike the access key, which only functions while the menu is open, a shortcut key works at any time. A shortcut key can be created using the <code><a href=\"/en-US/docs/Mozilla/Tech/XUL/key\" title=\"key\">key</a></code> element. In reality, the keyboard shortcut is handled by the <code><a href=\"/en-US/docs/Mozilla/Tech/XUL/key\" title=\"key\">key</a></code> element, however, the menu item will display the shortcut next to its label. This allows the user to discover what shortcut keys are available by looking at the menus.</p>\n\n<pre>&lt;keyset&gt;\n  &lt;key id=\"open-key\" modifiers=\"accel\" key=\"O\"/&gt;\n  &lt;key id=\"close-key\" modifiers=\"accel\" key=\"C\"/&gt;\n&lt;/keyset&gt;\n&lt;menubar&gt;\n  &lt;menu label=\"View\"&gt;\n    &lt;menupopup&gt;\n      &lt;menuitem label=\"Open\" key=\"open-key\"/&gt;\n      &lt;menuitem label=\"Close\" key=\"close-key\"/&gt;\n    &lt;/menupopup&gt;\n  &lt;/menu&gt;\n&lt;/menubar&gt;\n</pre>\n\n<p><img alt=\"Image:Popupguide-menushortcut.png\" class=\"internal\" src=\"/@api/deki/files/303/=Popupguide-menushortcut.png\"></p>\n\n<p>The two menuitems are associated with a key using the <code id=\"a-key\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/key\">key</a></code> attribute. It should be set to the ID of a <code><a href=\"/en-US/docs/Mozilla/Tech/XUL/key\" title=\"key\">key</a></code> element within the same document. The result is that the items will display the shortcut key next to their labels. For the \"Open\" item in this example, this command can be invoked by using the \"accel\" modifier key and pressing 'O'. The \"accel\" modifier key varies on each platform, but is the key typically used for shortcut keys. For instance, if the \"accel\" key is Control, the menu might display \"Ctrl + O\".</p>\n\n<p>Although there isn't usually a need to do so, you can also set a custom label for the keyboard shortcut on the menu using the <code id=\"a-acceltext\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/acceltext\">acceltext</a></code> attribute. You might do this if the key associated with the item changes, for instance a list of open windows displayed on a Window menu.</p>\n\n<pre>&lt;menuitem label=\"First Window\" acceltext=\"1\"/&gt;\n</pre>\n\n<p>Here the keyboard shortcut label will be '1', however you will need to write code to handle the key as well.</p>\n\n<h4 id=\"Adding_Icons_to_Menu_Items\" name=\"Adding_Icons_to_Menu_Items\">Adding icons to menu items</h4>\n\n<p>An icon may be added to a menu item using the <code id=\"a-image\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/image\">image</a></code> attribute. The icon will appear to the left of the <code><a href=\"/en-US/docs/Mozilla/Tech/XUL/menuitem\" title=\"menuitem\">menuitem</a></code> label. In addition to the image, a special class \"menuitem-iconic\" must be used on the menuitem to indicate that an icon is expected.</p>\n\n<pre>&lt;menuitem id=\"add-bookmark\" class=\"menuitem-iconic\" label=\"Add Bookmark\" image=\"addbookmark.png\"/&gt;\n</pre>\n\n<p>As the image appears on a menu item, you will want to ensure you use a fairly small image. Although the exact size will vary depending on the theme being used, the size of menu item images should generally be around 16 by 16 pixels. Instead of specifying the icon with the <code id=\"a-image\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/image\">image</a></code> attribute, you can also reference the image in a style sheet with the 'list-style-image' property.</p>\n\n<pre>#add-bookmark {\n  list-style-image: url('addbookmark.png');\n}\n</pre>\n\n<p>This technique can also be used to apply an image for the menu element, except you would want to use the \"menu-iconic:\" class instead.</p>\n\n<pre>&lt;menuitem id=\"bookmark\" class=\"menu-iconic\" label=\"Bookmarks\" image=\"bookmarks.png\"/&gt;\n</pre>\n\n<h4 id=\"Checkbox_Menu_Items\" name=\"Checkbox_Menu_Items\">Menu icon animation</h4>\n\n<p>In order to animate the menu item icon on hover a <a href=\"/en-US/docs/Web/CSS/-moz-image-region\" title=\"For certain XUL elements and pseudo-elements that use an image from the list-style-image property, this property specifies a region of the image that is used in place of the whole image. This allows elements to use different pieces of the same image to improve performance.\"><code>-moz-image-region</code></a> rule can be applied. In this example we use an image that is 16px wide and 32px high. the top 16px square is the icon in normal state the bottom part in hovered state.</p>\n\n<p><img alt=\"\"></p>\n\n<p>Note that the image element is on a child level underneath the menu or menuitem, and it will have the class <em>menu-iconic-icon</em>. Hence, <a href=\"/en-US/docs/Web/CSS/-moz-image-region\" title=\"For certain XUL elements and pseudo-elements that use an image from the list-style-image property, this property specifies a region of the image that is used in place of the whole image. This allows elements to use different pieces of the same image to improve performance.\"><code>-moz-image-region</code></a> is not applied to the menu itself, but one level lower:</p>\n\n<pre>&lt;menuitem id=\"add-bookmark\" class=\"menuitem-iconic\" label=\"Add Bookmark\" image=\"addbookmark.png\"/&gt;\n\n#add-bookmark {  list-style-image: url('addbookmark.png'); }\n\n#add-bookmark .menu-iconic-icon { <a href=\"https://developer.mozilla.org/en/CSS/-moz-image-region\" title=\"https://developer.mozilla.org/en/CSS/-moz-image-region\">-moz-image-region</a>: rect(0px, 16px, 16px, 0px) !important; }\n\n#add-bookmark:hover .menu-iconic-icon { <a href=\"https://developer.mozilla.org/en/CSS/-moz-image-region\" title=\"https://developer.mozilla.org/en/CSS/-moz-image-region\">-moz-image-region</a>: rect(16px, 16px, 32px, 0px)Â  !important; }\n</pre>\n\n<p>This behavior is fundamentally different to other HTML elements, such as <a href=\"/en-US/docs/Web/HTML/Element/li\" title=\"The HTML &lt;li> element is used to represent an item in a list. It must be contained in a parent element: an ordered list (&lt;ol>), an unordered list (&lt;ul>), or a menu (&lt;menu>). In menus and unordered lists, list items are usually displayed using bullet points. In ordered lists, they are usually displayed with an ascending counter on the left, such as a number or letter.\"><code>&lt;li&gt;</code></a> or <a href=\"/en-US/docs/Web/HTML/Element/div\" title=\"The HTML Content Division element (&lt;div>) is the generic container for flow content. It has no effect on the content or layout until styled using CSS.\"><code>&lt;div&gt;</code></a> where <a href=\"/en-US/docs/Web/CSS/list-style-image\" title=\"The list-style-image CSS property sets an image to be used as the list item marker.\"><code>list-style-image</code></a> and <a href=\"/en-US/docs/Web/CSS/-moz-image-region\" title=\"For certain XUL elements and pseudo-elements that use an image from the list-style-image property, this property specifies a region of the image that is used in place of the whole image. This allows elements to use different pieces of the same image to improve performance.\"><code>-moz-image-region</code></a> can be applied at the same element level.</p>\n\n<h4 id=\"Checkbox_Menu_Items\" name=\"Checkbox_Menu_Items\">Checkbox menu items</h4>\n\n<p>Sometimes, you will want to have an item on a menu that acts as a toggle. For instance, a menuitem that can be used to toggle a toolbar on and off. To indicate the current state of the toolbar, a checkbox would be displayed next to the menu item label. If the checkbox is on, the toolbar is shown, whereas if the checkbox is off, the toolbar is not shown. The user can select the menu item to switch the toolbar visibility.</p>\n\n<p>This type of menuitem can be created by using the <code id=\"a-type\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/type\">type</a></code> attribute and setting it to the value \"checkbox\".</p>\n\n<pre>&lt;menu label=\"View\" accesskey=\"V\"&gt;\n  &lt;menupopup&gt;\n    &lt;menuitem label=\"Show Toolbar\" accesskey=\"T\" type=\"checkbox\" checked=\"true\"/&gt;\n    &lt;menuitem label=\"Show Status Bar\" accesskey=\"S\" type=\"checkbox\"/&gt;\n  &lt;/menupopup&gt;\n&lt;/menu&gt;\n</pre>\n\n<p><img alt=\"Image:Popupguide-menucheckbox.png\" class=\"internal\" src=\"/@api/deki/files/301/=Popupguide-menucheckbox.png\"></p>\n\n<p>Both menuitems are of the checkbox type. The first menuitem is checked by default, as indicated by the <code id=\"a-checked\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/checked\">checked</a></code> attribute set to the value <code>true</code>. The second menuitem is not checked by default. When the user activates the menuitem, the command event gets fired. From within a command listener, you can execute code which will change the state of the toolbar or status bar or whatever it is that need changing. You do not need to update the <code id=\"a-checked\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/checked\">checked</a></code> attribute as the menuitem will update this automatically before the command event is fired.</p>\n\n<p>Note that the checked state is updated before the command event fires, so if you use the menuitem's <code id=\"a-checked\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/checked\">checked</a></code> attribute within the command listener, it will already be in the new state.</p>\n\n<pre>&lt;script&gt;\nfunction changeToolbarState(event)\n{\n  if (event.target.getAttribute(\"checked\") == \"true\")\n    showToolbar();\n  else\n    hideToolbar();\n}\n&lt;/script&gt;\n...\n&lt;menuitem label=\"Show Toolbar\" accesskey=\"T\" type=\"checkbox\"\n          oncommand=\"changeToolbarState();\"/&gt;\n</pre>\n\n<p>In this example, we show the toolbar when the menuitem is checked and hide the toolbar otherwise.</p>\n\n<p>There may be times when you do not want the checkbox state to be updated automatically when the menuitem is activated. This can be useful if there's a possibility that whatever action is carried out could fail. One possibility is to simply reverse the checkbox state again. As this can be more complicated, it is also possible to use the <code id=\"a-autocheck\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/autocheck\">autocheck</a></code> attribute to disable this behavior. When the autocheck attribute is set to <code>false</code>, the checkbox state is not updated automatically, and you must write code to adjust the state yourself.</p>\n\n<pre>&lt;script&gt;\nfunction changeToolbarState(event)\n{\n  if (event.target.getAttribute(\"checked\") == \"true\")\n    hideToolbar();\n    event.target.removeAttribute(\"checked\");\n  }\n  else {\n    if (!showToolbar())\n      return;\n    event.target.setAttribute(\"checked\", \"true\");\n  }\n}\n&lt;/script&gt;\n...\n&lt;menuitem label=\"Show Toolbar\" accesskey=\"T\" type=\"checkbox\" autocheck=\"false\"\n          oncommand=\"changeToolbarState();\"/&gt;\n</pre>\n\n<p>This version of the <code>changeToolbarState</code> function changes the <code id=\"a-checked\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/checked\">checked</a></code> attribute itself. The autocheck attribute has been set to <code>false</code> on the menuitem so the <code>checked</code> attribute will not be updated automatically. Note that the code has been reversed in the condition blocks to hide the toolbar when the menuitem is checked and show the toolbar when the menuitem is not checked because the <code>checked</code> state hasn't been modified. The example assumes that the <code>showToolbar()</code> function might fail so if it returns <code>false</code>, the checked attribute is not modified.</p>\n\n<p>When clearing the checked state, the checked attribute should be removed rather than just set to <code>false</code>. In the example, this is done by using the <span id=\"m-removeAttribute\"><code><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Method/removeAttribute\">removeAttribute</a></code></span> method.</p>\n\n<h4 id=\"Radio_Menu_Items\" name=\"Radio_Menu_Items\">Radio menu items</h4>\n\n<p>A radio menu item os used when you wish to have a group of menuitems in which only one can be checked at a time. This works similarly to the checkbox type, except when selecting an item, all others in the same group are automatically unchecked.</p>\n\n<p>To create a menuitem that acts like a radio button, set the <code id=\"a-type\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/type\">type</a></code> attribute to \"radio\". In addition, set the <code id=\"a-name\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/name\">name</a></code> attribute to the name of the group that it belongs to. The value of this attribute can be any name you wish; all radio menuitems within the same menu with the same name are part of the same group.</p>\n\n<pre>&lt;menu label=\"Sort\" accesskey=\"S\"&gt;\n  &lt;menupopup&gt;\n    &lt;menuitem label=\"By Name\" accesskey=\"N\" type=\"radio\" name=\"sort\"/&gt;\n    &lt;menuitem label=\"By Date\" accesskey=\"D\" type=\"radio\" name=\"sort\" checked=\"true\"/&gt;\n    &lt;menuitem label=\"By Subject\" accesskey=\"S\" type=\"radio\" name=\"sort\"/&gt;\n    &lt;menuseparator/&gt;\n    &lt;menuitem label=\"Ascending\" accesskey=\"A\" type=\"radio\" name=\"order\" checked=\"true\"/&gt;\n    &lt;menuitem label=\"Descending\" accesskey=\"c\" type=\"radio\" name=\"order\"/&gt;\n  &lt;/menupopup&gt;\n&lt;/menu&gt;\n</pre>\n\n<p><img alt=\"Image:Popupguide-menuradio.png\" class=\"internal\" src=\"/@api/deki/files/302/=Popupguide-menuradio.png\"></p>\n\n<p>This menu has three radio type menuitems all with the same name \"sort\". That means that activating one of the items will check that item and uncheck all other items. The last two menuitems are in a different group \"order\". Activating one will uncheck the other, but will not affect the items in the other group.</p>\n\n<p>Note how the <code id=\"a-checked\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/checked\">checked</a></code> attribute is set to <code>true</code> on one of the radios in each group. This becomes the default value for the menu. If you do not set one, none of the items in that group will be checked by default.</p>\n\n<p>As with checkbox type menuitems, you can also set the <code id=\"a-autocheck\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/autocheck\">autocheck</a></code> attribute on a radio menuitem to disable the automatic adjustment of the checked state. This needs to be set on each radio menuitem.</p>\n\n<h4 id=\"Disabling_a_Menuitem\" name=\"Disabling_a_Menuitem\">Disabling a menuitem</h4>\n\n<p>To have an item initially disabled, set the <code id=\"a-disabled\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/disabled\">disabled</a></code> attribute to <code>true</code> as in the following example:</p>\n\n<pre>&lt;menuitem label=\"Undo\" accesskey=\"U\" disabled=\"true\"/&gt;\n</pre>\n\n<p>When disabled, the item will appear greyed out and the action associated with the item cannot be carried out. The command event will not fire when an item is disabled. To disable a menuitem that doesn't apply, set the <code><span><a href=\"https://developer.mozilla.org/en-US/docs/XUL/Property/disabled\">disabled</a></span></code> property to <code>true</code>. To renable the item again, set the disabled property to <code>false</code> again. You may wish to change the disabled state in a <code>popupshowing</code> event handler. For more information about the <code>popupshowing</code> event, see <a href=\"/en/XUL/PopupGuide/PopupEvents#The_popupshowing_Event\" title=\"en/XUL/PopupGuide/PopupEvents#The_popupshowing_Event\">The popupshowing event</a>.</p>\n\n<p>If a menuitem is associated with a command, you can disable the menuitem by disabling the command instead. For instance, in the sample below, the Delete command is disabled using the <code id=\"a-disabled\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/disabled\">disabled</a></code> attribute.</p>\n\n<pre>&lt;command id=\"cmd_delete\" disabled=\"true\" oncommand=\"alert('Deleted!');\"/&gt;\n&lt;menuitem label=\"Delete\" accesskey=\"F\" command=\"cmd_deleted\"/&gt;\n</pre>\n\n<p>As the menuitem is attached to the command, it's automatically disabled when the command is disabled. If the <code><span><a href=\"https://developer.mozilla.org/en-US/docs/XUL/Property/disabled\">disabled</a></span></code> state of the command is changed, the menuitem updates accordingly. This is an advantage when attaching several menuitems or buttons to the same command, as the disabled state can be adjusted once for the command, and this will propagate to all elements attached to it.</p>\n\n<h4 id=\"Modifying_a_Menuitem\" name=\"Modifying_a_Menuitem\">Modifying a menuitem</h4>\n\n<p>Both the label and the access key may be changed dynamically in script by setting the <code><span><a href=\"https://developer.mozilla.org/en-US/docs/XUL/Property/label\">label</a></span></code> and <code><span><a href=\"https://developer.mozilla.org/en-US/docs/XUL/Property/accesskey\">accesskey</a></span></code> properties. Note the mixed case of the <code><span><a href=\"https://developer.mozilla.org/en-US/docs/XUL/Property/accessKey\">accessKey</a></span></code> property versus the lowercase usage of the <code id=\"a-accesskey\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/accesskey\">accesskey</a></code> attribute in XUL.</p>\n\n<p>For instance, you might want to change the label of an Undo menuitem based on what would be undone. The example below demonstrates this.</p>\n\n<pre>if (gUndoBufferType == \"typing\")\n  menuitem.label = \"Undo Typing\";\nelse if (gUndoBufferType == \"paste\")\n  menuitem.label = \"Undo Paste\";\nelse\n  menuitem.label = \"Undo\";\n</pre>\n\n<p>See <a href=\"/en/XUL/PopupGuide/MenuModification\" title=\"en/XUL/PopupGuide/MenuModification\">Modifying a Menu</a> for examples of how to add and remove items from a menu</p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/SphinxKnight\">SphinxKnight</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/RealRaven2000\">RealRaven2000</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/SylvainPasche\">SylvainPasche</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Shoot\">Shoot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mgjbot\">Mgjbot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Enn\">Enn</a>",
    "title": "MenuItems"
}