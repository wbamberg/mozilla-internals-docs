{
    "content": "<h3 id=\"Context_Menus\" name=\"Context_Menus\">Context Menus</h3>\n\n<p>A context menu is a menu where the items on the menu are specific to the context in which the menu was opened. A typical usage is for the user to right-click on an element to display a menu of commands pertaining to what was clicked on.</p>\n\n<h4 id=\"Context_Menu_Events\" name=\"Context_Menu_Events\">Context Menu Events</h4>\n\n<p>There are various ways in which a context menu can be opened. The most common is by clicking on an element with the right mouse button. On Macintosh systems with only one mouse button, a context menu may be opened by either holding down the mouse button or by pressing the Control key and clicking the mouse button. On Windows, the context menu can also be opened by pressing the menu key on the keyboard (the key on many keyboards next to Control with a menu image) or by pressing Shift+F10. You should not assume that a user has used the mouse to open a context menu.</p>\n\n<p>When using the mouse to open a context menu, the context is the element that was clicked. When using the keyboard, the context is the element in the window that is currently focused.</p>\n\n<p>Although there are several ways to open a context menu, a single event may be used to listen for any of these situations; the 'contextmenu' event is fired in any case.</p>\n\n<pre>&lt;hbox id=\"container\" align=\"center\" oncontextmenu=\"...\"&gt;\n  &lt;label value=\"Name:\"/&gt;\n  &lt;textbox id=\"name\"/&gt;\n&lt;/hbox&gt;\n</pre>\n\n<p>In this example, an attempt to open a context menu anywhere inside the hbox will call the event listener attached using the <code id=\"a-oncontextmenu\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/oncontextmenu\">oncontextmenu</a></code> attribute. As textboxes have a context menu built in, the event will fire before an attempt to open the context menu. However, the event will also fire when the label is right-clicked for instance, so the event handler should check to make sure that the target of the contextmenu event is what is desired.</p>\n\n<p>To cancel a context menu event, you can use the <a href=\"/en/DOM/event.preventDefault\" title=\"en/DOM/event.preventDefault\">preventDefault</a> method of the event object.</p>\n\n<pre>function checkContextMenu(event) {\n  if (event.target.localName == \"textbox\")\n    event.preventDefault();\n}\n\nfunction init() {\n  var container = document.getElementById(\"container\");\n  container.addEventListener(\"contextmenu\", checkContextMenu, true);\n}\n</pre>\n\n<p>The '<code>checkContextMenu</code>' function checks to see if the textbox was the target of the context menu and, if so, cancels the event using the <a href=\"/en/DOM/event.preventDefault\" title=\"en/DOM/event.preventDefault\">preventDefault</a> method. This has the effect of disabling the context menu. The event listener is attached using the <a href=\"/en/DOM/element.addEventListener\" title=\"en/DOM/element.addEventListener\">addEventListener</a> method within the '<code>init</code>' function. This might be called while initializing a window during a load event for example.</p>\n\n<h4 id=\"Attaching_Context_Menus\" name=\"Attaching_Context_Menus\">Attaching Context Menus</h4>\n\n<p>A context menu may be attached to an element using the <code id=\"a-context\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/context\">context</a></code> attribute, which may be applied to any XUL element. The value of the context attribute should be the id of a context menu within the same document.</p>\n\n<p>In the example, a context menu is attached to a grid.</p>\n\n<p><img alt=\"Image:Popupguide-contextmenu.png\" class=\"internal\" src=\"/@api/deki/files/297/=Popupguide-contextmenu.png\"></p>\n\n<pre>&lt;window id=\"main-window\"&gt;\n  &lt;popupset&gt;\n    &lt;menupopup id=\"ins-del-menu\"&gt;\n      &lt;menuitem label=\"Insert\"/&gt;\n      &lt;menuitem label=\"Delete\"/&gt;\n    &lt;/menupopup&gt;\n  &lt;/popupset&gt;\n&lt;/window&gt;\n\n&lt;grid context=\"ins-del-menu\"&gt;\n  &lt;columns&gt;\n    &lt;column/&gt;\n    &lt;column flex=\"1\"/&gt;\n  &lt;/columns&gt;\n  &lt;rows id=\"rows\"&gt;\n    &lt;row align=\"center\"&gt;\n      &lt;label value=\"Name:\"/&gt;\n      &lt;textbox/&gt;\n    &lt;/row&gt;\n  &lt;/rows&gt;\n&lt;/grid&gt;\n</pre>\n\n<p>The same context menu can be attached to multiple elements. Just set the <code id=\"a-context\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/context\">context</a></code> attribute on those elements you want the context menu to apply to.</p>\n\n<p>One technique is to attach a context menu to an entire document area. For instance, the Firefox browser applies a single context menu to the browser area which displays web pages. For example, the following will attach a context menu with the id 'contentAreaContextMenu' to a browser element:</p>\n\n<pre>&lt;browser context=\"contentAreaContextMenu\"&gt;\n</pre>\n\n<h4 id=\"Indicating_the_Default_Item\" name=\"Indicating_the_Default_Item\">Indicating the Default Item</h4>\n\n<p>On some platforms, one of the items in a context menu is marked as being a default operation. Typically, this will cause the menuitem's label to appear in the context menu in bold. What constitutes the default item isn't specified, but is usually the operation carried out when the item was left-clicked or pressed normally, as opposed to context clicked. You can indicate this item, if it applies, using the <code id=\"a-default\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/default\">default</a></code> attribute.</p>\n\n<pre>&lt;menupopup id=\"link-menu\"&gt;\n  &lt;menuitem label=\"Open Link\" default=\"true\"/&gt;\n  &lt;menuitem label=\"Open In New Window\"/&gt;\n  &lt;menuitem label=\"Properties\"/&gt;\n&lt;/menupopup&gt;\n</pre>\n\n<p>The default attribute has been set to true on the first menu item ('Open Link'). On platforms that support it, it will be marked as a default item. On other platforms, the attribute will just be ignored and the menuitem will be displayed normally. Naturally, it only makes sense to have one default item per context menu.</p>\n\n<p>Note that the default attribute just affects how the item is displayed, it performs no other function itself. You will still need to associate code with the element to handle the default operation.</p>\n\n<h4 id=\"Menu_Separators\" name=\"Menu_Separators\">Menu Separators</h4>\n\n<p>To group menu items together for better visual clarity, use a <a href=\"/en/XUL/menuseparator\" title=\"en/XUL/menuseparator\">menu separator</a>.</p>\n\n<pre>&lt;menuseparator/&gt;\n</pre>\n\n<h4 id=\"Child_Context_Menus\" name=\"Child_Context_Menus\">Child Context Menus</h4>\n\n<p>Sometimes it may be convenient to place the menupopup for the context menu as a child of the element the menu is associated with instead of referring to the menupopup by id. This may be useful, for example, when a context menu is  associated with only 1 element. It is also useful in XBL bindings, as you wouldn't want to refer to a popup by id in this case. If the <code id=\"a-context\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/context\">context</a></code> attribute is set to the  value '_child', the context menu is found by examining the children of the element instead of looking for a menupopup with the given id. For example:</p>\n\n<pre>&lt;vbox context=\"_child\"&gt;\n  &lt;label value=\"Hello\"/&gt;\n  &lt;menupopup&gt;\n    &lt;menuitem label=\"Cut\"/&gt;\n    &lt;menuitem label=\"Copy\"/&gt;\n    &lt;menuitem label=\"Paste\"/&gt;\n  &lt;/menupopup&gt;\n&lt;/vbox&gt;\n</pre>\n\n<p>In this sample, the context menu is found as the child of the vbox, because the context attribute is set to '_child'. Note that this special value must begin with an underscore to distinguish it from an id of 'child'. The menupopup does not have to be the last child of the element as in this example, but usually this will be a convenient place to put it.</p>\n\n<h4 id=\"Hiding_and_Showing_Menu_Items_based_on_Context\" name=\"Hiding_and_Showing_Menu_Items_based_on_Context\">Hiding and Showing Menu Items based on Context</h4>\n\n<p>When the context menu is opened, a popupshowing event will fire before the popup is displayed. This may be used to adjust the items displayed on the menu. Typically, this will vary based on what the context is. For example, right clicking on an image might display items pertaining to images, whereas clicking on a link would display items pertaining to links.</p>\n\n<p>In many cases, it may be easier to use a single context menu containing every possible item, and show and hide the necessary items when needed.</p>\n\n<p>To hide an item, set its <code><span><a href=\"https://developer.mozilla.org/en-US/docs/XUL/Property/hidden\">hidden</a></span></code> property to true. To show an item, set its hidden property to false.</p>\n\n<pre>&lt;script&gt;\nfunction showHideDeleteItem()\n{\n  var deleteItem = document.getElementById(\"delete\");\n\n  var rows = document.getElementById(\"rows\");\n  deleteItem.hidden = (rows.childNodes.length == 0);\n}\n&lt;/script&gt;\n\n&lt;menupopup id=\"inssel-menu\" onpopupshowing=\"showHideDeleteItem()\"&gt;\n  &lt;menuitem label=\"Insert\"/&gt;\n  &lt;menuitem id=\"delete\" label=\"Delete\"/&gt;\n&lt;/menupopup&gt;\n</pre>\n\n<p>In this example, the showHideDeleteItem function is called when the popupshowing event is fired. This function checks if the element with the id 'rows' has no children and, if so, hides the 'delete' menu item by adjusting the item's <code><span><a href=\"https://developer.mozilla.org/en-US/docs/XUL/Property/hidden\">hidden</a></span></code> property. When the user attempts to open the context menu, the delete menu item will either be shown or hidden depending on the the number of children.</p>\n\n<p>Another alternative is to disable the menuitem instead of hiding it, by setting the item's <code><span><a href=\"https://developer.mozilla.org/en-US/docs/XUL/Property/disabled\">disabled</a></span></code> property.</p>\n\n<pre>deleteItem.disabled = (rows.childNodes.length == 0);\n</pre>\n\n<p>For this example, using the <code><span><a href=\"https://developer.mozilla.org/en-US/docs/XUL/Property/disabled\">disabled</a></span></code> property is more suitable. Items should be disabled when they don't apply in certain circumstances, but should be hidden when they would never apply to the element that was clicked on.</p>\n\n<h4 id=\"Determining_what_was_Context_Clicked\" name=\"Determining_what_was_Context_Clicked\">Determining what was Context Clicked</h4>\n\n<p>It is important to remember that a context menu may be opened in other ways than just with the mouse. However, even when using the keyboard, there will still be a node (the context) that the menu applies to, which will be the element that is currently focused. When the mouse is used, the context will be the element that is clicked.</p>\n\n<p>You can retrieve this element using the popup's <a href=\"/en-US/docs/XUL/Property/triggerNode\">triggerNode</a> property. In Firefox 3.6 and earlier, the document's <a href=\"/en/DOM/document.popupNode\" title=\"en/DOM/document.popupNode\">popupNode</a> property was used; this is now deprecated. In this example, the triggerNode property is checked for a popup attached to a browser to determine whether an image is clicked:</p>\n\n<pre>&lt;script&gt;\nfunction showHideItems(aEvent)\n{\n  // aEvent.target is the popup for which the popupshowing event fired.\n  var element = aEvent.target.triggerNode;\n  var isImage = (element instanceof Components.interfaces.nsIImageLoadingContent &amp;&amp;\n                 element.currentURI);\n  document.getElementById(\"enlarge\").hidden = !isImage;\n  document.getElementById(\"details\").hidden = !isImage;\n}\n&lt;/script&gt;\n\n&lt;menupopup id=\"contentAreaContextMenu\" onpopupshowing=\"showHideItems(event)\"&gt;\n  &lt;menuitem label=\"Copy\"/&gt;\n  &lt;menuitem id=\"enlarge\" label=\"Enlarge Image\"/&gt;\n  &lt;menuitem id=\"details\" label=\"Image Details\"/&gt;\n&lt;/menupopup&gt;\n\n&lt;browser src=\"http://www.mozilla.org\" context=\"contentAreaContextMenu\"/&gt;\n</pre>\n\n<p>When the popupshowing event is fired, the <code>showHideItems</code> function is called. The triggerNode is retrieved and examined to see if it is an image. The nsIImageLoadingContent interface is implemented by all types of images. This is useful instead of comparing the tag, as several different tags support images. The test also checks to ensure that the element has a uri set.</p>\n\n<p>Finally, the hidden state of two menuitems are adjusted based on whether the context is an image or not. The result is that context clicking on images will show a menu with three items, but will only show one item for other types of elements.</p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/SphinxKnight\">SphinxKnight</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/GijsKruitbosch\">GijsKruitbosch</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/waldir\">waldir</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kiteroa\">kiteroa</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/LJR\">LJR</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Enn\">Enn</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mh512\">Mh512</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/SylvainPasche\">SylvainPasche</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Shoot\">Shoot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mgjbot\">Mgjbot</a>",
    "title": "ContextMenus"
}