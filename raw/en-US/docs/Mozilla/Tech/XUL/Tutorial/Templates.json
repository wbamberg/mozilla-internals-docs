{
    "content": "<p></p><div class=\"prevnext\" style=\"text-align: right;\">\n    <p><a href=\"/en-US/docs/XUL_Tutorial:Introduction_to_RDF\" style=\"float: left;\">« Previous</a><a href=\"/en-US/docs/XUL_Tutorial:Trees_and_Templates\">Next  »</a></p>\n</div><p></p>\n\n<p>In this section, we'll find out how to populate elements with data.</p>\n\n<h3 id=\"Populating_Elements\" name=\"Populating_Elements\">Populating Elements</h3>\n\n<p>XUL provides a method in which we create elements from data supplied by RDF, either from an RDF file or from an internal datasource. Numerous datasources are provided with Mozilla such as bookmarks, history and mail messages. More details on these will be provided in <a href=\"/en/XUL_Tutorial/RDF_Datasources\" title=\"en/XUL_Tutorial/RDF_Datasources\">the later section</a>.</p>\n\n<p>Usually, elements such as treeitems and menuitems will be populated with data. However, you can use other elements if you want although they are more useful for specialized cases. Nevertheless, we'll start with these other elements because trees and menus require more code.</p>\n\n<p>To allow the creation of elements based on RDF data, you need to provide a simple template which will be duplicated for each element that is created. Essentially, you provide only the first element and the remaining elements are constructed based on the first one.</p>\n\n<p>The template is created using the <code><code><a href=\"/en-US/docs/Mozilla/Tech/XUL/template\" title=\"template\">template</a></code></code> element. Inside it, you can place the elements that you want to use for each constructed element. The <code>template</code> element should be placed inside the container that will contain the constructed elements. For example, if you are using a tree, you should place the <code>template</code> element inside a <code><code><a href=\"/en-US/docs/Mozilla/Tech/XUL/tree\" title=\"tree\">tree</a></code></code> element.</p>\n\n<h4 id=\"Simple_Template_Example\" name=\"Simple_Template_Example\">Simple Template Example</h4>\n\n<p>This is better explained with an example. Let's take a simple example where we want to create a button for each top-level bookmark. Mozilla provides a bookmarks datasource so it can be used to get the data. This example will only get the top-level bookmarks (or bookmark folders) as we're going to create buttons. For child bookmarks, we would need to use an element that displays a hierarchy such as a tree or menu.</p>\n\n<div class=\"note\">\n<p>This example and any others that reference internal RDF datasources will only work if you load them from a chrome URL. For security reasons, Mozilla doesn't allow access to them from other sources.</p>\n</div>\n\n<p>To view this example, you will need to create a chrome package and load the file from there (you can do this easily, see <a href=\"/en/XUL_Tutorial/Manifest_Files\" title=\"en/XUL_Tutorial/Manifest_Files\">Manifest Files</a>). You can then enter the chrome URL into the browser URL field.</p>\n\n<p><span id=\"Example_1\"><a id=\"Example_1\"></a><strong>Example 1</strong></span> : <a href=\"https://developer.mozilla.org/samples/xultu/examples/ex_templates_1.xul.txt\">Source</a></p>\n\n<pre>&lt;vbox datasources=\"rdf:bookmarks\" ref=\"NC:BookmarksRoot\" flex=\"1\"&gt;\n  &lt;template&gt;\n    &lt;button uri=\"rdf:*\" label=\"rdf:http://home.netscape.com/NC-rdf#Name\"/&gt;\n  &lt;/template&gt;\n&lt;/vbox&gt;\n</pre>\n\n<div class=\"float-right\"><img alt=\"Image:templates1.jpg\" class=\"internal\" src=\"/@api/deki/files/886/=Templates1.jpg\"></div>\n\n<p>Here, a vertical box has been created that will contain a column of buttons, one for each top-level bookmark. You can see that the <code>template</code> contains a single <code><code><a href=\"/en-US/docs/Mozilla/Tech/XUL/button\" title=\"button\">button</a></code></code>. This single button is used as a basis for all the buttons that need to be created. You can see in the image that the set of buttons has been created, one for each bookmark.</p>\n\n<p>Try adding a bookmark in the browser while you have the example window open. You'll notice that the buttons in the example get updated instantly. (You may have to focus the window for it to change.)</p>\n\n<h4 id=\"Container_and_Datasources\" name=\"Container_and_Datasources\">Container and Datasources</h4>\n\n<p>The template itself is placed inside a vertical box. The box has two special attributes that allow it to be used for templates, which are used to specify where the data comes from. The first attribute on the box is the <code>datasources</code> attribute. This is used to declare what RDF datasource will be providing the data to create the elements. In this case, <code>rdf:bookmarks</code> is used. You can probably guess that this means to use the bookmarks datasource. This datasource is provided by Mozilla. To use your own datasource, specify the URL of an RDF file for the <code>datasources</code> attribute, as indicated in the example below:</p>\n\n<pre>&lt;box datasources=\"chrome://zoo/content/animals.rdf\"\n     ref=\"http://www.some-fictitious-zoo.com/all-animals\"&gt;\n</pre>\n\n<p>You can even specify multiple datasources at a time by separating them with a space in the attribute value. This can be used to display data from multiple sources.</p>\n\n<p>The <code>ref</code> attribute indicates where in the datasource you would like to retrieve data from. In the case of the bookmarks, the value <code>NC:BookmarksRoot</code> is used to indicate the root of the bookmarks hierarchy. Other values that you can use will depend on the datasource you are using. If you are using your own RDF file as a datasource, the value will usually correspond to the value of an <code>about</code> attribute on an RDF <code>Bag</code>, <code>Seq</code> or <code>Alt</code> element.</p>\n\n<h4 id=\"Inside_the_Template\" name=\"Inside_the_Template\">Inside the Template</h4>\n\n<p>By adding these two attributes to the box above, it allows the generation of elements using the template. However, the elements inside the template need to be declared differently. You may notice in the example above that the <code>button</code> has a <code>uri</code> attribute and an unusual value for the <code>label</code> attribute.</p>\n\n<p>An attribute value inside the template that begins with 'rdf:' indicates that the value should be taken from the datasource. In the example earlier, this is the case for the <code>label</code> attribute. The remainder of the value refers to the name property in the datasource. It is constructed by taking the namespace URL used by the datasource and appending the property name. If you don't understand this, try re-reading the last part of <a href=\"/en/XUL_Tutorial/Introduction_to_RDF\" title=\"en/XUL_Tutorial/Introduction_to_RDF\">the previous section</a>. It explains how resources in RDF can be referred to. Here, we only use the name of the bookmark but numerous other fields are available.</p>\n\n<p>The <code>label</code> of the buttons is set to this special URI because we want the labels on the buttons to be set to the names of the bookmarks. We could have put a URI in any of the attributes of the <code>button</code>, or any other element. The values of these attributes are replaced with data supplied by the datasource which, in this case, is the bookmarks. So we end up with the labels on the buttons set to the names of the bookmarks.</p>\n\n<p>The example below shows how we might set other attributes of a button using a datasource. Of course, this assumes that the datasource supplies the appropriate resources. If a particular one is not found, the value of the attribute will be set to an empty string.</p>\n\n<pre>&lt;button class=\"rdf:http://www.example.com/rdf#class\"\n        uri=\"rdf:*\"\n        label=\"rdf:http://www.example.com/rdf#name\"\n        crop=\"rdf:http://www.example.com/rdf#crop\"/&gt;\n</pre>\n\n<p>As you can see, you can dynamically generate lists of elements with the attributes provided by a separate datasource.</p>\n\n<p>The uri attribute is used to specify the element where content generation will begin. Content earlier will only be generated once whereas content inside will be generated for each resource. We'll see more about this when we get to <a href=\"/en/XUL_Tutorial/Trees_and_Templates\" title=\"en/XUL_Tutorial/Trees_and_Templates\">creating templates for trees</a>.</p>\n\n<h4 id=\"More_Examples\" name=\"More_Examples\">More Examples</h4>\n\n<p>By adding these features to the container the template is in, which in this case is a box, and to the elements inside the template, we can generate various interesting lists of content from external data. We can of course put more than one element inside a template and add the special RDF references to the attributes on any of the elements. The example below demonstrates this.</p>\n\n<p><span id=\"Example_2\"><a id=\"Example_2\"></a><strong>Example 2</strong></span> : <a href=\"https://developer.mozilla.org/samples/xultu/examples/ex_templates_2.xul.txt\">Source</a></p>\n\n<pre>&lt;vbox datasources=\"rdf:bookmarks\" ref=\"NC:BookmarksRoot\" flex=\"1\"&gt;\n  &lt;template&gt;\n    &lt;vbox uri=\"rdf:*\"&gt;\n      &lt;button label=\"rdf:http://home.netscape.com/NC-rdf#Name\"/&gt;\n      &lt;label value=\"rdf:http://home.netscape.com/NC-rdf#URL\"/&gt;\n    &lt;/vbox&gt;\n  &lt;/template&gt;\n&lt;/vbox&gt;\n</pre>\n\n<p>This creates a vertical box with a button and a label for each bookmark. The button will have the name of the bookmark and the label will have the URL.</p>\n\n<p>The new elements that are created are functionally no different from ones that you put directly in the XUL file. The <code>id</code> attribute is added to every element created through a template which is set to a value which identifies the resource. You can use this to identify the resource.</p>\n\n<p>You can also specify mutliple resource values in the same attribute by separating them with a space, as in the example below. <a class=\"external\" href=\"http://www.xulplanet.com/tutorials/xultu/templateex.html\">More about resource syntax</a> (XULPlanet).</p>\n\n<p><span id=\"Example_3\"><a id=\"Example_3\"></a><strong>Example 3</strong></span> : <a href=\"https://developer.mozilla.org/samples/xultu/examples/ex_templates_3.xul.txt\">Source</a></p>\n\n<pre>&lt;vbox datasources=\"rdf:bookmarks\" ref=\"NC:BookmarksRoot\"\n     flex=\"1\"&gt;\n  &lt;template&gt;\n    &lt;label uri=\"rdf:*\" value=\"rdf:http://home.netscape.com/NC-rdf#Name rdf:http://home.netscape.com/NC-rdf#URL\"/&gt;\n  &lt;/template&gt;\n&lt;/vbox&gt;\n</pre>\n\n<h3 id=\"How_Templates_are_Built\" name=\"How_Templates_are_Built\">How Templates are Built</h3>\n\n<p>When an element has a <code>datasources</code> attribute, it indicates that the element is expected to be built from a template. Note that it isn't the <code>template</code> tag that determines whether content is built, it is the <code>datasources</code> attribute. When this attribute is present, an object called a Builder is added to the element which is responsible for building the content from the template. In JavaScript you can access the builder object with the <code>builder</code> property, although usually you would only need to do this to have the builder regenerate the content in situations where it is not done automatically.</p>\n\n<p>There are two different types of builders. The first is a content builder and is used in most situations, and the other is a tree builder which is used only for trees.</p>\n\n<h4 id=\"Content_Builder\" name=\"Content_Builder\">Content Builder</h4>\n\n<p>The content builder takes the content inside the <code>template</code> element and duplicates it for each row. For instance, if the user had ten bookmarks in the example above, ten <code><code><a href=\"/en-US/docs/Mozilla/Tech/XUL/label\" title=\"label\">label</a></code></code> elements would be created and added as children of the <code><code><a href=\"/en-US/docs/Mozilla/Tech/XUL/vbox\" title=\"vbox\">vbox</a></code></code> element. If you were to use DOM functions to traverse the tree, you will find these elements there and can query their properties. These elements get displayed, but the <code>template</code> itself is not displayed, although it still exists in the document tree. In addition, the <code>id</code> of each of the labels will be set to the RDF resource for that row.</p>\n\n<p>The content builder always starts at the place where uri=\"rdf:*\" is specfied. If the <code>uri</code> attribute is placed on an element lower in the element tree, the elements outside are only created once. In the example below, one <code><code><a href=\"/en-US/docs/Mozilla/Tech/XUL/hbox\" title=\"hbox\">hbox</a></code></code> will be created and it will be filled with a label for each item.</p>\n\n<pre>&lt;template&gt;\n  &lt;hbox&gt;\n    &lt;label uri=\"rdf:*\" value=\"rdf:http://home.netscape.com/NC-rdf#Name\"/&gt;\n  &lt;/hbox&gt;\n&lt;/template&gt;\n</pre>\n\n<p>If there is other content inside the element with the <code>datasources</code> attribute but outside the template, that content will also appear. This way, you can mix static content and dynamic content from a template.</p>\n\n<h4 id=\"Tree_Builder\" name=\"Tree_Builder\">Tree Builder</h4>\n\n<p>The tree builder, on the other hand, doesn't generate the DOM elements for the rows. Instead, it gets the data directly from the RDF datasource whenever it needs it. Since trees are often expected to display thousands of rows of data, this is much more efficient. Creating an element for every cell would be too costly. However, the tradeoff is that trees may only display text, and, since no elements are created, you can't use CSS properties to style tree cells in the same way.</p>\n\n<p>The tree builder is only used for trees. Other elements use only the content builder. This isn't a problem though, since other elements such as menus wouldn't be expected to display too many items. It's also possible to use the content builder for trees as well, and a <code><code><a href=\"/en-US/docs/Mozilla/Tech/XUL/treeitem\" title=\"treeitem\">treeitem</a></code></code> element and related elements will be created for each row.</p>\n\n<h3 id=\"Rules\" name=\"Rules\">Rules</h3>\n\n<p>In the image of the earlier example, you may have noticed that the third button is simply a button with hyphens on it. This is a separator in the bookmark list. In the way that we have been using it, the RDF bookmarks datasource supplies the separators as if they were just regular bookmarks. What we would really like to do is add a small amount of spacing instead of a button for separator resources. That means that we want to have two different types of content be created, one type for regular bookmarks and a second type for separators.</p>\n\n<p>We can do this by using the <code><code><a href=\"/en-US/docs/Mozilla/Tech/XUL/rule\" title=\"rule\">rule</a></code></code> element. We define a rule for each variation of elements that we want to have created. In our case, we would need a rule for bookmarks and a rule for separators. Attributes placed on the <code>rule</code> element determine which rules apply to which RDF resource.</p>\n\n<p>When scanning for which rule applies to the data, each <code>rule</code> element is checked in sequence for a match. That means that the order in which you define rules is important. Earlier rules will override later rules.</p>\n\n<h4 id=\"Rule_Example\" name=\"Rule_Example\">Rule Example</h4>\n\n<p>The following example demonstrates the earlier example with two rules:</p>\n\n<p><span id=\"Example_4\"><a id=\"Example_4\"></a><strong>Example 4</strong></span> : <a href=\"https://developer.mozilla.org/samples/xultu/examples/ex_templates_4.xul.txt\">Source</a></p>\n\n<pre>&lt;window\n  id=\"example-window\"\n  title=\"Bookmarks List\"\n  xmlns:html=\"http://www.w3.org/1999/xhtml\"\n  xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"  \n  xmlns=\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\"&gt;\n\n &lt;vbox datasources=\"rdf:bookmarks\" ref=\"NC:BookmarksRoot\" flex=\"1\"&gt;\n   &lt;template&gt;\n\n    &lt;rule rdf:type=\"http://home.netscape.com/NC-rdf#BookmarkSeparator\"&gt;\n     &lt;spacer uri=\"rdf:*\" height=\"16\"/&gt;\n    &lt;/rule&gt;\n\n    &lt;rule&gt;\n      &lt;button uri=\"rdf:*\" label=\"rdf:http://home.netscape.com/NC-rdf#Name\"/&gt;\n    &lt;/rule&gt;\n  \n  &lt;/template&gt;\n &lt;/vbox&gt;\n\n&lt;/window&gt;\n</pre>\n\n<div class=\"float-right\"><img alt=\"Image:templates2.jpg\" class=\"internal\" src=\"/@api/deki/files/887/=Templates2.jpg\"></div>\n\n<p>By using two rules, we have allowed the contents of the template to be selectively generated. In the first <code>rule</code>, bookmark separators are selected, as can be seen by the <code>rdf:type</code> attribute. The second <code>rule</code> does not have any attributes so all data matches it.</p>\n\n<p>All of the attributes placed on the <code>rule</code> tag are used as match criteria. In this case, the bookmarks datasource supplies a <code>rdf:type</code> property to distinguish separators. This attribute is set to a special value for separators in the RDF bookmarks datasource. This is how we can distinguish them from non-separators. You can use a similar technique for any attribute that might be on an RDF <code>Description</code> element.</p>\n\n<p>The special URL value given in the example above for the first rule is used for separators. That means that separators will follow rule one and generate a <code><code><a href=\"/en-US/docs/Mozilla/Tech/XUL/spacer\" title=\"spacer\">spacer</a></code></code> element, which will display a 16 pixel gap. Elements that are not separators will not match rule one and will fall through to rule two. Rule two does not have any attributes on it. This means that it will match all data. This is, of course, what we want to have happen to the rest of the data.</p>\n\n<p>You should also have noticed that because we wanted to get an attribute from the RDF namespace (<code>rdf:type</code>), we needed to add the namespace declaration to the <code><code><a href=\"/en-US/docs/Mozilla/Tech/XUL/window\" title=\"window\">window</a></code></code> tag. If we didn't do this, the attribute would be looked for in the XUL namespace. Because it does not exist there, the rule will not match. If you use attributes in your own custom namespace, you need to add the namespace declaration in order to match them.</p>\n\n<p>You should be able to guess what would happen if the second rule was removed. The result would be a single spacer displayed but no bookmarks because they don't match any of the rules.</p>\n\n<p>Put simply, a rule matches if all of the attributes placed on the <code>rule</code> element match the corresponding attributes on the RDF resource. In the case of an RDF file, the resources would be the <code>Description</code> elements.</p>\n\n<p>There are some small exceptions however. You cannot match based on the attributes id, <code>rdf:property</code> or <code>rdf:instanceOf</code>. Because you can just use your own attributes with your own namespace, it probably doesn't really matter anyway.</p>\n\n<p>Note that a template with no rules in it, as in the first example, is really equivalent functionally to a template with a single rule with no attributes.</p>\n\n<p>Next, we'll look at using templates with trees.</p>\n\n<p></p><div class=\"prevnext\" style=\"text-align: right;\">\n    <p><a href=\"/en-US/docs/XUL_Tutorial:Introduction_to_RDF\" style=\"float: left;\">« Previous</a><a href=\"/en-US/docs/XUL_Tutorial:Trees_and_Templates\">Next  »</a></p>\n</div><p></p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/SphinxKnight\">SphinxKnight</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/teoli\">teoli</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/LJR\">LJR</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Chbok\">Chbok</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mgjbot\">Mgjbot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Morishoji\">Morishoji</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Pmash\">Pmash</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ptak82\">Ptak82</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Dria\">Dria</a>",
    "title": "Templates"
}