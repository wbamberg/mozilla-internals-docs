{
    "content": "<p> </p>\n\n<h2 id=\"What_Is_a_Skin.3F\" name=\"What_Is_a_Skin.3F\">What Is a Skin?</h2>\n\n<p>The <em>skin</em> of a <a href=\"/en/XUL\" title=\"en/XUL\">XUL</a> file is its look or overall style. In XUL, skins are created with <a href=\"/en/CSS\" title=\"en/CSS\">Cascading Style Sheets</a> and images. To skin a XUL file means to change the overall look of that file by changing its style information. In the very near future, it will be possible to skin XUL files dynamically and completely -- by pressing a button, selecting a skin from a menu, or by accepting a skin from over the web. When this day comes, skins defined in a global skin file will be applied to a whole application -- like the Mozilla browser -- so that all the various windows and parts will look consistent. In the meantime, however, skinning a file requires some manual interaction. This article can help you get started understanding skins and creating skins for XUL. It presumes you have at least basic understanding of XUL and the Application Object Model that XUL describes. Following the instructions here, you are going to create a skin for a XUL file and apply it by specifying classes for all of the interested elements. The skin will reside in a single CSS file, appropriately named drxul.css. As you will see, CSS provides a lot of flexibility for defining styles to individual elements, to classes of elements, to <a href=\"/en/CSS/Pseudo-classes\" title=\"Pseudo-classes\">pseudo-classes</a>, and to anonymous classes.</p>\n\n<p>By the way, in contrast to the term skin, \"<a href=\"/en/Chrome\" title=\"en/Chrome\">chrome</a>\" refers to the skin <em>and</em> the content <em>and</em> whatever localization and platform-specific files are necessary for a particular part of the application or window. The skin is just the style or appearance of an interface, where the chrome is the style, content, and structure. The chrome is everything in the front end of an application.</p>\n\n<p>Much of what makes XUL look (and act!) the way it does comes from the CSS for each XUL element. CSS2, for example, gives you control over the absolute positioning of any element within its parent element. Also, most of the behavior that buttons exhibit comes from styles and an event model based on JavaScript that dynamically switches between these styles. Mozilla's current global skin defines this basic behavior for several classes of button. A button is styled by the global skin when its class attribute is set to a class which is defined in the global skin. For example, when a button is defined as follows:</p>\n\n<pre class=\"eval\">&lt;button <strong>class=\"plain\"</strong> label=\"Push Me\" /&gt;\n</pre>\n\n<p>Then the following very simple style definition applies to that button.</p>\n\n<pre class=\"eval\">button.plain { border: 0px !important; }\n</pre>\n\n<p>The global skin, in which styles for these several button classes and dozens of other elements are defined, is described in the following section. If you want to use the classes already defined in Mozilla's global skin to style your elements, you may do so. But you may also want to define new classes of buttons particular to your XUL file, in which case the style information will be wholly defined within your custom CSS file.</p>\n\n<h2 id=\"Reading_the_Global_Skin\" name=\"Reading_the_Global_Skin\">Reading the Global Skin</h2>\n\n<p>It's very important to familiarize yourself with the basic style definitions in the global skin before you set out creating your own stylesheet. CSS can quickly become complicated. The ability to apply styles to elements of a type, to specifically identified elements, and to classes of elements creates the potential for redundancies or conflicts in the style information. To avoid this, the makers of the CSS specification have created some rules of precedence that look at how many different rules have been defined for an element, where the style definitions appear (i.e., externally in a CSS file or inline), where the elements themselves appear, and other esoteric variables. If you create a style in your custom stylesheet for a button with a particular id, for example, some of the more basic style information for buttons in the global skin may take precedence over your new style and cause it not to be applied. Make sure you are aware of the way that the global skin defines the skin and which elements, in general, it is addressing.</p>\n\n<p>Since the purpose of the global skin is to create a look for the entire application or chrome that can be changed dynamically, you should not create style information in a custom CSS file that controverts the global skin unless you really mean to. If your XUL file is to be a part of a larger application that can be skinned, like Mozilla, you probably want your XUL file to pick up the global changes when the application is dynamically reskinned. To keep your XUL looking consistent and to avoid breaking skins altogether (when your styles have some dependency on a part of the global skin that changes, such as an image), use the style rules in the global skin by importing it into your stylesheet with the following instruction:</p>\n\n<pre class=\"eval\">@import url(\"<a class=\"external\" rel=\"freelink\">chrome://global/skin/</a>\");\n</pre>\n\n<p>Refer to the document <a href=\"en/Writing_Skinnable_XUL_and_CSS\">Writing Skinnable XUL and CSS</a> for guidelines on how to make your skins friendly to the global skin, to XUL, and to Mozilla.</p>\n\n<h3 id=\"Stylesheet_Syntax\" name=\"Stylesheet_Syntax\">Stylesheet Syntax</h3>\n\n<p>To familiarize yourself with the global skin, open up the text file called <a class=\"external\" href=\"http://lxr.mozilla.org/mozilla/source/toolkit/themes/winstripe/global/global.css\">global.css</a> in the chrome/classic.jar!/skin/classic/global directory of the Mozilla application. In a cascading stylesheet, the style definitions have the following basic form:</p>\n\n<pre class=\"eval\">element {\n  style-attribute1: value;\n  style-attribute2: value;\n  style-attribute3: value;\n}\n</pre>\n\n<p>For example, the following definition -- were it not in serious conflict with the many menu style definitions in the global skin -- makes all XUL menus appear with a one pixel border, a light blue background, and 10 point fonts:</p>\n\n<pre class=\"eval\">menu {\n  border: 1px;\n  background-color: lightblue;\n  font-size: 10pt;\n}\n</pre>\n\n<p>In addition to these basic element style rules, CSS also provides for the application of style information to classes of elements, and element IDs. The following table shows the basic format for these two common types of style definitions:</p>\n\n<table class=\"fullwidth-table\">\n <tbody>\n  <tr>\n   <th>Class</th>\n   <th>ID</th>\n  </tr>\n  <tr>\n   <td><em>element.class { attribute: value; }</em></td>\n   <td><em>element#id { attribute: value; }</em></td>\n  </tr>\n  <tr>\n   <td>\n    <pre class=\"eval\">\nmenu.baseline {\n  border: 0px;\n  font-size: 9pt;\n}\n</pre>\n   </td>\n   <td>\n    <pre class=\"eval\">\nmenu#edit {\n  color: red;\n}\n</pre>\n   </td>\n  </tr>\n </tbody>\n</table>\n\n<h3 id=\"Other_Style_Subgroups\" name=\"Other_Style_Subgroups\">Other Style Subgroups</h3>\n\n<p><em>Contextual</em>subgroups -- elements appearing within other elements, such as italicized text anywhere within a &lt;p&gt; element or a &lt;div&gt; -- can be grouped in CSS, but this is an extremely inefficient way to style XUL, and is frowned upon in the Mozilla development community (again, refer to the skinning guidelines in <a href=\"en/Writing_Skinnable_XUL_and_CSS\">Writing Skinnable XUL and CSS</a> for more info); CSS2 also provides some new ways to group elements for styling, which we summarize briefly here, because they appear in Mozilla with some frequency, but reserve for another article:</p>\n\n<table class=\"fullwidth-table\">\n <tbody>\n  <tr>\n   <th>Pseudo-class</th>\n   <th>Parent-Child</th>\n  </tr>\n  <tr>\n   <td><em>element:pseudo-class { attribute: value; }</em></td>\n   <td><em>parent &gt; child { attribute: value; }</em></td>\n  </tr>\n  <tr>\n   <td>\n    <pre class=\"eval\">\nbutton:hover {\n  border: 1px;\n}\n</pre>\n   </td>\n   <td>\n    <pre class=\"eval\">\nmenu#file &gt; menuitem {\n  font-weight: bold;\n}\n</pre>\n   </td>\n  </tr>\n  <tr>\n   <td>Pseudo-classes reflect states of the element: when the mouse moves over a button, for example, the appropriate pseudo-class stylesheet rules are applied.</td>\n   <td>The parent-child relationship is more economical than the aforementioned contextual subgrouping, which searches the entire subtree of an element for the subelement.</td>\n  </tr>\n </tbody>\n</table>\n\n<p>Finally, Mozilla provides some <a href=\"en/CSS_Reference/Mozilla_Extensions\">special extensions</a> to the Cascading Style Sheets specification that allow even more control over the way that XUL is skinned within the browser.</p>\n\n<p>On to the actual global.css file: After some comments, the CSS file contains basic style information for the &lt;window&gt; and &lt;dialog&gt; elements. After these, the global skin defines styles for some of the XUL widgets: statusbar, statusbarpanel and so on. Most widgets have their styles defined in separate CSS files in the same directory that the global.css file.</p>\n\n<p>Note that much of the style attributes in these rules have to do with borders, font information, color, margin, <a href=\"en/CSS/-moz-appearance\">native appearance</a>. In general, these are the types of styles that should be defined only in the global skin of an application, since these are the styles that give an application a certain overall look, or skin.</p>\n\n<p>Note that for any one class of element, there may be several pseudo-classes and<em>attribute selector</em> styles defined. When you declare a button in your XUL to be of a particular class, you take advantage of all of the styles defined for the various states of that button. For this reason, it can be very efficient to use button classes that appear in the global skin and to make new classes only when necessary.</p>\n\n<p>Browse through the global skin to familiarize yourself with what's there. In the next few sections, you will be importing this style information into a custom stylesheet and extending it with new style rules for your XUL.</p>\n\n<h2 id=\"Loading_Stylesheets_in_XUL\" name=\"Loading_Stylesheets_in_XUL\">Loading Stylesheets in XUL</h2>\n\n<p>For your custom skin, let's assume you want to skin the XUL file, <a class=\"external\" href=\"http://www.mozilla.org/docs/xul/xulnotes/xulnote_sample1.txt\">xulnote_sample1.xul</a>. To work with this XUL file, save it locally and rename it<em>sample1.xul</em>.</p>\n\n<p>Though applying inline styles is a perfectly legal move in XUL and a good idea in some rare cases, in general you should try to keep the XUL skin separate from the actual XUL structure. This independence of function and form is a great advantage of XUL, and it should not be overlooked.</p>\n\n<p>A CSS file is a regular text file with the extension .css. It is applied to a XUL file by means of the processing instruction at the very top of the XUL file. When XUL files are situated within a XUL package or chrome, the processing instruction for a stylesheet reflects the hierarchy of the package. We will discuss this special url type in a later article. When the XUL file is a stand-alone, as in this example, where the stylesheet is external and sitting in the same directory, the processing instruction at the top of the file is as follows:</p>\n\n<pre class=\"eval\">&lt;?xml-stylesheet href=\"sample.css\" type=\"text/css\"?&gt;\n</pre>\n\n<p>A XUL file may actually have any number of stylesheet processing instructions: one for each stylesheet that the XUL wants to load. In general, though, it's better form to<em>import</em> the global skin into your stylesheet, create your new styles rules, and then load only the new stylesheet to get all styles in both the global skin and in your own stylesheet.</p>\n\n<h2 id=\"Creating_a_New_Stylesheet\" name=\"Creating_a_New_Stylesheet\">Creating a New Stylesheet</h2>\n\n<p>Unlike a XUL file, a CSS file does not need any particular structure or preamble information at the top. CSS can define styles for elements in a hierarchy, but it is not itself hierarchical, as you saw in the global skin. Instead, a CSS file is usually simply a list of style definitions that are applied to their respective elements and classes by the rendering engine.</p>\n\n<p>Here is a very short (but complete!) cascading stylesheet that might be referenced and used by a XUL file:</p>\n\n<pre class=\"eval\">toolbar.nav-bar {\n  background-image: url(\"<a class=\"external\" rel=\"freelink\">chrome://navigator/skin/navbar-bg.gif</a>\");\n  padding: 0px;\n  padding-bottom: 2px;\n}\n\nbox#navbar {\n  background-color: lightblue;\n}\n\nA:link {\n  color: #FA8072;\n}\n</pre>\n\n<p>This stylesheet exhibits three of the different types of style definitions described above. Each type uses a different grouping of elements. In the first definition, the selector \"<code>toolbar.nav-bar</code>\" is used to define style information for all XUL toolbars of the class \"nav-bar.\" Unlike an ID -- which is also often used as a selector but must be unique -- a <code>class</code> attribute can be used on multiple XUL elements you want to pick up the specified style information. A toolbar elements defined as:</p>\n\n<pre class=\"eval\">&lt;toolbar <strong>class=\"nav-bar\"</strong> id=\"nav3\"&gt;\n  &lt;toolbarbutton label=\"Click me\" /&gt;\n  &lt;toolbarbutton label=\"Don't click me\" /&gt;\n  ...\n&lt;/toolbar&gt;\n</pre>\n\n<p>will be styled with the CSS rules that appear in the block after the <code>toolbar.nav-bar</code> selector in the CSS example above. Similarly, the next item uses the ID selector to apply style information to a single XUL element. Since <code>id</code> attribute must be unique in a document, there can only be a single element with the ID \"navbar\", and it will pick up the style information in the block.</p>\n\n<p>The third type of selector, the<em>pseudo-class</em>, is one you may have seen in the in-line style definitions for hyperlinks which commonly appear in HTML documents. The pseudo-class is connected to an element (or not: you can also define styles that apply to any element in the state specified by a pseudo-class) with the \":\" character. In this third type of style definition, the \"A\" element picks up the style information defined in the block only when it is, as a link, active. This last type is new to CSS2.</p>\n\n<div class=\"highlight\">\n<p><strong>To start creating the XUL skin:</strong></p>\n\n<ol>\n <li>add the stylesheet processing instruction to the top of your XUL file.\n  <pre>&lt;?xml-stylesheet href=\"sample.css\" type=\"text/css\"?&gt;</pre>\n </li>\n <li>create a new text file called sample.css.</li>\n <li>add the following lines to the file:\n  <pre>@import url(chrome://global/skin/);\n\nbox#bbox { background-color: lightgrey; }\n\nbutton#rd {\n  background-color: red;\n  color: white;\n}\n</pre>\n </li>\n <li>save it in the same directory as your XUL file.</li>\n</ol>\n</div>\n\n<p>When you reload the xul file you have been working on, the box element you have used to create the navigation area in the XUL file appear as follows:</p>\n\n<p><img alt=\"No Stylesheet\"></p>\n\n<p><img alt=\"Just the Global Skin\"></p>\n\n<p><img alt=\"Sample.CSS Importing Global Skin\"></p>\n\n<p>The skinned browser is not much to look at right now -- and you may note that this basic skin has transgressed upon some of the <a href=\"en/Writing_Skinnable_XUL_and_CSS\">skinning guidelines</a> because it overrides color information, but you can get a sense of what the possibilities are with the combination of the XUL structure and the style rules of CSS.</p>\n\n<h2 id=\"Thinking_Skins\" name=\"Thinking_Skins\">Thinking Skins</h2>\n\n<p>Sometimes you can become so involved in the details of XUL and Mozilla's other XP tools that you can lose sight of what the purpose and impact of these technologies are. The combination of XUL and CSS provides so much flexibility that it can seem daunting.</p>\n\n<p>The purpose of this split between XUL and its skins -- and between the global skin and whatever custom styles you might create -- is to enable the dynamic skinning of applications such as the Mozilla browser. What you have done manually in this article will be done dynamically and much more completely by a mechanism called the<em>chrome registry</em>. <span class=\"comment\">this needs rewording: , which, like the Windows registry, is a database in which information about a user's software and environment can be recorded and accessed as necessary. Software components and users will be able to update the chrome registry and change the global skin. And with the advent of new CSS2 conventions like positioning, the changes you can make to the presentation and behavior of the basic structure in a XUL file is dramatic.</span></p>\n\n<p>The syntax for creating all this information with text -- added to the distributed nature and the sheer volume of text required to define a single chrome -- can sometimes make the progress seem slow. But the advantages of using XUL so far outweigh those of using the standard C++ toolkits that XUL authoring should rightfully be considered in a separate category of development. XUL represents, as one evangelist put it, the \"democratization\" of interface design and of<em>applications development</em>, about which we will have more to say in a later article.</p>\n\n<p>In short, XUL provides the tools for anybody to create interfaces as complex and as attractive as any C++/MFC/Visual IDE/Templates toolkit user's, and it does so in a way that makes these interfaces available on any platform. You don't have to know the vagueries of a \"4GL\" programming language or acquaint yourself with the innards of a particular platform and its native widgetry at the expense of others.</p>\n\n<p>XUL's technologies are interoperable, consistent, cross-platform, free, and readily available. Not only is the production of such interfaces democratized, in other words; the consumption and distribution of these interfaces is equally democratic. As with anything truly democratic, you have to fuss a little bit with things to make them work. You have to share, and you have to have a little bit patience. Once you get the hang of things, though, you will find creating XUL files and skins as easy as creating basic web pages in HTML.</p>\n\n<div class=\"originaldocinfo\">\n<h2 id=\"Original_Document_Information\" name=\"Original_Document_Information\">Original Document Information</h2>\n\n<ul>\n <li>Author(s): <a class=\"link-mailto\" href=\"mailto:oeschger@netscape.com\">Ian Oeschger</a></li>\n <li>Last Updated Date: October 3, 2004</li>\n <li>Copyright Information: Copyright (C) <a class=\"link-mailto\" href=\"mailto:oeschger@netscape.com\">Ian Oeschger</a></li>\n</ul>\n</div>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/chrisdavidmills\">chrisdavidmills</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/SphinxKnight\">SphinxKnight</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/teoli\">teoli</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Cashman\">Cashman</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mgjbot\">Mgjbot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/NickolayBot\">NickolayBot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nickolay\">Nickolay</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Andreas%20Wuest\">Andreas Wuest</a>",
    "title": "Skinning XUL Files by Hand"
}