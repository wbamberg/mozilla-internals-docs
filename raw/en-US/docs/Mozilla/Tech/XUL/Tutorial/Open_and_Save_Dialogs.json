{
    "content": "<p></p><div class=\"prevnext\" style=\"text-align: right;\">\n    <p><a href=\"/en-US/docs/XUL_Tutorial/Creating_Dialogs\" style=\"float: left;\">« Previous</a><a href=\"/en-US/docs/XUL_Tutorial/Creating_a_Wizard\">Next  »</a></p>\n</div><p></p>\n\n<p>A common type of dialog is one where the user can select a file to open or save.</p>\n\n<h3 id=\"File_pickers\" name=\"File_pickers\">File pickers</h3>\n\n<p>A file picker is a dialog that allows the user to select a file. It is most commonly used for the <em>Open</em> and <em>Save</em> menu commands, but you can use it any place in which the user needs to select a file. The <a href=\"/en-US/docs/XPCOM\" title=\"XPCOM\">XPCOM</a> interface <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFilePicker\" title=\"\">nsIFilePicker</a></code> is used to implement a file picker.</p>\n\n<div class=\"note\">Note that the file picker only works from chrome URLs.</div>\n\n<p>You can use the file picker in one of three modes:</p>\n\n<ul>\n <li><strong>Open</strong> - the user is asked to select a file for opening.</li>\n <li><strong>Get Folder</strong> - the user is asked to select a folder (directory).</li>\n <li><strong>Save</strong> - the user is asked to select the name to save a file to.</li>\n</ul>\n\n<p>The appearance of the dialog will be different for each type and will vary on each platform. Once the user selects a file or folder, it can be read from or written to.</p>\n\n<p>The file picker interface <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFilePicker\" title=\"\">nsIFilePicker</a></code> is responsible for displaying a dialog in one of the three modes. You can set a number a features of the dialog by using the interface. When the dialog is closed, you can use the interface functions to get the file that was selected.</p>\n\n<h4 id=\"Creating_a_file_picker\" name=\"Creating_a_file_picker\">Creating a file picker</h4>\n\n<p>To begin, you need to create a file picker component and initialize it.</p>\n\n<pre>var nsIFilePicker = Components.interfaces.nsIFilePicker;\nvar fp = Components.classes[\"@mozilla.org/filepicker;1\"].createInstance(nsIFilePicker);\nfp.init(window, \"Select a File\", nsIFilePicker.modeOpen);\n</pre>\n\n<p>First, a new file picker object is created and stored in the variable 'fp'. The 'init' function is used to initialize the file picker. This function takes three arguments, the window that is opening the dialog, the title of the dialog and the mode. The mode here is <code>modeOpen</code> which is used for an Open dialog. You can also use <code>modeGetFolder</code> and <code>modeSave</code> for the other two modes. These modes are constants of the <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIFilePicker\" title=\"\">nsIFilePicker</a></code> interface.</p>\n\n<h4 id=\"Default_directory_and_filters\" name=\"Default_directory_and_filters\">Default directory and filters</h4>\n\n<p>There are two features you can set of the dialog before it is displayed.</p>\n\n<ul>\n <li>The first is the default directory that is displayed when the dialog is opened.</li>\n <li>The second is a filter that indicates the list of file types that are displayed in the dialog. This would be used, for example, to hide all but .html files.</li>\n</ul>\n\n<p>You can set the default directory by setting the <code>displayDirectory</code> property of the file picker object to a directory. The directory should be an <code><a href=\"/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsILocalFile\" title=\"\">nsILocalFile</a></code> object. If you do not set this, a suitable default will be selected for you. To add filters, call the <code>appendFilters()</code> function to set the file types that you wish to have displayed.</p>\n\n<pre>fp.appendFilters(nsIFilePicker.filterHTML | nsIFilePicker.filterImages);\nfp.appendFilters(nsIFilePicker.filterText | nsIFilePicker.filterAll);\n</pre>\n\n<ul>\n <li>The first example will add filters for HTML and for image files. The user will only be able to select those types of files. The manner in which this is done is platform specific. On some platforms, each filter will be separate and the user can choose between HTML files and image files.</li>\n <li>The second example will add filters for text files and for all files. The user therefore has the option to display text files only or all files.</li>\n</ul>\n\n<p>You can also use <code>filterXML</code> and <code>filterXUL</code> to filter for XML and XUL files respectively. If you would like to filter for custom files, you can use the <code>appendFilter()</code> function to do this:</p>\n\n<pre>fp.appendFilter(\"All Files\" ,\"*.*\");\nfp.appendFilter(\"Audio Files (*.wav, *.mp3)\",\"*.wav; *.mp3\");\n</pre>\n\n<p>This line will add a filter for Wave and MP3 audio files. The first argument is the title of the file type and the second is a semicolon-seperated list of file masks. You can add more masks or fewer masks as needed. You can call appendFilter as many times as necessary to add additional filters. The order you add them determines their priority. Typically, the first one added is selected by default.</p>\n\n<h4 id=\"Getting_the_selected_file\" name=\"Getting_the_selected_file\">Getting the selected file</h4>\n\n<p>Finally, you can show the dialog by calling the <code>show()</code> function. It takes no arguments but returns a status code that indicates what the user selected. Note that the function does not return until the user has selected a file. The function returns one of three constants:</p>\n\n<ul>\n <li><strong>returnOK</strong> - the user selected a file and pressed OK. The file the user selected will be stored in the file picker's <code>file</code> property.</li>\n <li><strong>returnCancel</strong> - the user pressed Cancel.</li>\n <li><strong>returnReplace</strong> - in the save mode, this return value identifies that the user selected a file to be replaced. (returnOK will be returned when the user entered the name of a new file.)</li>\n</ul>\n\n<p>You should check the return value and then get the file object from the file picker using the <code>file</code> property.</p>\n\n<pre>var res = fp.show();\nif (res != nsIFilePicker.returnCancel){\n  var thefile = fp.file;\n  // --- do something with the file here ---\n}\n</pre>\n\n<p>Next, we'll see how to <a href=\"/en-US/docs/XUL_Tutorial/Creating_a_Wizard\" title=\"XUL_Tutorial/Creating_a_Wizard\">create a wizard</a>.</p>\n\n<p></p><div class=\"prevnext\" style=\"text-align: right;\">\n    <p><a href=\"/en-US/docs/XUL_Tutorial/Creating_Dialogs\" style=\"float: left;\">« Previous</a><a href=\"/en-US/docs/XUL_Tutorial/Creating_a_Wizard\">Next  »</a></p>\n</div><p></p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/stephaniehobson\">stephaniehobson</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/javier1nc\">javier1nc</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/teoli\">teoli</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/BenB\">BenB</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Chbok\">Chbok</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mgjbot\">Mgjbot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Morishoji\">Morishoji</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Pmash\">Pmash</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Andreas%20Wuest\">Andreas Wuest</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ptak82\">Ptak82</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Dria\">Dria</a>",
    "title": "Open and Save Dialogs"
}