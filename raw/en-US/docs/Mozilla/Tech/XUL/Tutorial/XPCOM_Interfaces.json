{
    "content": "<p> </p>\n\n<p></p><div class=\"prevnext\" style=\"text-align: right;\">\n    <p><a href=\"/en-US/docs/XUL_Tutorial:Box_Objects\" style=\"float: left;\">« Previous</a><a href=\"/en-US/docs/XUL_Tutorial:XPCOM_Examples\">Next  »</a></p>\n</div><p></p>\n\n<p>In this section, we'll take a brief look at <a href=\"/en/XPCOM\" title=\"en/XPCOM\">XPCOM</a> (Cross-platform Component Object Model), which is the Object system that Mozilla uses.</p>\n\n<h3 id=\"Calling_Native_Objects\" name=\"Calling_Native_Objects\">Calling Native Objects</h3>\n\n<p>By using XUL we can build a complex user interface. We can attach scripts which modify the interface and perform tasks. However, there are quite a number of things that cannot be performed directly with JavaScript. For example, if we wanted to create a mail application, we would need to write scripts which would connect to mail servers to retrieve and send mail. JavaScript does not have the capability to do such things.</p>\n\n<p>The only way to handle this would be to write native code that would get mail. We also need to have a way for our scripts to call the native code easily. Mozilla provides such a method which involves using <a href=\"/en/XPCOM\" title=\"en/XPCOM\">XPCOM</a> (Cross-platform Component Object Model).</p>\n\n<div class=\"note\">Mozilla provides many XPCOM components and interfaces. So, in most cases, you don't need to write native code for yourself. After learning this section, you can search suitable interfaces using <a class=\"external\" href=\"https://developer.mozilla.org/en-US/docs/Mozilla/XPCOM\">XULPlanet XPCOM Reference</a></div>\n\n<h3 id=\"About_XPCOM\" name=\"About_XPCOM\">About XPCOM</h3>\n\n<p>Mozilla is constructed from a collection of components, each of which performs a certain task. For example, there is a component for each menu, button and element. The components are constructed from a number of definitions called interfaces.</p>\n\n<p>An interface in Mozilla is a definition of a set of functionality that could be implemented by components. Components are what implement the code in Mozilla that does things. Each component implements the functionality as described by interfaces. A single component might implement multiple interfaces. And multiple components might implement the same interface.</p>\n\n<p>Let's take an example of a file component. An interface would need to be created which describes properties and functions that can be performed on files. A file would need properties for its name, modification date and its size. Functions of a file would include moving, copying and deleting it.</p>\n\n<p>The File interface only describes the characteristics of a file, it does not implement it. The implementation of the File interface is left to a component. The component will have code which can retrieve the file's name, date and size. In addition, it will have code which copies and renames it.</p>\n\n<p>We don't care how the component implements it, as long as it implements the interface correctly. Of course, we'll have different implementations anyway, one for each platform. The Windows and Macintosh versions of a file component would be significantly different. However, they would both implement the same interface. Thus, we can use a component by accessing it using the functions we know from the interface.</p>\n\n<p>In Mozilla, interfaces are usually preceded by 'nsI' or 'mozI' so that they are easily recognized as interfaces. For example, the <code>nsIAddressBook</code> is the interface for interacting with an address book, <code>nsISound</code> is used for playing files and <code>nsILocalFile</code> is used for files. For more interfaces in Mozilla, see <a href=\"/en/Interfaces\" title=\"en/Interfaces\">Interfaces</a>.</p>\n\n<p>XPCOM components are typically implemented natively, which means that they generally do things that JavaScript cannot do itself. However, there is a way in which you can call them, which we will see shortly. We can call any of the functions provided by the component as described by the interfaces it implements. For example, once we have a component, we can check if it implements <code>nsISound</code>, and, if so, we can play sound through it.</p>\n\n<p>The process of calling XPCOM from a script is called <a href=\"/en/XPConnect\" title=\"en/XPConnect\">XPConnect</a>, which is a layer which translates script objects into native objects.</p>\n\n<h3 id=\"Creating_XPCOM_Objects\" name=\"Creating_XPCOM_Objects\">Creating XPCOM Objects</h3>\n\n<p>There are three steps to calling an XPCOM component.</p>\n\n<ol>\n <li>Get a component</li>\n <li>Get the part of the component that implements the interface that we want to use.</li>\n <li>Call the function we need</li>\n</ol>\n\n<p>Once you've done the first two steps, you can repeat the last step as often as necessary. Let's say we want to rename a file. For this we can use the nsILocalFile interface. The first step is getting a file component. Second, we query the file component and get the portion of it that implements the nsILocalFile interface. Finally, we call functions provided by the interface. This interface is used to represent a single file.</p>\n\n<p>We've seen that interfaces are often named starting with 'nsI' or 'mozI'. Components, however, are referred to using a URI like string. Mozilla stores a list of all the components that are available in its own registry. A particular user can install new components as needed. It works much like plug-ins.</p>\n\n<p>Mozilla provides a file component, that is, a component that implements <code><a href=\"/en/nsILocalFile\" title=\"en/nsILocalFile\">nsILocalFile</a></code>. This component can be referred to using the string <code><a class=\"link-mailto\" href=\"mailto:'@mozilla.org\" rel=\"freelink\">'@mozilla.org</a>/file/local;1'</code>. This string is called a contract ID. The syntax of a contract ID is:</p>\n\n<pre class=\"eval\">@&lt;internetdomain&gt;/module[/submodule[...]];&lt;version&gt;[?&lt;name&gt;=&lt;value&gt;[&amp;&lt;name&gt;=&lt;value&gt;[...]]]\n</pre>\n\n<p>Other components can be referred to in a similar way.</p>\n\n<p>The contract ID of the component can be used to get the component. You can get a component using JavaScript code like that below:</p>\n\n<pre>var aFile = Components.classes[\"@mozilla.org/file/local;1\"].createInstance();\n</pre>\n\n<p>The file component is retrieved and stored in the <em>aFile</em> variable. <code><a href=\"/en/Components_object\" title=\"en/Components_object\">Components</a></code> in the example above refers to a general object that provides some component related functions. Here, we get a component class from the <code>classes</code> property. The <code>classes</code> property is an array of all of the available components. To get a different component, just replace the contract ID inside the square brackets with the contract ID of the component you want to use. Finally, an instance is created with the <code>createInstance()</code> function.</p>\n\n<p>You should check the return value of <code>createInstance()</code> to ensure that it is not null, which would indicate that the component does not exist.</p>\n\n<p>However, at this point, we only have a reference to the file component itself. In order to call the functions of it we need to get one of its interfaces, in this case <code><a href=\"/en/nsILocalFile\" title=\"en/nsILocalFile\">nsILocalFile</a></code>. A second line of code needs to be added as follows:</p>\n\n<pre>var aFile = Components.classes[\"@mozilla.org/file/local;1\"].createInstance();\nif (aFile) aFile.QueryInterface(Components.interfaces.nsILocalFile);\n</pre>\n\n<p>The function <code>QueryInterface()</code> is a function provided by all components which can be used to get a specific interface of that component. This function takes one parameter, the interface that you want to get. The <code>interfaces</code> property of the <code>Components</code> object contains a list of all the interfaces that are available. Here, we use the nsILocalFile interface and pass it as a parameter to <code>QueryInterface()</code>. The result is that aFile will be a reference to the part of the component that implements the nsILocalFile interface.</p>\n\n<p>The two JavaScript lines above can be used to get any interface of any component. Just replace the component name with the name of the component you want to use and change the interface name. You can also use any variable names of course. For example, to get a sound interface, you can do the following:</p>\n\n<pre>var sound = Components.classes[\"@mozilla.org/sound;1\"].createInstance();\nif (sound) sound.QueryInterface(Components.interfaces.nsISound);\n</pre>\n\n<p>XPCOM interfaces can inherit from other interfaces. The interfaces that inherit from others have their own functions and the functions of all the interfaces that they inherit from. All interfaces inherit from a top-level interface called <code>nsISupports</code>. It has one function supplied to JavaScript, <code>QueryInterface()</code>, which we have already seen. Because the interface nsISupports is implemented by all components, the function <code>QueryInterface()</code> function is available in every component.</p>\n\n<p>Several components may implement the same interface. Typically, they might be subclasses of the original but not necessarily. Any component may implement the functionality of nsILocalFile. In addition, a component may implement several interfaces. It is for these reasons that two steps are involved in getting an interface to call functions through.</p>\n\n<p>However, there is a shortcut we can use because we'll often use both of these lines together:</p>\n\n<pre>var aLocalFile = Components.classes[\"@mozilla.org/file/local;1\"].createInstance(Components.interfaces.nsILocalFile);\n</pre>\n\n<p>This will do the same thing as the two lines but in one line of code. It eliminates the need to create the instance and then query it for an interface in two separate steps.</p>\n\n<p>If you call <code>QueryInterface()</code> on an object and the requested interface is not supported by an object, an exception is thrown. If you're not sure that an interface is supported by a component, you can use the <code><a href=\"/en/Core_JavaScript_1.5_Reference/Operators/Special_Operators/instanceof_Operator\" title=\"en/Core_JavaScript_1.5_Reference/Operators/Special_Operators/instanceof_Operator\">instanceof</a></code> operator to check:</p>\n\n<pre>var aFile = Components.classes[\"@mozilla.org/file/local;1\"].createInstance();\nif (aFile instanceof Components.interfaces.nsILocalFile){\n  // do something\n}\n</pre>\n\n<p>The instanceof operator returns true if aFile implements the nsILocalFile interface. This also has the side effect of calling <code>QueryInterface()</code>, so aFile will be a valid nsILocalFile afterwards.</p>\n\n<h3 id=\"Calling_the_Functions_of_an_Interface\" name=\"Calling_the_Functions_of_an_Interface\">Calling the Functions of an Interface</h3>\n\n<p>Now that we have an object that refers to a component with the nsILocalFile interface, we can call the functions of nsILocalFile through it. The table below shows some of the properties and methods of the nsILocalFile interface.</p>\n\n<dl>\n <dt>initWithPath </dt>\n <dd>This method is used to initialize the path and filename for the nsILocalFile. The first parameter should be the file path, such as '/usr/local/mozilla'.</dd>\n <dt>leafName </dt>\n <dd>The filename without the directory part.</dd>\n <dt>fileSize </dt>\n <dd>The size of the file.</dd>\n <dt>isDirectory() </dt>\n <dd>Returns true if the nsILocalFile represents a directory.</dd>\n <dt>remove(recursive) </dt>\n <dd>Deletes a file. If the recursive parameter is true, a directory and all of its files and subdirectories will also be deleted.</dd>\n <dt>copyTo(directory,newname) </dt>\n <dd>Copies a file to another directory, optionally renaming the file. The directory should be a nsILocalFile holding the directory to copy the file to.</dd>\n <dt>moveTo(directory,newname) </dt>\n <dd>Moves a file to another directory, or renames a file. The directory should be a nsILocalFile holding the directory to move the file to.</dd>\n</dl>\n\n<p>In order to delete a file we first need to assign a file to the nsILocalFile. We can call the method <code>initWithPath()</code> to indicate which file we mean. Just assign the path of the file to this property. Next, we call the <code>remove()</code> function. It takes one parameter which is whether to delete recursively. The code below demonstrates these two steps:</p>\n\n<pre>var aFile = Components.classes[\"@mozilla.org/file/local;1\"].createInstance();\nif (aFile instanceof Components.interfaces.nsILocalFile){\n  aFile.initWithPath(\"/mozilla/testfile.txt\");\n  aFile.remove(false);\n}\n</pre>\n\n<p>This code will take the file at /mozilla/testfile.txt and delete it. Try this example by adding this code to an event handler. You should change the filename to an existing file that you have that you would like to delete.</p>\n\n<p>In the functions table above, you will see two functions copyTo() and moveTo(). These two functions can be used to copy files and move files respectively. Note that they do not take a string parameter for the directory to copy or move to, but instead take an nsILocalFile. That means that you'll need to get two file components. The example below shows how to copy a file.</p>\n\n<pre>function copyFile(sourcefile,destdir)\n{\n  // get a component for the file to copy\n  var aFile = Components.classes[\"@mozilla.org/file/local;1\"]\n    .createInstance(Components.interfaces.nsILocalFile);\n  if (!aFile) return false;\n\n  // get a component for the directory to copy to\n  var aDir = Components.classes[\"@mozilla.org/file/local;1\"]\n    .createInstance(Components.interfaces.nsILocalFile);\n  if (!aDir) return false;\n\n  // next, assign URLs to the file components\n  aFile.initWithPath(sourcefile);\n  aDir.initWithPath(destdir);\n\n  // finally, copy the file, without renaming it\n  aFile.copyTo(aDir,null);\n}\n\ncopyFile(\"/mozilla/testfile.txt\",\"/etc\");\n</pre>\n\n<h3 id=\"XPCOM_Services\" name=\"XPCOM_Services\">XPCOM Services</h3>\n\n<p>Some XPCOM components are special components called services. You do not create instances of them because only one should exist. Services provide general functions which either get or set global data or perform operations on other objects. Instead of calling <code>createInstance()</code>, you call <code>getService()</code> to get a reference to the service component. Other than that, services are not very different from other components.</p>\n\n<p>One such service provided with Mozilla is a bookmarks service. It allows you to add bookmarks to the user's current bookmark list. An example is shown below:</p>\n\n<pre>var bmarks = Components.classes[\"@mozilla.org/browser/bookmarks-service;1\"].getService();\nbmarks.QueryInterface(Components.interfaces.nsIBookmarksService);\nbmarks.addBookmarkImmediately(\"http://www.mozilla.org\",\"Mozilla\",0,null);\n</pre>\n\n<p>First, the component \"@mozilla.org/browser/bookmarks-service;1\" is retrieved and its service is placed in the variable <code>bmarks</code>. We use <code>QueryInterface()</code> to get the nsIBookmarksService interface. The function <code>addBookmarkImmediately()</code> provided by this interface can be used to add bookmarks. The first two parameters to this function are the bookmark's URL and its title. The third parameter is the bookmark type which will normally be 0 and the last parameter is the character encoding of the document being bookmarked, which may be null.</p>\n\n<p>Next, we will see some of the <a href=\"/en/XUL_Tutorial/XPCOM_Examples\" title=\"en/XUL_Tutorial/XPCOM_Examples\">interfaces provided with Mozilla that we can use</a>.</p>\n\n<p></p><div class=\"prevnext\" style=\"text-align: right;\">\n    <p><a href=\"/en-US/docs/XUL_Tutorial:Box_Objects\" style=\"float: left;\">« Previous</a><a href=\"/en-US/docs/XUL_Tutorial:XPCOM_Examples\">Next  »</a></p>\n</div><p></p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/SphinxKnight\">SphinxKnight</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/stephaniehobson\">stephaniehobson</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Szopen.Xiao\">Szopen.Xiao</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/teoli\">teoli</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/alzhu\">alzhu</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Chbok\">Chbok</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/CN\">CN</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Morishoji\">Morishoji</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mgjbot\">Mgjbot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nickolay\">Nickolay</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Pmash\">Pmash</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ptak82\">Ptak82</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Dria\">Dria</a>",
    "title": "XPCOM Interfaces"
}