{
    "content": "<p></p><div class=\"prevnext\" style=\"text-align: right;\">\n    <p><a href=\"/en-US/docs/XUL_Tutorial:Custom_Tree_Views\" style=\"float: left;\">« Previous</a><a href=\"/en-US/docs/XUL_Tutorial:Tree_Box_Objects\">Next  »</a></p>\n</div><p></p>\n\n<p>This section will describe some more features of tree views.</p>\n\n<h3 id=\"Creating_a_Hierarchical_Custom_View\" name=\"Creating_a_Hierarchical_Custom_View\">Creating a Hierarchical Custom View</h3>\n\n<p>In the last section, we created a simple tree view that implemented only a minimum amount of functionality. Next, let's look at some additional functions that views may implement. Here, we will examine how to create a hierarchical set of items using the view. This is a fairly tricky process as it involves keeping track of which items have children and also which rows are open and closed.</p>\n\n<h4 id=\"Nesting_Level\" name=\"Nesting_Level\">Nesting Level</h4>\n\n<p>Every row in the tree has a nesting level. The topmost rows are at level 0, the children of those rows are at level 1, their children at level 2 and so on. The tree will query the view for each row by calling its <code>getLevel</code> method to find out the level of that row. The view will need to return 0 for the outermost rows and higher values for inner rows. The tree will use this information to determine the hierarchical structure of the rows.</p>\n\n<p>In addition to the <code>getLevel</code> method, there is a <code>hasNextSibling</code> function which, given a row, should return true if there is another row afterwards at the same level. This function is used, specifically, to draw the nesting lines along the side of the tree.</p>\n\n<p>The <code>getParentIndex</code> method is expected to return the parent row of a given row, that is, the row before it with a lower nesting value. All of these methods must be implemented by the view for children to be handled properly.</p>\n\n<h4 id=\"Containers\" name=\"Containers\">Containers</h4>\n\n<p>There are also three functions, <code>isContainer</code>, <code>isContainerEmpty</code> and <code>isContainerOpen</code> that are used to handle a parent item in the tree.</p>\n\n<ul>\n <li>The <code>isContainer</code> method should return true if a row is a container and might contain children.</li>\n <li>The <code>isContainerEmpty</code> method should return true if a row is an empty container, for instance, a directory with no files in it.</li>\n <li>The <code>isContainerOpen</code> method is used to determine which items are opened and closed. The view is required to keep track of this. The tree will call this method to determine which containers are open and which are closed.</li>\n</ul>\n\n<p>Note that the tree will call neither <code>isContainerEmpty</code> nor <code>isContainerOpen</code> for rows that are not containers as indicated by the return value of the <code>isContainer</code> method.</p>\n\n<p>A container may be rendered differently than a non-container. For instance, a container may have a folder icon beside it. A style sheet may be used to style items based on various properties such as whether a row is open. This is described in a <a href=\"/en/XUL_Tutorial/Styling_a_Tree\" title=\"en/XUL_Tutorial/Styling_a_Tree\">later section</a>. A non-empty container will be displayed with a twisty next to it so that the user may open and close the row to see child items. Empty containers will not have a twisty, but will still be treated like a container.</p>\n\n<p>When the user clicks the twisty to open a row, the tree will call the view's <code>toggleOpenState</code> method. The view should then perform any necessary operations to retrieve the child rows and then update the tree with the new rows.</p>\n\n<div class=\"blockIndicator note\">\n<p><strong>Note:</strong> As of this writing (Gecko 2.0), custom <a href=\"/en-US/XPCOM_Interface_Reference/nsITreeView\" title=\"en/XPCOM Interface Reference/nsITreeView\"><code>nsITreeView</code></a> implementations must be prepared to handle a call to <code>toggleOpenState</code> for any row index which returns true for a call to <code>isContainer</code>, regardless of whether the container is empty.</p>\n</div>\n\n<h4 id=\"Review_of_the_Methods\" name=\"Review_of_the_Methods\">Review of the Methods</h4>\n\n<p>Here is a review of the methods needed to implement hierarchical views:</p>\n\n<pre class=\"brush: js;\">getLevel(row)\nhasNextSibling(row, afterIndex)\ngetParentIndex(row)\nisContainer(row)\nisContainerEmpty(row)\nisContainerOpen(row)\ntoggleOpenState(row)\n</pre>\n\n<p>The <em>afterIndex</em> argument to <code>hasNextSibling</code> function is used as optimization to only start looking for the next sibling after that point. For instance, the caller might already know where the next sibling might possibly be. Imagine a situation where a row had subrows and those subrows had child rows of their own and several are open. It could take a while in some implementations to determine what the next sibling's row index would be in such a case.</p>\n\n<h3 id=\"Example_of_Hierarchical_Custom_View\" name=\"Example_of_Hierarchical_Custom_View\">Example of Hierarchical Custom View</h3>\n\n<p>Let's put this together into a simple example that takes an array and constructs a tree from it. This tree will only support a single parent level with an inner child level, but it could be extended to support additional levels without too much effort. We'll examine it piece by piece.</p>\n\n<pre class=\"brush: xml;\">&lt;window onload=\"init();\"\n        xmlns=\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\"&gt;\n\n&lt;tree id=\"elementList\" flex=\"1\"&gt;\n  &lt;treecols&gt;\n    &lt;treecol id=\"element\" label=\"Element\" primary=\"true\" flex=\"1\"/&gt;\n  &lt;/treecols&gt;\n  &lt;treechildren/&gt;\n&lt;/tree&gt;\n\n&lt;/window&gt;\n</pre>\n\n<p>We use a simple tree here with no data in the <code><code><a href=\"/en-US/docs/Mozilla/Tech/XUL/treechildren\" title=\"treechildren\">treechildren</a></code></code>. The 'init' function is called when the window is loaded to initialize the tree. It simply sets the custom view by retrieving the tree and setting its 'view' property. We will define 'treeView' next.</p>\n\n<pre class=\"brush: js;\">function init() {\n  document.getElementById(\"elementList\").view = treeView;\n}\n</pre>\n\n<p>The custom tree view will need to implement a number of methods, of which the important ones will be examined individually. First we'll define two structures to hold the data for the tree, the first will hold a map between parents and the children they contain, and the second will hold an array of the visible items. Remember that a custom view must keep track of which items are visible itself.</p>\n\n<pre class=\"brush: js;\">var treeView = {\n  childData : {\n    Solids: [\"Silver\", \"Gold\", \"Lead\"],\n    Liquids: [\"Mercury\"],\n    Gases: [\"Helium\", \"Nitrogen\"]\n  },\n\n  visibleData : [\n    [\"Solids\", true, false],\n    [\"Liquids\", true, false],\n    [\"Gases\", true, false]\n  ],\n};</pre>\n\n<p>The <code>childData</code> structure holds an array of the children for each of the three parent nodes. The <code>visibleData</code> array begins with only three items visible, the three top level items. Items will be added and removed from this array when items are opened or closed. Essentially, when a parent row is opened, the children will be taken from the <code>childData</code> map and inserted into the <code>visibleData</code> array. For example, if the Liquids row was opened, the corresponding array from <code>childData</code>, which in this case contains only the single Mercury child, will be inserted into the <code>visibleData</code> array after Liquids but before Gases. This will increase the array size by one. The two booleans in each row in the <code>visibleData</code> structure indicate whether a row is a container and whether it is open respectively. Obviously, the new inserted child items will have both values set to false.</p>\n\n<h4 id=\"Implement_the_Tree_View_Interface\" name=\"Implement_the_Tree_View_Interface\">Implement the Tree View Interface</h4>\n\n<p>Next, we need to implement the tree view interface. First, the simple functions:</p>\n\n<pre class=\"brush: js;\">{\n  treeBox: null,\n  selection: null,\n  get rowCount()                     { return this.visibleData.length; },\n  setTree: function(treeBox)         { this.treeBox = treeBox; },\n  getCellText: function(idx, column) { return this.visibleData[idx][0]; },\n  isContainer: function(idx)         { return this.visibleData[idx][1]; },\n  isContainerOpen: function(idx)     { return this.visibleData[idx][2]; },\n  isContainerEmpty: function(idx)    { return false; },\n  isSeparator: function(idx)         { return false; },\n  isSorted: function()               { return false; },\n  isEditable: function(idx, column)  { return false; },\n}\n</pre>\n\n<p>The <code>rowCount</code> function will return the length of the <code>visibleData</code> array. Note that it should return the current number of visible rows, not the total. So, at first, only three items are visible and the <code>rowCount</code> should be three, even though six rows are hidden. Also note the use of the <a href=\"/en/JavaScript/Reference/Operators/Special/get\" title=\"en/Core JavaScript 1.5 Reference/Operators/Special Operators/get Operator\">JavaScript get operator</a> to bind a property to a function, so to have the value of the rowCount property that can change dynamically over time, as rowCount has to be a read-only attribute as defined in <a href=\"/en/XPCOM_Interface_Reference/nsITreeView\" title=\"en/XPCOM Interface Reference/nsITreeView\">nsITreeView</a>.</p>\n\n<p>The <code>setTree</code> function will be called to set the tree's box object. The tree box object is a specialized type of box object specific to trees and will be examined in detail in the next section. It is used to aid in drawing the tree. In this example, we will only need one function of the box object, to be able to redraw the tree when items are added or removed.</p>\n\n<p>The <code>getCellText</code>, <code>isContainer</code> and <code>isContainerOpen</code> functions just return the corresponding element from the <code>visibleData</code> array. Finally, the remaining functions can just return false since we don't need those features. If we had a row that had no children we would want to implement the <code>isContainerEmpty</code> function so that it returned true for those elements.</p>\n\n<pre class=\"brush: js;\">getParentIndex: function(idx) {\n  if (this.isContainer(idx)) return -1;\n  for (var t = idx - 1; t &gt;= 0 ; t--) {\n    if (this.isContainer(t)) return t;\n  }\n}\n</pre>\n\n<p>The <code>getParentIndex</code> will need to find the parent of a given index. In our simple example, there are only two levels, so we know that containers don't have parents, so -1 is returned for these items. Otherwise, we just iterate backwards through the rows looking for one that is a container. Next, the <code>getLevel</code> function:</p>\n\n<pre class=\"brush: js;\">getLevel: function(idx) {\n  if (this.isContainer(idx)) return 0;\n  return 1;\n}\n</pre>\n\n<p>The <code>getLevel</code> function is simple. It just returns 0 for container rows and 1 for non-containers. If we wanted to add an additional level of children, those rows would have a level of 2.</p>\n\n<pre class=\"brush: js;\">hasNextSibling: function(idx, after) {\n  var thisLevel = this.getLevel(idx);\n  for (var t = after + 1; t &lt; this.visibleData.length; t++) {\n    var nextLevel = this.getLevel(t);\n    if (nextLevel == thisLevel) return true;\n    if (nextLevel &lt; thisLevel) break;\n  }\n  return false;\n}\n</pre>\n\n<p>The <code>hasNextSibling</code> function needs to return true if there is a row at the same level after a given row. The code above uses a brute force method which simply iterates over the rows looking for one, returning true if a row exists with the same level and false once it finds a row that has a lower level. In this simple example, this method is fine, but a tree with a larger set of data will want to use a more optimal method of determining whether a later sibling exists.</p>\n\n<h4 id=\"Opening_or_Closing_a_Row\" name=\"Opening_or_Closing_a_Row\">Opening or Closing a Row</h4>\n\n<p>The final function of note is <code>toggleOpenState</code>, which is the most complex. It needs to modify the <code>visibleData</code> array when a row is opened or closed.</p>\n\n<pre class=\"brush: js;\">toggleOpenState: function(idx) {\n  var item = this.visibleData[idx];\n  if (!item[1]) return;\n\n  if (item[2]) {\n    item[2] = false;\n\n    var thisLevel = this.getLevel(idx);\n    var deletecount = 0;\n    for (var t = idx + 1; t &lt; this.visibleData.length; t++) {\n      if (this.getLevel(t) &gt; thisLevel) deletecount++;\n      else break;\n    }\n    if (deletecount) {\n      this.visibleData.splice(idx + 1, deletecount);\n      this.treeBox.rowCountChanged(idx + 1, -deletecount);\n    }\n  }\n  else {\n    item[2] = true;\n\n    var label = this.visibleData[idx][0];\n    var toinsert = this.childData[label];\n    for (var i = 0; i &lt; toinsert.length; i++) {\n      this.visibleData.splice(idx + i + 1, 0, [toinsert[i], false]);\n    }\n    this.treeBox.rowCountChanged(idx + 1, toinsert.length);\n  }\n  this.treeBox.invalidateRow(idx);\n}\n</pre>\n\n<p>First we will need to check if the row is a container. If not, the function just returns since non-containers cannot be opened or closed. Since the third element in the item array (with an index of 2) holds whether the row is open or not, we use two code paths, the first to close a row and the second to open a row. Let's examine each block of code, but let's look at the second block for opening a row first.</p>\n\n<pre class=\"brush: js;\">item[2] = true;\n\nvar label = this.visibleData[idx][0];\nvar toinsert = this.childData[label];\nfor (var i = 0; i &lt; toinsert.length; i++) {\n  this.visibleData.splice(idx + i + 1, 0, [toinsert[i], false]);\n}\nthis.treeBox.rowCountChanged(idx + 1, toinsert.length);\n</pre>\n\n<p>The first line makes the row open in the array so that we will know the next time the <code>toggleOpenState</code> function is called that the row will need to be closed instead. Next, we look up the data in the <code>childData</code> map for the row. The result is that 'toinsert' will be set to one of the child arrays, for example <code>[\"Silver\", \"Gold\", \"Lead\"]</code> if the Solids row is the one being opened. Next, we use the array's splice function to insert a new row for each item. For Solids, three items will be inserted.</p>\n\n<p>Finally, the tree box's <code>rowCountChanged</code> function needs to be called. Recall that <code>treeBox</code> is a tree box object and was set earlier by a call to the <code>setTree</code> function. The tree box object will be created by the tree for you and you can call its functions. In this case, we</p>\n\n<p>use the <code>rowCountChanged</code> function to inform the tree that some rows were added to the underlying data. The tree will then redraw the tree as needed and the result is that the child rows will appear inside the container. The various other functions implemented above such as <code>getLevel</code> and <code>isContainer</code> are used by the tree to determine how to draw the tree.</p>\n\n<p>The <code>rowCountChanged</code> function takes two arguments, the index where the first row was inserted and the number of rows to insert. In the code above we indicate that the starting row is the value of 'idx' plus one, which will be the first child under the parent. The tree will use this information and add space for the appropriate number of rows and push the rows afterwards down. Make sure to pass the right number or the tree might redraw incorrectly or try to draw more rows than necessary.</p>\n\n<p>The following code is used to delete rows when a row is closed.</p>\n\n<pre class=\"brush: js;\">item[2] = false;\n\nvar thisLevel = this.getLevel(idx);\nvar deletecount = 0;\nfor (var t = idx + 1; t &lt; this.visibleData.length; t++) {\n  if (this.getLevel(t) &gt; thisLevel) deletecount++;\n  else break;\n}\nif (deletecount) {\n  this.visibleData.splice(idx + 1, deletecount);\n  this.treeBox.rowCountChanged(idx + 1, -deletecount);\n}\n</pre>\n\n<p>First, the item is set closed in the array. Then, we scan along the rows until we come to one that is at the same level. All those that have a higher level will need to be removed, but a row at the same level will be the next container which should not be removed.</p>\n\n<p>Finally, we use the splice function to remove the rows from the <code>visibleData</code> array and call the <code>rowCountChanged</code> function to redraw the tree. When deleting rows, you will need to supply a negative count of the number of rows to delete.</p>\n\n<p>Whether opening or closing a row, we need to tell the tree to repaint the twisty in the new state. The easiest way to do this is to invalidate the row.</p>\n\n<h4 id=\"Complete_Example\" name=\"Complete_Example\">Complete Example</h4>\n\n<p>There are several other view functions we can implement but they don't need to do anything in this example, so we can create functions that do nothing for those. They are added near the end of the complete example, shown here:</p>\n\n<pre class=\"brush: xml;\">&lt;?xml version=\"1.0\"?&gt;\n&lt;?xml-stylesheet href=\"chrome://global/skin/\" type=\"text/css\"?&gt;\n\n&lt;window onload=\"init();\"\n        xmlns=\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\"&gt;\n\n&lt;tree id=\"elementList\" flex=\"1\"&gt;\n  &lt;treecols&gt;\n    &lt;treecol id=\"element\" label=\"Element\" primary=\"true\" flex=\"1\"/&gt;\n  &lt;/treecols&gt;\n  &lt;treechildren/&gt;\n&lt;/tree&gt;\n\n&lt;script&gt;\n&lt;![CDATA[\n\nvar treeView = {\n  childData : {\n    Solids: [\"Silver\", \"Gold\", \"Lead\"],\n    Liquids: [\"Mercury\"],\n    Gases: [\"Helium\", \"Nitrogen\"]\n  },\n\n  visibleData : [\n    [\"Solids\", true, false],\n    [\"Liquids\", true, false],\n    [\"Gases\", true, false]\n  ],\n\n  treeBox: null,\n  selection: null,\n\n  get rowCount()                     { return this.visibleData.length; },\n  setTree: function(treeBox)         { this.treeBox = treeBox; },\n  getCellText: function(idx, column) { return this.visibleData[idx][0]; },\n  isContainer: function(idx)         { return this.visibleData[idx][1]; },\n  isContainerOpen: function(idx)     { return this.visibleData[idx][2]; },\n  isContainerEmpty: function(idx)    { return false; },\n  isSeparator: function(idx)         { return false; },\n  isSorted: function()               { return false; },\n  isEditable: function(idx, column)  { return false; },\n\n  getParentIndex: function(idx) {\n    if (this.isContainer(idx)) return -1;\n    for (var t = idx - 1; t &gt;= 0 ; t--) {\n      if (this.isContainer(t)) return t;\n    }\n  },\n  getLevel: function(idx) {\n    if (this.isContainer(idx)) return 0;\n    return 1;\n  },\n  hasNextSibling: function(idx, after) {\n    var thisLevel = this.getLevel(idx);\n    for (var t = after + 1; t &lt; this.visibleData.length; t++) {\n      var nextLevel = this.getLevel(t);\n      if (nextLevel == thisLevel) return true;\n      if (nextLevel &lt; thisLevel) break;\n    }\n    return false;\n  },\n  toggleOpenState: function(idx) {\n    var item = this.visibleData[idx];\n    if (!item[1]) return;\n\n    if (item[2]) {\n      item[2] = false;\n\n      var thisLevel = this.getLevel(idx);\n      var deletecount = 0;\n      for (var t = idx + 1; t &lt; this.visibleData.length; t++) {\n        if (this.getLevel(t) &gt; thisLevel) deletecount++;\n        else break;\n      }\n      if (deletecount) {\n        this.visibleData.splice(idx + 1, deletecount);\n        this.treeBox.rowCountChanged(idx + 1, -deletecount);\n      }\n    }\n    else {\n      item[2] = true;\n\n      var label = this.visibleData[idx][0];\n      var toinsert = this.childData[label];\n      for (var i = 0; i &lt; toinsert.length; i++) {\n        this.visibleData.splice(idx + i + 1, 0, [toinsert[i], false]);\n      }\n      this.treeBox.rowCountChanged(idx + 1, toinsert.length);\n    }\n    this.treeBox.invalidateRow(idx);\n  },\n\n  getImageSrc: function(idx, column) {},\n  getProgressMode : function(idx,column) {},\n  getCellValue: function(idx, column) {},\n  cycleHeader: function(col, elem) {},\n  selectionChanged: function() {},\n  cycleCell: function(idx, column) {},\n  performAction: function(action) {},\n  performActionOnCell: function(action, index, column) {},\n  getRowProperties: function(idx, prop) {},\n  getCellProperties: function(idx, column, prop) {},\n  getColumnProperties: function(column, element, prop) {},\n};\n\nfunction init() {\n  document.getElementById(\"elementList\").view = treeView;\n}\n\n]]&gt;&lt;/script&gt;\n\n&lt;/window&gt;\n</pre>\n\n<p>Next, we'll look in more detail at the tree box object.</p>\n\n<p></p><div class=\"prevnext\" style=\"text-align: right;\">\n    <p><a href=\"/en-US/docs/XUL_Tutorial:Custom_Tree_Views\" style=\"float: left;\">« Previous</a><a href=\"/en-US/docs/XUL_Tutorial:Tree_Box_Objects\">Next  »</a></p>\n</div><p></p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/ExE-Boss\">ExE-Boss</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/teoli\">teoli</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/fscholz\">fscholz</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sevenspade\">Sevenspade</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/julienfabre\">julienfabre</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/madarche\">madarche</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Neil\">Neil</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Brettz9\">Brettz9</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/MykMelez\">MykMelez</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Chbok\">Chbok</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nickolay\">Nickolay</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Jjinux\">Jjinux</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mgjbot\">Mgjbot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Morishoji\">Morishoji</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Pmash\">Pmash</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ptak82\">Ptak82</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Dria\">Dria</a>",
    "title": "Tree View Details"
}