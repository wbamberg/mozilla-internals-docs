{
    "content": "<p></p><div class=\"prevnext\" style=\"text-align: right;\">\n    <p><a href=\"/en-US/docs/XUL_Tutorial/XBL_Attribute_Inheritance\" style=\"float: left;\">« Previous</a><a href=\"/en-US/docs/XUL_Tutorial/Adding_Methods_to_XBL-defined_Elements\">Next  »</a></p>\n</div><p></p>\n<p>Next, we'll find out how to add custom properties to XBL-defined elements.</p>\n<h3 id=\"The_XBL_Interface\" name=\"The_XBL_Interface\">The XBL Interface</h3>\n<p><a href=\"/en-US/docs/JavaScript\" title=\"en/JavaScript\">JavaScript</a> and the <a href=\"/en-US/docs/DOM\" title=\"en/DOM\">DOM</a> provide access to get and set the properties of elements. With XBL, you can define your own properties for the elements you create. You can also add methods that can be called. That way, all you need is to get a reference to the element (using <a href=\"/en-US/docs/Web/API/Document/getElementById\" title=\"The Document method getElementById() returns an Element object representing the element whose id property matches the specified string. Since element IDs are required to be unique if specified, they're a useful way to get access to a specific element quickly.\"><code>document.getElementById</code></a> or a similar function) and then get or set the additional properties and call the methods on it.</p>\n<p>There are three types of items you can add.</p>\n<ul>\n <li>Fields are used to hold a simple value.</li>\n <li>Properties can also be used to hold a value but may have code execute when an attempt is made to retrieve or modify the value.</li>\n <li>Methods are functions which may be executed.</li>\n</ul>\n<p>All three are defined within an <code><code><a href=\"/en-US/docs/XBL/XBL_1.0_Reference/Elements#implementation\">implementation</a></code></code> element, which should be a child of the <code><code><a href=\"/en-US/docs/XBL/XBL_1.0_Reference/Elements#binding\">binding</a></code></code> element. Within the implementation, you define individual <code><code><a href=\"/en-US/docs/XBL/XBL_1.0_Reference/Elements#field\">field</a></code></code>, <code><code><a href=\"/en-US/docs/XBL/XBL_1.0_Reference/Elements#property\">property</a></code></code>, and <code><code><a href=\"/en-US/docs/XBL/XBL_1.0_Reference/Elements#method\">method</a></code></code> elements, one for each one that you want. The general syntax is as follows:</p>\n<pre>&lt;binding id=\"element-name\"&gt;\n  &lt;content&gt;\n    -- content goes here --\n  &lt;/content&gt;\n  &lt;implementation&gt;\n    &lt;field name=\"field-name-1\"/&gt;\n    &lt;field name=\"field-name-2\"/&gt;\n    &lt;field name=\"field-name-3\"/&gt;\n\n    &lt;property name=\"property-name-1\"/&gt;\n    &lt;property name=\"property-name-2\"/&gt;\n    &lt;property name=\"property-name-3\"/&gt;\n    .\n    .\n    .\n    &lt;method name=\"method-name-1\"&gt;\n      -- method content goes here --\n    &lt;/method&gt;\n    .\n    .\n    .\n  &lt;/implementation&gt;\n&lt;/binding&gt;\n</pre>\n<h3 id=\"Fields\" name=\"Fields\">Fields</h3>\n<p>Each field is defined using the <code><code><a href=\"/en-US/docs/XBL/XBL_1.0_Reference/Elements#field\">field</a></code></code> element. Often, fields would correspond to an attribute placed on the element such as <code>label</code> or <code>disabled</code>, but they do not have to.</p>\n<p>The <code>name</code> attribute on the <code><code><a href=\"/en-US/docs/XBL/XBL_1.0_Reference/Elements#field\">field</a></code></code> element is used to indicate the name of the field. You can use the name from a script to get and set the value. The example below creates a button which generates and stores a random number. You can retrieve this same number multiple times by getting the <code>number</code> property from the button. Most of the work here is done in the <code>oncommand</code> handlers. Later, we'll find out how to move this to XBL.</p>\n<pre class=\"eval\"><strong>XUL:</strong>\n\n&lt;box id=\"random-box\" class=\"randomizer\"/&gt;\n\n&lt;button label=\"Generate\"\n           oncommand=\"document.getElementById('random-box').number=Math.random();\"/&gt;\n&lt;button label=\"Show\"\n           oncommand=\"alert(document.getElementById('random-box').number)\"/&gt;\n\n<strong>XBL:</strong>\n\n&lt;binding id=\"randomizer\"&gt;\n  &lt;implementation&gt;\n    &lt;field name=\"number\"/&gt;\n  &lt;/implementation&gt;\n&lt;/binding&gt;\n</pre>\n<p>A <code>number</code> field has been defined in the binding, which stores the random number. The two extra buttons set and get the value of this field. The syntax is very similar to getting and setting the properties of HTML elements. In this example, no content has been placed inside either the XUL box or its definition in XBL, which is perfectly valid.</p>\n<p>This example isn't quite correct because the field is not assigned a default value. To do this, add the default value as the content of the <code><code><a href=\"/en-US/docs/XBL/XBL_1.0_Reference/Elements#field\">field</a></code></code> tag. For example:</p>\n<pre>&lt;field name=\"number\"&gt;\n  25\n&lt;/field&gt;\n</pre>\n<p>This will assign the value 25 as the default value of the number field. Actually, you can instead place a script inside the <code><code><a href=\"/en-US/docs/XBL/XBL_1.0_Reference/Elements#field\">field</a></code></code> tag that evaluates to the default value. That might be necessary if the value needs to be computed. For example, the following field is given a default value equal to the current time:</p>\n<pre>&lt;field name=\"currentTime\"&gt;\n  new Date().getTime();\n&lt;/field&gt;\n</pre>\n<h3 id=\"Properties\" name=\"Properties\">Properties</h3>\n<p>Sometimes you will want to validate the data that is assigned to a property. Or, you may want the value to be calculated dynamically as it's asked for. For example, if you want a property that holds the current time, you would want to have its value generated as needed. In these cases, you need to use a <code><code><a href=\"/en-US/docs/XBL/XBL_1.0_Reference/Elements#property\">property</a></code></code> tag instead of a <code><code><a href=\"/en-US/docs/XBL/XBL_1.0_Reference/Elements#field\">field</a></code></code> tag. Its syntax is similar but has additional features.</p>\n<h4 id=\"Onget_Attribute_and_Onset_Attribute\" name=\"Onget_Attribute_and_Onset_Attribute\">Onget Attribute and Onset Attribute</h4>\n<p>You can use the <code>onget</code> and <code>onset</code> attributes to have code execute when the property is retrieved or modified. Add each to the <code><code><a href=\"/en-US/docs/XBL/XBL_1.0_Reference/Elements#property\">property</a></code></code> element and set its value to a script which either gets or sets the value of the property.</p>\n<p>For example, you could assign a script to the value of <code>onget</code> to calculate the current time. Whenever a script attempts to access the value of the property, the <code>onget</code> script will be called to retrieve the value. The script should return the value that should be treated as the value of that property.</p>\n<p>The <code>onset</code> handler is similar but is called whenever a script attempts to assign a new value to the property. This script should store the value somewhere, or validate the value. For example, some properties might only be able to store numbers. Attempting to assign alphabetic text to such a property should fail.</p>\n<pre>&lt;property name=\"size\"\n          onget=\"return 77;\"\n          onset=\"alert('Changed to:'+val);\"/&gt;\n</pre>\n<p>This property will always return 77 when retrieved. When set, an alert will be displayed which displays the value to assign to the property. The special variable <code>val</code> holds the value that the property should be assigned to. Use this to validate it or store it.</p>\n<p>The following decribes what happens in a typical case:</p>\n<p>There are two elements, one called 'banana' and the other 'orange'. They each have a custom property called 'size'. When the following line of script is executed:</p>\n<pre>banana.size = orange.size;\n</pre>\n<ol>\n <li>The <code>onget</code> script is called for the size property of the orange. The script calculates the value and returns it.</li>\n <li>The <code>onset</code> handler of the size property of the banana is called. This script uses the value passed in the <code>val</code> variable and assigns it to the size property of the banana in some manner.</li>\n</ol>\n<p>Note that unlike a field, a property does not hold a value. Attempting to set a property that does not have an <code>onset</code> handler will generate an error. You will often use a separate field to hold the actual value of the property. It is also common to have the properties match an attribute on the XBL-defined element. The following example maps a property to an attribute on an element.</p>\n<pre>&lt;property name=\"size\"\n          onget=\"return this.getAttribute('size');\"\n          onset=\"this.setAttribute('size', val);\"\n/&gt;\n</pre>\n<p>Whenever a script attempts to get the value of the property, it is grabbed instead from the attribute on the element with the same name. Whenever a script attempts to set the value of a property, it is set as an attribute on the element. This is convenient because then you can modify the property or the attribute and both will have the same value.</p>\n<h4 id=\"Getter_Element_and_Setter_Element\" name=\"Getter_Element_and_Setter_Element\">Getter Element and Setter Element</h4>\n<p>You can use an alternate syntax for the <code>onget</code> and <code>onset</code> attributes that is useful if the scripts are longer. You can replace the <code>onget</code> attribute with a child element called <code><code><a href=\"/en-US/docs/XBL/XBL_1.0_Reference/Elements#getter\">getter</a></code></code>. Similarly, you can replace the <code>onset</code> attribute with a <code><code><a href=\"/en-US/docs/XBL/XBL_1.0_Reference/Elements#setter\">setter</a></code></code> element. The example below shows this:</p>\n<pre>&lt;property name=\"number\"&gt;\n  &lt;getter&gt;\n    return this.getAttribute('number');\n  &lt;/getter&gt;\n  &lt;setter&gt;\n    var v = parseInt(val,10);\n    if (!isNaN(v)) {\n      this.setAttribute('number', '' + v);\n    }\n  &lt;/setter&gt;\n&lt;/property&gt;\n</pre>\n<p>The property in this example will only be able to hold integer values. If other characters are entered, they are stripped off. If there are no digits, the value is not changed. This is done in the code inside the <code><code><a href=\"/en-US/docs/XBL/XBL_1.0_Reference/Elements#setter\">setter</a></code></code> element. The real value of the property is stored in the <code>number</code> attribute.</p>\n<p>You can use either syntax for creating get and set handlers.</p>\n<h4 id=\"Readonly_Attribute\" name=\"Readonly_Attribute\">Readonly Attribute</h4>\n<p>You can make a field or property read-only by adding a <code>readonly</code> attribute to the <code><code><a href=\"/en-US/docs/XBL/XBL_1.0_Reference/Elements#field\">field</a></code></code> tag or <code><code><a href=\"/en-US/docs/XBL/XBL_1.0_Reference/Elements#property\">property</a></code></code> tag and setting it to <code>true</code>. Attempting to set the value of a read-only property will fail.</p>\n<div class=\"note\">\n <p><strong>Note:</strong> The <code>readonly</code> attribute did not work correctly on fields until <span title=\"(Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)\">Gecko 2.0</span>.</p>\n</div>\n<p>The next section shows how to add methods to XBL-defined elements.</p>\n<p></p><div class=\"prevnext\" style=\"text-align: right;\">\n    <p><a href=\"/en-US/docs/XUL_Tutorial/XBL_Attribute_Inheritance\" style=\"float: left;\">« Previous</a><a href=\"/en-US/docs/XUL_Tutorial/Adding_Methods_to_XBL-defined_Elements\">Next  »</a></p>\n</div><p></p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kscarfone\">kscarfone</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/jswisher\">jswisher</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/sachin.hosmani\">sachin.hosmani</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/teoli\">teoli</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/fscholz\">fscholz</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Chbok\">Chbok</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Garyvdm\">Garyvdm</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mgjbot\">Mgjbot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Morishoji\">Morishoji</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Jjinux\">Jjinux</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nickolay\">Nickolay</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ptak82\">Ptak82</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Dria\">Dria</a>",
    "title": "Adding Properties to XBL-defined Elements"
}