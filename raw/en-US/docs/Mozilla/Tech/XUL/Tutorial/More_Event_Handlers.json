{
    "content": "<p></p><div class=\"prevnext\" style=\"text-align: right;\">\n    <p><a href=\"/en-US/docs/XUL_Tutorial/Adding_Event_Handlers\" style=\"float: left;\">« Previous</a><a href=\"/en-US/docs/XUL_Tutorial/Keyboard_Shortcuts\">Next  »</a></p>\n</div><p></p>\n<p>In this section, the event object is examined and additional events are described.</p>\n<h3 id=\"The_Event_Object\" name=\"The_Event_Object\">The Event Object</h3>\n<p>Every event handler is passed an <a href=\"/en/DOM/event\" title=\"en/DOM/event\">event</a> object. In the attribute form of the event handler, the event object is an implied argument to the script code which can be referred to using the name 'event'. In the <a href=\"/en/DOM/element.addEventListener\" title=\"en/DOM/element.addEventListener\">addEventListener</a> form, the first argument passed to the listener function will be the event object.  Other arguments can be passed to a listener function, if required.</p>\n<p> </p>\n<p>The event object has a number of properties which can be examined during an event. For a full list, see <a href=\"/en/DOM/event\" title=\"en/DOM/event\">the reference</a>.</p>\n<p>We already saw the event's <code><a href=\"/en/DOM/event.target\" title=\"en/DOM/event.target\">target</a></code> property in the last section. It holds a reference to the element where the event occurred. A similar property <code><a href=\"/en/DOM/event.currentTarget\" title=\"en/DOM/event.currentTarget\">currentTarget</a></code> holds the element that is currently having its event listeners handled. In the example below, <code><a href=\"/en/DOM/event.currentTarget\" title=\"en/DOM/event.currentTarget\">currentTarget</a></code> is always the vbox, whereas <code><a href=\"/en/DOM/event.target\" title=\"en/DOM/event.target\">target</a></code> would be the specific element, either the button or checkbox, that was activated.</p>\n<p><span id=\"Example_1\"><a id=\"Example_1\"></a><strong>Example 1</strong></span> : <a href=\"https://developer.mozilla.org/samples/xultu/examples/ex_advevents_1.xul.txt\">Source</a> <a href=\"https://developer.mozilla.org/samples/xultu/examples/ex_advevents_1.xul\">View</a></p>\n<pre>&lt;vbox oncommand=\"alert(event.currentTarget.tagName);\"&gt;\n  &lt;button label=\"OK\"/&gt;\n  &lt;checkbox label=\"Show images\"/&gt;\n&lt;/vbox&gt;\n</pre>\n<h4 id=\"Stop_Event_Propagation\" name=\"Stop_Event_Propagation\">Stop Event Propagation</h4>\n<p>Once you handle an event, regardless of where in the propagation the event is, you will likely want to stop the event from being sent to further elements, essentially stopping the capturing or bubbling phases from continuing. Depending on how you attach the event listener to an element, there are different ways of doing this.</p>\n<p>Recall that the capturing phase occurs before the bubbling phase, so any capturing listeners will trigger before any bubbling listeners. If a capturing event stops the event propagation, none of the later capturing listeners, nor any of the bubbling listeners will ever receive notification about the events. To manually stop event propagation, call the event object's <code><a href=\"/en/DOM/event.stopPropagation\" title=\"en/DOM/event.stopPropagation\">stopPropagation</a></code> method, as in the following example.</p>\n<p><span id=\"Example_2\"><a id=\"Example_2\"></a><strong>Example 2</strong></span> : <a href=\"https://developer.mozilla.org/samples/xultu/examples/ex_advevents_2.xul.txt\">Source</a> <a href=\"https://developer.mozilla.org/samples/xultu/examples/ex_advevents_2.xul\">View</a></p>\n<pre>&lt;hbox id=\"outerbox\"&gt;\n  &lt;button id=\"okbutton\" label=\"OK\"/&gt;\n&lt;/hbox&gt;\n\n&lt;script&gt;\nfunction buttonPressed(event){\n  alert('Button was pressed!');\n}\n\nfunction boxPressed(event){\n  alert('Box was pressed!');\n  event.stopPropagation();\n}\n\nvar button = document.getElementById(\"okbutton\");\nbutton.addEventListener('command',buttonPressed,true);\n\nvar outerbox = document.getElementById(\"outerbox\");\nouterbox.addEventListener('command',boxPressed,true);\n&lt;/script&gt;\n</pre>\n<p>Here, an event listener has been added to the button and another event listener has been added to the box. The <code><a href=\"/en/DOM/event.stopPropagation\" title=\"en/DOM/event.stopPropagation\">stopPropagation</a></code> method has been called in the box's listener, so the button's listener never gets called. If this call was removed, both listeners would be called and both alerts would appear.</p>\n<h4 id=\"Prevent_Default_Action\" name=\"Prevent_Default_Action\">Prevent Default Action</h4>\n<p>If no event handlers have been registered for an event, then after completing the capturing and bubbling phases, the element will handle the event in a default way. What will happen depends on the event and the type of element. For example, the 'popupshowing' event is sent to a popup just before it is displayed. The default action is to display the popup. If the default action is prevented, the popup will not be displayed. The default action can be prevented with the event object's <code><a href=\"/docs/Web/API/event.preventDefault\" title=\"en/DOM/event.preventDefault\">preventDefault</a></code> method, as in the example below.</p>\n<p><span id=\"Example_3\"><a id=\"Example_3\"></a><strong>Example 3</strong></span> : <a href=\"https://developer.mozilla.org/samples/xultu/examples/ex_advevents_3.xul.txt\">Source</a> <a href=\"https://developer.mozilla.org/samples/xultu/examples/ex_advevents_3.xul\">View</a></p>\n<pre>&lt;button label=\"Types\" type=\"menu\"&gt;\n  &lt;menupopup onpopupshowing=\"event.preventDefault();\"&gt;\n    &lt;menuitem label=\"Glass\"/&gt;\n    &lt;menuitem label=\"Plastic\"/&gt;\n  &lt;/menupopup&gt;\n&lt;/button&gt;\n</pre>\n<p>Alternatively, for attribute event listeners, you can just return false from the code. Note that preventing the default action is not the same as stopping event propagation with the <code><a href=\"/en/DOM/event.stopPropagation\" title=\"en/DOM/event.stopPropagation\">stopPropagation</a></code> method. Even if the default action has been prevented, the event will still continue to propagate. Similarly, calling the <code><a href=\"/en/DOM/event.stopPropagation\" title=\"en/DOM/event.stopPropagation\">stopPropagation</a></code> method won't prevent the default action. You must call both methods to stop both from occuring.</p>\n<p>Note that once propagation or the default action has been prevented, neither may be re-enabled again for that event.</p>\n<p>The following sections list some of the events that may be used. A full list is provided in the <a class=\"external\" href=\"http://www.xulplanet.com/references/elemref/ref_EventHandlers.html\">XULPlanet event reference</a>.</p>\n<h3 id=\"Mouse_Events\" name=\"Mouse_Events\">Mouse Events</h3>\n<p>There are several events which can be used to handle mouse specific actions, which are described briefly below:</p>\n<dl>\n <dt>\n  click</dt>\n <dd>\n  Called when the mouse is pressed and released on an element.</dd>\n <dt>\n  dblclick</dt>\n <dd>\n  Called when the a mouse button is double clicked.</dd>\n <dt>\n  mousedown</dt>\n <dd>\n  Called when a mouse button is pressed down on an element. The event handler will be called as soon as a mouse button is pressed, even if it hasn't been released yet.</dd>\n <dt>\n  mouseup</dt>\n <dd>\n  Called when a mouse button is released on an element.</dd>\n <dt>\n  mouseover</dt>\n <dd>\n  Called when the mouse pointer is moved onto an element. You could use this to highlight the element, however CSS provides a way to do this automatically so you shouldn't do it with an event. You might, however, want to display some help text on a status bar.</dd>\n <dt>\n  mousemove</dt>\n <dd>\n  Called when the mouse pointer is moved while over an element. The event may be called many times as the user moves the mouse so you should avoid performing lengthy tasks from this handler.</dd>\n <dt>\n  mouseout</dt>\n <dd>\n  Called when the mouse pointer is moved off of an element. You might then unhighlight the element or remove status text.</dd>\n</dl>\n<p>There are also a set of drag related events, which occur when the user holds down a mouse button and drags the mouse around. Those events are described in <a href=\"/En/DragDrop/Drag_and_Drop\" title=\"en/DragDrop/Drag_and_Drop\">Drag and Drop</a>.</p>\n<h4 id=\"Mouse_Button_Event_Properties\" name=\"Mouse_Button_Event_Properties\">Mouse Button Event Properties</h4>\n<p>When a mouse button event occurs, a number of additional properties are available to determine which mouse buttons were pressed and the location of the mouse pointer. The event's <code><a href=\"/en/DOM/event.button\" title=\"en/DOM/event.button\">button</a></code> property can be used to determine which button was pressed, where possible values are 0 for the left button, 1 for the middle button and 2 for the right button. If you've configured your mouse differently, these values may be different.</p>\n<p>The <code><a href=\"/en/DOM/event.detail\" title=\"en/DOM/event.detail\">detail</a></code> property holds the number of times the button has been clicked quickly in sequence. This allows you to check for single, double or triple clicks. Of course, if you just want to check for double clicks, you can also use the dblclick event instead. The click event will be fired once for the first click, again for the second click, and again for the third click, but the dblclick event will only be fired once for a double click.</p>\n<p>The <code><a href=\"/en/DOM/event.button\" title=\"en/DOM/event.button\">button</a></code> and <code><a href=\"/en/DOM/event.detail\" title=\"en/DOM/event.detail\">detail</a></code> properties only apply to the mouse button related events, not mouse movement events. For the mousemove event, for example, both properties will be set to 0.</p>\n<h4 id=\"Mouse_Position_Event_Properties\" name=\"Mouse_Position_Event_Properties\">Mouse Position Event Properties</h4>\n<p>However, all mouse events will be supplied with properties that hold the coordinates of the mouse position where the event occurred. There are two sets of coordinates. The first is the <code><a href=\"/en/DOM/event.screenX\" title=\"en/DOM/event.screenX\">screenX</a></code> and <code><a href=\"/en/DOM/event.screenY\" title=\"en/DOM/event.screenY\">screenY</a></code> properties and are relative to the top left corner of the screen. The second set, <code><a href=\"/en/DOM/event.clientX\" title=\"en/DOM/event.clientX\">clientX</a></code> and <code><a href=\"/en/DOM/event.clientY\" title=\"en/DOM/event.clientY\">clientY</a></code>, are relative to the top left corner of the document. Here is an example which displays the current mouse coordinates:</p>\n<p><span id=\"Example_4\"><a id=\"Example_4\"></a><strong>Example 4</strong></span> : <a href=\"https://developer.mozilla.org/samples/xultu/examples/ex_advevents_4.xul.txt\">Source</a> <a href=\"https://developer.mozilla.org/samples/xultu/examples/ex_advevents_4.xul\">View</a></p>\n<pre>&lt;script&gt;\n\nfunction updateMouseCoordinates(e){\n  var text = \"X:\" + e.clientX + \" Y:\" + e.clientY;\n  document.getElementById(\"xy\").value = text;\n}\n&lt;/script&gt;\n\n&lt;label id=\"xy\"/&gt;\n&lt;hbox width=\"400\" height=\"400\" onmousemove=\"updateMouseCoordinates(event);\"/&gt;\n</pre>\n<p>In this example, the size of the box has been set explicitly so the effect is easier to see. The event handler gets the <code><a href=\"/en/DOM/event.clientX\" title=\"en/DOM/event.clientX\">clientX</a></code> and <code><a href=\"/en/DOM/event.clientY\" title=\"en/DOM/event.clientY\">clientY</a></code> properties and creates a string from them. This string is then assigned to the value property of the label. Note that the event argument must be passed to the <code>updateMouseCoordinates</code> function. If you move the mouse quickly across the border of the box, you might notice that the coordinates don't generally stop right at 400. This is because the mousemove events occur at intervals depending on the speed at which the mouse moves and the mouse is usually moved some distance past the border by the time the next event fires. Obviously, it would be much too inefficient to send a mousemove event for every pixel the mouse is moved.</p>\n<h4 id=\"Element_Relative_Coordinates\" name=\"Element_Relative_Coordinates\">Element Relative Coordinates</h4>\n<p>You will often want to get the coordinates of an event relative to the element where the event occurred rather than the entire window. You can do this by subtracting the element's position from the event position, as in the following code.</p>\n<pre>var element = event.target;\nvar elementX = event.clientX - element.boxObject.x;\nvar elementY = event.clientY - element.boxObject.y;\n</pre>\n<p>XUL elements have a box object that can be retrieved using the <code><code><span><a href=\"https://developer.mozilla.org/en-US/docs/XUL/Property/boxObject\">boxObject</a></span></code></code> property. We'll learn more about the box object in <a href=\"/en/XUL_Tutorial/Box_Objects\" title=\"en/XUL_Tutorial/Box_Objects\">a later section</a>, but it holds information pertaining to how the element is displayed, including the x and y position of the element. In this example code, these coordinates are subtracted from the event coordinates to get the event position relative to the element.</p>\n<h3 id=\"Load_Events\" name=\"Load_Events\">Load Events</h3>\n<p>The load event is sent to the document (the <code><code><a href=\"/en-US/docs/Mozilla/Tech/XUL/window\" title=\"window\">window</a></code></code> tag) once the XUL file has finished loading and just before the content is displayed. This event is commonly used to initialize fields and perform other tasks that need to be done before the user can use the window. You should use a load event to do these kinds of things as opposed to adding a script at the top level outside of a function. This is because the XUL elements may not have loaded or fully initialized yet, so some things may not work as expected. To use a load event, place an <code><code id=\"a-onload\"><a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Attribute/onload\">onload</a></code></code> attribute on the <code><code><a href=\"/en-US/docs/Mozilla/Tech/XUL/window\" title=\"window\">window</a></code></code> tag. Call code within the load handler which will initialize the interface as necessary.</p>\n<p>There is also an unload event which is called once the window has closed, or in a browser context, when the page is switched to another URL. You can use this event to save any changed information, for example.</p>\n<p><br>\n Next, we'll find out how to add <a href=\"/en/XUL_Tutorial/Keyboard_Shortcuts\" title=\"en/XUL_Tutorial/Keyboard_Shortcuts\">keyboard shortcuts</a>.</p>\n<p></p><div class=\"prevnext\" style=\"text-align: right;\">\n    <p><a href=\"/en-US/docs/XUL_Tutorial/Adding_Event_Handlers\" style=\"float: left;\">« Previous</a><a href=\"/en-US/docs/XUL_Tutorial/Keyboard_Shortcuts\">Next  »</a></p>\n</div><p></p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/bjori\">bjori</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/jukbot\">jukbot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/teoli\">teoli</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/fscholz\">fscholz</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Allasso\">Allasso</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/kiteroa\">kiteroa</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Enn\">Enn</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Brettz9\">Brettz9</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Lego\">Lego</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Fredchat\">Fredchat</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Jomel\">Jomel</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mixticius\">Mixticius</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Chbok\">Chbok</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/James0\">James0</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nathymig\">Nathymig</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Morishoji\">Morishoji</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Holbech\">Holbech</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Mgjbot\">Mgjbot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Pmash\">Pmash</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Laolu\">Laolu</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Ptak82\">Ptak82</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Dria\">Dria</a>",
    "title": "More Event Handlers"
}