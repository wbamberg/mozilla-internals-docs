{
    "content": "<p>Â </p>\n<p>In addition to this document, see <a href=\"/en/SVG/Namespaces_Crash_Course\" title=\"en/SVG/Namespaces_Crash_Course\">Namespaces Crash Course</a>.</p>\n<p><strong>XML namespaces</strong> provide a way to distinguish duplicate element and attribute names. Duplicates element and attribute names can occur when an XML document contains elements and attributes from two or more different XML schemas (or DTDs). To quote <a class=\"external\" href=\"http://en.wikipedia.org/wiki/Namespace\">Wikipedia</a>: \"In general, a namespace is an abstract container providing context for the items ... it holds and allows disambiguation of items having the same name.\"</p>\n<p>If you are familiar with C++ namespaces, Java packages, perl packages, or Python module importing, you are already familiar with the namespace concept.</p>\n<p>An XML namespace is identified by an unique name (called a URI, not a URL, even though it can look like a URL). An URI is any string, although most people choose a URL-based URI because URLs are an easy way to <em>hope</em> for uniqueness. Although there's nothing preventing someone else from using the namespace <code>http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul</code>, it's fairly unlikely anyone would choose that accidentally. Even if they did accidentally choose it, they may not define the same elements as XUL anyway (e.g., <code>&lt;textbox/&gt;</code>) in their schema/DTD.</p>\n<p>Any element type or attribute name in an XML namespace can be uniquely identified by its XML namespace and its \"local name\". Together, these two items define a <em>qualified name</em>, or <a class=\"external\" href=\"http://www.w3.org/TR/REC-xml-names/#dt-qualname\">QName</a>.</p>\n<p>For example, <code>&lt;xul:textbox/&gt;</code> uses a namespace named \"xul\" and a local name \"textbox\". This distinguishes it from, for example, <code>&lt;foobar:textbox/&gt;</code> which might occur in the same document. The <strong>xul</strong> and <strong>foobar</strong> namespaces must be defined at the top of the XML document in which they are used, like so:</p>\n<pre> &lt;foobar:some-element \n     xmlns:xul=\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\"\n     xmlns:foobar=\"the-foobar-namespace\"&gt;\n   &lt;xul:textbox id=\"foo\" value=\"bar\"/&gt;\n   &lt;foobar:textbox favorite-food=\"pancakes\"/&gt;\n &lt;/foobar:some-element&gt;\n</pre>\n<p>Notice I've mixed two <code>&lt;textboxes/&gt;</code> in the same document. The only way to distinguish that they have different meanings is with namespaces.</p>\n<p>There's only one other thing to know: \"default namespace\". Every XML element has a \"default namespace\", and this is used with XUL elements all the time. In XUL documents, you'll usually see this:</p>\n<pre> &lt;window\n     id=\"foo\"\n     xmlns=\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\"&gt;\n   ...\n   ...\n &lt;/window&gt;\n</pre>\n<p>and in XHTML documents, you'll see this:</p>\n<pre> &lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n   ...\n   ...\n &lt;/html&gt;\n</pre>\n<p>There is a very subtle difference here than before. Before I wrote <code>xmlns<strong>:xul</strong>=\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\"</code> but here the <strong>:xul</strong> piece is omitted. This signifies to the XML parser that <code>http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul</code> is the <strong>default namespace</strong> for the element and its descendant elements (unless further overridden by a default namespace on a descendant element), and that any element without a namespace (i.e., no prefix and colon) belongs to the default namespace. That's why we can write the shorthand <code>&lt;textbox/&gt;</code> instead of <code>&lt;xul:textbox/&gt;</code> in XUL (although the latter is just as correct when not using <code>http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul</code> as the default namespace) -- the XUL namespace is defined as the default on the topmost element. In other words, a default namespace permits a kind of short-hand to be used for all descendants of an element.</p>\n<p>Here's a question: what namespace contains the element <code>foo</code> in the XML document below?</p>\n<pre>  &lt;foo/&gt;\n</pre>\n<p>The answer is that it's in <strong>no</strong> namespace, or alternately, it's in the namespace denoted by the empty string:</p>\n<pre>  &lt;foo xmlns=\"\"/&gt;\n</pre>\n<p>This second example is semantically equivalent to the first.</p>\n<p>Now, a second question: what namespaces are the <code>bar</code>, <code>baz</code>, and <code>quux</code> attributes in?</p>\n<pre>  &lt;foo bar=\"value\"&gt;\n    &lt;element xmlns=\"namespace!\" baz=\"value\"&gt;\n      &lt;element quux=\"value\"/&gt;\n    &lt;/element&gt;\n  &lt;/foo&gt;\n</pre>\n<p><code>bar</code> is obviously not in a namespace. What about <code>baz</code> and <code>quux</code>? The answer is that they aren't in a namespace either. In fact no unprefixed attribute is ever in a namespace, primarily because XML originally didn't have namespaces, and all XML from that time had to stay in no namespace. This is a source of perennial confusion for XML namespaces.</p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/mdnwebdocs-bot\">mdnwebdocs-bot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/chrisdavidmills\">chrisdavidmills</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Np\">Np</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Tonymec\">Tonymec</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Nickolay\">Nickolay</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Jonathan_Watt\">Jonathan_Watt</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Waldo\">Waldo</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/ericjung\">ericjung</a>",
    "title": "Namespaces"
}