{
    "content": "<p>Compared to a simple text-editor, Visual Studio gives you some special features when writing XUL:</p>\n<ul>\n  <li>IntelliSense / autocompletion for elements and attributes</li>\n  <li>Validation</li>\n  <li>Syntax coloring (<em>okay, more sophisticated editors like Notepad++ provide this as well</em>)</li>\n</ul>\n<p>Before you can use all of this, you have to adjust Visual Studio a little.</p>\n<h2 id=\"1._Setting_the_correct_editor\" style=\"padding-top: 0.5em;\">1. Setting the correct editor</h2>\n<p>As XUL files are nothing but XML, you can use the normal XML-editor for writing XUL.</p>\n<p>Go to <em>Tools &gt; Options... &gt; Text Editor &gt; File Extension</em> and add the extension \"xul\" with \"XML Editor\". As you are already there, you can do the same for \"xbl\".</p>\n<p style=\"text-align: center;\"><img alt=\"text_editor.jpg\" class=\"internal default\" src=\"/@api/deki/files/3589/=text_editor.jpg\" style=\"width: 500px; height: 288px;\"></p>\n<h2 id=\"2._Using_XML_schemas\" style=\"padding-top: 1em;\">2. Using XML schemas</h2>\n<p>For validation and intellisense Visual Studio needs the XML schema for XUL files. There is a very nice schema created by <a class=\"external\" href=\"http://digitalmihailo.blogspot.com/\">Mihailo Lalevic</a>. You can download it at <a class=\"external\" href=\"http://xulschema.codeplex.com/\">xulschema.codeplex.com</a> under the <em>Downloads</em> tab. You should be able to use the schema in other IDE's too.</p>\n<p>There is also project that provides XML schema for install manifest files (<em>install.rdf</em>) - <a href=\"https://installrdfschema.codeplex.com/\" title=\"https://installrdfschema.codeplex.com/\">installrdfschema.codeplex.com</a> - from the same author as a XUL schema.</p>\n<p>The codeplex-page provides some instructions for installing the schema, but there is an easier way. If you already have a XML or XUL file opened, Visual Studio will add the menu item <em>XML</em> to the main menu. Just use <em>XML &gt; Schemas...</em> to add the <em>xul.xsd</em> from the package that you have downloaded.</p>\n<p style=\"text-align: center;\"><img alt=\"add_schema.jpg\" class=\"internal default\" src=\"/@api/deki/files/3588/=add_schema.jpg\" style=\"width: 500px; height: 288px;\"></p>\n<p>The other xsd files will be added automatically.</p>\n<p>Visual Studio will use the schema based on the namespace, so make sure your window element uses the correct XUL namespace <em><a class=\"linkification-ext external\" href=\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\" title=\"Linkification: http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\">http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul</a></em>.</p>\n<h2 id=\"3._XBL\" style=\"padding-top: 0.5em;\">3. XBL</h2>\n<p>If you are writing your own elements in XBL, you can download a XBL schema from <a class=\"external\" href=\"http://mozilla.doslash.org/xblschema/\">mozilla.doslash.org/xblschema</a>. Grab the XSD version and add it in the same way, you added the XUL schema.</p>\n<p>To combine both, you can also add your own XBL elements to the XUL schema to get autocompletion-support and validation for those in your XUL files. Mihailo posted some instructions in this <a class=\"external\" href=\"http://xulschema.codeplex.com/Thread/View.aspx?ThreadId=52668\">Codeplex discussion</a>.</p>\n<h2 id=\"4._Visual_Assist_and_file_extensions\" style=\"padding-top: 0.5em;\">4. Visual Assist and file extensions</h2>\n<p>Since version 10.5, <a class=\"external\" href=\"http://www.wholetomato.com/\">Visual Assist</a> supports Javascript and XML.<br>\n  As it does not work out of the box with unknown file extensions (like <em>.xul</em>, <em>.xbl</em> and <em>.jsm</em>), you have to do some registry tricks, so that VA knows how to treat these file types.</p>\n<p>All VA options can be found at:</p>\n<pre>HKEY_CURRENT_USER\\Software\\Whole Tomato\\Visual Assist X\\\n</pre>\n<p>Find the folder that represents your Visual Studio version ((<em>VANet8</em>, <em>VANet9</em>, etc.) and add your extensions to the corresponding registry entries <strong>ExtJS</strong> and <strong>ExtXml</strong>.</p>\n<p>Make sure that Visual Studio is not running, when you do this.</p>\n<h2 id=\"5._Problems_that_need_to_be_solved\" style=\"padding-top: 0.5em;\">5. Problems that need to be solved</h2>\n<p>There are still some problems for which I did not find a solution yet.</p>\n<h3 id=\"5.1_Localization_using_DTD\" style=\"padding-top: 0.5em;\">5.1 Localization using DTD</h3>\n<p>You will get validation errors in Visual Studio, if you are localizing your XUL files. That has to do with the way Mozilla implemented localization:</p>\n<pre>&lt; !DOCTYPE window SYSTEM \"chrome://loomo/locale/main.dtd\"&gt;\n</pre>\n<p>Visual Studio doesn't recognize the <em>chrome</em> URI prefix, what will give you an error at the previous line (\"The URI prefix is not recognized\"). As VS doesn't know how the <em>chrome</em> protocol works it can't detect where the dtd file is really located and thus will give you errors wherever you use the entities that are declared in this file.</p>\n<h3 id=\"5.2_Text_preprocessor\" style=\"padding-top: 0.5em;\">5.2 Text preprocessor</h3>\n<p>The Mozilla Build System includes a <a href=\"/../../../../En/Build/Text_Preprocessor\" title=\"../../../../En/Build/Text_Preprocessor\">Text preprocessor</a>. As preprocessor directives are not valid XML, Visual Studio will mark them as errors in your XUL files.</p>\n<h3 id=\"5.3_Javascript_related\" style=\"padding-top: 0.5em;\">5.3 Javascript related</h3>\n<p>You will get validation errors for Javascript code whenever using the keywords \"const\" and \"let\". These keywords are Mozilla-specific at the moment. VS just supports ECMAScript 3rd Edition and thus doesn't know these keywords.</p>\n<p><img alt=\"\"></p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>",
    "title": "Using Visual Studio as your XUL IDE"
}