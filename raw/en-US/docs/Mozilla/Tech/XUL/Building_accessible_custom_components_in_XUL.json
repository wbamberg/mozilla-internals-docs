{
    "content": "<h3 id=\"Introduction\">Introduction</h3>\n<p><a href=\"/en/ARIA/Accessible_Rich_Internet_Applications\" title=\"en/ARIA/Accessible_Rich_Internet_Applications\">DHTML Accessibility</a> is a new technology which enables developers to construct accessible controls within (X)HTML pages. Developers have been doing this for some time, but the resulting controls were never as accessible as similar controls in desktop applications. Assistive technologies could only see the generic HTML markup used to build the control; they had no way of knowing that a particular collection of <code>div</code> and <code>span</code> elements should be treated as a single cohesive control (such as a tab bar or a treeview).</p>\n<p>By implementing DHTML Accessibility techniques, web developers can declare that generic HTML elements are really acting as specific GUI controls (such as a treeitem within a treeview). Firefox 1.5 is the first browser to support DHTML Accessibility; it maps the declarations within the HTML page to the underlying accessibility architecture so that assistive technologies can \"read\" a web page and know how to present these complex controls to the end user.</p>\n<p>This has all been well-documented for some time. However, it is less well-known that the same DHTML Accessibility techniques can be applied to XUL, Mozilla's XML markup language for building user interfaces. (The Firefox interface itself is built in XUL, as well as the graphical interface presented by Firefox extensions.)</p>\n<p>XUL itself has a much richer set of built-in controls than HTML. There is generally no need to build your own XUL tab bar or treeview. Firefox ships with a <code><a href=\"/en-US/docs/Mozilla/Tech/XUL/tabbox\" title=\"tabbox\">tabbox</a></code> element and a <code><a href=\"/en-US/docs/Mozilla/Tech/XUL/tree\" title=\"tree\">tree</a></code> element, and these elements are fully accessible out-of-the-box. However, if you are building custom controls in XUL, you may need to use DHTML Accessibility techniques to ensure that your custom controls are equally accessible.</p>\n<h3 id=\"A_Super-Simple_Spreadsheet\">A Super-Simple Spreadsheet</h3>\n<ul> <li><a class=\"external\" href=\"http://diveintomark.org/projects/accjax/code/accjax-demo-stage-1.zip\">Download stage-1.zip</a></li> <li><a class=\"external\" href=\"http://diveintomark.org/projects/accjax/xpi/accjax-demo-stage-1.xpi\">install stage-1.xpi</a></li>\n</ul>\n<p>To build our XUL spreadsheet, we'll use three built-in XUL controls:</p>\n<ol> <li>A single <code>grid</code> element to contain the other elements and position them in rows and columns.</li> <li><code>description</code> elements for each row and column header.</li> <li><code>label</code> elements for each cell in the spreadsheet.</li>\n</ol>\n<p>The XUL markup is straightforward. We define the <code>grid</code>, then define the headers for each row (numbered <code>1</code> through <code>7</code>), then define the column header and cells for each column. The label for each header and cell is defined in the <code>value</code> attribute. The <code>flex</code> attributes are simply for layout.</p>\n<p>Note: the row and column headers are denoted by <code>description</code> elements, and individual cells are denoted by <code>label</code> elements. This is not an accessibility requirement; as we'll see in the next section, the actual XUL elements are irrelevant because we will define the role of each element in a separate attribute.</p>\n<pre>&lt;code&gt;\n&lt;grid class=\"spreadsheet\" id=\"accjaxspreadsheet\" flex=\"1\"&gt;\n  &lt;rows flex=\"1\"&gt;&lt;/rows&gt;\n  &lt;columns flex=\"1\"&gt;\n    &lt;column&gt;\n      &lt;description value=\"Entry #\"/&gt;\n      &lt;description value=\"1\"/&gt;\n      &lt;description value=\"2\"/&gt;\n      &lt;description value=\"3\"/&gt;\n      &lt;description value=\"4\"/&gt;\n      &lt;description value=\"5\"/&gt;\n      &lt;description value=\"6\"/&gt;\n      &lt;description value=\"7\"/&gt;\n    &lt;/column&gt;\n    &lt;column flex=\"1\"&gt;\n      &lt;description value=\"Date\"/&gt;\n      &lt;label value=\"03/14/05\" flex=\"1\"/&gt;\n      &lt;label value=\"03/15/05\" flex=\"1\"/&gt;\n      &lt;label value=\"03/15/05\" flex=\"1\"/&gt;\n      &lt;label value=\"03/16/05\" flex=\"1\"/&gt;\n      &lt;label value=\"03/16/05\" flex=\"1\"/&gt;\n      &lt;label value=\"03/16/05\" flex=\"1\"/&gt;\n      &lt;label value=\"03/16/05\" flex=\"1\"/&gt;\n    &lt;/column&gt;\n    &lt;column flex=\"1\"&gt;\n      &lt;description value=\"Expense\"/&gt;\n      &lt;label value=\"Conference Fee\" flex=\"1\"/&gt;\n      &lt;label value=\"lodging\" flex=\"1\"/&gt;\n      &lt;label value=\"dinner\" flex=\"1\"/&gt;\n      &lt;label value=\"lodging\" flex=\"1\"/&gt;\n      &lt;label value=\"breakfast\" flex=\"1\"/&gt;\n      &lt;label value=\"lunch\" flex=\"1\"/&gt;\n      &lt;label value=\"dinner\" flex=\"1\"/&gt;\n    &lt;/column&gt;\n&lt;-- several columns omitted for brevity --&gt;\n  &lt;/columns&gt;\n&lt;/grid&gt;\n&lt;/code&gt;</pre>\n<p>Now we can use CSS to add some minimal styling to make it actually look like a spreadsheet.</p>\n<pre>&lt;code&gt;\n@namespace url(\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\");\n\ngrid.spreadsheet {\n  border: thin solid;\n}\n\ngrid.spreadsheet label {\n  border-bottom: 1px solid black;\n  border-left: 1px solid black;\n  margin: 0;\n  padding: 3px;\n}\n\ngrid.spreadsheet description {\n  color: black;\n  background-color: white;\n  margin: 0px;\n  padding: 2px;\n  border-left: thin solid;\n  border-bottom: thin solid;\n  font-family: monospace;\n  font-size: 12pt;\n  text-align: center;\n  font-weight: bold;\n}\n&lt;/code&gt;</pre>\n<p>You can see the results by <a class=\"external\" href=\"http://diveintomark.org/projects/accjax/xpi/accjax-demo-stage-1.xpi\">installing stage-1.xpi</a>, restarting Firefox, and selecting <code>AccJax</code> from the <code>Tools</code> menu. The final product looks like this:</p>\n &lt;caption&gt;XUL spreadsheet with 7 rows and 5 columns&lt;/caption&gt; <table><tbody> <tr> <td> <p><img alt=\"XUL spreadsheet with 7 rows and 5 columns\" class=\" internal\" src=\"/@api/deki/files/20/=Accjax-demo-stage-1.jpg\"></p> </td> </tr> </tbody>\n</table>\n<p>Although this has the visual layout of a spreadsheet, assistive technologies will only see it as a collection of individual, unrelated text labels. If we inspect this with the MSAA Inspect32 tool, we see that each cell is exposed as <code>role=\"text\"</code>.</p>\n &lt;caption&gt;It looks like a cell, but it's not&lt;/caption&gt; <table><tbody> <tr> <td> <p><img alt=\"Inspecting spreadsheet cell\" class=\" internal\" src=\"/@api/deki/files/18/=Accjax-demo-stage-1-inspect-cell.jpg\"></p> </td> </tr> </tbody>\n</table>\n<p>Assistive technologies also have no idea that our row headers and column headers are really headers. Again, they are exposed as <code>role=\"text\"</code>.</p>\n &lt;caption&gt;It looks like a column header, but it's not&lt;/caption&gt; <table><tbody> <tr> <td> <p><img alt=\"Inspecting spreadsheat column header\" class=\" internal\" src=\"/@api/deki/files/19/=Accjax-demo-stage-1-inspect-columnheader.jpg\"></p> </td> </tr> </tbody>\n</table>\n<p>So, before we do anything else, we need to tell assistive technologies that all of these unrelated elements are actually related. This is where <a href=\"/en/ARIA/Accessible_Rich_Internet_Applications\" title=\"en/ARIA/Accessible_Rich_Internet_Applications\">DHTML Accessibility</a> comes in.</p>\n<h4 id=\"Further_reading\">Further reading</h4>\n<ul> <li><a class=\"external\" href=\"http://xulplanet.com/references/elemref/ref_grid.html\">grid element reference</a></li> <li><a class=\"external\" href=\"http://xulplanet.com/references/elemref/ref_description.html\">description element reference</a></li> <li><a class=\"external\" href=\"http://xulplanet.com/references/elemref/ref_label.html\">label element reference</a></li> <li><a class=\"external\" href=\"http://xulplanet.com/tutorials/xultu/grids.html\">grid tutorial</a></li> <li><a class=\"external\" href=\"http://xulplanet.com/tutorials/xultu/textimage.html\">label tutorial</a></li>\n</ul>\n<h3 id=\"Adding_Roles_With_DHTML_Accessibility\">Adding Roles With DHTML Accessibility</h3>\n<ul> <li><a class=\"external\" href=\"http://diveintomark.org/projects/accjax/code/accjax-demo-stage-2.zip\">Download stage-2.zip</a></li> <li><a class=\"external\" href=\"http://diveintomark.org/projects/accjax/xpi/accjax-demo-stage-2.xpi\">install stage-2.xpi</a></li>\n</ul>\n<p>Using the new DHTML Accessibility techniques in Firefox 1.5, we can declare the role of each element in our spreadsheet.</p>\n<ol> <li>The <code>grid</code> element is really a spreadsheet.</li> <li>Each <code>label</code> element is really a cell within the spreadsheet.</li> <li>Each <code>description</code> element is really a row or column header within the spreadsheet.</li>\n</ol>\n<p>You can find a list of <a class=\"external\" href=\"http://www.mozilla.org/access/dhtml/#roles\">all the supported roles in Firefox 1.5</a> on <code>mozilla.org</code>.</p>\n<p>Role declarations are a little confusing at first glance, but they all follow the same pattern. The <code>role</code> attribute itself is in the XHTML 2 namespace. We will need to declare the namespace (<code>xmlns:x2=\"<a class=\" external\" href=\"http://www.w3.org/TR/xhtml2\">http://www.w3.org/TR/xhtml2</a>\"</code>) so we can add an <code>xhtml2:role</code> attribute to each XUL element.</p>\n<p>The role attribute <em>value</em> is also in a namespace. We will need to declare this namespace as well (<code><span>xmlns:wairole=\"http://www.w3.org/2005/01/wai-rdf/GUIRoleTaxonomy#\"</span></code>), and then use this namespace prefix (<code>wairole:</code>) as part of the role attribute value. This will become clearer with some concrete examples:</p>\n<ul> <li>The <code>grid</code> element is the container for the entire control; it gets a role of \"<code>wairole:spreadsheet</code>\".</li> <li>Some of the <code>description</code> elements are row headers, and others are column headers. They each get the appropriate role, \"<code>wairole:rowheader</code>\" or \"<code>wairole:columnheader</code>\".</li> <li>Each <code>label</code> element is an individual cell and needs a role of \"<code>wairole:gridcell</code>\".</li>\n</ul>\n<p>This means we actually need to declare <em>two</em> namespaces, the XHTML 2 namespace and the <code>wairole</code> namespace. We can declare both of them at the top of our <code>.xul</code> file and then reuse them as often as we need.</p>\n<pre>&lt;code&gt;\n&lt;window\n    id=\"accjax\"\n    title=\"AccJax Spreadsheet\"\n    xmlns=\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\"\n    xmlns:x2=\"http://www.w3.org/TR/xhtml2\"\n    xmlns:wairole=\"http://www.w3.org/2005/01/wai-rdf/GUIRoleTaxonomy#\"\n    &gt;\n&lt;/code&gt;</pre>\n<p>Once the namespaces are in place, we define the roles for each component of our spreadsheet.</p>\n<pre>&lt;code&gt;\n&lt;grid x2:role=\"wairole:spreadsheet\" class=\"spreadsheet\" id=\"accjaxspreadsheet\" flex=\"1\"&gt;\n  &lt;rows flex=\"1\"&gt;&lt;/rows&gt;\n  &lt;columns flex=\"1\"&gt;\n    &lt;column&gt;\n      &lt;description x2:role=\"wairole:rowheader\" value=\"Entry #\"/&gt;\n      &lt;description x2:role=\"wairole:rowheader\" value=\"1\"/&gt;\n      &lt;description x2:role=\"wairole:rowheader\" value=\"2\"/&gt;\n      &lt;description x2:role=\"wairole:rowheader\" value=\"3\"/&gt;\n      &lt;description x2:role=\"wairole:rowheader\" value=\"4\"/&gt;\n      &lt;description x2:role=\"wairole:rowheader\" value=\"5\"/&gt;\n      &lt;description x2:role=\"wairole:rowheader\" value=\"6\"/&gt;\n      &lt;description x2:role=\"wairole:rowheader\" value=\"7\"/&gt;\n    &lt;/column&gt;\n    &lt;column flex=\"1\"&gt;\n      &lt;description x2:role=\"wairole:columnheader\" value=\"Date\"/&gt;\n      &lt;label x2:role=\"wairole:gridcell\" value=\"03/14/05\" flex=\"1\"/&gt;\n      &lt;label x2:role=\"wairole:gridcell\" value=\"03/15/05\" flex=\"1\"/&gt;\n      &lt;label x2:role=\"wairole:gridcell\" value=\"03/15/05\" flex=\"1\"/&gt;\n      &lt;label x2:role=\"wairole:gridcell\" value=\"03/16/05\" flex=\"1\"/&gt;\n      &lt;label x2:role=\"wairole:gridcell\" value=\"03/16/05\" flex=\"1\"/&gt;\n      &lt;label x2:role=\"wairole:gridcell\" value=\"03/16/05\" flex=\"1\"/&gt;\n      &lt;label x2:role=\"wairole:gridcell\" value=\"03/16/05\" flex=\"1\"/&gt;\n    &lt;/column&gt;\n    &lt;column flex=\"1\"&gt;\n      &lt;description x2:role=\"wairole:columnheader\" value=\"Expense\"/&gt;\n      &lt;label x2:role=\"wairole:gridcell\" value=\"Conference Fee\" flex=\"1\"/&gt;\n      &lt;label x2:role=\"wairole:gridcell\" value=\"lodging\" flex=\"1\"/&gt;\n      &lt;label x2:role=\"wairole:gridcell\" value=\"dinner\" flex=\"1\"/&gt;\n      &lt;label x2:role=\"wairole:gridcell\" value=\"lodging\" flex=\"1\"/&gt;\n      &lt;label x2:role=\"wairole:gridcell\" value=\"breakfast\" flex=\"1\"/&gt;\n      &lt;label x2:role=\"wairole:gridcell\" value=\"lunch\" flex=\"1\"/&gt;\n      &lt;label x2:role=\"wairole:gridcell\" value=\"dinner\" flex=\"1\"/&gt;\n    &lt;/column&gt;\n&lt;-- several columns omitted for brevity --&gt;\n  &lt;/columns&gt;\n&lt;/grid&gt;\n&lt;/code&gt;</pre>\n<p>The resulting spreadsheet looks exactly the same visually, but the difference to an assistive technology is enormous. Each <code>label</code>, which was previously exposed as a text label, is now exposed as a cell.</p>\n &lt;caption&gt;Cells are exposed as cells&lt;/caption&gt; <table><tbody> <tr> <td> <p><img alt=\"Inspecting spreadsheet cell with role=gridcell\" class=\" internal\" src=\"/@api/deki/files/21/=Accjax-demo-stage-2-inspect-cell.jpg\"></p> </td> </tr> </tbody>\n</table>\n<p>Each column header, previously exposed as a text label, is now exposed to assistive technologies as an actual column header.</p>\n &lt;caption&gt;Column headers are exposed as column headers&lt;/caption&gt; <table><tbody> <tr> <td> <p><img alt=\"Inspecting spreadsheet header with role=columnheader\" class=\" internal\" src=\"/@api/deki/files/22/=Accjax-demo-stage-2-inspect-columnheader.jpg\"></p> </td> </tr> </tbody>\n</table>\n<p>Row headers are also exposed properly.</p>\n &lt;caption&gt;Row headers are exposed as row headers&lt;/caption&gt; <table><tbody> <tr> <td> <p><img alt=\"Inspecting spreadsheet header with role=rowheader\" class=\" internal\" src=\"/@api/deki/files/23/=Accjax-demo-stage-2-inspect-rowheader.jpg\"></p> </td> </tr> </tbody>\n</table>\n<p>That's it! Well, not quite. We still have no way to focus individual cells, nor do we have a way to navigate the spreadsheet with the keyboard. But that's it as far as DHTML Accessibility goes. All you need to do is declare two namespaces and assign the appropriate role attributes, and Firefox handles exposing the elements properly to the underlying assistive technology.</p>\n<h4 id=\"Further_reading_2\">Further reading</h4>\n<ul> <li><a class=\"external\" href=\"http://www.mozilla.org/access/dhtml/#roles\">Table of supported roles and states in Firefox</a></li>\n</ul>\n<h3 id=\"Focus_Issues\">Focus Issues</h3>\n<ul> <li><a class=\"external\" href=\"http://diveintomark.org/projects/accjax/code/accjax-demo-stage-3.zip\">Download stage-3.zip</a></li> <li><a class=\"external\" href=\"http://diveintomark.org/projects/accjax/xpi/accjax-demo-stage-3.xpi\">install stage-3.xpi</a></li>\n</ul>\n<p>The next step on the road to an accessible spreadsheet is the focus problem.</p>\n<p>In HTML documents, you can <a class=\"external\" href=\"http://www.mozilla.org/access/keyboard/tabindex\">make any element focusable with the tabindex attribute</a>. In XUL, there is no <code>tabindex</code> attribute; to make a XUL element focusable, you need to use a Mozilla-specific CSS property, <code>-moz-user-focus: normal</code>.</p>\n<pre>&lt;code&gt;\ngrid.spreadsheet {\n  border: thin solid;\n  -moz-user-focus: normal;\n}\n&lt;/code&gt;</pre>\n<p>In HTML documents, Firefox draws a focus rectangle around the currently focused element. In XUL, we will need to handle this ourselves, again with CSS rules. You might initially think of using the CSS <code>border</code> property, but that will add width and height to the focused cell. A better approach is to use the CSS <code>outline</code> property, which does maintains the element's dimensions. (Technically, it draws the border <em>inside</em> the element instead of <em>outside</em>.)</p>\n<pre>&lt;code&gt;\ngrid.spreadsheet description:focus,\ngrid.spreadsheet label:focus {\n  outline: 1px dotted black;\n  outline-offset: -2px;\n}\n&lt;/code&gt;</pre>\n<p>However, neither of those are our biggest problem. We want this collection of XUL elements to act like a single control, a spreadsheet. We want to be able to <code>TAB</code> to the spreadsheet, then <code>TAB</code> off of it, without cycling through every single cell inside the spreadsheet. (In the next section we'll add support for the arrow keys to move between cells.) That means that we <em>don't</em> want to make every <code>label</code> and <code>description</code> element focusable.</p>\n<p>After much experimentation, I found the solution for this. We need to set the containing <code>grid</code> to be focusable, which will put the spreadsheet itself in the tab order. The individual cells, row headers, and column headers are not in the tab order, but we can still set focus to them programmatically using JavaScript whenever the user clicks a specific cell. But since the individual cells are not in the tab order, clicking on a spreadsheet cell and tabbing off will move to the spreadsheet's next sibling control, which is what we want. The only remaining issue is that when the spreadsheet regains focus (by pressing <code>SHIFT-TAB</code>, or cycling all the way around the tab order and coming back into the spreadsheet), we need to programmatically reset the focus to the previously focused cell. This is handled in the <code>spreadsheet_focus</code> function, which is registered as a handler for the <code>focus</code> event.</p>\n<pre>&lt;code&gt;\nvar gFocusCell = null;\n\nfunction install_handlers() {\n    var spreadsheet = window.document.getElementById('accjaxspreadsheet');\n    spreadsheet.addEventListener('focus', spreadsheet_focus, true);\n    spreadsheet.addEventListener('click', spreadsheet_click, true);\n}\n\nfunction spreadsheet_focus(e) {\n    if (e.target.tagName == 'grid') {\n        if (!gFocusCell) {\n            gFocusCell = e.target.getElementsByTagName('label')[0];\n        }\n        gFocusCell.focus();\n    } else {\n        gFocusCell = e.target;\n    }\n}\n\nfunction spreadsheet_click(e) {\n    e.target.focus();\n}\n&lt;/code&gt;</pre>\n<p>Finally, we'll add two lines to our <code>.xul</code> file to link in the JavaScript file (<code>accjax.js</code>) and call the <code>install_handlers</code> function when the spreadsheet is loaded.</p>\n<pre>&lt;code&gt;\n&lt;window\n    id=\"accjax\"\n    title=\"AccJax Spreadsheet\"\n    xmlns=\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\"\n    xmlns:x2=\"http://www.w3.org/TR/xhtml2\"\n    xmlns:wairole=\"http://www.w3.org/2005/01/wai-rdf/GUIRoleTaxonomy#\"\n    xmlns:waistate=\"http://www.w3.org/2005/01/wai-rdf/GUIStateTaxonomy#\"\n    onload=\"install_handlers()\"\n    &gt;\n\n&lt;script src=\"accjax.js\"/&gt;\n&lt;/code&gt;</pre>\n<p>By adding this JavaScript code and these CSS rules, we can</p>\n<ul> <li>Tab to the spreadsheet</li> <li>See which cell, row header, or column header has focus</li> <li>Click on other cells or headers to change focus within the spreadsheet</li> <li>Tab off the spreadsheet by pressing <code>TAB</code> once</li> <li>Tab back to the spreadsheet and automatically set focus to the previously focused cell or header</li>\n</ul>\n<p>Inspect32 confirms that all of this really works; it's not just visual smoke and mirrors. When you click a spreadsheet cell, assistive technologies track the focus change and know which cell has received focus.</p>\n &lt;caption&gt;Cells really get focus&lt;/caption&gt; <table><tbody> <tr> <td> <p><img alt=\"Inspecting focused spreadsheet cell\" class=\" internal\" src=\"/@api/deki/files/24/=Accjax-demo-stage-3-focus-cell.jpg\"></p> </td> </tr> </tbody>\n</table>\n<p>Clicking a row or column headers also changes the focus properly.</p>\n &lt;caption&gt;Cells really get focus&lt;/caption&gt; <table><tbody> <tr> <td> <p><img alt=\"Inspecting focused spreadsheet column header\" class=\" internal\" src=\"/@api/deki/files/25/=Accjax-demo-stage-3-focus-columnheader.jpg\"></p> </td> </tr> </tbody>\n</table>\n<h4 id=\"Further_reading_3\">Further reading</h4>\n<ul> <li><a class=\"external\" href=\"http://www.mozilla.org/access/keyboard/tabindex\">Key-navigable custom DHTML widgets</a> on <code>mozilla.org</code></li>\n</ul>\n<h3 id=\"Adding_Keyboard_Navigation\">Adding Keyboard Navigation</h3>\n<ul> <li><a class=\"external\" href=\"http://diveintomark.org/projects/accjax/code/accjax-demo-stage-4.zip\">Download stage-4.zip</a></li> <li><a class=\"external\" href=\"http://diveintomark.org/projects/accjax/xpi/accjax-demo-stage-4.xpi\">install stage-4.xpi</a></li>\n</ul>\n<p>True accessibility requires complete keyboard navigability. We've already added the spreadsheet itself to the tab order, but that was only the first half. The second half is navigating between the cells and headers <em>within</em> the spreadsheet.</p>\n<p>As I mentioned in the previous section, we don't want to make every cell and header focusable. Other compound controls such as lists and treeviews support two-phased keyboard navigation. You can press <code>TAB</code> to get onto the control itself, then you can press the arrow keys to move around within the control. We want to do the same thing with our spreadsheet control.</p>\n<p>Events in XUL are similar to events in HTML documents. You can register event handlers on specific XUL elements, and when an event occurs, <a class=\"external\" href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html\">it bubbles down the element hierarchy and back up</a>. You can capture events on the way down or on the way up, and registered event handlers get an event object which has all the properties you would expect for that event.</p>\n<p>To make a long story short, this means that we can register a single event handler on the spreadsheet itself (technically, the <code>grid</code> element), then check &lt;var&gt;e.target.tagName&lt;/var&gt; to see which element actually received the event. There is no need to register event handlers on every single cell within the spreadsheet.</p>\n<p>There is one small implementation issue, which stems from the way elements are laid out within the <code>grid</code> element. If you want to navigate up one row, it is relatively easy to find the right cell; it's the previous sibling of the currently focused cell. Similarly, navigating down one row simply requires finding the next sibling of the currently focused cell. But navigating left and right is more difficult, since the cells are laid out in columns. We need to find the <code>N</code>th child of the previous column. (We could have laid out the grid by rows instead of columns, but that just shifts the complexity to a different navigation command.)</p>\n<p>Here is the keyboard navigation code:</p>\n<pre>&lt;code&gt;\nconst KEY_UP = 38;\nconst KEY_DOWN = 40;\nconst KEY_LEFT = 37;\nconst KEY_RIGHT = 39;\n\nfunction cell_keypress(e) {\n    var current = e.target;\n    switch (e.keyCode) {\n    case KEY_UP:\n        spreadsheet_up(current);\n        break;\n    case KEY_DOWN:\n        spreadsheet_down(current);\n        break;\n    case KEY_LEFT:\n        spreadsheet_left(current);\n        break;\n    case KEY_RIGHT:\n        spreadsheet_right(current);\n        break;\n    }\n}\n\nfunction spreadsheet_up(current) {\n    var next = find_cell_up(current);\n    if (next) { \n        next.focus();\n    }\n}\n\nfunction spreadsheet_down(current) {\n    var next = find_cell_down(current);\n    if (next) { \n        next.focus();\n    }\n}\n\nfunction spreadsheet_left(current) {\n    var next = find_cell_left(current);\n    if (next) { \n        next.focus();\n    }\n}\n\nfunction spreadsheet_right(current) {\n    var next = find_cell_right(current);\n    if (next) { \n        next.focus();\n    }\n}\n\nfunction get_index_within_parent(current) {\n    var arSiblings = current.parentNode.childNodes;\n    for (var i = 0; i &lt; arSiblings.length; i++) {\n        if (arSiblings[i] == current) { return i; }\n    }\n    return -1;\n}\n\nfunction find_cell_up(current) {\n    var row = get_index_within_parent(current);\n    var arSiblings = current.parentNode.childNodes;\n    return row == 0 ? null : arSiblings[row - 1];\n}\n\nfunction find_cell_down(current) {\n    var row = get_index_within_parent(current);\n    var arSiblings = current.parentNode.childNodes;\n    return row == arSiblings.length - 1 ? null : arSiblings[row + 1];\n}\n\nfunction find_cell_left(current) {\n    var row = get_index_within_parent(current);\n    var column = get_index_within_parent(current.parentNode);\n    var columns = current.parentNode.parentNode.childNodes;\n    return column = 0 ? null : columns[column - 1].childNodes[row];\n}\n\nfunction find_cell_right(current) {\n    var row = get_index_within_parent(current);\n    var column = get_index_within_parent(current.parentNode);\n    var columns = current.parentNode.parentNode.childNodes;\n    return column == columns.length - 1 ? null : columns[column + 1].childNodes[row];\n}\n&lt;/code&gt;</pre>\n<p>Finally, we need to register the <code>spreadsheet_keypress</code> event handler.</p>\n<pre>&lt;code&gt;\nfunction install_handlers() {\n    var spreadsheet = window.document.getElementById('accjaxspreadsheet');\n    spreadsheet.addEventListener('keypress', spreadsheet_keypress, true);\n    spreadsheet.addEventListener('focus', spreadsheet_focus, true);\n    spreadsheet.addEventListener('click', spreadsheet_click, true);\n}\n&lt;/code&gt;</pre>\n<p>With this new event handler and associated helper functions, we can navigate between cells and headers using the arrow keys. Inspect32 confirms that assistive technologies track the focus as we navigate within the spreadsheet.</p>\n &lt;caption&gt;Focus is tracked properly during keyboard navigation&lt;/caption&gt; <table><tbody> <tr> <td> <p><img alt=\"Inspecting cell focused by keyboard navigation\" class=\" internal\" src=\"/@api/deki/files/26/=Accjax-demo-stage-4-focus-cell.jpg\"></p> </td> </tr> </tbody>\n</table>\n<h4 id=\"Further_reading_4\">Further reading</h4>\n<ul> <li><a class=\"external\" href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html\">Document Object Model events</a></li>\n</ul>\n<h3 id=\"Adding_Editing_Capabilities\">Adding Editing Capabilities</h3>\n<ul> <li><a class=\"external\" href=\"http://diveintomark.org/projects/accjax/code/accjax-demo-stage-5.zip\">Download stage-5.zip</a></li> <li><a class=\"external\" href=\"http://diveintomark.org/projects/accjax/xpi/accjax-demo-stage-5.xpi\">install stage-5.xpi</a></li>\n</ul>\n<p>We now have a fully accessible XUL spreadsheet, correctly focusable, correctly keyboard-navigable, and correctly exposed to assistive technologies. We could stop now, but we won't. What good is a spreadsheet if you can't edit it?</p>\n<p>We need to define a specific action that will trigger editing the currently focused cell. To maintain compatibility with <a class=\"external\" href=\"http://www.mozilla.org/access/dhtml/spreadsheet\">the accessible HTML spreadsheet demo</a>, I chose the <code>ENTER</code> key to trigger editing mode.</p>\n<p>When the user presses <code>ENTER</code>, we replace the currently focused XUL <code>label</code> element with a XUL <code>textbox</code> element, copy the initial value over to the <code>textbox</code> element, and call its <code>focus</code> and <code>select</code> methods to set focus to the textbox and select the entire value.</p>\n<p>We register two event handlers on the textbox: <code>onkeypress</code> and <code>onblur</code>. If the user presses <code>ENTER</code> while editing the cell, we \"accept\" the value by recreating the original <code>label</code> and copying the new value back. If the user presses <code>ESC</code>, we \"cancel\" the edit by simply recreating the original <code>label</code> and restoring its previous value. Finally, if the user hits <code>TAB</code> while editing, we treat this as acceptance and recreate the <code>label</code> with the new value, then let Firefox manage changing focus to the spreadsheet's next sibling. (We don't need any special code to track the focus change; we just need an <code>onblur</code> handler to accept the edited value before the focus changes.)</p>\n<p>First, the code to trigger edit mode:</p>\n<pre>&lt;code&gt;\nconst KEY_UP = 38;\nconst KEY_DOWN = 40;\nconst KEY_LEFT = 37;\nconst KEY_RIGHT = 39;\nconst KEY_ENTER = 13;\nconst KEY_ESCAPE = 27;\n\nfunction cell_keypress(e) {\n    var current = e.target;\n    switch (e.keyCode) {\n    case KEY_ENTER:\n    if (current.tagName == 'label') {\n            start_edit(current);\n    }\n        break;\n    case KEY_UP:\n        spreadsheet_up(current);\n        break;\n    case KEY_DOWN:\n        spreadsheet_down(current);\n        break;\n    case KEY_LEFT:\n        spreadsheet_left(current);\n        break;\n    case KEY_RIGHT:\n        spreadsheet_right(current);\n        break;\n    }\n}\n&lt;/code&gt;</pre>\n<p>Second, the code to handle replacing the <code>label</code> with a <code>textbox</code> (to start editing) and the <code>textbox</code> with a <code>label</code> (to finish editing). Note that when we recreate the <code>label</code> element after editing, we need to explicitly restore the role attribute of the <code>label</code>, so that assistive technologies will continue to treat it as a cell within the spreadsheet.</p>\n<pre>&lt;code&gt;\nconst XUL_NS = \"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\";\nconst X2_NS =\"http://www.w3.org/TR/xhtml2\"\n\nfunction start_edit(label) {\n    var value = label.value;\n    setTimeout(function(){\n\tvar textbox = document.createElementNS(XUL_NS, \"textbox\");\n\tlabel.parentNode.replaceChild(textbox, label);\n\ttextbox.value = value;\n\ttextbox.origValue = value;\n\ttextbox.flex = 1;\n\ttextbox.focus();\n\ttextbox.select();\n\ttextbox.addEventListener(\"blur\", editable_cell_blur, true);\n\ttextbox.addEventListener(\"keypress\", editable_cell_keypress, true);\n    }, 0);\n}\n\nfunction done_edit(textbox, keepValue) {\n    var value = textbox.value;\n    var label = document.createElementNS(XUL_NS, \"label\");\n    label.setAttributeNS(X2_NS, \"role\", \"wairole:gridcell\");\n    textbox.parentNode.replaceChild(label, textbox);\n    if (keepValue) {\n\tlabel.value = value;\n    } else {\n\tlabel.value = textbox.origValue;\n    }\n    label.flex = 1;\n    label.addEventListener(\"keypress\", cell_keypress, true);\n    return label;\n}\n\nfunction editable_cell_blur(e) {\n    var textbox = e.target;\n    setTimeout(function() {\n\tdone_edit(textbox, true);\n    }, 0);\n}\n\nfunction editable_cell_keypress(e) {\n    var textbox = e.target;\n    switch (e.keyCode) {\n    case KEY_ENTER:\n\tsetTimeout(function() {\n\t    var label = done_edit(textbox, true);\n\t    label.focus();\n\t}, 0);\n\tbreak;\n    case KEY_ESCAPE:\n\tsetTimeout(function() {\n\t    var label = done_edit(textbox, false);\n\t    label.focus();\n\t}, 0);\n\tbreak;\n    }\n}\n&lt;/code&gt;</pre>\n<p>With this new code, we can now navigate to a specific cell within the spreadsheet and press <code>ENTER</code> to edit the value. The <code>start_edit</code> function replaces the <code>label</code> with a <code>textbox</code>, which allows the user to change the cell value.</p>\n &lt;caption&gt;Editing a cell&lt;/caption&gt; <table><tbody> <tr> <td> <p><img alt=\"Inspecting editable spreadsheet cell\" class=\" internal\" src=\"/@api/deki/files/28/=Accjax-demo-stage-5-edit-cell.jpg\"></p> </td> </tr> </tbody>\n</table>\n<p>Once we're satisfied with our changes, we can press <code>ENTER</code> again to accept the value. The <code>done_edit</code> function recreates the original <code>label</code> element and sets the new value. Note that the role is once again \"<code>cell</code>\", since we explicitly set it when we recreated the <code>label</code> element.</p>\n &lt;caption&gt;After editing a cell&lt;/caption&gt; <table><tbody> <tr> <td> <p><img alt=\"Inspecting spreadsheet cell after editing\" class=\" internal\" src=\"/@api/deki/files/27/=Accjax-demo-stage-5-done-edit.jpg\"></p> </td> </tr> </tbody>\n</table>\n<h4 id=\"Further_reading_5\">Further reading</h4>\n<ul> <li><a class=\"external\" href=\"http://www.mozilla.org/access/dhtml/spreadsheet\">Accessible HTML spreadsheet demo</a> on <code>mozilla.org</code></li>\n</ul>\n<h3 id=\"Future_Enhancements\">Future Enhancements</h3>\n<p>Now that we know how to create an accessible spreadsheet, it should be possible to use XBL to create a reusable component that encapsulates the accessibility implementation. All of the DHTML Accessibility roles, the keyboard navigation, and the focus tracking could be defined within the XBL file. This would allow XUL developers to add a single <code>spreadsheet</code> element to their XUL applications (for example), with <code>rowheader</code>, <code>columnheader</code>, and <code>cell</code> elements as children, without requiring them to manage the accessibility support for each spreadsheet control.</p>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/teoli\">teoli</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/trevorh\">trevorh</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/MarkPilgrim\">MarkPilgrim</a>",
    "title": "Building accessible custom components in XUL"
}