{
    "content": "<p>This is example code for sorting and filtering a <a href=\"en/XUL_Tutorial/Custom_Tree_Views\">custom tree view</a>, that is, a tree whose values are loaded via JavaScript. This will not work for other types of trees, for example RDF-backed or ones created with DOM methods.</p>\n<p>For the sake of simplicity, strings are not localized and the data loaded is hard coded.</p>\n<p>Because of <a class=\"link-https\" href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=340478\">bug 340478</a>, this code will only work from privileged script.</p>\n<p>sort.xul</p>\n<pre class=\"brush: xml\">&lt;?xml version=\"1.0\"?&gt;\n&lt;?xml-stylesheet href=\"chrome://global/skin/\" type=\"text/css\"?&gt;\n\n&lt;!DOCTYPE window&gt;\n\n&lt;window\n\ttitle=\"Sorting a custom tree view example\"\n\txmlns=\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\"\n\tonload=\"init()\"&gt;\n\t\n\t&lt;script type=\"application/javascript\" src=\"sort.js\"/&gt;\n\n\t&lt;hbox align=\"center\" id=\"search-box\"&gt;\n\t\t&lt;label accesskey=\"F\" control=\"filter\"&gt;Filter&lt;/label&gt;\n\t\t&lt;textbox id=\"filter\" oninput=\"inputFilter(event)\" flex=\"1\"/&gt;\n\t\t&lt;button id=\"clearFilter\" oncommand=\"clearFilter()\" label=\"Clear\" accesskey=\"C\" disabled=\"true\"/&gt;\n\t&lt;/hbox&gt;\n\n\t&lt;tree id=\"tree\" flex=\"1\" persist=\"sortDirection sortResource\" sortDirection=\"ascending\" sortResource=\"description\"&gt;\n\t\t&lt;treecols&gt;\n\t\t\t&lt;treecol id=\"name\" label=\"Name\" flex=\"1\" persist=\"width ordinal hidden\" onclick=\"sort(this)\" class=\"sortDirectionIndicator\" sortDirection=\"ascending\"/&gt;\n\t\t\t&lt;splitter class=\"tree-splitter\"/&gt;\n\t\t\t&lt;treecol id=\"description\" label=\"description\" flex=\"1\" persist=\"width ordinal hidden\" onclick=\"sort(this)\" class=\"sortDirectionIndicator\"/&gt;\n\t\t\t&lt;splitter class=\"tree-splitter\"/&gt;\n\t\t\t&lt;treecol id=\"weapon\" label=\"Weapon\" flex=\"1\" persist=\"width ordinal hidden\" onclick=\"sort(this)\" class=\"sortDirectionIndicator\"/&gt;\n\t\t&lt;/treecols&gt;\n\t\t&lt;treechildren id=\"tree-children\"/&gt;\n\t&lt;/tree&gt;\n\n&lt;/window&gt;\n</pre>\n<p>sort.js</p>\n<pre class=\"brush: js\">var table = null;\nvar data = null;\nvar tree;\nvar filterText = \"\";\n\nfunction init() {\n\ttree = document.getElementById(\"tree\");\n\tloadTable();\n}\n\n//this function is called every time the tree is sorted, filtered, or reloaded\nfunction loadTable() {\n\t//remember scroll position. this is useful if this is an editable table\n\t//to prevent the user from losing the row they edited\n\tvar topVisibleRow = null;\n\tif (table) {\n\t\ttopVisibleRow = getTopVisibleRow();\n\t}\n\tif (data == null) {\n\t\t//put object loading code here. for our purposes, we'll hard code it.\n\t\tdata = [];\n\t\t//the property names match the column ids in the xul. this way, we don't have to deal with\n\t\t//mapping between the two\n\t\tdata.push({name: \"Leonardo\", description: \"Leader\", weapon: \"Dual katanas\"});\n\t\tdata.push({name: \"Michaelangelo\", description: \"Party dude\", weapon: \"Nunchaku\"});\n\t\tdata.push({name: \"Donatello\", description: \"Does machines\", weapon: \"Bo\"});\n\t\tdata.push({name: \"Raphael\", description: \"Cool, but rude\", weapon: \"Sai\"});\n\t\tdata.push({name: \"Splinter\", description: \"Rat\", weapon: \"Walking stick\"});\n\t\tdata.push({name: \"Shredder\", description: \"Armored man\", weapon: \"Blades\"});\n\t\tdata.push({name: \"Casey Jones\", description: \"Goalie masked man\", weapon: \"Hockey stick\"});\n\t\tdata.push({name: \"April O'Neil\", description: \"Journalist\", weapon: \"None\"});\t\n\t}\n\tif (filterText == \"\") {\n\t\t//show all of them\n\t\ttable = data;\n\t} else {\n\t\t//filter out the ones we want to display\n\t\ttable = [];\n\t\tdata.forEach(function(element) {\n\t\t\t//we'll match on every property\n\t\t\tfor (var i in element) {\n\t\t\t\tif (prepareForComparison(element[i]).indexOf(filterText) != -1) {\n\t\t\t\t\ttable.push(element);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\t\n\tsort();\n\t//restore scroll position\n\tif (topVisibleRow) {\n\t\tsetTopVisibleRow(topVisibleRow);\n\t}\n}\n\n//generic custom tree view stuff\nfunction treeView(table) {\n\tthis.rowCount = table.length;\n\tthis.getCellText = function(row, col) {\n\t\treturn table[row][col.id];\n\t};\n\tthis.getCellValue = function(row, col) {\n\t\treturn table[row][col.id];\n\t};\n\tthis.setTree = function(treebox) {\n\t\tthis.treebox = treebox;\n\t};\n\tthis.isEditable = function(row, col) {\n\t\treturn col.editable;\n\t};\n\tthis.isContainer = function(row){ return false; };\n\tthis.isSeparator = function(row){ return false; };\n\tthis.isSorted = function(){ return false; };\n\tthis.getLevel = function(row){ return 0; };\n\tthis.getImageSrc = function(row,col){ return null; };\n\tthis.getRowProperties = function(row,props){};\n\tthis.getCellProperties = function(row,col,props){};\n\tthis.getColumnProperties = function(colid,col,props){};\n\tthis.cycleHeader = function(col, elem) {};\n}\n\nfunction sort(column) {\n\tvar columnName;\n\tvar order = tree.getAttribute(\"sortDirection\") == \"ascending\" ? 1 : -1;\n\t//if the column is passed and it's already sorted by that column, reverse sort\n\tif (column) {\n\t\tcolumnName = column.id;\n\t\tif (tree.getAttribute(\"sortResource\") == columnName) {\n\t\t\torder *= -1;\n\t\t}\n\t} else {\n\t\tcolumnName = tree.getAttribute(\"sortResource\");\n\t}\n\n\tfunction columnSort(a, b) {\n\t\tif (prepareForComparison(a[columnName]) &gt; prepareForComparison(b[columnName])) return 1 * order;\n\t\tif (prepareForComparison(a[columnName]) &lt; prepareForComparison(b[columnName])) return -1 * order;\n\t\t//tie breaker: name ascending is the second level sort\n\t\tif (columnName != \"name\") {\n\t\t\tif (prepareForComparison(a[\"name\"]) &gt; prepareForComparison(b[\"name\"])) return 1;\n\t\t\tif (prepareForComparison(a[\"name\"]) &lt; prepareForComparison(b[\"name\"])) return -1;\n\t\t}\n\t\treturn 0;\n\t}\n\ttable.sort(columnSort);\n\t//setting these will make the sort option persist\n\ttree.setAttribute(\"sortDirection\", order == 1 ? \"ascending\" : \"descending\");\n\ttree.setAttribute(\"sortResource\", columnName);\n\ttree.view = new treeView(table);\n\t//set the appropriate attributes to show to indicator\n\tvar cols = tree.getElementsByTagName(\"treecol\");\n\tfor (var i = 0; i &lt; cols.length; i++) {\n\t\tcols[i].removeAttribute(\"sortDirection\");\n\t}\n\tdocument.getElementById(columnName).setAttribute(\"sortDirection\", order == 1 ? \"ascending\" : \"descending\");\n}\n\n//prepares an object for easy comparison against another. for strings, lowercases them\nfunction prepareForComparison(o) {\n\tif (typeof o == \"string\") {\n\t\treturn o.toLowerCase();\n\t}\n\treturn o;\n}\n\nfunction getTopVisibleRow() {\n\treturn tree.treeBoxObject.getFirstVisibleRow();\n}\n\nfunction setTopVisibleRow(topVisibleRow) {\n\treturn tree.treeBoxObject.scrollToRow(topVisibleRow);\n}\n\n\nfunction inputFilter(event) {\n\t//do this now rather than doing it at every comparison\n\tvar value = prepareForComparison(event.target.value);\n\tsetFilter(value);\n\tdocument.getElementById(\"clearFilter\").disabled = value.length == 0;\n}\n\nfunction clearFilter() {\n\tdocument.getElementById(\"clearFilter\").disabled = true;\n\tvar filterElement = document.getElementById(\"filter\");\n\tfilterElement.focus();\n\tfilterElement.value = \"\";\n\tsetFilter(\"\");\n}\n\nfunction setFilter(text) {\n\tfilterText = text;\n\tloadTable();\n}\n</pre>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>",
    "title": "Sorting and filtering a custom tree view"
}