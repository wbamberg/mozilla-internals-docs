{
    "content": "<p>This is a grab-bag type of FAQ, with a list of things that should work (hopefully with bug numbers), things that don't work (hopefully with explanations), and workarounds for both of the above. Feel free to add your own XUL experiences here.\n</p>\n<hr>\n<h3 id=\"How_do_I_use_percentage-based_height.2Fwidth_with_XUL.3F\" name=\"How_do_I_use_percentage-based_height.2Fwidth_with_XUL.3F\"> How do I use percentage-based height/width with XUL? </h3>\n<p>Short answer: you can't easily, at least not yet. This\nmeans that creating any sort of visual display (not necessarily \"UI\"; my use case is for creating a calendar time display) that sizes sanely when the user resizes the window is unfortunately very difficult.\n</p><p>(To add insult, XUL layout code *explicitly* trims off '%' from\nwidth/height, thus treating it as pixels.)\n</p><p>For reference, I'd like the following to give a vbox that resizes along with the window, with the green, red, and blue inside boxes always maintaining a 30%-20%-50% ratio to the height of the parent vbox.\n</p>\n<pre class=\"eval\">&lt;vbox flex=\"1\"&gt;\n &lt;box height=\"30%\" flex=\"1\" style=\"background: green;\"/&gt;\n &lt;box height=\"20%\" flex=\"1\" style=\"background: red;\"/&gt;\n &lt;box height=\"50%\" flex=\"1\" style=\"background: blue;\"/&gt;\n&lt;/vbox&gt;\n</pre>\n<p>Workaround: no real good ones; the closest I've gotten is to use a\ndiv instead of a box container:\n</p>\n<pre class=\"eval\">&lt;html:div style=\"-moz-box-flex: 1; width: 100%; height: 100%;\"&gt;\n &lt;box style=\"height: 30%\" flex=\"1\" style=\"background: green;\"/&gt;\n &lt;box style=\"height: 20%\" flex=\"1\" style=\"background: green;\"/&gt;\n &lt;box style=\"height: 50%\" flex=\"1\" style=\"background: green;\"/&gt;\n&lt;/html:div&gt;\n</pre>\n<p>Using flex=\"3\" flex=\"2\" flex=\"5\" would give the right display visually for the empty boxes; however, flex only applies to how empty space is allocated. So, as soon as you add a label or some other element inside, there will be a different amount of \"empty space\" to allocate in different boxes.\n</p><p><br>\nEnn: percentages won't have any effect in these examples though, since the actual height of the container isn't known, and 30% of an unknown number is still an unknown number.\n</p><p>Vlad: sure; the snippets assume that there's some enclosing structure that will provide the actual height. Wrap the whole thing in a &lt;vbox height=\"300\"&gt; or something.Â :)\n</p><p>Silver: if you set height=\"0\" and include \"overflow: hidden\" on each box that is sharing the space, current Gecko will quite happily split the space out according to flex, ignoring the contents of each box, as desired. From my reading of the code, just height=\"0\" should work, but it doesn't seem to. This trick doesn't work in 1.4, but works in 1.7 and current versions.\n</p>\n<h3 id=\"Obtaining_the_rect_of_an_element\" name=\"Obtaining_the_rect_of_an_element\"> Obtaining the rect of an element </h3>\n<p>You can't obtain the actual visible rect of an element. HTML elements\nhave the non-standard clientWidth/clientHeight properties (see\n<a class=\" external\" href=\"http://www.mozilla.org/docs/dom/domref/clientHeight.html\" rel=\"freelink\">http://www.mozilla.org/docs/dom/domr...entHeight.html</a>); no\nequivalent exists for XUL.\n</p><p>Enn: most people would use the box object width and height properties, or do you want something else?\n</p><p>Vlad: the boxObject width/height are the actual width and height of the box, regardless of the actual visible portion of the box (clipped by the window borders, for example). This is assuming no scrolling is going on.\n</p>\n<h3 id=\"Resize_event_problems\" name=\"Resize_event_problems\"> Resize event problems </h3>\n<p>Going with the inability to obtain the clientWidth/clientHeight of XUL elements, it's impossible to handle the \"resize\" event yourself to grow/shrink content as needed -- as you grow the content, when you shrink the window, the content will simply be clipped (because now it has a bigger size than the window). You have no way of finding out what the clipped size is, so you can never shrink the content.\n</p><p>An ugly workaround for this problem might include nesting an invisible HTML-Element in order to access its \"clientWidth\" method: </p>\n<pre>&lt;window \n        xmlns=\"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\"\n\txmlns:html=\"http://www.w3.org/1999/xhtml\"&gt; \n...\n&lt;html:body id=\"invisible_element\" flex=\"1\" &gt; \n\t&lt;svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"&gt;&lt;!-- ...or _visible_ XUL content or whatever... --&gt;&lt;/svg&gt;\n&lt;/html:body&gt;\n...\nvar available_width = document.getElementById(\"invisible_element\").clientWidth; \n...\n</pre>\n<h3 id=\"XBL_in_listboxes\" name=\"XBL_in_listboxes\"> XBL in listboxes </h3>\n<p>Using XBL bindings in listboxes is not easy because there is a big bug there: if you create from JS an element you want to bind, and if it is hidden when the listbox is first rendered, the listbox does not create a frame for it, and the xbl doesn't get attached... A workaround for that is to create the element, insert it in the document and set its style attribute with a -moz-binding property, all of that from c++ instead of JS.\n</p>\n<h3 id=\"Multi-column_listboxes\" name=\"Multi-column_listboxes\"> Multi-column listboxes </h3>\n<p>When adding items to multi-column listboxes, you can't use the appendItem API:\n</p>\n<pre class=\"eval\">// Auto-create and attach 1st cell\nvar row = myListBox.appendItem( label, value );\n// Create and attach 2nd cell\nvar cell = document.createElement('listcell');\ncell.setAttribute('label', label2 );\ncell.setAttribute('value', value2 );\nrow.appendChild( cell );\n// etc\n// ...\n</pre>\n<p>While this works at first, after a number of rows have been added it breaks and stops displaying the first cell (the one specified by the appendItem call).\n</p><p>Instead, you must build up your own listitem full of listcells, and then add that listitem to the listbox, using generic DOM calls:\n</p>\n<pre class=\"eval\">var row = document.createElement('listitem');\n// Create and attach 1st cell\nvar cell = document.createElement('listcell');\ncell.setAttribute('label', label );\ncell.setAttribute('value', value );\nrow.appendChild( cell );\n// Create and attach 2nd cell\ncell = document.createElement('listcell');\ncell.setAttribute('label', label2 );\ncell.setAttribute('value', value2 );\nrow.appendChild( cell );\n// etc\n// ...\n// Attach row\nmyListBox.appendChild( row );\n</pre>\n<hr>",
    "contributors": "<a href=\"https://developer.mozilla.org/en-US/profiles/wbamberg\">wbamberg</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Sheppy\">Sheppy</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Dtoddenroth\">Dtoddenroth</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Brettz9\">Brettz9</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/NickolayBot\">NickolayBot</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/MarkTyndall\">MarkTyndall</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Dria\">Dria</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/JamesRoss\">JamesRoss</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Glazou\">Glazou</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/VladVukicevic\">VladVukicevic</a>, <a href=\"https://developer.mozilla.org/en-US/profiles/Enn\">Enn</a>",
    "title": "Things I've tried to do with XUL"
}